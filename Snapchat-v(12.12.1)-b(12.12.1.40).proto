// Proto Dump From Snapchat iOS 12.12.1(12.12.1.40)

syntax = "proto2";

message ARDomainModel {
    optional  string  domainKey  = 1;
    optional  string  domainLabel  = 2;
    repeated  ARStateProduct  stateProductsArray  = 3;
    optional  uint64  coverProductId  = 4;
    optional  string  domainId  = 5;
    optional  GPBStruct  itemFilter  = 6;
    repeated  int32  arPlacementTypeArray  = 7[packed=true];
    repeated  DisplayCard  displayCardsArray  = 8;
    optional  int32  assetType  = 9;
}

message ARMetadata {
    optional  string  ifm  = 1;
    optional  SCShoppingLensMakeupProperties  makeupProperties  = 7;
    optional  SCShoppingLensGlassesProperties  glassesProperties  = 8;
    optional  RenderingMetadata  renderingMetadata  = 9;
}

message ARProductReference {
    optional  uint64  productId  = 1;
    optional  int32  importSource  = 2;
}

message ARStateProduct {
    optional  string  stateKey  = 1;
    optional  ARProductReference  product  = 2;
    optional  int32  productTag  = 3;
}

message ARTryOnWidget {
    repeated  int64  unlockableIdsArray  = 1[packed=true];
}

message AbStepInfo {
    optional  int32  abStep  = 1;
    optional  string  info  = 2;
}

message AccountInfo {
    optional  ContactDetails  contactDetails  = 1;
    repeated  ShippingAddress  shippingAddressListArray  = 2;
}

message Action {
}

message ActionSubresponse {
    optional  string  subRequestId  = 1;
    optional  int32  status  = 2;
}

message ActionType {
    optional  int32  id_p  = 1;
    optional  string  name  = 2;
    optional  string  description_p  = 3;
}

message ActionmojiTypesRequest {
}

message ActionmojiTypesResponse {
    repeated  ActionType  typesArray  = 1;
}

message AdPreferences {
    repeated  AdPreferences_UserInterest  interestsArray  = 1;
    optional  AdPreferences_AdOptOuts  adOptOuts  = 2;
}

message AdPreferences_AdOptOuts {
    optional  bool  audienceMatchOptOut  = 1;
    optional  bool  externalActivityMatchOptOut  = 2;
    optional  bool  thirdPartyAdNetworkOptOut  = 3;
}

message AdPreferences_UserInterest {
    optional  string  id_p  = 1;
    optional  string  name  = 2;
    optional  bool  activeForUser  = 3;
}

message AdRendition {
    optional  int32  width  = 1;
    optional  int32  height  = 2;
    optional  int32  fileSize  = 3;
    optional  string  mediaURL  = 4;
}

message AdSettingValue {
    optional  int32  value  = 1;
}

message AdTopicsPreference {
    optional  bool  politicalAdsOptOut  = 1;
    optional  bool  alcoholAdsOptOut  = 2;
    optional  bool  gamblingAdsOptOut  = 3;
}

message AddAssetsRequest {
    repeated  MemoriesAsset  assetsArray  = 1;
}

message AddAssetsResponse {
    repeated  MemoriesAsset  assetsArray  = 1;
}

message AddBlockedParticipantExceptions {
    optional  SCSCOREUUID  groupId  = 1;
    repeated  SCSCOREUUID  newBlockedParticipantExceptionsArray  = 2;
}

message AddBlockedParticipantExceptionsRequest {
    optional  SCSCORERequestMetadata  requestMetadata  = 1;
    repeated  AddBlockedParticipantExceptions  addBlockedParticipantExceptionsArray  = 2;
}

message AddBlockedParticipantExceptionsResponse {
}

message AddFavoriteRequest {
    optional  ItemFavoritingDeviceContext  deviceContext  = 1;
    optional  FavoriteItem  favoriteItem  = 2;
}

message AddFavoriteResponse {
}

message AddNewBitmojiProductAssetRequest {
    optional  bytes  productId  = 1;
    optional  bytes  variantId  = 2;
    optional  string  comicId  = 3;
    repeated  string  avatarIdsArray  = 4;
    repeated  SCCOREUUID  userIdsArray  = 5;
    optional  bytes  bitmojiProductAssetId  = 6;
    optional  string  contentURL  = 7;
}

message AddNewBitmojiProductAssetResponse {
    optional  AddNewBitmojiProductAssetResponse_AddNewBitmojiProductAssetResult  result  = 1;
    optional  CommerceApiServiceError  error  = 2;
    optional  string  requestId  = 3;
}

message AddNewBitmojiProductAssetResponse_AddNewBitmojiProductAssetResult {
    optional  string  productImageURL  = 1;
    optional  string  highResBitmojiAssetURL  = 2;
}

message AddNewShippingAddressRequest {
    optional  SCCOREUUID  userId  = 1;
    optional  ShippingAddress  shippingAddress  = 2;
}

message AddNewShippingAddressResponse {
    optional  CommerceApiServiceError  error  = 1;
    optional  AddNewShippingAddressResponse_AddNewShippingAddressResult  result  = 2;
    optional  string  requestId  = 3;
}

message AddNewShippingAddressResponse_AddNewShippingAddressResult {
    optional  bytes  addressId  = 1;
}

message AdsStoreExperienceContext {
    optional  string  storeId  = 1;
    optional  string  categoryId  = 2;
    optional  string  adId  = 3;
    optional  bytes  organicAdToken  = 4;
}

message Advertisement {
    optional  string  adsId  = 1;
    optional  string  brandName  = 2;
    optional  string  headline  = 3;
    optional  string  targetCountryCode  = 4;
    optional  string  campaignId  = 5;
    optional  string  campaignName  = 6;
    optional  string  attachmentURL  = 7;
    repeated  AdRendition  renditionsArray  = 8;
    optional  int64  startTimestampSecs  = 9;
    optional  int64  endTimestampSecs  = 10;
}

message AgeGroupDimensionData {
    repeated  string  dimensionValuesArray  = 1;
}

message AirEvent {
    optional  AirRequest  airRequest  = 1;
    optional  SCAppInsightsReport  report  = 2;
}

message AirRequest {
    optional  string  id_p  = 1;
    optional  int32  reportType  = 2;
    optional  string  description_p  = 3;
    optional  string  feature  = 4;
    optional  string  subFeature  = 5;
    optional  int32  connectionType  = 6;
    optional  int64  bandwidth  = 7;
    optional  int32  shakeSensitivity  = 8;
    optional  double  deviceScore  = 9;
    optional  string  otherInfo  = 10;
    optional  ReportOption  reportOption  = 11;
    repeated  string  notificationEmailsArray  = 12;
    optional  int64  appUsedMemory  = 13;
    optional  int64  freeMemory  = 14;
    optional  string  blobData  = 15;
    optional  int32  reportSource  = 16;
    optional  string  appLastChangeCommitHash  = 17;
    optional  string  isp  = 20;
    optional  string  sessionId  = 21;
    optional  bool  lockscreen  = 22;
    optional  string  deviceId  = 23;
    optional  int32  reproducibility  = 24;
    optional  string  appBuild  = 25;
    optional  string  appVersion  = 26;
    optional  string  osVersion  = 27;
    optional  string  userGuid  = 28;
    optional  bytes  blobDataCompressed  = 29;
}

message AnchorData {
    optional  int64  timestamp  = 1;
    optional  float  lat  = 2;
    optional  float  lng  = 3;
}

message AndroidDeeplink {
    optional  string  androidUri  = 1;
    optional  string  androidPackageId  = 2;
}

message AnyRules {
    optional  bool  required  = 1;
    repeated  string  inArray  = 2;
    repeated  string  notInArray  = 3;
}

message ApprovalState {
}

message ApprovalUpdate {
    optional  int32  approvalState  = 1;
    optional  SCSCOREUUID  replyId  = 2;
    optional  string  snapId  = 3;
    optional  bytes  snapModFeatures  = 4;
}

message ArgosConfig {
    repeated  CommonEndpointConfiguration  commonConfigsArray  = 1;
    optional  bool  useColdToken  = 2;
    optional  bool  useSignedToken  = 3;
    optional  uint64  argosExperimentId  = 4;
    optional  bool  useV12Payload  = 5;
}

message Asset {
    optional  string  id_p  = 1;
    optional  int32  type  = 2;
}

message AssetInfo {
    optional  int32  assetType  = 1;
}

message AsyncOcrResult {
    optional  string  outputDestinationFolderPath  = 1;
}

message AttachmentToolContext {
    optional  string  storeId  = 1;
    optional  string  categoryId  = 2;
}

message Audience {
    optional  bool  anyoneCanView  = 1;
    optional  bool  nobodyUnder18CanView  = 2;
    optional  bool  nobodyCanView  = 3;
    optional  bool  nobodyInSensitiveCountryCanView  = 4;
    optional  bool  nobodyInModerateCountryCanView  = 5;
}

message AudioClassificationValue {
    optional  int32  value  = 1;
}

message AutoApprovalMode {
}

message AuxEntry {
    optional  int64  id_p  = 1;
    optional  int64  startMs  = 2;
    optional  int64  durMs  = 3;
    optional  int64  startUs  = 4;
    optional  int64  durUs  = 5;
}

message AvatarData {
    optional  int64  gender  = 1;
    optional  int64  style  = 2;
    repeated  int64  optionIds  = 3;
}

message AvatarId {
    optional  string  avatarId  = 1;
}

message BMCompactAvatarId {
    optional  uint64  id_p  = 1;
    optional  uint32  version  = 2;
    optional  int32  style  = 3;
}

message BMMessagingBitmojiSticker {
    optional  BMCompactAvatarId  senderAvatarId  = 1;
    optional  BMCompactAvatarId  recipientAvatarId  = 2;
    optional  uint32  templateId  = 3;
}

message BMMessagingBitmojiText {
    optional  BMMessagingText  text  = 1;
    optional  BMMessagingBitmojiSticker  sticker  = 2;
}

message BMMessagingExternalMedia {
}

message BMMessagingMessageContents {
    optional  BMMessagingBitmojiText  bitmojiText  = 1;
    optional  BMMessagingExternalMedia  externalMedia  = 2;
    optional  BMMessagingStatusMessage  statusMessage  = 3;
}

message BMMessagingStatusMessage {
    optional  SCMessagingParticipantChangeStatusMessage  participantChange  = 1;
    optional  SCMessagingNameChangeStatusMessage  nameStatusChange  = 2;
    optional  SCMessagingMessageEraseStatusMessage  messageErase  = 3;
    optional  SCMessagingGroupChatCreatedStatusMessage  groupChatCreated  = 4;
}

message BMMessagingText {
    optional  string  text  = 1;
}

message BMRenderCustomojiImageRequest {
    optional  string  text  = 1;
    optional  int32  customojiId  = 2;
    optional  string  locale  = 3;
    optional  string  avatarId  = 4;
    optional  int32  scale  = 5;
}

message BMRenderCustomojiImageResponse {
    optional  bytes  imageBytes  = 1;
    optional  int32  rejectReason  = 2;
}

message BackgroundPrefetchConfig {
    optional  bool  enabled  = 1;
    optional  int32  prefetchIntervalInMinutes  = 2;
    optional  int32  executionTimeoutInMinutes  = 3;
    optional  bool  isChargingOnly  = 4;
    optional  bool  androidUseIndividualWakeup  = 5;
    optional  int32  numOfRetries  = 6;
    repeated  int32  prefetchFixedTimeInHoursArray  = 7[packed=true];
    optional  int32  prefetchTimeJitterInMinutes  = 8;
    optional  bool  completePrefetchInBackground  = 9;
    optional  bool  isWifiOnly  = 10;
    optional  bool  useDefaultAppBackgroundConstraint  = 11;
    optional  bool  interruptWhenForegrounded  = 12;
}

message Badge {
    optional  int64  badgeId  = 1;
    optional  SCSCOREUUID  userId  = 2;
    optional  int32  campaignId  = 3;
    optional  int32  placement  = 4;
    optional  int64  badgeEligibleTsMs  = 5;
    optional  int64  badgeDurationMs  = 6;
    optional  int64  badgeCreationTsMs  = 7;
}

message BadgeCard {
    optional  BadgeMetadata  badgeMetadata  = 1;
    optional  BadgeHeadline  headline  = 2;
    optional  string  thumbnailURL  = 3;
    optional  string  bodyText  = 4;
    optional  int32  numberOfUpdates  = 5;
    optional  string  primaryColor  = 6;
    optional  string  ringColor  = 7;
}

message BadgeHeadline {
    optional  string  prefixText  = 1;
    optional  string  highlightText  = 2;
    optional  int32  highlightTextColor  = 3;
    optional  string  suffixText  = 4;
    optional  int32  backgroundType  = 5;
}

message BadgeHeadline_BackgroundType {
}

message BadgeHeadline_HighlightTextColor {
}

message BadgeMetadata {
    optional  string  badgeId  = 1;
    optional  int32  badgeType  = 2;
    optional  int32  destinationType  = 3;
    optional  int32  feedType  = 4;
    repeated  SCCORECompositeStoryId  storyIdsArray  = 5;
    optional  int32  schedulingType  = 6;
}

message BadgePlacement {
}

message BadgeTapDestinationType {
}

message BadgeType {
}

message BandwidthHistory {
    repeated  BandwidthHistory_CachedBandwidthEstimation  bandwidthHistoryArray  = 1;
}

message BandwidthHistory_CachedBandwidthEstimation {
    optional  string  ssid  = 1;
    optional  int64  downloadBandwidthValue  = 2;
    optional  int32  downloadBandwidthClass  = 3;
    optional  int64  uploadBandwidthValue  = 4;
    optional  int32  uploadBandwidthClass  = 5;
    optional  int64  createdTimeStamp  = 6;
}

message BatchCalculateActionStickerForUserRequest {
    optional  string  actionmojiId  = 1;
    optional  string  username  = 2;
    repeated  CalculateActionStickerRequest  requestsArray  = 3;
}

message BatchCalculateActionStickerForUserResponse {
    repeated  CalculateActionStickerResponse  responsesArray  = 1;
}

message BatchCalculateActionStickerRequest {
    repeated  CalculateActionStickerRequest  requestsArray  = 1;
}

message BatchCalculateActionStickerResponse {
    repeated  CalculateActionStickerResponse  responsesArray  = 1;
}

message BatchExtractFeaturesRequest {
    optional  int32  featureRequestType  = 1;
    optional  SCPNLOOKALIEMediaList  mediaList  = 2;
    repeated  string  properties  = 200;
}

message BatchExtractFeaturesResponse {
    optional  SCPNLOOKALIEMediaFeaturesList  featuresList  = 1;
    optional  GPBTimestamp  requestTime  = 100;
    optional  GPBTimestamp  responseTime  = 101;
    repeated  string  properties  = 200;
}

message BatchGetCustomStoryGroupsRequest {
    optional  SCSCORERequestMetadata  requestMetadata  = 1;
    repeated  SCSCOREUUID  groupIdsArray  = 2;
}

message BatchGetCustomStoryGroupsResponse {
    repeated  GroupMetadata  groupMetadatasArray  = 1;
}

message BatchSnapStatsByStoryType {
    optional  int32  storyType  = 1;
    repeated  string  snapIdsArray  = 2;
    repeated  int32  sectionTypesArray  = 3[packed=true];
}

message BatchSnapStatsRequest {
    optional  string  requestId  = 1;
    optional  int64  requestTimestampMs  = 2;
    optional  int32  origin  = 3;
    optional  SCSCOREClientInfo  clientInfo  = 4;
    repeated  string  snapIdsArray  = 5;
    repeated  int32  sectionTypesArray  = 6[packed=true];
    repeated  BatchSnapStatsByStoryType  batchedSnapsByTypeArray  = 7;
}

message BatchSnapStatsResponse {
    optional  string  requestId  = 1;
    repeated  SingleSnapStatsResponse  responsesArray  = 2;
    repeated  BatchSnapStatsResponseByType  responsesByTypeArray  = 3;
}

message BatchSnapStatsResponseByType {
    optional  int32  storyType  = 1;
    repeated  SingleSnapStatsResponse  responsesArray  = 2;
}

message BatchUploadReadReceiptsRequest {
    optional  SCSCORERequestMetadata  metadata  = 1;
    repeated  SnapReadReceipt  snapReadReceiptsArray  = 2;
    repeated  PremiumReadReceipt  premiumReadReceiptsArray  = 3;
}

message BatchUploadReadReceiptsResponse {
    optional  string  requestId  = 1;
}

message BenchmarkRequest {
    repeated  int32  benchmarkNamesArray  = 1[packed=true];
    optional  GPBTimestamp  expirationTimestamp  = 2;
}

message BenchmarkResult {
    optional  int32  name  = 1;
    optional  BenchmarkValue  value  = 2;
}

message BenchmarkValue {
    optional  int32  intValue  = 1;
    optional  int64  longValue  = 2;
    optional  bool  boolValue  = 3;
    optional  float  floatValue  = 4;
}

message BibBoostRequest {
    repeated  StoryBoostExtension  boostParametersArray  = 1;
    optional  SCCORECompositeStoryId  compositeStoryId  = 3;
    optional  string  moderator  = 4;
    optional  int64  moderatedTimestampSecs  = 5;
    optional  bool  boostInProd  = 6;
    optional  int32  requestType  = 7;
    optional  string  comment  = 8;
    optional  bool  isAutoExploration  = 9;
    optional  StoryPromotionReason  storyPromotionReason  = 10;
    optional  bool  bypassStoryPostingAgeCheck  = 11;
}

message BibBoostResponse {
    optional  int32  status  = 1;
    optional  SCCORECompositeStoryId  compositeStoryId  = 2;
}

message BillboardSignals {
    optional  bool  emailVerified  = 1;
    optional  bool  phoneVerified  = 2;
    optional  bool  notificationPermGranted  = 3;
    optional  bool  contactPermGranted  = 4;
    optional  int32  mutualFriendsCount  = 5;
    optional  int32  groupsCount  = 6;
    optional  bool  hasNonTeamSnapchatConversations  = 7;
    optional  bool  emailSet  = 8;
    optional  bool  bitmojiSet  = 9;
    optional  bool  hasAddFriendsRequest  = 10;
    optional  bool  appLaunchFromPush  = 11;
    optional  int32  appLaunchType  = 12;
    optional  int32  campaignLocalImpressionCount  = 13;
    optional  int64  campaignLocalLastImpressionTimeSecsToNow  = 14;
    optional  int32  campaignLocalContinuousDismissCount  = 15;
    optional  int32  fstNumInAppWarnings  = 16;
    optional  bool  fstShouldChangePassword  = 17;
    optional  bool  audioRecordPermGranted  = 18;
    optional  int32  mutualFriendsWithBirthdayCount  = 19;
    optional  int32  campaignLocalDismissCount  = 20;
    optional  int32  memoriesCount  = 21;
    optional  int64  campaignLocalFirstImpressionTimeSecsToNow  = 22;
    optional  int32  campaignLocalClickCount  = 23;
    optional  int32  campaignLocalInteractionCount  = 24;
    optional  int64  campaignLocalLastInteractionTimeSecsToNow  = 25;
    optional  bool  lockScreenWidgetAppOpenFromPush  = 26;
    optional  int32  communityCount  = 27;
}

message BillingAddress {
    optional  string  firstName  = 1;
    optional  string  lastName  = 2;
    optional  string  addressLine1  = 3;
    optional  string  addressLine2  = 4;
    optional  string  city  = 5;
    optional  string  state  = 6;
    optional  string  postalCode  = 7;
    optional  string  countryCode  = 8;
}

message BitmojiAssetInfo {
    optional  string  comicId  = 1;
    repeated  string  avatarIdsArray  = 2;
}

message BitmojiFlatlandNewContentAlertsConfig {
    optional  bool  enableToasts  = 1;
    optional  bool  enableShortcutBadges  = 2;
    optional  bool  enableContentPickerBadges  = 3;
}

message BlockedStoryIdWithRejectionReason {
    optional  SCCORECompositeStoryId  storyId  = 1;
    optional  int32  rejectionReason  = 2;
}

message BloomFilter {
    optional  bytes  bloomFilter  = 1;
    optional  int64  entityCount  = 2;
    optional  int64  conflictCount  = 3;
    optional  SnapCreationPeriod  creationDateTimePeriod  = 4;
    optional  int64  intendedCapacity  = 5;
}

message BloopsFriendbloopsCacheConfig {
    optional  int32  ttlInSeconds  = 1;
    optional  int32  retrieveCount  = 2;
    optional  int32  retryProgression  = 3;
    optional  bool  isEnabled  = 4;
}

message BoltMediaClientInfo {
    optional  string  mediaKey  = 1;
    optional  string  mediaIv  = 2;
    optional  string  rawImageURL  = 3;
}

message BoltMediaServingInfo {
    optional  string  mediaKey  = 1;
    optional  string  mediaIv  = 2;
    optional  bytes  rawImageCo  = 3;
    optional  bytes  transcodedThumbnailCo  = 4;
}

message BoltSignals {
    optional  uint32  boltUseCase  = 1;
    optional  uint32  boltCdnExperimentationId  = 2;
    optional  bool  boltIsContentPopular  = 3;
    optional  int32  boltClientAppState  = 4;
}

message BoolRules {
    optional  bool  const_p  = 1;
}

message BoostAction {
    optional  string  subRequestId  = 1;
    optional  BoostItem  boostItem  = 2;
}

message BoostConfig {
    optional  bool  isBoostable  = 1;
}

message BoostItem {
    optional  SCCORECompositeStoryId  compositeStoryId  = 1;
    optional  string  itemId  = 2;
    optional  int64  progressMs  = 3;
    optional  int64  clientTsMsec  = 4;
    optional  int32  boostType  = 5;
    optional  bool  isUgc  = 6;
}

message BoostLocation {
    optional  string  countryCode  = 1;
    repeated  string  regionCodesArray  = 2;
    repeated  string  cityCodesArray  = 3;
}

message BoostMetadata {
    repeated  MyBoost  myBoostsArray  = 1;
    repeated  FriendBoost  friendBoostsArray  = 2;
}

message BoostStats {
    optional  bool  isUgc  = 1;
    optional  string  storyId  = 2;
    optional  string  snapId  = 3;
    optional  int64  boostCounts  = 4;
    optional  int64  subCount  = 5;
    optional  int64  pendingReplyCount  = 6;
    optional  int64  liveReplyCount  = 7;
    optional  bool  clearUnseenPendingCount  = 8;
}

message BoostType {
}

message Boosted {
    optional  int32  boostType  = 1;
    optional  int32  boostLevel  = 2;
}

message BoosterProfile {
    optional  SCSCOREUUID  userId  = 1;
    repeated  BoostItem  boostItemsArray  = 2;
}

message BraintreeClientTokenRequest {
}

message BraintreeClientTokenResponse {
    optional  string  braintreeClientToken  = 1;
}

message BrandSafety {
    optional  bool  isBrandUnsafe  = 1;
    optional  bool  isSponsoredContent  = 2;
}

message BundleInfo {
    optional  string  snapId  = 1;
    optional  string  bundleId  = 2;
    optional  int32  segmentId  = 3;
    optional  int32  segmentCount  = 4;
}

message BytesRules {
    optional  bytes  const_p  = 1;
    optional  uint64  minLen  = 2;
    optional  uint64  maxLen  = 3;
    optional  string  pattern  = 4;
    optional  bytes  prefix  = 5;
    optional  bytes  suffix  = 6;
    optional  bytes  contains  = 7;
    repeated  bytes  inArray  = 8;
    repeated  bytes  notInArray  = 9;
    optional  bool  ip  = 10;
    optional  bool  ipv4  = 11;
    optional  bool  ipv6  = 12;
    optional  uint64  len  = 13;
    optional  bool  ignoreEmpty  = 14;
}

message CHRPBActivateLostModeRequest {
}

message CHRPBActivateLostModeResponse {
}

message CHRPBAsset {
    optional  string  id_p  = 1;
    optional  int32  type  = 2;
}

message CHRPBAttitudeFrame {
    optional  int64  timestampMsec  = 1;
    optional  CHRPBAttitudeFrame_Translation  translation  = 2;
    optional  CHRPBAttitudeFrame_Quaternion  quaternion  = 3;
}

message CHRPBAttitudeFrame_Quaternion {
    optional  float  w  = 1;
    optional  float  x  = 2;
    optional  float  y  = 3;
    optional  float  z  = 4;
}

message CHRPBAttitudeFrame_Translation {
    optional  float  x  = 1;
    optional  float  y  = 2;
    optional  float  z  = 3;
}

message CHRPBBatteryStatusResponse {
    optional  int32  soc  = 1;
    optional  int32  voltage  = 2;
    optional  int32  temp  = 3;
    optional  int32  current  = 4;
}

message CHRPBBleName {
    required  string  name  = 1;
    optional  string  usbName  = 2;
}

message CHRPBBoardIdResponse {
    required  uint32  boardId  = 1;
    required  uint32  hardwareMajorVersion  = 2;
    optional  uint32  hardwareMinorVersion  = 3;
}

message CHRPBCalibrationResult {
    required  int32  direction  = 1;
    required  bool  finished  = 2;
}

message CHRPBCalibrationStatus {
    repeated  CHRPBCalibrationResult  resultsArray  = 1;
    optional  int32  direction  = 2;
    required  int32  state  = 3;
}

message CHRPBCameraData {
    optional  int32  width  = 1;
    optional  int32  height  = 2;
    optional  double  focalLength  = 3;
    optional  float  principalPointX  = 4;
    optional  float  principalPointY  = 5;
}

message CHRPBCameraSensorData {
    optional  uint32  agc  = 1;
    optional  uint32  dgc  = 2;
    optional  uint32  startEvIndex  = 3;
    optional  uint32  endEvIndex  = 4;
    optional  int32  startTemperature  = 5;
    optional  int32  endTemperature  = 6;
    optional  uint32  shutterTimeUs  = 7;
    optional  uint32  alsValue  = 8;
    optional  uint32  alsEvLutIndex  = 9;
    optional  int32  startTemperatureVin1  = 10;
    optional  int32  endTemperatureVin1  = 11;
}

message CHRPBCaptainInfo {
    optional  CHRPBCaptainStateTakingOff  takingOff  = 1;
    optional  CHRPBCaptainStateLanding  landing  = 2;
    optional  CHRPBCaptainStateIdle  idle  = 3;
    optional  CHRPBCaptainStateFlyingManual  flyingManual  = 4;
    optional  CHRPBCaptainStateFlyingTraj  flyingTraj  = 5;
    optional  CHRPBCaptainStatePreTakeOff  preTakeoff  = 6;
}

message CHRPBCaptainStateFlyingManual {
}

message CHRPBCaptainStateFlyingTraj {
    optional  int32  substate  = 1;
    optional  int32  task  = 2;
}

message CHRPBCaptainStateIdle {
}

message CHRPBCaptainStateLanding {
    optional  int32  landing  = 1;
}

message CHRPBCaptainStatePreTakeOff {
}

message CHRPBCaptainStateTakingOff {
}

message CHRPBCaptureTypeParams {
    optional  CHRPBFlightModeConfig  flightMode  = 1;
    optional  int32  captureType  = 2;
}

message CHRPBChargerStateResponse {
    optional  bool  isChargerConnected  = 1;
    optional  bool  isFullyCharged  = 2;
}

message CHRPBCheeriosEventPb {
    optional  CHRPBChargerStateResponse  chargerEvent  = 1;
    optional  CHRPBOTAUpdateEventData  otaUpdateEvent  = 2;
    optional  CHRPBDialPosition  dialPositionChangeEvent  = 3;
    optional  CHRPBCaptainInfo  flightStatusChangeEvent  = 4;
    optional  CHRPBFlightStatusError  flightStatusErrorEvent  = 5;
    optional  CHRPBRemainingFlightInfo  remainingFlightInfoChangedEvent  = 6;
    optional  CHRPBUSBConnectionStatus  usbConnectionEvent  = 7;
    optional  CHRPBBatteryStatusResponse  batteryStatusEvent  = 8;
    optional  CHRPBCalibrationStatus  calibrationStatusEvent  = 9;
    optional  CHRPBLostModeEvent  lostModeEvent  = 10;
}

message CHRPBCheeriosRpcRequest {
    optional  string  echoRequest  = 1;
    optional  string  testRequest  = 2;
    optional  string  setSerialNumberRequest  = 3;
    optional  CHRPBEmpty  getSerialNumberRequest  = 4;
    optional  CHRPBEmpty  gitRequest  = 5;
    optional  uint32  id_p  = 6;
    optional  CHRPBBleName  setNameRequest  = 7;
    optional  CHRPBEmpty  getNameRequest  = 8;
    optional  CHRPBEmpty  mediaCountsGetRequest  = 9;
    optional  CHRPBMediaRequest  mediaRequest  = 10;
    optional  CHRPBWifiParams  wifiStartRequest  = 11;
    optional  CHRPBEmpty  wifiStopRequest  = 12;
    optional  CHRPBEmpty  batteryStatusRequest  = 13;
    optional  CHRPBEmpty  chargerStateRequest  = 14;
    optional  CHRPBEmpty  logsZipRequest  = 15;
    optional  CHRPBEmpty  boardIdRequest  = 16;
    optional  CHRPBLocationData  locationRequest  = 17;
    optional  CHRPBEmpty  getTemperatureRequest  = 18;
    optional  CHRPBKeyExchangeMessage  setPairingPublicKeyRequest  = 20;
    optional  CHRPBPeerVerificationMessage  setPeerVerificationRequest  = 21;
    optional  CHRPBEncryptionNonceExchange  setChannelEncryptionNonceRequest  = 22;
    optional  CHRPBEmpty  getEnableUsbImportRequest  = 23;
    optional  bool  setEnableUsbImportRequest  = 24;
    optional  CHRPBEmpty  clearContentRequest  = 25;
    optional  CHRPBEmpty  haltRequest  = 26;
    optional  CHRPBEmpty  unpairDeviceRequest  = 27;
    optional  CHRPBRealTimeMessage  setTimeUtcRequest  = 28;
    optional  CHRPBEmpty  pairingWaitForUserRequest  = 29;
    optional  CHRPBOTAUpdateRequest  otaUpdateRequest  = 30;
    optional  CHRPBFirmwareUpdateUploadRequest  firmwareUpdateUploadRequest  = 31;
    optional  CHRPBEmpty  getDialPositionRequest  = 32;
    optional  CHRPBEmpty  getFlightStatusRequest  = 33;
    optional  CHRPBEmpty  abortFlightRequest  = 34;
    optional  CHRPBEmpty  getStorageCapacityRequest  = 35;
    optional  CHRPBOTAScheduledUpdate  setScheduledUpdateRequest  = 36;
    optional  CHRPBEmpty  getScheduledUpdateRequest  = 37;
    optional  CHRPBDisableFlightRequest  disableFlightRequest  = 38;
    optional  CHRPBValidatePairingRequest  validatePairingRequest  = 39;
    optional  CHRPBDurationParams  setCaptureDurationRequest  = 40;
    optional  CHRPBFlightModeConfig  getCaptureDurationRequest  = 41;
    optional  CHRPBVideoResolutionParams  setVideoResolutionRequest  = 42;
    optional  CHRPBFlightModeConfig  getVideoResolutionRequest  = 43;
    optional  CHRPBDistanceParams  setFlightDistanceRequest  = 44;
    optional  CHRPBFlightModeConfig  getFlightDistanceRequest  = 45;
    optional  CHRPBCaptureTypeParams  setCaptureTypeRequest  = 46;
    optional  CHRPBFlightModeConfig  getCaptureTypeRequest  = 47;
    optional  CHRPBTrackingParams  setTrackingRequest  = 48;
    optional  CHRPBFlightModeConfig  getTrackingRequest  = 49;
    optional  CHRPBEmpty  getRemainingFlightsInfoRequest  = 50;
    optional  CHRPBVideoFormatParams  setVideoFormatRequest  = 51;
    optional  CHRPBFlightModeConfig  getVideoFormatRequest  = 52;
    optional  CHRPBEmpty  getFlightStatusErrorRequest  = 53;
    optional  CHRPBCustomFlightMode  setCustomFlightModeRequest  = 54;
    optional  CHRPBEmpty  getCustomFlightModeRequest  = 55;
    optional  CHRPBEmpty  getUsbConnectionRequest  = 56;
    optional  CHRPBEmpty  getEnableAdbRequest  = 57;
    optional  bool  setEnableAdbRequest  = 58;
    optional  CHRPBPhotoResolutionParams  setPhotoResolutionRequest  = 59;
    optional  CHRPBFlightModeConfig  getPhotoResolutionRequest  = 60;
    optional  CHRPBEmpty  cancelScheduledUpdateRequest  = 61;
    optional  CHRPBLogRequest  logRequest  = 63;
    optional  CHRPBKeepDeviceActiveParams  keepDeviceActiveRequest  = 64;
    optional  CHRPBStartCalibrationRequest  startImuCalibrationRequest  = 65;
    optional  CHRPBStopCalibrationRequest  stopImuCalibrationRequest  = 66;
    optional  CHRPBActivateLostModeRequest  activateLostModeRequest  = 67;
    optional  CHRPBDeactivateLostModeRequest  deactivateLostModeRequest  = 68;
    optional  CHRPBGetLostModeStateRequest  getLostModeStateRequest  = 69;
    optional  CHRPBEmpty  getAllFlightModesSettingsRequest  = 70;
    optional  CHRPBGetFileRequest  getGenericAssetFileRequest  = 71;
}

message CHRPBCheeriosRpcResponse {
    optional  int32  error  = 1;
    optional  string  echoResponse  = 2;
    optional  string  testResponse  = 3;
    optional  CHRPBEmpty  setSerialNumberResponse  = 4;
    optional  string  getSerialNumberResponse  = 5;
    optional  CHRPBGitResponse  gitResponse  = 6;
    optional  uint32  id_p  = 7;
    optional  CHRPBBleName  getNameResponse  = 8;
    optional  CHRPBEmpty  setNameResponse  = 9;
    optional  CHRPBMediaCountsResponse  mediaCountsGetResponse  = 10;
    optional  CHRPBMediaResponse  mediaResponse  = 11;
    optional  CHRPBEmpty  wifiStartResponse  = 12;
    optional  CHRPBEmpty  wifiStopResponse  = 13;
    optional  CHRPBBatteryStatusResponse  batteryStatusResponse  = 14;
    optional  CHRPBChargerStateResponse  chargerStateResponse  = 15;
    optional  CHRPBLogsResponse  logsZipResponse  = 16;
    optional  CHRPBBoardIdResponse  boardIdResponse  = 17;
    optional  CHRPBEmpty  locationResponse  = 18;
    optional  CHRPBTemperatureResponse  getTemperatureResponse  = 19;
    optional  CHRPBKeyExchangeMessage  setPairingPublicKeyResponse  = 20;
    optional  CHRPBPairingSignatureMessage  setPeerVerificationResponse  = 21;
    optional  CHRPBEncryptionNonceExchange  setChannelEncryptionNonceResponse  = 22;
    optional  bool  getEnableUsbImportResponse  = 23;
    optional  CHRPBEmpty  setEnableUsbImportResponse  = 24;
    optional  CHRPBEmpty  clearContentResponse  = 25;
    optional  CHRPBEmpty  haltResponse  = 26;
    optional  CHRPBEmpty  unpairDeviceResponse  = 27;
    optional  CHRPBEmpty  setTimeUtcResponse  = 28;
    optional  CHRPBEmpty  pairingWaitForUserResponse  = 29;
    optional  CHRPBOTAUpdateResponse  otaUpdateResponse  = 30;
    optional  CHRPBFirmwareUpdateUploadResponse  firmwareUpdateUploadResponse  = 31;
    optional  CHRPBDialPosition  getDialPositionResponse  = 32;
    optional  CHRPBCaptainInfo  getFlightStatusResponse  = 33;
    optional  bool  abortFlightResponse  = 34;
    optional  CHRPBStorageCapacity  getStorageCapacityResponse  = 35;
    optional  bool  setScheduledUpdateResponse  = 36;
    optional  CHRPBOTAScheduledUpdate  getScheduledUpdateResponse  = 37;
    optional  CHRPBDisableFlightResponse  disableFlightResponse  = 38;
    optional  CHRPBValidatePairingResponse  validatePairingResponse  = 39;
    optional  CHRPBEmpty  setCaptureDurationResponse  = 40;
    optional  CHRPBDurationParams  getCaptureDurationResponse  = 41;
    optional  CHRPBEmpty  setVideoResolutionResponse  = 42;
    optional  CHRPBVideoResolutionParams  getVideoResolutionResponse  = 43;
    optional  CHRPBEmpty  setFlightDistanceResponse  = 44;
    optional  CHRPBDistanceParams  getFlightDistanceResponse  = 45;
    optional  CHRPBEmpty  setCaptureTypeResponse  = 46;
    optional  CHRPBCaptureTypeParams  getCaptureTypeResponse  = 47;
    optional  CHRPBEmpty  setTrackingResponse  = 48;
    optional  CHRPBTrackingParams  getTrackingResponse  = 49;
    optional  CHRPBRemainingFlightInfo  getRemainingFlightsInfoResponse  = 50;
    optional  CHRPBEmpty  setVideoFormatResponse  = 51;
    optional  CHRPBVideoFormatParams  getVideoFormatResponse  = 52;
    optional  CHRPBFlightStatusError  getFlightStatusErrorResponse  = 53;
    optional  CHRPBEmpty  setCustomFlightModeResponse  = 54;
    optional  CHRPBFlightModeConfig  getCustomFlightModeResponse  = 55;
    optional  CHRPBUSBConnectionStatus  getUsbConnectionResponse  = 56;
    optional  bool  getEnableAdbResponse  = 57;
    optional  CHRPBEmpty  setEnableAdbResponse  = 58;
    optional  CHRPBEmpty  setPhotoResolutionResponse  = 59;
    optional  CHRPBPhotoResolutionParams  getPhotoResolutionResponse  = 60;
    optional  CHRPBOTACancelScheduledUpdateResponse  cancelScheduledUpdateResponse  = 61;
    optional  CHRPBErrorResponse  errorResponse  = 62;
    optional  CHRPBLogResponse  logResponse  = 63;
    optional  CHRPBKeepDeviceActiveResult  keepDeviceActiveResponse  = 64;
    optional  CHRPBStartCalibrationResponse  startImuCalibrationResponse  = 65;
    optional  CHRPBStopCalibrationResponse  stopImuCalibrationResponse  = 66;
    optional  CHRPBActivateLostModeResponse  activateLostModeResponse  = 67;
    optional  CHRPBDeactivateLostModeResponse  deactivateLostModeResponse  = 68;
    optional  CHRPBGetLostModeStateResponse  getLostModeStateResponse  = 69;
    optional  CHRPBFlightSettings  getAllFlightModesSettingsResponse  = 70;
    optional  CHRPBGetFileResponse  getGenericAssetFileResponse  = 71;
}

message CHRPBCrashReport {
    optional  string  logPayload  = 1;
    optional  CHRPBCrashReportDetails  crashReport  = 2;
}

message CHRPBCrashReportDetails {
    optional  string  filename  = 1;
    optional  uint32  lineNumber  = 2;
    optional  string  crashDescription  = 3;
    optional  uint32  errorCode  = 4;
}

message CHRPBCustomFlightMode {
    optional  CHRPBFlightModeConfig  flightMode  = 1;
}

message CHRPBDeactivateLostModeRequest {
}

message CHRPBDeactivateLostModeResponse {
}

message CHRPBDialPosition {
    optional  int32  position  = 1;
}

message CHRPBDisableFlightRequest {
    optional  bool  disable  = 1;
}

message CHRPBDisableFlightResponse {
}

message CHRPBDistanceParams {
    optional  CHRPBFlightModeConfig  flightMode  = 1;
    optional  uint32  distance  = 2;
    optional  float  meters  = 3;
}

message CHRPBDroppedFramesData {
    optional  int32  vin0Cnt  = 1;
    optional  int32  vin1Cnt  = 2;
}

message CHRPBDurationParams {
    optional  CHRPBFlightModeConfig  flightMode  = 1;
    optional  uint32  duration  = 2;
}

message CHRPBEmpty {
}

message CHRPBEncryptionNonceExchange {
    optional  bytes  nonce  = 1;
    optional  int32  channelId  = 2;
}

message CHRPBErrorResponse {
    required  int32  errorCode  = 1;
    optional  string  description_p  = 2;
}

message CHRPBFirmwareUpdateUploadRequest {
    optional  bytes  data_p  = 1;
    optional  uint32  startPos  = 2;
    optional  bool  overwriteExistingFile  = 3;
}

message CHRPBFirmwareUpdateUploadResponse {
    optional  uint32  otaUploadedFileSize  = 1;
}

message CHRPBFirmwareVersion {
    optional  string  gitCommit  = 1;
    optional  string  gitTag  = 2;
    optional  string  gitBranch  = 3;
}

message CHRPBFlightData {
    optional  CHRPBFlightModeConfig  flightMode  = 1;
    optional  string  flightUuid  = 2;
}

message CHRPBFlightModeConfig {
    optional  int32  type  = 1;
}

message CHRPBFlightModeSettings {
    optional  CHRPBFlightModeConfig  flightMode  = 1;
    optional  uint32  duration  = 2;
    optional  float  distanceMeters  = 3;
    optional  int32  captureType  = 4;
    optional  bool  tracking  = 5;
}

message CHRPBFlightSettings {
    optional  CHRPBCustomFlightMode  customFlightMode  = 1;
    optional  CHRPBFlightModeSettings  hoverSettings  = 2;
    optional  CHRPBFlightModeSettings  revealSettings  = 3;
    optional  CHRPBFlightModeSettings  followSettings  = 4;
    optional  CHRPBFlightModeSettings  orbitSettings  = 5;
    optional  CHRPBFlightModeSettings  customSettings  = 6;
}

message CHRPBFlightStatusError {
    repeated  int32  errorsArray  = 1;
}

message CHRPBGenericAssetsMetadata {
    optional  string  fileIdentifier  = 1;
    optional  CHRPBAsset  asset  = 2;
    optional  uint32  size  = 3;
}

message CHRPBGetFileRequest {
    optional  string  fileIdentifier  = 1;
    optional  CHRPBRange  range  = 2;
}

message CHRPBGetFileResponse {
    optional  string  fileIdentifier  = 1;
    optional  CHRPBRange  requestedRange  = 3;
    optional  CHRPBRange  actualRange  = 4;
    optional  bytes  data_p  = 5;
}

message CHRPBGetLostModeStateRequest {
}

message CHRPBGetLostModeStateResponse {
    required  bool  active  = 1;
}

message CHRPBGitResponse {
    required  string  commitSha  = 1;
    required  string  branch  = 2;
    required  string  tag  = 3;
    optional  string  buildConfig  = 4;
    optional  string  bootloaderGitSha  = 5;
    optional  uint32  bootloaderCrc32  = 6;
}

message CHRPBImageData {
    optional  CHRPBImageData_Burst  burst  = 1;
}

message CHRPBImageData_Burst {
    optional  int32  index  = 1;
    optional  int32  length  = 2;
    optional  int32  frameRate  = 3;
    optional  string  firstImageUuid  = 4;
}

message CHRPBKeepDeviceActiveParams {
}

message CHRPBKeepDeviceActiveResult {
}

message CHRPBKeyExchangeMessage {
    required  bytes  nonce  = 1;
    required  bytes  publicKey  = 2;
}

message CHRPBLocationData {
    optional  float  latitude  = 1;
    optional  float  longitude  = 2;
    optional  uint32  speedMps  = 3;
    optional  uint64  utcTime  = 4;
    optional  int32  headingDeg  = 5;
    optional  int32  heightMm  = 6;
    optional  uint32  hAccMm  = 7;
    optional  uint32  vAccMm  = 8;
}

message CHRPBLogData {
    optional  string  name  = 1;
    optional  CHRPBRange  requestedRange  = 2;
    optional  CHRPBRange  actualRange  = 3;
    optional  bytes  data_p  = 4;
}

message CHRPBLogFileMetadata {
    optional  string  name  = 1;
    optional  uint32  size  = 2;
}

message CHRPBLogFileTransferRequest {
    optional  string  name  = 1;
    optional  CHRPBRange  range  = 2;
}

message CHRPBLogRequest {
    optional  int32  type  = 1;
    optional  CHRPBLogFileTransferRequest  logFileTransferRequest  = 2;
}

message CHRPBLogResponse {
    optional  int32  origReqType  = 1;
    repeated  CHRPBLogFileMetadata  logFileMetadataArray  = 2;
    optional  CHRPBLogData  logData  = 3;
    optional  bool  deletedLogFile  = 4;
}

message CHRPBLogsResponse {
    optional  bytes  logsZippedData  = 1;
}

message CHRPBLostModeBeginEvent {
}

message CHRPBLostModeEndEvent {
    required  int32  cause  = 1;
}

message CHRPBLostModeEvent {
    optional  CHRPBLostModeBeginEvent  beginEvent  = 1;
    optional  CHRPBLostModeEndEvent  endEvent  = 2;
}

message CHRPBMediaCountsMessage {
    optional  uint32  videos  = 1;
    optional  uint32  photos  = 2;
}

message CHRPBMediaCountsResponse {
    optional  CHRPBMediaCountsMessage  mediaCounts  = 1;
}

message CHRPBMediaData {
    required  string  uuid  = 1;
    required  int32  type  = 2;
    optional  CHRPBRange  requestedRange  = 3;
    required  CHRPBRange  actualRange  = 4;
    required  bytes  data_p  = 5;
}

message CHRPBMediaFileDeletionRequest {
    required  string  uuid  = 1;
}

message CHRPBMediaFileMarkTransferredRequest {
    required  string  uuid  = 1;
}

message CHRPBMediaFileMetadata {
    optional  CHRPBVideoData  videoData  = 1;
    optional  CHRPBImageData  imageData  = 2;
    optional  CHRPBSystemState  systemStateData  = 3;
    optional  CHRPBCameraSensorData  cameraSensorData  = 4;
    optional  bytes  randomBytes  = 5;
    optional  CHRPBTimeData  time  = 6;
    optional  CHRPBFirmwareVersion  fwVersion  = 7;
    optional  CHRPBLocationData  location  = 8;
    optional  CHRPBFlightData  flightData  = 9;
    repeated  CHRPBGenericAssetsMetadata  genericAssetMetadataArray  = 20;
}

message CHRPBMediaFileTransferRequest {
    required  string  uuid  = 1;
    required  int32  type  = 2;
    optional  CHRPBRange  range  = 3;
}

message CHRPBMediaMetadata {
    required  string  uuid  = 1;
    repeated  CHRPBMediaTypeAndSize  mediaArray  = 2;
}

message CHRPBMediaRequest {
    required  int32  type  = 1;
    optional  CHRPBMediaFileTransferRequest  mediaFileTransferRequest  = 2;
    optional  CHRPBMediaFileDeletionRequest  mediaFileDeletionRequest  = 3;
    optional  CHRPBMediaFileMarkTransferredRequest  mediaFileMarkTransferredRequest  = 4;
}

message CHRPBMediaResponse {
    repeated  CHRPBMediaMetadata  availableMediaArray  = 1;
    optional  CHRPBMediaData  mediaData  = 2;
    optional  CHRPBMediaFileMetadata  metadata  = 3;
}

message CHRPBMediaTypeAndSize {
    required  int32  type  = 1;
    required  uint32  size  = 2;
}

message CHRPBOTACancelScheduledUpdateResponse {
    optional  bool  success  = 1;
}

message CHRPBOTAScheduledUpdate {
    optional  string  targetHash  = 1;
    optional  string  targetVersionTag  = 2;
    optional  uint32  utcTimeUpdateWindowStart  = 3;
    optional  uint32  utcTimeUpdateWindowStop  = 4;
    optional  bool  isFullUpdate  = 5;
}

message CHRPBOTAUpdateEventData {
    optional  int32  updateEvent  = 1;
    optional  int32  pct  = 2;
    optional  int32  error  = 3;
}

message CHRPBOTAUpdateRequest {
    optional  int32  requestType  = 1;
}

message CHRPBOTAUpdateResponse {
    optional  CHRPBOTAUpdateRequest  origRequestType  = 1;
    optional  int32  status  = 2;
    optional  string  currentVersion  = 3;
    optional  string  checksum  = 4;
}

message CHRPBPairingSignatureMessage {
    optional  bytes  sigPairing  = 1;
    repeated  string  pairingScCertChainArray  = 2;
}

message CHRPBPeerVerificationMessage {
    required  bytes  tag  = 1;
    required  bytes  ciphertext  = 2;
}

message CHRPBPhotoResolutionParams {
    optional  CHRPBFlightModeConfig  flightMode  = 1;
    optional  int32  res  = 2;
}

message CHRPBRange {
    required  uint32  start  = 1;
    required  uint32  len  = 2;
}

message CHRPBRealTimeMessage {
    required  uint64  timeUtc  = 1;
    optional  int32  timeZone  = 2;
    optional  string  timeZoneStr  = 3;
}

message CHRPBRemainingFlightInfo {
    optional  uint32  remainingFlightsTime  = 1;
    optional  uint32  estimatedFlightTime  = 2;
    optional  CHRPBDialPosition  currentDialPosition  = 3;
}

message CHRPBSixDof {
    repeated  CHRPBAttitudeFrame  attitudeDataArray  = 1;
    optional  CHRPBCameraData  cameraData  = 2;
    optional  float  videoFps  = 3;
}

message CHRPBSpectaclesPushMessage {
    optional  string  logMessage  = 1;
    optional  int32  logLevel  = 2;
    optional  uint32  msSinceBoot  = 3;
    optional  CHRPBSpectaclesPushMessage_InvalidatedRequest  invalidatedRequest  = 4;
    optional  CHRPBMediaCountsMessage  mediaCounts  = 5;
    optional  CHRPBCrashReport  crashReport  = 6;
    optional  CHRPBCheeriosEventPb  cheeriosEvent  = 7;
    optional  CHRPBEmpty  requestLocationForCamera  = 8;
}

message CHRPBSpectaclesPushMessage_InvalidatedRequest {
    optional  uint32  requestId  = 1;
    optional  uint64  methodUuid  = 2;
}

message CHRPBStartCalibrationRequest {
}

message CHRPBStartCalibrationResponse {
}

message CHRPBStopCalibrationRequest {
}

message CHRPBStopCalibrationResponse {
}

message CHRPBStorageCapacity {
    optional  int64  availableBytes  = 1;
    optional  int64  totalBytes  = 2;
}

message CHRPBSystemState {
    optional  int32  batterySocPct  = 1;
    optional  bool  charging  = 2;
    optional  bool  bleConnected  = 3;
    optional  int32  mainSocTemperatureC  = 4;
    optional  int32  wifiTemperatureC  = 5;
    optional  float  storageInUserPct  = 6;
    optional  int32  bleRssi  = 7;
}

message CHRPBTemperatureResponse {
    required  float  mainSocTempC  = 1;
    optional  int32  imageSensorTempC  = 2;
    optional  int32  status  = 3;
}

message CHRPBTimeData {
    optional  uint64  captureUtc  = 1;
    optional  uint64  sinceSystemBootSec  = 2;
}

message CHRPBTrackingParams {
    optional  CHRPBFlightModeConfig  flightMode  = 1;
    optional  bool  tracking  = 2;
}

message CHRPBUSBConnectionStatus {
    optional  bool  isConnectedUsb  = 1;
}

message CHRPBValidatePairingRequest {
    optional  string  userId  = 1;
}

message CHRPBValidatePairingResponse {
    optional  bool  result  = 1;
    optional  uint32  mediaCounts  = 2;
}

message CHRPBVideoData {
    optional  int32  durationMs  = 1;
    optional  int32  codec  = 2;
    optional  CHRPBDroppedFramesData  droppedFramesData  = 3;
}

message CHRPBVideoFormatParams {
    optional  CHRPBFlightModeConfig  flightMode  = 1;
    optional  int32  format  = 2;
}

message CHRPBVideoResolutionParams {
    optional  CHRPBFlightModeConfig  flightMode  = 1;
    optional  int32  res  = 2;
}

message CHRPBWifiParams {
    required  int32  type  = 1;
    optional  string  ssid  = 2;
    optional  string  password  = 3;
    optional  uint32  frequency  = 4;
    optional  string  country  = 5;
    optional  int32  frequencyStrategy  = 6;
}

message CalculateActionStickerRequest {
    optional  int64  requestTimestamp  = 2;
    optional  SCMTUserLocationRequest  request  = 11;
    optional  string  actionmojiId  = 13;
    optional  int64  birthday  = 14;
    optional  bool  hasBirthday  = 15;
    optional  SCMTLocationUpdate  lastSavedLocation  = 17;
    repeated  string  bleBeaconIdArray  = 18;
    optional  SCMTBatchUserLocationRequest  batchRequest  = 19;
    optional  bool  isEmployee  = 20;
    optional  SCMapsAddress  lastSavedLocationAddress  = 21;
    optional  SCMTKalmanData  locationKalmanData  = 22;
    optional  bool  isBirthday  = 24;
    repeated  string  freeformData  = 25;
    optional  SCMT1Weather  weather  = 27;
    optional  string  countryCode  = 28;
    optional  uint32  age  = 29;
    optional  SpectaclesInfo  spectaclesInfo  = 30;
}

message CalculateActionStickerResponse {
    repeated  SCMT1Type  actionTypeArray  = 2;
    optional  SCMT1Sticker  typeSticker  = 3;
    optional  string  gitVersion  = 4;
}

message CameosInQuickReplyConfiguration {
    optional  int32  quickReplyStickersOrderType  = 1;
    optional  bool  isPreTypeEnabled  = 2;
    optional  bool  isPostTypeEnabled  = 3;
    optional  bool  isEarlyInitializationEnabled  = 4;
}

message CameraHintContent {
    optional  string  hintId  = 1;
    optional  string  iconURL  = 2;
    optional  int32  hintType  = 3;
    optional  string  itemId  = 4;
}

message CameraQualityScoreLoggerConfig {
    optional  bool  enableCameraQualityScoreLogger  = 1;
    optional  float  sampleRate  = 2;
    optional  bool  persistQualityScoreModel  = 3;
    optional  bool  persistFaceDetector  = 4;
}

message CameraSignals {
    optional  int32  cameraDirection  = 1;
    optional  int32  cameraContext  = 2;
    optional  int32  cameraApi  = 3;
    optional  int32  flashState  = 4;
    optional  int32  camera2Level  = 5;
    optional  int32  nightModeState  = 6;
    optional  bool  isFirstCapture  = 7;
    optional  int32  pictureMode  = 8;
    optional  int32  captureMode  = 9;
}

message CampusData {
    optional  string  id_p  = 1;
    optional  string  name  = 2;
    optional  float  confidence  = 3;
}

message CanRegisterStudioRequest {
    optional  string  registrationToken  = 1;
}

message CanRegisterStudioResponse {
    optional  bool  canRegister  = 1;
}

message CategoryHideDetail {
    optional  int32  state  = 1;
    optional  int64  stateTimestampMsecs  = 2;
    optional  int64  stateExpireTimestampMsecs  = 3;
}

message CdnClientConfig {
    repeated  CdnClientConfig_RoutingDefinition  routingDefinitionsArray  = 1;
}

message CdnClientConfig_CdnInfo {
    optional  int32  cdnId  = 1;
    optional  string  host  = 2;
}

message CdnClientConfig_RoutingDefinition {
    repeated  string  URLMatchPatternsArray  = 1;
    repeated  CdnClientConfig_RoutingRule  routingRulesArray  = 2;
    repeated  CdnClientConfig_CdnInfo  routeInfosArray  = 3;
}

message CdnClientConfig_RoutingRule {
    optional  int32  reachability  = 1;
    optional  int32  cdnId  = 2;
}

message ChatFeaturedStoryContent {
    optional  bytes  conversationId  = 1;
    repeated  ChatMessageReference  messagesArray  = 2;
}

message ChatGroupMgmtRemoveUsersConfig {
    optional  bool  lockedConversationEnabled  = 1;
    optional  bool  fetchKickedParticipants  = 2;
    optional  bool  removeUsersEnabled  = 3;
}

message ChatMediaSaveCTAsConfig {
    optional  bool  postSaveEnabled  = 1;
    optional  bool  preSaveEnabled  = 2;
}

message ChatMessageReference {
    optional  uint64  messageId  = 1;
}

message ChatReplyTimeStampConfig {
    optional  int32  fadeAnimationDurationMs  = 1;
}

message Checkout {
    optional  bytes  id_p  = 1;
    optional  int32  commercePartner  = 2;
    optional  bytes  storeId  = 3;
    optional  CurrencyAmount  totalPrice  = 4;
    optional  ContactDetails  contactDetails  = 5;
    optional  string  webURL  = 6;
    repeated  CheckoutLineItem  lineItemsArray  = 7;
    repeated  TaxItem  taxItemsArray  = 8;
    optional  ShippingAddress  shippingAddress  = 9;
    repeated  ShippingOption  shippingOptionArray  = 10;
    optional  string  shippingOptionHandle  = 11;
    optional  bool  shouldUseWebview  = 12;
    optional  string  discountCode  = 13;
    optional  DiscountInfo  discountInfo  = 14;
    optional  bool  userHasPaymentMethod  = 15;
    optional  string  externalId  = 16;
    repeated  string  additionalParameters  = 17;
    optional  string  traceId  = 18;
}

message CheckoutLineItem {
    optional  ItemInfo  itemInfo  = 1;
    optional  BitmojiAssetInfo  bitmojiAssetInfo  = 2;
    optional  bytes  bitmojiProductAssetId  = 3;
    optional  PrintingMetadata  printingMetadata  = 4;
}

message ClassifierResult {
    repeated  LabelScorePair  labelScorePairsArray  = 1;
}

message ClearLocationHistoryRequest {
}

message ClearLocationHistoryResponse {
}

message ClientHeader {
    optional  InstaloggerClientHeader  instaloggerClientHeader  = 1;
    optional  DefaultClientHeader  defaultClientHeader  = 2;
    optional  SCAPbDataFrameStart  blizzardClientHeader  = 3;
    optional  DefaultMeshLoggerHeader  defaultMeshLoggerHeader  = 4;
}

message ClientTargetingExpression {
    optional  int32  operator_p  = 1;
    repeated  ClientTargetingExpression  childrenArray  = 2;
    optional  int32  property  = 3;
    optional  int32  predicateOperator  = 4;
    optional  Value  value  = 5;
    optional  ClientTargetingExpression_PropertyMetadata  propertyMetadata  = 6;
}

message ClientTargetingExpression_PropertyMetadata {
    optional  int32  itemId  = 1;
    optional  int32  signalToHash  = 2;
    optional  string  abNamespaceForHashing  = 3;
    optional  string  abSeedForHashing  = 4;
}

message ClusterResult {
    optional  int32  clusterId  = 1;
    optional  float  l2Distance  = 2;
    optional  float  cosineSimilarity  = 3;
}

message ClusterVersion {
}

message Codec {
    optional  int32  profile  = 1;
    optional  int32  codec  = 2;
}

message CodedDescription {
    optional  string  description_p  = 1;
    optional  uint64  code  = 2;
}

message CofStepInfo {
    optional  int32  cofStep  = 1;
    optional  string  info  = 2;
}

message CognacSignals {
    repeated  string  cognacIdArray  = 1;
}

message Cohort {
    optional  string  id_p  = 1;
    optional  string  language  = 2;
    optional  string  country  = 3;
    optional  int32  gender  = 4;
    optional  int32  ageBucket  = 5;
    optional  string  region  = 6;
    optional  string  s2CellToken  = 7;
    optional  string  interestId  = 8;
    optional  string  experimentId  = 9;
    optional  int32  cohortType  = 10;
    optional  string  sccId  = 11;
    optional  int32  maxAgeHrs  = 12;
    optional  string  yt8MTag  = 13;
    optional  string  hashtagTitle  = 14;
    optional  bool  isEvergreen  = 15;
    optional  bool  fromSnapCamera  = 16;
    optional  int32  streamType  = 17;
    optional  string  creatorUserId  = 18;
    optional  int32  scoringFunction  = 19;
    optional  bool  isUniversal  = 20;
    repeated  string  recentEventSeedIdsArray  = 21;
    repeated  float  recentEventSeedScoresArray  = 22[packed=true];
    repeated  int64  recentEventSeedSaltedIdsArray  = 23[packed=true];
    optional  int32  sccVersion  = 24;
    optional  bool  hasTrendingTopic  = 25;
    optional  bool  isSuggestive  = 26;
    optional  string  modelId  = 27;
    optional  string  challengeId  = 28;
    optional  int32  sccPlusId  = 29;
    optional  int32  inferredSccPlusId  = 30;
    optional  int32  clusterId  = 31;
    optional  int32  clusterVersion  = 32;
    optional  bool  isSnappy  = 33;
}

message CohortType {
}

message ColorDimensionData {
    repeated  string  dimensionValuesArray  = 1;
}

message ColumnOption {
    optional  string  familyName  = 1;
    optional  string  name  = 2;
}

message CommerceAction {
    optional  string  deeplink  = 1;
    optional  PageNavigation  pageNavigation  = 2;
}

message CommerceApiServiceError {
    optional  string  debugMessage  = 1;
    optional  int32  errorCode  = 2;
}

message CommerceContextInternal {
    optional  CommerceTabInternal  tabPage  = 1;
}

message CommerceItemWidget {
    optional  CommerceItemWidgetHeader  header  = 1;
    optional  uint64  limit  = 2;
    optional  int32  descriptionType  = 3;
    optional  CommerceAction  actionForSection  = 4;
}

message CommerceItemWidgetHeader {
    optional  string  title  = 1;
    optional  string  showMoreTitle  = 2;
    optional  CommerceAction  onClickShowMore  = 3;
}

message CommercePage {
    optional  int32  pageTitle  = 1;
    optional  string  fallbackPageTitle  = 2;
    repeated  CommercePageWidget  widgetsArray  = 3;
    optional  CommercePageMetricsMetadata  metadata  = 4;
}

message CommercePageContext {
    repeated  ShowcaseContext  showcaseContextsArray  = 1;
    optional  bytes  internalCommerceContext  = 2;
}

message CommercePageMetricsMetadata {
    optional  string  commercePage  = 1;
    optional  string  storeId  = 2;
    optional  string  topic  = 3;
    optional  string  sectionName  = 4;
}

message CommercePageWidget {
    optional  int32  widgetTitle  = 1;
    optional  string  fallbackWidgetTitle  = 2;
    optional  ShoppingHubWidget  shoppingHubWidget  = 3;
    optional  ItemRecommendationWidget  recentlyViewedWidget  = 4;
    optional  FitProfilePreferencesWidget  fitProfilePreferencesWidget  = 5;
    optional  TryOnPreferencesWidget  tryOnPreferencesWidget  = 6;
    optional  RecentlyViewedPreferencesWidget  recentlyViewedPreferencesWidget  = 7;
    optional  CommerceItemWidget  commerceItemWidget  = 8;
    optional  CommerceTabWidget  commerceTabWidget  = 9;
    optional  LookBuilderCategoryWidget  lookBuilderCategoryWidget  = 10;
}

message CommerceTab {
    optional  string  title  = 1;
    optional  CommerceAction  action  = 2;
}

message CommerceTabInternal {
    optional  string  tabName  = 1;
}

message CommerceTabWidget {
    repeated  CommerceTab  tabsArray  = 1;
}

message CommerceTopic {
    optional  string  topicName  = 1;
    optional  bytes  viewingContextInternal  = 2;
}

message CommonEndpointConfiguration {
    repeated  string  prefixPathsArray  = 1;
    repeated  string  exactPathsArray  = 2;
    optional  int32  mode  = 3;
    optional  bool  sendStrictEnforcementHeader  = 4;
}

message CommunityProfileMetadata {
    optional  string  description_p  = 1;
    optional  BoltMediaServingInfo  boltMediaServingInfo  = 2;
    optional  SCSCOREUUID  orgId  = 3;
    optional  string  shortDisplayName  = 4;
    optional  BoltMediaServingInfo  boltMediaServingInfoProfile  = 5;
}

message CompositeStoryId {
    optional  int32  corpus  = 1;
    optional  string  id_p  = 2;
    optional  int64  version  = 3;
}

message ConfigList {
    repeated  string  configNamesArray  = 1;
}

message ConfigResult {
    optional  string  configId  = 1;
    optional  Value  value  = 2;
    optional  ClientTargetingExpression  targetingExpression  = 3;
    optional  int64  ttlSeconds  = 4;
    optional  bytes  configRuleUuidBytes  = 5;
    optional  int32  priority  = 6;
    optional  int32  namespace_p  = 7;
    optional  string  studyName  = 8;
    optional  int32  experimentId  = 9;
    optional  bool  delete_p  = 10;
    repeated  int32  servePlatformsArray  = 11[packed=true];
    optional  int32  sequenceId  = 12;
    optional  int32  ruidType  = 13;
    optional  int32  segmentOrdinal  = 14;
    optional  bool  generatedFromAbAllowlists  = 15;
}

message ConfigResultBundle {
    optional  string  etag  = 1;
    repeated  ConfigResult  configResultsArray  = 2;
}

message ConfigurationCategory {
    repeated  int32  intConfigs  = 1;
    repeated  int64  longConfigs  = 2;
    repeated  float  floatConfigs  = 3;
    repeated  string  stringConfigs  = 4;
}

message ContactDetails {
    optional  string  email  = 1;
    optional  string  phone  = 2;
}

message ContentAgeGateLevelValue {
    optional  int32  value  = 1;
}

message ContentCluster {
    optional  int32  clusterId  = 1;
    optional  float  distanceToCentroid  = 2;
    optional  float  cosineSimilarityToCentroid  = 3;
}

message ContentFeatureMetadata {
    optional  LensContentArchiveMetadata  lensContentArchiveMetadata  = 1;
    optional  LensStaticRemoteAssetsMetadata  lensStaticRemoteAssetsMetadata  = 2;
    optional  int32  contentAttribution  = 3;
    optional  int32  assetType  = 4;
    optional  LensIconMetadata  lensIconMetadata  = 5;
    optional  LegacyBoltResolutionMetadata  legacyBoltMetadata  = 999;
}

message ContentManagerSignals {
    optional  int32  legacyMushroomContentType  = 1;
}

message ContentQuality {
    optional  bool  isSuggestive  = 1;
    optional  bool  isShockingImagery  = 2;
}

message ContentQualitySubTags {
    optional  bool  suggestiveIsVisual  = 1;
    optional  bool  suggestiveIsSubjectMatter  = 2;
    optional  bool  sensitiveIsHumanBodyImagery  = 3;
    optional  bool  sensitiveIsViolence  = 4;
    optional  bool  sensitiveIsHorror  = 5;
    optional  bool  sensitiveIsDrugsAlcoholAndTobacco  = 6;
    optional  bool  sensitiveIsWeapons  = 7;
    optional  bool  sensitiveIsBugsAndAnimals  = 8;
}

message ContentSignals {
    repeated  SccScores  storyAggregatedScoredSccArray  = 1;
    optional  int32  sccTagGranularity  = 2;
    repeated  SccScores  cupSccScoresArray  = 3;
    repeated  Youtube8MScores  youtube8MScoresArray  = 4;
    repeated  LensScores  lensScoresArray  = 5;
    repeated  TopicScores  topicScoresArray  = 6;
    repeated  MusicScores  musicScoresArray  = 7;
    optional  int32  sccTagOrigin  = 8;
    repeated  SccScores  cupSccPlusV1ScoresArray  = 9;
}

message ContentTag {
    optional  int32  type  = 1;
    optional  string  value  = 2;
    optional  int32  producedBy  = 3;
}

message ContextCardContext {
    repeated  ContextCardContext_Item  itemsArray  = 1;
}

message ContextCardContext_Item {
    optional  int64  snapItemId  = 1;
    optional  string  storeId  = 2;
}

message Costing {
    optional  Costing_Options  options  = 1;
}

message Costing_Options {
    optional  float  walkingSpeed  = 17;
}

message CounterEntry {
    optional  int64  id_p  = 1;
    optional  int64  count  = 2;
    optional  int64  timestampMs  = 3;
    optional  int64  timestampUs  = 4;
}

message CreateAvatarDataRequest {
    optional  int64  touVersion  = 1;
    optional  AvatarData  avatarData  = 2;
    optional  string  avatarBuilderSessionId  = 3;
}

message CreateBoostActionsRequest {
    optional  SCSCORERequestMetadata  metadata  = 1;
    repeated  BoostAction  boostActionsArray  = 2;
}

message CreateBoostActionsResponse {
    optional  string  requestId  = 1;
    repeated  ActionSubresponse  actionSubresponseArray  = 2;
}

message CreateCustomStoryGroupRequest {
    optional  SCSCORERequestMetadata  requestMetadata  = 1;
    optional  GroupMetadata  groupMetadata  = 2;
}

message CreateCustomStoryGroupResponse {
    optional  SCSCOREUUID  groupId  = 1;
    optional  uint64  groupVersion  = 2;
    optional  int64  createdTsMs  = 3;
}

message CreateNewCheckoutRequest {
    optional  SCCOREUUID  userId  = 1;
    optional  Checkout  checkout  = 2;
}

message CreateNewCheckoutResponse {
    optional  Checkout  checkout  = 1;
    optional  CommerceApiServiceError  error  = 2;
    optional  string  requestId  = 3;
}

message CreateOrUpdateLensPackRequest {
    optional  string  profileId  = 1;
    optional  string  portfolioId  = 2;
    optional  string  lensPackId  = 3;
    optional  string  lensPackName  = 4;
    optional  string  description_p  = 5;
    repeated  int32  categoriesArray  = 6[packed=true];
    optional  int64  priceMicroInUsd  = 7;
    repeated  string  lensIdsArray  = 8;
}

message CreateOrUpdateLensPackResponse {
    optional  LensPack  lensPack  = 1;
}

message CreatePairingAuthorizationTokenRequest {
    optional  string  token  = 1;
}

message CreatePairingAuthorizationTokenResponse {
}

message CreatePublishedTopicStickerRequest {
    optional  TopicStickerId  id_p  = 1;
    optional  string  text  = 2;
    optional  uint32  rank  = 3;
}

message CreatePublishedTopicStickerResponse {
    optional  VendingTopicSticker  topicSticker  = 1;
}

message CreateSocialLinkRequest {
    optional  string  userid  = 1;
    optional  int32  feature  = 2;
    repeated  string  templateValues  = 3;
    optional  MediaLinkPayload  mediaLinkPayload  = 4;
    optional  string  rawMediaURL  = 5;
}

message CreateSocialLinkResponse {
    optional  ErrorResponse  errorResponse  = 1;
    optional  string  URL  = 2;
    optional  string  text  = 3;
}

message CreateTopicStickerRequest {
    optional  string  text  = 1;
}

message CreateTopicStickerResponse {
    optional  VendingTopicSticker  topicSticker  = 1;
}

message CreativeToolsSignals {
    optional  bool  withAnimatedOverlay  = 1;
    optional  bool  withMusic  = 2;
}

message CreatorInfo {
    optional  string  creatorUuid  = 1;
    optional  uint64  creatorFp  = 2;
    optional  string  creatorCountry  = 3;
    optional  string  creatorLocale  = 4;
    optional  bool  isOfficialCreator  = 5;
    optional  WindowedCreatorMetrics  windowedCreatorStats  = 6;
    optional  int32  creatorAge  = 7;
    optional  string  creatorGender  = 8;
}

message CreditCard {
    optional  string  id_p  = 1;
    optional  int32  cardType  = 2;
    optional  string  expirationMonth  = 3;
    optional  string  expirationYear  = 4;
    optional  string  last4  = 5;
    optional  BillingAddress  billingAddress  = 6;
}

message CreditCardRequest {
    optional  string  userId  = 1;
    optional  int32  provider  = 2;
    optional  string  paymentMethodNonce  = 3;
    optional  string  deviceId  = 4;
    optional  string  paymentMethodId  = 5;
}

message CreditCardResponse {
    optional  CreditCard  creditCard  = 1;
}

message CtaPromoData {
    optional  CtaPromoData_CtaPromoItem  create  = 1;
    optional  CtaPromoData_CtaPromoItem  outfit  = 2;
    optional  CtaPromoData_CtaPromoItem  edit  = 3;
    optional  CtaPromoData_CtaPromoItem  selfie  = 4;
}

message CtaPromoData_CtaPromoItem {
    optional  bytes  substitutionText  = 1;
    optional  bytes  substitutionKey  = 2;
    optional  bytes  deeplinkCategory  = 3;
    optional  int32  deeplinkSectionId  = 4;
    optional  int64  starts  = 5;
    optional  int64  expires  = 6;
}

message CupAbusiveLanguageResult {
    repeated  CupAbusiveLanguageResult_Result  resultsArray  = 1;
}

message CupAbusiveLanguageResult_Result {
    optional  string  text  = 1;
    optional  bool  isAbusive  = 2;
}

message CurrencyAmount {
    optional  uint64  microAmount  = 1;
    optional  string  formattedAmount  = 2;
    optional  int32  currency  = 3;
}

message CustomBitmojiInfo {
    repeated  CustomBitmojiInfo_CustomImageInfo  bitmojiImageInfoListArray  = 1;
    optional  bool  isTintable  = 2;
    repeated  string  colors  = 3;
    optional  string  defaultSolomojiComicId  = 4;
    optional  string  defaultAvatarId  = 5;
    optional  string  defaultFriendmojiComicId  = 6;
}

message CustomBitmojiInfo_CustomImageFrame {
    optional  uint32  topLeftX  = 1;
    optional  uint32  topLeftY  = 2;
    optional  uint32  frameHeight  = 3;
    optional  uint32  frameWidth  = 4;
}

message CustomBitmojiInfo_CustomImageInfo {
    optional  bytes  externalImageId  = 1;
    optional  uint32  height  = 2;
    optional  uint32  width  = 3;
    optional  CustomBitmojiInfo_CustomImageFrame  customImageFrame  = 4;
    optional  double  customImageRotationAngle  = 5;
}

message CustomDimensionData {
    repeated  string  dimensionValuesArray  = 1;
}

message CustomStoryFilter {
    optional  int64  startTsMs  = 1;
    optional  int64  endTsMs  = 2;
    optional  uint32  limit  = 3;
    optional  SCSCOREUUID  userId  = 4;
}

message CustomStoryGroup {
    optional  SCSCOREUUID  groupId  = 1;
    optional  int32  membership  = 2;
    optional  int32  customStoryType  = 3;
    optional  bool  isBlock  = 4;
    optional  FeatureConfig  featureConfig  = 5;
}

message CustomStoryProfileMetadata {
}

message DebugTrace {
    optional  CofStepInfo  lastCofStep  = 1;
    optional  AbStepInfo  lastAbStep  = 2;
    optional  uint32  budgetGroupId  = 3;
}

message DefaultClientHeader {
    optional  string  sessionId  = 1;
    optional  string  userGuid  = 2;
    optional  string  appBuild  = 3;
    optional  string  appVersion  = 4;
    optional  string  osVersion  = 5;
    optional  int32  osType  = 6;
    optional  string  clientId  = 7;
    optional  string  locale  = 8;
    optional  string  deviceModel  = 9;
    optional  int32  accountAgeDays  = 10;
    optional  int32  appStartupType  = 11;
    optional  int32  androidAppVariant  = 12;
    optional  bool  instalogDoubleLogged  = 13;
}

message DefaultMeshLoggerHeader {
}

message DeleteBoostAction {
    optional  string  subRequestId  = 1;
    optional  SCCORECompositeStoryId  compositeStoryId  = 2;
    optional  string  itemId  = 3;
    optional  int64  progressMs  = 4;
    optional  int64  clientTsMsec  = 5;
    optional  int32  boostType  = 6;
    optional  bool  isUgc  = 7;
}

message DeleteBoostActionsRequest {
    optional  SCSCORERequestMetadata  metadata  = 1;
    repeated  DeleteBoostAction  deletedBoostActionsArray  = 2;
}

message DeleteBoostActionsResponse {
    optional  string  requestId  = 1;
    repeated  ActionSubresponse  actionSubresponseArray  = 2;
}

message DeleteCustomStoryGroupRequest {
    optional  SCSCORERequestMetadata  requestMetadata  = 1;
    optional  SCSCOREUUID  groupId  = 2;
}

message DeleteCustomStoryGroupResponse {
}

message DeleteLensPackRequest {
    optional  string  lensPackId  = 1;
}

message DeleteLensPackResponse {
}

message DeleteOneTapLoginTokenRequest {
    optional  string  deviceId  = 2;
}

message DeleteOneTapLoginTokenResponse {
    optional  int32  status  = 1;
}

message DeleteOneTapLoginTokensRequest {
}

message DeleteOneTapLoginTokensResponse {
    optional  int32  status  = 1;
}

message DeleteShippingAddressRequest {
    optional  SCCOREUUID  userId  = 1;
    optional  bytes  addressId  = 2;
}

message DeleteShippingAddressResponse {
    optional  CommerceApiServiceError  error  = 1;
    optional  string  requestId  = 2;
}

message DeleteStoryDraftingSnapsRequest {
    optional  SCSCORERequestMetadata  requestMetadata  = 1;
    repeated  string  snapIdsArray  = 2;
    optional  Owner  storyOwner  = 3;
}

message DeleteStoryDraftingSnapsResponse {
}

message DeleteStorySnapRequest {
    optional  SCSCORERequestMetadata  requestMetadata  = 1;
    optional  StorySnapID  snapId  = 2;
    optional  bool  deleteMultisnaps  = 3;
}

message DeleteStorySnapResponse {
}

message DeleteTopicStickerRequest {
    repeated  TopicStickerId  idsArray  = 1;
}

message DeleteTopicStickerResponse {
}

message DeleteUserRepliesRequest {
    optional  SCSCORERequestMetadata  metadata  = 1;
    optional  SCSCOREUUID  replyViewerUserId  = 2;
    repeated  SCSCOREUUID  replyIdArray  = 3;
    repeated  ReplyDeletion  replyDeletionArray  = 4;
}

message DeleteUserRepliesResponse {
    optional  string  requestId  = 1;
}

message DeleteUserViewHistoryRequest {
    optional  string  requestId  = 1;
    optional  int32  origin  = 2;
    optional  SCSCOREUUID  userId  = 3;
}

message DeleteUserViewHistoryResponse {
    optional  string  requestId  = 1;
}

message DeltaSyncResponseItem {
    optional  FavoriteItem  favoriteItem  = 1;
    optional  int32  action  = 2;
}

message DeviceConfig {
    optional  int32  resolutionHeight  = 1;
    optional  int32  resolutionWidth  = 2;
    optional  int32  minFps  = 3;
    optional  int32  maxFps  = 4;
    optional  int32  hrsiHeight  = 5;
    optional  int32  hrsiWidth  = 6;
    optional  bool  requiresHdr  = 7;
    optional  bool  requiresBinning  = 8;
    optional  bool  requiresMulticam  = 9;
    optional  bool  requiresHighestPhotoQuality  = 10;
}

message DeviceContext {
    optional  int32  deviceType  = 1;
    optional  string  appVersion  = 2;
}

message DeviceData {
    optional  string  deviceId  = 1;
    optional  string  userAgent  = 2;
    optional  string  device  = 3;
    optional  string  os  = 4;
    optional  string  browser  = 5;
}

message DigitalGood {
    optional  string  sku  = 1;
    optional  int32  type  = 2;
    optional  uint32  priceTier  = 3;
    optional  string  title  = 4;
    optional  string  description_p  = 5;
    repeated  DigitalGoodLocalization  localizationsArray  = 6;
    optional  int32  status  = 7;
    optional  uint32  consumableQuantity  = 8;
}

message DigitalGoodLocalization {
    optional  int32  locale  = 1;
    optional  string  title  = 2;
    optional  string  description_p  = 3;
}

message Directions {
    repeated  DirectionsRoute  routesArray  = 1;
}

message DirectionsLeg {
    optional  DirectionsLeg_Summary  summary  = 5;
    optional  string  shape  = 7;
}

message DirectionsLeg_Summary {
    optional  float  length  = 1;
    optional  double  time  = 2;
}

message DirectionsRoute {
    repeated  DirectionsLeg  legsArray  = 1;
}

message DisableOtpTfaRequest {
}

message DisableOtpTfaResponse {
    optional  string  error  = 1;
    optional  string  metricSafeErrorMessage  = 2;
}

message DisableSmsTfaRequest {
}

message DisableSmsTfaResponse {
    optional  string  error  = 1;
    optional  string  metricSafeErrorMessage  = 2;
}

message DiscountInfo {
    optional  bool  applicable  = 1;
    optional  CurrencyAmount  amount  = 2;
    optional  int32  discountType  = 3;
    optional  string  discountValue  = 4;
    optional  bool  automatic  = 5;
}

message Discover {
    optional  string  publisherDisplayName  = 1;
    optional  string  publisherBusinessProfileId  = 2;
    optional  string  publisherIconURL  = 3;
    optional  string  editionTitle  = 4;
    optional  string  editionThumbnailURL  = 5;
    optional  string  deeplinkURL  = 6;
}

message DiscoverBackgroundPrefetchConfig {
    optional  int32  numOfStories  = 1;
    optional  int32  numOfSnapsInAStory  = 2;
    optional  int32  maxNumOfSnapsInAStory  = 3;
    optional  bool  discoverForYouSection  = 4;
    optional  int32  prefetchIntervalInMinutes  = 5;
    optional  BackgroundPrefetchConfig  prefetchConfig  = 6;
}

message DiscoverChannelsFilterValue {
    repeated  STODiscoverChannelFilter  valueArray  = 1;
}

message DiscoverRegionsValue {
    repeated  int32  valueArray  = 1[packed=true];
}

message DiscoverUserEmbedding {
    optional  SCSUPSpotlightUserEmbedding  spotlightTtUserEmbedding  = 1;
    optional  SCSUPSpotlightUserEmbedding  spotlightTtUserEmbeddingV2C  = 2;
    optional  SCSUPDFUserEmbedding  dfUserEmbedding  = 3;
    optional  SCSUPSpotlightUserEmbedding  spotlightTtUserEmbeddingV2V  = 4;
}

message DiskUsageSamplingCofConfig {
    optional  uint32  samplingPercentage  = 1;
    optional  uint32  measureFrequencyInHours  = 2;
    optional  uint32  directoryDiskUsageSamplingPercentage  = 3;
}

message DisplayCard {
    optional  int32  preferredType  = 1;
    optional  SingleTabularTextRenderingGroups  singleTabularTextRenderingGroups  = 2;
    optional  MiniSelectorTabularTextRenderingGroups  miniSelectorTabularTextRenderingGroups  = 3;
}

message DomainContext {
    optional  string  domainKey  = 1;
    optional  bytes  showcaseContext  = 2;
}

message DoubleRules {
    optional  double  const_p  = 1;
    optional  double  lt  = 2;
    optional  double  lte  = 3;
    optional  double  gt  = 4;
    optional  double  gte  = 5;
    repeated  double  inArray  = 6;
    repeated  double  notInArray  = 7;
    optional  bool  ignoreEmpty  = 8;
}

message DpaStoryAdMetadata {
    optional  int32  previewCreativeRenderType  = 1;
    optional  int32  firstSubCreativeRenderType  = 2;
    optional  int32  attachmentAdType  = 3;
}

message DurationRules {
    optional  bool  required  = 1;
    optional  GPBDuration  const_p  = 2;
    optional  GPBDuration  lt  = 3;
    optional  GPBDuration  lte  = 4;
    optional  GPBDuration  gt  = 5;
    optional  GPBDuration  gte  = 6;
    repeated  GPBDuration  inArray  = 7;
    repeated  GPBDuration  notInArray  = 8;
}

message EchoRequest {
    optional  string  message  = 1;
}

message EchoResponse {
    optional  string  message  = 1;
}

message EdgeFeatureKey {
    optional  string  viewerId  = 1;
    optional  string  posterId  = 2;
}

message EditionHideDetail {
    optional  int64  publisherId  = 1;
    optional  int32  state  = 3;
    optional  int64  stateTimestampMsecs  = 4;
    optional  int64  stateExpireTimestampMsecs  = 5;
}

message EditorialApprovalValue {
    optional  int32  value  = 1;
}

message EelClientConfig {
    optional  EelClientConfig_EnabledMessageTypeConfig  oneToOneEnabledMessageTypes  = 2;
    optional  EelClientConfig_ReEncryptionConfig  reEncryptionConfig  = 3;
    optional  EelClientConfig_SyncDevicesConfig  syncDevicesConfig  = 4;
    optional  bool  disableDecryptCekFallback  = 5;
    optional  bool  forceReEncryption  = 6;
    optional  bool  isPrefetchUserKeysEnabled  = 7;
}

message EelClientConfig_EnabledMessageTypeConfig {
    optional  bool  isTextEnabled  = 1;
    optional  bool  isChatMediaImageEnabled  = 2;
    optional  bool  isChatMediaVideoEnabled  = 3;
    optional  bool  isImageSnapEnabled  = 4;
    optional  bool  isVideoSnapEnabled  = 5;
    optional  bool  isEncryptForAllSenderDevices  = 6;
}

message EelClientConfig_ReEncryptionConfig {
    optional  bool  isInitEnabled  = 1;
    optional  bool  isAckEnabled  = 2;
    optional  uint32  maxInFlightAcks  = 3;
    optional  uint32  maxInFlightInits  = 4;
    optional  uint32  initBootstrapDelayMs  = 5;
    optional  uint32  ackBootstrapDelayMs  = 6;
    optional  uint32  initMaxChunkMessagesToRead  = 7;
    optional  uint32  ackMaxChunkMessagesToRead  = 8;
    optional  bool  isBatchEnabled  = 9;
    optional  bool  isBatchRequesterEnabled  = 10;
    optional  bool  isBatchManagerEnabled  = 11;
}

message EelClientConfig_SyncDevicesConfig {
    optional  uint32  syncTimeoutMs  = 1;
    optional  uint32  retryPolicyExpBase  = 2;
    optional  uint32  retryPolicyInitialDelay  = 3;
    optional  uint32  retryPolicyMaxDelay  = 4;
    optional  uint32  retryPolicyMaxRetries  = 5;
}

message EmailCredential {
    optional  string  email  = 1;
}

message Embedding {
    optional  int32  labelEnum  = 1;
    optional  MultiFloat  value  = 2;
}

message EnableKeyboardSnapshotConfig {
    optional  bool  isKeyboardSnapshottingEnabled  = 1;
    optional  bool  isKikaKeyboardSnapshottingEnabled  = 2;
}

message EnableOtpTfaRequest {
    optional  string  otpSecret  = 1;
    optional  string  otpCode  = 2;
    optional  string  deviceId  = 3;
}

message EnableOtpTfaResponse {
    optional  string  error  = 1;
    optional  TfaVerifiedDevice  tfaVerifiedDevice  = 2;
    optional  string  recoveryCode  = 3;
    optional  string  metricSafeErrorMessage  = 4;
}

message EnableSmsTfaRequest {
    optional  string  smsCode  = 1;
    optional  string  deviceId  = 2;
}

message EnableSmsTfaResponse {
    optional  string  error  = 1;
    optional  TfaVerifiedDevice  tfaVerifiedDevice  = 2;
    optional  string  recoveryCode  = 3;
    optional  string  metricSafeErrorMessage  = 4;
}

message EnableSmsTfaSendCodeRequest {
}

message EnableSmsTfaSendCodeResponse {
    optional  string  error  = 1;
    optional  string  metricSafeErrorMessage  = 2;
}

message EncoderCodecConfiguration {
    repeated  ConfigurationCategory  configurationCategories  = 1;
}

message EngagementData {
    optional  int64  views  = 1;
    optional  int64  replies  = 2;
    optional  int64  subscribes  = 3;
    optional  int64  shares  = 4;
    optional  int64  boosts  = 5;
    optional  bool  isBoosted  = 6;
    optional  string  snapId  = 7;
}

message EngagementFeatures {
    optional  WindowedFloatMetrics  chatTimeSpent  = 1;
    optional  WindowedIntMetrics  normalizedNumChatsSentViaGroup  = 2;
    optional  WindowedIntMetrics  normalizedNumSnapsSentViaGroup  = 3;
    optional  WindowedFloatMetrics  num1To1ChatsSent  = 4;
    optional  WindowedFloatMetrics  num1To1SnapsSent  = 5;
    optional  WindowedFloatMetrics  num1ToManyChatsSent  = 6;
    optional  WindowedFloatMetrics  num1ToManySnapsSent  = 7;
    optional  WindowedIntMetrics  numBitmojiStickersSent  = 8;
    optional  WindowedIntMetrics  numChatsSent  = 9;
    optional  WindowedIntMetrics  numChatSaved  = 10;
    optional  WindowedIntMetrics  numChatScreenshots  = 11;
    optional  WindowedIntMetrics  numChatView  = 12;
    optional  WindowedIntMetrics  numCustomStickersSent  = 13;
    optional  WindowedIntMetrics  numHoursWithStoryStoryView  = 14;
    optional  WindowedIntMetrics  numMemoriesShared  = 15;
    optional  WindowedIntMetrics  numScreenshots  = 16;
    optional  WindowedIntMetrics  numSnapsSent  = 17;
    optional  WindowedIntMetrics  numSnapReplays  = 18;
    optional  WindowedIntMetrics  numSnapScreenshots  = 19;
    optional  WindowedIntMetrics  numSnapView  = 20;
    optional  WindowedIntMetrics  numStickersSent  = 21;
    optional  WindowedIntMetrics  numStoryInterstitialView  = 22;
    optional  WindowedIntMetrics  numStoryInterstitialViewSkips  = 23;
    optional  WindowedIntMetrics  numStoryPlaylistExits  = 24;
    optional  WindowedIntMetrics  numStorySnapsScreenshots  = 25;
    optional  WindowedIntMetrics  numStorySnapsViewed  = 26;
    optional  WindowedIntMetrics  numStorySnapsViewedRaw  = 27;
    optional  WindowedIntMetrics  numStorySnapCompletions  = 28;
    optional  WindowedIntMetrics  numStorySnapPosts  = 29;
    optional  WindowedIntMetrics  numStorySnapReplays  = 30;
    optional  WindowedIntMetrics  numStorySnapReplies  = 31;
    optional  WindowedIntMetrics  numStorySnapSkips  = 32;
    optional  WindowedIntMetrics  numStoryStoryCompletions  = 33;
    optional  WindowedIntMetrics  numStoryStoryLongImp  = 34;
    optional  WindowedIntMetrics  numStoryStorySkips  = 35;
    optional  WindowedIntMetrics  numStoryStoryView  = 36;
    optional  WindowedIntMetrics  numStoryStoryViewViaInterstitialTap  = 37;
    optional  WindowedIntMetrics  numStoryStoryViewViaTap  = 38;
    optional  WindowedFloatMetrics  snapTimeSpent  = 39;
    optional  WindowedFloatMetrics  storySnapTimeSpent  = 40;
    optional  WindowedFloatMetrics  storyStoryLongImpTime  = 41;
    optional  WindowedFloatMetrics  totalChatAckTime  = 42;
    optional  WindowedFloatMetrics  totalSnapAckTime  = 43;
    optional  WindowedIntMetrics  numStoryStoryViewViaTapPos0  = 44;
    optional  WindowedIntMetrics  numStoryStoryViewViaTapPos1To3  = 45;
    optional  WindowedIntMetrics  numStoryStoryViewViaTapPos4To10  = 46;
    optional  WindowedIntMetrics  numStoryStoryViewViaTapPosBeyond11  = 47;
    optional  WindowedIntMetrics  numStoryPlaylistExitsPos0  = 48;
    optional  WindowedIntMetrics  numStoryPlaylistExitsPos1To3  = 49;
    optional  WindowedIntMetrics  numStoryPlaylistExitsPos4To10  = 50;
    optional  WindowedIntMetrics  numStoryPlaylistExitsPosBeyond11  = 51;
    optional  WindowedIntMetrics  numStorySnapsViewedPos0  = 52;
    optional  WindowedIntMetrics  numStorySnapsViewedPos1To3  = 53;
    optional  WindowedIntMetrics  numStorySnapsViewedPos4To10  = 54;
    optional  WindowedIntMetrics  numStorySnapsViewedPosBeyond11  = 55;
    optional  WindowedIntMetrics  numStoryStoryLongImpPos0To4  = 56;
    optional  WindowedIntMetrics  numStoryStoryLongImpPosBeyond5  = 57;
    optional  WindowedFloatMetrics  storySnapTimeSpentPos0  = 58;
    optional  WindowedFloatMetrics  storySnapTimeSpentPos1To3  = 59;
    optional  WindowedFloatMetrics  storySnapTimeSpentPos4To10  = 60;
    optional  WindowedFloatMetrics  storySnapTimeSpentPosBeyond11  = 61;
    optional  WindowedIntMetrics  numStoryStoryLongImpPos0  = 62;
    optional  WindowedIntMetrics  numStoryStoryLongImpPos1To3  = 63;
    optional  WindowedIntMetrics  numStoryStoryLongImpPos4To10  = 64;
    optional  WindowedIntMetrics  numStoryStoryLongImpPosBeyond11  = 65;
    optional  int32  numPrivateStoryRecipientOwner  = 66;
    optional  int32  numPrivateStoryOwnerRecipient  = 67;
    optional  WindowedIntMetrics  numPrivateStorySnapReceived  = 68;
    optional  WindowedIntMetrics  numHoursWithPrivateStoryStoryView  = 69;
    optional  WindowedIntMetrics  numPrivateStorySnapsViewed  = 70;
    optional  WindowedIntMetrics  numPrivateStorySnapsViewedRaw  = 71;
    optional  WindowedIntMetrics  numPrivateStorySnapCompletions  = 72;
    optional  WindowedIntMetrics  numPrivateStorySnapPosts  = 73;
    optional  WindowedIntMetrics  numPrivateStorySnapReplays  = 74;
    optional  WindowedIntMetrics  numPrivateStorySnapSkips  = 75;
    optional  WindowedIntMetrics  numPrivateStoryStoryCompletions  = 76;
    optional  WindowedIntMetrics  numPrivateStoryStoryLongImp  = 77;
    optional  WindowedIntMetrics  numPrivateStoryStorySkips  = 78;
    optional  WindowedIntMetrics  numPrivateStoryStoryView  = 79;
    optional  WindowedFloatMetrics  privateStorySnapTimeSpent  = 80;
    optional  WindowedFloatMetrics  privateStoryStoryLongImpTime  = 81;
    optional  WindowedIntMetrics  numStoryStoryReplies  = 82;
    optional  WindowedIntMetrics  numStoryStoryRepliesPos0  = 83;
    optional  WindowedIntMetrics  numStoryStoryRepliesPos1To3  = 84;
    optional  WindowedIntMetrics  numStoryStoryRepliesPos4To10  = 85;
    optional  WindowedIntMetrics  numStoryStoryRepliesPosBeyond11  = 86;
    optional  WindowedIntMetrics  storySnapReplyCharCount  = 87;
    optional  WindowedIntMetrics  chatsSentCharCount  = 88;
    optional  WindowedIntMetrics  numAudioChatsSent  = 89;
    optional  WindowedFloatMetrics  audioChatsSentDuration  = 90;
    optional  WindowedIntMetrics  numMediaChatsSent  = 91;
    optional  WindowedIntMetrics  numStorySnapShares  = 92;
    optional  WindowedIntMetrics  numStorySnapSharesSent  = 93;
    optional  WindowedIntMetrics  numStorySnapSharesView  = 94;
    optional  WindowedIntMetrics  numStoryStoryShares  = 95;
    optional  WindowedIntMetrics  numStoryStorySharesPos0  = 96;
    optional  WindowedIntMetrics  numStoryStorySharesPos1To3  = 97;
    optional  WindowedIntMetrics  numStoryStorySharesPos4To10  = 98;
    optional  WindowedIntMetrics  numStoryStorySharesPosBeyond11  = 99;
}

message EngagementStats {
    optional  EngagementStats_ProductionStats  productionStats  = 1;
    optional  EngagementStats_ConsumptionStats  consumptionStats  = 2;
}

message EngagementStats_ConsumptionStats {
    optional  float  completeWatches  = 1;
    optional  float  watches  = 2;
    optional  float  sends  = 3;
    optional  float  favorites  = 4;
    optional  float  storyLimitedWatches  = 5;
    optional  float  lensUnlocksTopicsPage  = 6;
    optional  float  lensUnlocksSearch  = 7;
    optional  float  lensUnlocksLeSearch  = 8;
    optional  float  lensSwipes  = 9;
    optional  float  lensSaves  = 10;
    optional  float  lensSends  = 11;
    optional  float  lensPosts  = 12;
    optional  float  lensUnlockSearchTotal  = 13;
}

message EngagementStats_ProductionStats {
    optional  int32  posts  = 1;
}

message EntryEvent {
}

message EntryIntent {
}

message EnumRules {
    optional  int32  const_p  = 1;
    optional  bool  definedOnly  = 2;
    repeated  int32  inArray  = 3;
    repeated  int32  notInArray  = 4;
}

message ErrorInfo {
    optional  string  code  = 1;
    optional  string  message  = 2;
    optional  int32  HTTPStatusCode  = 3;
}

message ErrorResponse {
    optional  int32  errorType  = 1;
    optional  string  errorMessage  = 2;
}

message Event {
    optional  InstaloggerEvent  instaloggerEvent  = 1;
    optional  TraceEvent  traceEvent  = 2;
    optional  AirEvent  airEvent  = 4;
    optional  int64  eventCreationTimeMs  = 8;
}

message EventEnvelope {
    optional  bytes  eventBytes  = 1;
    optional  int64  clientEpochMs  = 2;
    optional  int64  sequenceNumber  = 3;
    optional  string  voltronStitchId  = 4;
    optional  int64  clientNodepEpochMs  = 5;
}

message ExitEvent {
}

message ExitIntent {
}

message Exploration {
    optional  int64  numUserReach  = 1;
    optional  int64  numImpression  = 2;
}

message ExplorationCohortMetadata {
    optional  Cohort  cohort  = 1;
    repeated  int64  perPositionVolume  = 2;
    optional  ExplorationCohortMetadata_PredictedImpressionVolume  predictedMetrics  = 3;
    optional  int32  elapsedTimeSecs  = 4;
}

message ExplorationCohortMetadata_PredictedImpressionVolume {
    optional  int64  fifteenMinExpectedVolume  = 1;
    optional  int64  thirtyMinExpectedVolume  = 2;
    optional  int64  oneHourExpectedVolume  = 3;
    optional  int64  twoHourExpectedVolume  = 4;
}

message ExplorationInfo {
    optional  string  lensId  = 1;
    repeated  ExplorationInfo_ExplorationCounters  explorationCountersArray  = 2;
    optional  int32  elapsedTimeSecs  = 3;
}

message ExplorationInfo_ExplorationCounters {
    optional  Cohort  cohort  = 1;
    optional  ExplorationLensStats  totalExplorationStats  = 2;
    optional  ExplorationLensStats  statsSinceLastRun  = 3;
}

message ExplorationLensStats {
    optional  int64  numImpressions  = 1;
    optional  int64  numLongImpressions  = 2;
    optional  int64  numUnlocks  = 3;
}

message ExplorationMetadata {
    optional  int64  startTimestampSecs  = 1;
    optional  int64  endTimestampSecs  = 2;
    optional  int64  targetBudget  = 3;
    repeated  Cohort  targetCohortsArray  = 4;
    optional  int64  remainingBudget  = 5;
}

message ExtractFeaturesRequest {
    optional  int32  featureRequestType  = 1;
    optional  SCPNLOOKALIEMedia  media  = 2;
    repeated  string  properties  = 200;
}

message ExtractFeaturesResponse {
    optional  SCPNLOOKALIEFeatures  features  = 1;
    optional  SCPNLOOKALIEFeatureLists  featureLists  = 2;
    optional  SCPNLOOKALIESequenceExample  sequenceExample  = 3;
    optional  GPBTimestamp  requestTime  = 100;
    optional  GPBTimestamp  responseTime  = 101;
    repeated  string  properties  = 200;
}

message FFAvatarScopeConfig {
    optional  bool  useViewContainer  = 1;
    optional  bool  useAvatarVm  = 2;
}

message FSNProxyPairAccountRequest {
    optional  string  accountId  = 1;
    optional  string  lensStudioSerialUuid  = 2;
}

message FSNProxyPairAccountResponse {
}

message FSNProxyUploadCertRequest {
    optional  string  lensStudioSerialUuid  = 1;
    optional  string  publicCert  = 2;
}

message FSNProxyUploadCertResponse {
}

message FanoutUserCustomStoryGroupMetadata {
    optional  SCSCOREUUID  groupId  = 1;
    repeated  SCSCOREUUID  userIdsArray  = 2;
}

message FavoriteItem {
    optional  uint64  snapItemId  = 1;
    optional  GPBTimestamp  timestamp  = 2;
    optional  int32  favoriteItemSource  = 3;
    optional  int32  favoriteItemType  = 4;
}

message FavoritesContext {
    repeated  uint64  snapItemIdArray  = 1[packed=true];
}

message FeatureConfig {
    optional  bool  isDatetimeConfigurable  = 1;
}

message FeatureProvidedSignals {
    optional  SDMMediaMetadata  mediaMetadata  = 1;
    optional  FeatureProvidedSignals_StoryMetadata  storyMetadata  = 2;
    optional  CameraSignals  cameraSignals  = 3;
    optional  int32  snapSource  = 4;
    optional  ContentManagerSignals  contentManagerProvidedSignals  = 5;
    optional  FeatureProvidedSignals_SpectacleMetadata  spectacleMetadata  = 6;
    optional  BoltSignals  boltSignals  = 7;
    optional  LensesSignals  lensesSignals  = 8;
    optional  CreativeToolsSignals  creativeToolsSignals  = 9;
    optional  uint32  estimatedDurationForEventMs  = 10;
    optional  RoutingSignals  routingSignals  = 11;
    optional  MdpMediaAttribution  mdpMediaAttribution  = 12;
    optional  uint32  size  = 13;
    optional  MediaSignals  mediaSignals  = 14;
    optional  PerceptionSignals  perceptionSignals  = 15;
    optional  OperaSignals  operaSignals  = 16;
    optional  RecipientsSignals  recipientsSignals  = 17;
    optional  BillboardSignals  billboardSignals  = 18;
    optional  CognacSignals  cognacSignals  = 19;
    optional  FeatureProvidedSignals_HashSignals  hashSignals  = 20;
    repeated  Value  edgeSignals  = 21;
    optional  SnapKitSignals  snapKitSignals  = 22;
    optional  UploadSignals  uploadSignals  = 23;
}

message FeatureProvidedSignals_HashSignals {
    optional  bytes  userId  = 1;
    optional  bytes  seed  = 2;
    optional  int32  namespace_p  = 3;
}

message FeatureProvidedSignals_SpectacleMetadata {
    optional  bool  isSpectacle  = 1;
    optional  int32  spectaclesVersion  = 2;
}

message FeatureProvidedSignals_StoryMetadata {
    optional  bool  isPublicStory  = 1;
    optional  bool  isOfficialStory  = 2;
    optional  int32  storyType  = 3;
}

message FeaturedStoryBackgroundPrefetchConfig {
    optional  BackgroundPrefetchConfig  prefetchConfig  = 1;
    optional  int32  mediaCount  = 2;
    optional  int32  prefetchTime  = 3;
}

message Features {
    optional  int64  warnUserCount  = 1;
    optional  int64  deleteSnapCount  = 2;
    optional  int64  suppressUserCount  = 3;
    optional  int64  deleteStoryCount  = 4;
    optional  int64  deleteSearchStoryCount  = 5;
    optional  int64  preserveAccountCount  = 6;
    optional  int64  deleteSnapByAgentCount  = 7;
    optional  bool  isFakeRegSnaptrap  = 20;
    optional  bool  isFakeRegFare  = 21;
    optional  bool  isFakeRegSctrap  = 22;
    optional  int64  snaptrapFriendSpamCount  = 23;
    optional  int64  lockCount  = 24;
    optional  int64  phoneReputationCount  = 25;
    optional  int64  emailReputationCount  = 26;
    optional  int64  sctrapFriendCount  = 27;
    optional  int64  suprCount  = 28;
    optional  int64  debotFriendCount  = 29;
    optional  int64  octopusRegCount  = 30;
    optional  int64  octopusFriendCount  = 31;
    optional  int64  octopusLoginCount  = 32;
    optional  int64  badCdhashCount  = 33;
    optional  int64  publicStorySpamURLCount  = 34;
    optional  int64  deviceCheckCount  = 35;
    optional  int64  mentionRingCount  = 36;
    optional  int64  snaptrapLoginCount  = 37;
    optional  int64  registrationTimestamp  = 40;
}

message FeaturesValue {
    repeated  int32  valueArray  = 1[packed=true];
}

message FeedBaseInfo {
    optional  int32  pageType  = 1;
    optional  string  pageTypeSpecific  = 2;
    optional  string  pageSessionId  = 3;
    optional  int32  section  = 4;
    optional  string  sectionName  = 5;
    optional  int32  sectionPos  = 6;
}

message FeedBaseInfo_FeedPageSection {
}

message FeedType {
}

message FeedTypeMetadata {
    optional  int32  feedType  = 1;
    optional  string  displayName  = 2;
    optional  string  loggingKey  = 3;
    optional  SectionLayout  sectionLayout  = 5;
    optional  SCSSMSectionConfig  sectionConfig  = 6;
    optional  string  description_p  = 7;
    optional  TrendingPageSectionMetadata  trendPageSectionMetadata  = 8;
    optional  bool  shouldHideSection  = 9;
    optional  TopicPageSectionMetadata  topicPageSectionMetadata  = 10;
}

message FieldRules {
    optional  FloatRules  float_p  = 1;
    optional  DoubleRules  double_p  = 2;
    optional  Int32Rules  int32  = 3;
    optional  Int64Rules  int64  = 4;
    optional  UInt32Rules  uint32  = 5;
    optional  UInt64Rules  uint64  = 6;
    optional  SInt32Rules  sint32  = 7;
    optional  SInt64Rules  sint64  = 8;
    optional  Fixed32Rules  fixed32  = 9;
    optional  Fixed64Rules  fixed64  = 10;
    optional  SFixed32Rules  sfixed32  = 11;
    optional  SFixed64Rules  sfixed64  = 12;
    optional  BoolRules  bool_p  = 13;
    optional  StringRules  string  = 14;
    optional  BytesRules  bytes  = 15;
    optional  EnumRules  enum_p  = 16;
    optional  MessageRules  message  = 17;
    optional  RepeatedRules  repeated  = 18;
    optional  MapRules  map  = 19;
    optional  AnyRules  any  = 20;
    optional  DurationRules  duration  = 21;
    optional  TimestampRules  timestamp  = 22;
}

message FilterBy {
    repeated  int32  statusArray  = 1[packed=true];
    repeated  bool  lockedArray  = 2[packed=true];
    repeated  string  nameArray  = 3;
    repeated  int64  unlockableIdArray  = 4[packed=true];
}

message FilterContext {
    optional  string  text  = 1;
}

message FitProfilePreferencesWidget {
}

message Fixed32Rules {
    optional  fixed32  const_p  = 1;
    optional  fixed32  lt  = 2;
    optional  fixed32  lte  = 3;
    optional  fixed32  gt  = 4;
    optional  fixed32  gte  = 5;
    repeated  fixed32  inArray  = 6;
    repeated  fixed32  notInArray  = 7;
    optional  bool  ignoreEmpty  = 8;
}

message Fixed64Rules {
    optional  fixed64  const_p  = 1;
    optional  fixed64  lt  = 2;
    optional  fixed64  lte  = 3;
    optional  fixed64  gt  = 4;
    optional  fixed64  gte  = 5;
    repeated  fixed64  inArray  = 6;
    repeated  fixed64  notInArray  = 7;
    optional  bool  ignoreEmpty  = 8;
}

message FlagsValue {
    repeated  int32  valueArray  = 1[packed=true];
}

message FloatRules {
    optional  float  const_p  = 1;
    optional  float  lt  = 2;
    optional  float  lte  = 3;
    optional  float  gt  = 4;
    optional  float  gte  = 5;
    repeated  float  inArray  = 6;
    repeated  float  notInArray  = 7;
    optional  bool  ignoreEmpty  = 8;
}

message ForegroundPrefetchConfig {
    optional  bool  isWwanEnabled  = 1;
    optional  bool  isOffPageEnabled  = 2;
    optional  uint32  continueInBackgroundSeconds  = 3;
    optional  uint32  numOfRetries  = 4;
}

message ForgetAllTfaVerifiedDevicesRequest {
}

message ForgetAllTfaVerifiedDevicesResponse {
    optional  string  error  = 1;
    optional  string  metricSafeErrorMessage  = 2;
}

message ForgetOneTfaVerifiedDeviceRequest {
    optional  string  deviceId  = 1;
}

message ForgetOneTfaVerifiedDeviceResponse {
    optional  string  error  = 1;
    optional  string  metricSafeErrorMessage  = 2;
}

message FormattedProductPrice {
    optional  string  amount  = 1;
    optional  int32  currency  = 2;
    optional  string  displayString  = 3;
}

message Frame {
    optional  HeaderEnvelope  headerEnvelope  = 1;
    repeated  EventEnvelope  eventEnvelopesArray  = 2;
}

message FriendBoost {
    optional  string  userId  = 1;
}

message FriendFeedItem {
    optional  Key  key  = 1;
    repeated  string  itemIds  = 2;
    optional  SCSCKFriendStoryMetadataFeatures  friendStoryMetadataFeatures  = 3;
    optional  string  debugHtml  = 4;
    optional  bytes  debugPb  = 5;
    optional  SCSCKFriendStoryClientEngagementFeatures  friendStoryClientEngagementFeatures  = 6;
    optional  float  finalScore  = 7;
}

message FriendLinkState {
}

message FriendMetadataFeatures {
    optional  SCSCOREUUID  friendId  = 1;
    optional  int32  mutualFriendCount  = 2;
    optional  int32  friendCount  = 3;
}

message FriendStoryAdjustments {
    optional  float  conversationBoost  = 1;
    optional  float  storyTypeBoost  = 2;
    optional  float  expireBoost  = 3;
    optional  float  teamSnapchatBoost  = 4;
    optional  float  optInNotifBoost  = 5;
    optional  float  impDemotion  = 6;
}

message FriendStoryModelHeadScore {
    optional  string  name  = 1;
    optional  float  score  = 2;
}

message FriendStoryScoringResults {
    optional  SCCORECompositeStoryId  storyId  = 1;
    repeated  FriendStoryModelHeadScore  friendStoryModelHeadScoresArray  = 2;
    optional  FriendStoryAdjustments  friendStoryAdjustments  = 3;
    optional  float  finalScore  = 4;
    optional  RarePosterBoostAdjustment  rarePosterAdjustment  = 5;
}

message FullFavoritesSyncRequest {
    optional  ItemFavoritingDeviceContext  deviceContext  = 1;
    optional  uint32  pageSize  = 2;
    optional  bytes  queryCheckpointToken  = 3;
}

message FullFavoritesSyncResponse {
    optional  bytes  queryCheckpointToken  = 1;
    optional  bytes  deltaSyncCheckpointToken  = 2;
    repeated  FavoriteItem  favoritedItemsArray  = 3;
}

message GAPICustomHttpPattern {
    optional  string  kind  = 1;
    optional  string  path  = 2;
}

message GAPIHttp {
    repeated  GAPIHttpRule  rulesArray  = 1;
    optional  bool  fullyDecodeReservedExpansion  = 2;
}

message GAPIHttpRule {
    optional  string  selector  = 1;
    optional  string  get  = 2;
    optional  string  put  = 3;
    optional  string  post  = 4;
    optional  string  delete_p  = 5;
    optional  string  patch  = 6;
    optional  string  body  = 7;
    optional  GAPICustomHttpPattern  custom  = 8;
    repeated  GAPIHttpRule  additionalBindingsArray  = 11;
}

message GPBAny {
    optional  string  typeURL  = 1;
    optional  bytes  value  = 2;
}

message GPBTimestamp {
    optional  int64  seconds  = 1;
    optional  int32  nanos  = 2;
}

message GTPColor {
    optional  float  red  = 1;
    optional  float  green  = 2;
    optional  float  blue  = 3;
    optional  GPBFloatValue  alpha  = 4;
}

message GTPDate {
    optional  int32  year  = 1;
    optional  int32  month  = 2;
    optional  int32  day  = 3;
}

message GenderDimensionData {
    repeated  string  dimensionValuesArray  = 1;
}

message GenerateTfaRecoveryCodeRequest {
}

message GenerateTfaRecoveryCodeResponse {
    optional  string  error  = 1;
    optional  string  code  = 2;
    optional  string  metricSafeErrorMessage  = 3;
}

message GetAccountInfoRequest {
    optional  SCCOREUUID  userId  = 1;
}

message GetAccountInfoResponse {
    optional  AccountInfo  accountInfo  = 1;
    optional  CommerceApiServiceError  error  = 2;
    optional  string  requestId  = 3;
}

message GetActiveStoryStatusRequest {
    optional  SCSCORERequestMetadata  requestMetadata  = 1;
    repeated  SCSCOREUUID  userIdsArray  = 2;
}

message GetActiveStoryStatusResponse {
    repeated  int64  latestPostTimestampsMsArray  = 1[packed=true];
}

message GetAdTopicsPreferenceRequest {
    optional  bytes  said  = 1;
}

message GetAdTopicsPreferenceResponse {
    optional  AdTopicsPreference  adTopicsPreference  = 1;
}

message GetAllAccountsPairedToAssociatedStudioRequest {
}

message GetAllAccountsPairedToAssociatedStudioResponse {
    repeated  string  accountIdArray  = 1;
}

message GetAllPairedAccountsRequest {
    optional  string  lensStudioSerialUuid  = 1;
}

message GetAllPairedAccountsResponse {
    repeated  string  accountIdArray  = 1;
    repeated  PairedAccount  pairedAccountsArray  = 2;
}

message GetBadgesRequest {
    optional  SCSCORERequestMetadata  metadata  = 1;
    repeated  int32  placementsArray  = 2[packed=true];
}

message GetBadgesResponse {
    optional  string  requestId  = 1;
    repeated  Badge  badgesArray  = 2;
}

message GetBoostsRequest {
    optional  SCSCORERequestMetadata  metadata  = 1;
    optional  int32  requestType  = 2;
}

message GetBoostsResponse {
    optional  BoosterProfile  myBoost  = 1;
    repeated  BoosterProfile  friendBoostsArray  = 2;
}

message GetCameraHintsRequest {
}

message GetCameraHintsResponse {
    repeated  CameraHintContent  cameraHintsArray  = 1;
}

message GetCertsRequest {
    optional  string  accountId  = 1;
}

message GetCertsResponse {
    repeated  string  publicCerts  = 1;
}

message GetChatFeaturedStoriesRequest {
    repeated  bytes  conversationIdsArray  = 1;
}

message GetChatFeaturedStoriesResponse {
    repeated  MemoriesFeaturedStory  featuredStoriesArray  = 1;
}

message GetCheckoutRequest {
    optional  bytes  checkoutId  = 1;
}

message GetCheckoutResponse {
    optional  Checkout  checkout  = 1;
    optional  CommerceApiServiceError  error  = 2;
    optional  string  requestId  = 3;
}

message GetCommercePageRequest {
    optional  int32  pageType  = 1;
    optional  CommercePageContext  commercePageContext  = 2;
    optional  DeviceContext  deviceContext  = 3;
}

message GetCommercePageResponse {
    optional  string  requestId  = 1;
    optional  ErrorInfo  error  = 2;
    optional  CommercePage  commercePage  = 3;
}

message GetCustomStoryGroupRequest {
    optional  SCSCORERequestMetadata  requestMetadata  = 1;
    optional  SCSCOREUUID  groupId  = 2;
    optional  bool  excludeBlockedMembers  = 3;
}

message GetCustomStoryGroupResponse {
    optional  GroupMetadata  groupMetadata  = 1;
}

message GetEngagementDataRequest {
    repeated  string  snapIdsArray  = 1;
}

message GetEngagementDataResponse {
    repeated  EngagementData  engagementDataListArray  = 1;
}

message GetEntriesRequest {
    repeated  string  entryIdsArray  = 1;
}

message GetEntriesResponse {
    repeated  MemoriesEntry  entriesArray  = 1;
}

message GetItemDetailPageRequest {
    optional  ShowcaseContext  showcaseContext  = 1;
    optional  DeviceContext  deviceContext  = 2;
    optional  uint64  snapItemId  = 5;
}

message GetItemDetailPageResponse {
    optional  string  requestId  = 1;
    optional  ErrorInfo  error  = 2;
    optional  GetItemDetailPageResponse_DetailsPage  detailsPage  = 3;
}

message GetItemDetailPageResponse_CallToAction {
    optional  Weblink  webLink  = 1;
    optional  NativeCheckoutAction  nativeCheckout  = 2;
    optional  IosDeeplink  ios  = 3;
    optional  AndroidDeeplink  android  = 4;
}

message GetItemDetailPageResponse_DetailsPage {
    optional  ShowcaseItemMetadata  item  = 1;
    repeated  ItemDetailPageWidget  widgetsArray  = 2;
    optional  GetItemDetailPageResponse_CallToAction  callToAction  = 3;
    optional  string  pageTitle  = 4;
}

message GetItemRecommendationsRequest {
    optional  ShowcaseContext  showcaseContext  = 1;
    optional  DeviceContext  deviceContext  = 2;
    optional  ItemRecommendationWidgetQueryContext  recommendationQueryContext  = 3;
    optional  int32  limit  = 4;
    optional  bytes  paginationCursor  = 5;
}

message GetItemRecommendationsResponse {
    optional  string  requestId  = 1;
    optional  ErrorInfo  error  = 2;
    optional  GetItemRecommendationsResponse_Recommendation  recommendations  = 3;
}

message GetItemRecommendationsResponse_Recommendation {
    repeated  ShowcaseItemMetadata  itemsArray  = 1;
    optional  bytes  paginationCursor  = 2;
    optional  string  moduleTrackingId  = 3;
}

message GetItemVariantDataRequest {
    optional  DeviceContext  deviceContext  = 1;
    optional  bytes  variantDimensionContext  = 2;
}

message GetItemVariantDataResponse {
    optional  string  requestId  = 1;
    optional  ErrorInfo  error  = 2;
    optional  GetItemVariantDataResponse_ItemVariantData  itemVariantData  = 3;
}

message GetItemVariantDataResponse_ItemVariantData {
    repeated  ItemVariantDimensionData  itemVariantDimensionDataArray  = 1;
    repeated  ItemVariant  itemVariantsArray  = 2;
}

message GetItemsRequest {
    optional  bytes  productSetId  = 1;
    optional  int32  limit  = 2;
    optional  string  paginationCursor  = 3;
    optional  bytes  adId  = 4;
    optional  StoreContext  context  = 5;
}

message GetItemsResponse {
    optional  string  requestId  = 1;
    repeated  ShowcaseItem  itemsArray  = 2;
    optional  string  paginationCursor  = 3;
    optional  ErrorInfo  errorInfo  = 4;
}

message GetLensPacksRequest {
    optional  string  portfolioId  = 1;
}

message GetLensPacksResponse {
    repeated  LensPack  lensPacksArray  = 1;
}

message GetLinkDataRequest {
    optional  string  linkId  = 1;
}

message GetLinkDataResponse {
    optional  ErrorResponse  errorResponse  = 1;
    optional  string  linkId  = 2;
    optional  int32  feature  = 3;
    optional  string  creatorUserId  = 4;
    optional  MediaLinkPayload  mediaLinkPayload  = 5;
}

message GetLocationHistoryMetaDataRequest {
    optional  string  userId  = 1;
    optional  bool  includeHomeAndWork  = 2;
    optional  bool  includeWeeklyTopLocations  = 3;
    optional  bool  includeDailyTopLocations  = 4;
    optional  bool  includeVisitations  = 5;
}

message GetLocationHistoryMetaDataResponse {
    optional  LocationHistoryMetaData  userData  = 1;
}

message GetMapStoryElementRequest {
    optional  string  snapId  = 1;
}

message GetMapStoryElementResponse {
    optional  string  snapId  = 1;
    optional  int64  timestamp  = 2;
    optional  int64  timeLeft  = 3;
    optional  string  captionText  = 4;
    optional  SCContextContextHint  contextHint  = 5;
    optional  string  venueId  = 6;
    optional  string  lensId  = 7;
    optional  bool  isZipped  = 8;
    optional  string  mediaURL  = 9;
    optional  string  mediaId  = 10;
    optional  string  mediaIv  = 11;
    optional  string  mediaKey  = 12;
    optional  int32  mediaType  = 13;
    optional  string  attachmentURL  = 14;
    optional  SASAudioStitch  audioStitch  = 15;
    optional  double  lat  = 16;
    optional  double  lng  = 17;
    optional  double  zoom  = 18;
    optional  string  displayText  = 19;
    optional  int32  status  = 20;
    optional  bool  isInfiniteDuration  = 21;
    optional  string  thumbnailIv  = 22;
    optional  string  thumbnailURL  = 23;
    optional  int64  captureTimestamp  = 24;
    optional  double  timeLength  = 25;
    optional  string  clientId  = 26;
    optional  string  unlockablesSnapInfo  = 27;
}

message GetMyStoresRequest {
    optional  SCCOREUUID  userId  = 1;
}

message GetMyStoresResponse {
    optional  GetMyStoresResponse_StoreList  storeList  = 1;
    optional  CommerceApiServiceError  error  = 2;
    optional  string  requestId  = 3;
}

message GetMyStoresResponse_StoreList {
    repeated  StoreInfo  storeInfoArray  = 1;
}

message GetOneTapLoginTokensRequest {
}

message GetOneTapLoginTokensResponse {
    repeated  OneTapLoginTokenDescriptor  tokensArray  = 1;
}

message GetOrderHistoryRequest {
    optional  SCCOREUUID  userId  = 1;
    optional  uint32  limit  = 2;
    optional  uint32  offset  = 3;
    optional  int32  sortOrder  = 4;
}

message GetOrderHistoryResponse {
    optional  GetOrderHistoryResponse_OrderHistory  orderHistory  = 1;
    optional  CommerceApiServiceError  error  = 2;
    optional  string  requestId  = 3;
}

message GetOrderHistoryResponse_OrderHistory {
    repeated  Order  ordersArray  = 1;
    optional  bytes  paginationCursor  = 2;
}

message GetOrderHistoryResponse_OrderHistoryInternalPaginationCursor {
    optional  uint32  offset  = 1;
}

message GetPaymentMethodsRequest {
    optional  string  userId  = 1;
}

message GetPaymentMethodsResponse {
    repeated  PaymentMethod  paymentMethodsArray  = 1;
}

message GetPremiumContentStatsRequest {
    optional  SCSCORERequestMetadata  metadata  = 1;
    repeated  PremiumContentId  idsArray  = 2;
}

message GetPremiumContentStatsResponse {
    optional  string  requestId  = 1;
    repeated  PremiumContentStats  contentStatsListArray  = 2;
}

message GetPremiumUserRecentViewHistoryRequest {
    optional  SCSCORERequestMetadata  metadata  = 1;
    optional  SCSCOREUUID  userId  = 2;
    optional  int32  maxStoryPerPublisher  = 3;
    optional  int64  afterTimestampMs  = 4;
    optional  int32  contentType  = 5;
    repeated  int32  contentTypeListArray  = 6[packed=true];
}

message GetPremiumUserRecentViewHistoryResponse {
    optional  string  requestId  = 1;
    optional  int32  contentType  = 2;
    optional  PublisherRecentWatchHistoryList  publisherHistory  = 3;
    optional  StoryRecentWatchHistoryList  storyHistory  = 4;
    repeated  RecentWatchHistoryList  historyListArray  = 5;
}

message GetPremiumUserViewHistoryRequest {
    optional  SCSCORERequestMetadata  metadata  = 1;
    optional  SCSCOREUUID  userId  = 2;
    repeated  PremiumContentId  idsArray  = 3;
}

message GetPremiumUserViewHistoryResponse {
    optional  string  requestId  = 1;
    repeated  PremiumContentWatchHistory  readReceiptsArray  = 2;
}

message GetProductInfoRequest {
    optional  bytes  productId  = 1;
    optional  uint32  productImageSizeList  = 2;
}

message GetProductInfoResponse {
    optional  ProductInfo  productInfo  = 1;
    optional  CommerceApiServiceError  error  = 2;
    optional  string  requestId  = 3;
}

message GetRecentFavoritesRequest {
    optional  ItemFavoritingDeviceContext  deviceContext  = 1;
    optional  GPBTimestamp  startTimestamp  = 2;
    optional  uint32  pageSize  = 3;
    optional  bytes  nextSequenceKey  = 4;
}

message GetRecentFavoritesResponse {
    repeated  FavoriteItem  favoritedItemsArray  = 1;
    optional  bytes  nextSequenceKey  = 2;
}

message GetRepliesRequest {
    optional  SCSCORERequestMetadata  metadata  = 1;
    optional  string  snapId  = 2;
    optional  SCSCOREUUID  replyViewerUserId  = 3;
    optional  SCSCOREUUID  lastReplyId  = 4;
    optional  int32  approvalState  = 5;
    optional  bytes  paginationToken  = 6;
    optional  bytes  paginationCursor  = 7;
}

message GetRepliesResponse {
    optional  string  requestId  = 1;
    repeated  Reply  repliesListArray  = 2;
    optional  bytes  paginationToken  = 3;
    optional  bytes  paginationCursor  = 4;
}

message GetRouteRequest {
    optional  Options  options  = 1;
}

message GetRouteResponse {
    optional  Directions  directions  = 3;
    optional  Info  info  = 20;
}

message GetShowcaseRequest {
    optional  ShowcaseContext  showcaseContext  = 1;
    optional  UserContext  userContext  = 2;
    optional  int32  limit  = 3;
    optional  bytes  paginationCursor  = 4;
    optional  DeviceContext  deviceContext  = 5;
    optional  FilterContext  filterContext  = 6;
}

message GetShowcaseResponse {
    optional  string  requestId  = 1;
    optional  ErrorInfo  error  = 2;
    optional  GetShowcaseResponse_ShowcaseData  data_p  = 3;
}

message GetShowcaseResponse_ShowcaseData {
    repeated  ShowcaseItemMetadata  itemsArray  = 1;
    optional  bytes  paginationCursor  = 2;
    optional  string  moduleTrackingId  = 3;
}

message GetSingleOrderRequest {
    optional  bytes  orderId  = 1;
    optional  SCCOREUUID  userId  = 2;
}

message GetSingleOrderResponse {
    optional  Order  order  = 1;
    optional  CommerceApiServiceError  error  = 2;
    optional  string  requestId  = 3;
}

message GetSizeRecommendationsRequest {
    optional  uint64  snapItemId  = 1;
    optional  DeviceContext  deviceContext  = 2;
    optional  ShowcaseContext  showcaseContext  = 3;
}

message GetSizeRecommendationsResponse {
    optional  string  requestId  = 1;
    optional  ErrorInfo  error  = 2;
    optional  SizeRecommendationResponse  sizeRecommendationResponse  = 3;
}

message GetSnapElementRequest {
    optional  SCSCORERequestMetadata  requestMetadata  = 1;
    optional  string  snapId  = 2;
}

message GetSnapElementResponse {
    optional  SCSSMStorySnap  snap  = 1;
    optional  int32  status  = 2;
    optional  PublisherData  publisherData  = 3;
    optional  int32  storyType  = 4;
    optional  SCSCOREUUID  storyId  = 5;
    optional  int32  customStoryType  = 6;
}

message GetSnapsForUserRequest {
    optional  string  userId  = 1;
    optional  int64  startFromEpochMs  = 3;
    optional  int64  endAtEpochMs  = 4;
    optional  bool  includeTakenDownSnaps  = 5;
    optional  bool  includeDeletedSnaps  = 6;
}

message GetSnapsForUserResponse {
    repeated  GetSnapsForUserResponse_SnapData  snapDataListArray  = 1;
}

message GetSnapsForUserResponse_SnapData {
    optional  string  snapId  = 1;
    optional  bool  isDeleted  = 2;
    optional  bool  isTakenDown  = 3;
}

message GetSpotlightBloomFilterViewsRequest {
    optional  SCSCORERequestMetadata  metadata  = 1;
    repeated  SnapCreationPeriod  creationDateShardArray  = 2;
}

message GetSpotlightBloomFilterViewsResponse {
    optional  string  requestId  = 1;
    repeated  BloomFilter  bloomFiltersArray  = 2;
}

message GetSpotlightStatsRequest {
    optional  SCSCORERequestMetadata  metadata  = 1;
    repeated  string  snapIdsArray  = 2;
}

message GetSpotlightStatsResponse {
    optional  string  requestId  = 1;
    repeated  SpotlightStats  spotlightStatsListArray  = 2;
}

message GetStoreFavoritesRequest {
    optional  string  userId  = 1;
    optional  string  storeId  = 2;
    optional  ItemFavoritingDeviceContext  deviceContext  = 3;
    optional  uint32  pageSize  = 4;
    optional  bytes  paginationToken  = 5;
}

message GetStoreFavoritesResponse {
    optional  bytes  paginationToken  = 1;
    repeated  FavoriteItem  favoritedItemsArray  = 2;
}

message GetStoreInfoRequest {
    optional  bytes  storeId  = 1;
}

message GetStoreInfoResponse {
    optional  StoreInfo  storeInfo  = 1;
    optional  CommerceApiServiceError  error  = 2;
    optional  string  requestId  = 3;
}

message GetStoreMetadataRequest {
    optional  string  storeId  = 1;
}

message GetStoreMetadataResponse {
    optional  string  requestId  = 1;
    optional  ErrorInfo  error  = 2;
    optional  ShowcaseStoreMetadata  storeMetadata  = 3;
}

message GetStoreProductsRequest {
    optional  bytes  storeId  = 1;
    optional  bytes  categoryId  = 2;
    optional  string  queryString  = 3;
    optional  uint32  limit  = 4;
    optional  uint32  offset  = 5;
    optional  uint32  productImageSizeList  = 6;
    optional  int32  sortOrder  = 7;
}

message GetStoreProductsResponse {
    optional  GetStoreProductsResponse_ProductList  productList  = 1;
    optional  CommerceApiServiceError  error  = 2;
    optional  string  requestId  = 3;
}

message GetStoreProductsResponse_ProductList {
    repeated  ProductInfo  productsArray  = 1;
}

message GetStoresForUserRequest {
}

message GetStoresForUserResponse {
    optional  string  requestId  = 1;
    optional  ErrorInfo  error  = 2;
    optional  GetStoresForUserResponse_StoreData  data_p  = 3;
}

message GetStoresForUserResponse_StoreData {
    repeated  ShowcaseStoreMetadata  storesArray  = 1;
}

message GetStoryDraftingSnapsRequest {
    optional  SCSCORERequestMetadata  requestMetadata  = 1;
    optional  StoryQuery  query  = 2;
    optional  int32  storyStatusFilter  = 3;
    optional  Owner  storyOwner  = 4;
}

message GetStoryDraftingSnapsResponse {
    repeated  StoryDraftingSnap  snapsArray  = 1;
    optional  QueryCursor  queryCursor  = 2;
}

message GetStoryElementsRequest {
    repeated  string  snapIdsArray  = 1;
    repeated  GetStoryElementsRequest_StorySnapId  storySnapIdsArray  = 2;
    optional  string  locale  = 3;
    optional  bool  includeTakedowns  = 4;
    optional  string  userId  = 5;
    optional  bool  includeEngagementData  = 6;
    optional  bool  useStms  = 7;
    optional  bool  isLegacyPlayback  = 8;
}

message GetStoryElementsRequest_StorySnapId {
    optional  string  snapId  = 1;
    optional  string  storyId  = 2;
}

message GetStoryElementsResponse {
    repeated  SCStoryElement  elementsArray  = 1;
    repeated  BundleInfo  bundleInfoListArray  = 2;
}

message GetSurveyDataRequest {
}

message GetSurveyDataResponse {
    optional  SurveyResponse  data_p  = 1;
    optional  bool  isOptedIn  = 2;
}

message GetTfaSettingsRequest {
}

message GetTfaSettingsResponse {
    optional  bool  smsEnabled  = 1;
    optional  bool  otpEnabled  = 2;
}

message GetTfaVerifiedDevicesRequest {
}

message GetTfaVerifiedDevicesResponse {
    repeated  TfaVerifiedDevice  verifiedDevicesArray  = 1;
}

message GetTopicStickersRequest {
    repeated  TopicStickerId  idsArray  = 1;
    optional  bool  consistentRead  = 2;
}

message GetTopicStickersResponse {
    repeated  VendingTopicSticker  topicStickersArray  = 1;
}

message GetUserRepliesRequest {
    optional  SCSCORERequestMetadata  metadata  = 1;
    optional  SCSCOREUUID  replyViewerUserId  = 2;
    optional  string  snapId  = 3;
    optional  int32  approvalState  = 4;
    optional  bytes  paginationCursor  = 5;
}

message GetUserRepliesResponse {
    optional  string  requestId  = 1;
    repeated  Reply  repliesListArray  = 2;
    optional  bytes  paginationCursor  = 3;
}

message GetUserSpoofingInfoRequest {
    optional  SCCOREUUID  userId  = 1;
    optional  float  lat  = 2;
    optional  float  lng  = 3;
    optional  int64  timestampMs  = 4;
    optional  float  radiusKm  = 5;
    optional  int32  recencyHrs  = 6;
    optional  int64  startTimeMs  = 7;
    optional  int32  minVisitDurationHrs  = 8;
    optional  int32  minTransitionTimeHrs  = 9;
    optional  bool  rejectNoHistory  = 10;
}

message GetUserSpoofingInfoResponse {
    optional  float  spoofConfidence  = 1;
    repeated  int32  reasonsArray  = 2[packed=true];
}

message GetWatchedStateForSeasonWithUserIdRequest {
    optional  string  userId  = 1;
    optional  IMPGetWatchedStateForSeasonRequest  request  = 2;
}

message GroupMembership {
    optional  uint64  groupVersion  = 1;
    optional  int32  membership  = 2;
    optional  bool  isBlocked  = 3;
    optional  int32  customStoryType  = 4;
    optional  bool  autoSaveToMemories  = 5;
    optional  FeatureConfig  featureConfig  = 6;
}

message GroupMetadata {
    optional  SCSCOREUUID  groupId  = 1;
    optional  int32  customStoryType  = 2;
    optional  string  displayName  = 3;
    optional  bool  autoSaveToMemories  = 4;
    optional  SCSCOREUUID  ownerId  = 5;
    repeated  UserMembership  membersArray  = 6;
    optional  bool  isDeleted  = 7;
    optional  uint64  groupVersion  = 8;
    optional  int64  createdTsMs  = 9;
    optional  int64  updateTsMs  = 10;
    optional  bool  isUserDataSet  = 11;
    optional  FeatureConfig  featureConfig  = 12;
    optional  CustomStoryProfileMetadata  customStoryMetadata  = 13;
    optional  PrivateStoryProfileMetadata  privateStoryMetadata  = 14;
    optional  SharedStoryProfileMetadata  sharedStoryMetadata  = 15;
    repeated  SCSCOREUUID  bannedMembersArray  = 16;
    optional  CommunityProfileMetadata  communityMetadata  = 17;
    repeated  PendingUserMembership  pendingUserMembershipsArray  = 18;
}

message GtqServeFeaturedLensesRequest {
    repeated  GtqServeFeaturedLensesRequest_GtqServeFeaturedLensesNamespaceRequest  namespacesArray  = 1;
    optional  SCULRequestInfo  requestInfo  = 2;
    optional  bytes  encryptedUnlockablesDirectPayload  = 3;
    optional  string  snapadsId  = 4;
    repeated  GtqServeFeaturedLensesRequest_CachedUnlockableItem  cachedUnlockableIdsArray  = 5;
    optional  GtqServeFeaturedLensesRequest_NetworkProfile  networkProfile  = 6;
    repeated  int32  lensFeaturesArray  = 7[packed=true];
    optional  bytes  streamToken  = 8;
    optional  GtqServeFeaturedLensesRequest_SponsoredLensRequestInfo  sponsoredLensRequestInfo  = 9;
}

message GtqServeFeaturedLensesRequest_CachedUnlockableItem {
    optional  int64  cachedUnlockableIds  = 1;
}

message GtqServeFeaturedLensesRequest_GtqServeFeaturedLensesNamespaceRequest {
    optional  string  namespaceId  = 1;
    repeated  bytes  checksums  = 3;
    optional  bytes  namespaceStreamToken  = 4;
}

message GtqServeFeaturedLensesRequest_NetworkProfile {
    optional  int32  reachability  = 1;
    optional  int32  downloadBandwidthClass  = 2;
    optional  int64  downloadBandwidthEstimation  = 3;
}

message GtqServeFeaturedLensesRequest_SponsoredLensRequestInfo {
    optional  SCAdsAdRequest  adRequest  = 1;
    optional  SCULSyncInfo  syncInfo  = 2;
    optional  uint32  snapScore  = 3;
    optional  bool  enableSponsoredLens  = 10;
}

message HNCategory {
    optional  HNCategoryID  id_p  = 1;
    optional  string  color  = 2;
    repeated  ContentTag  tagsArray  = 3;
}

message HNCategoryID {
    optional  string  value  = 1;
}

message HRMPBActionPointer {
    optional  int32  id_p  = 1;
    optional  sint32  x  = 2;
    optional  sint32  y  = 3;
}

message HRMPBAdbPublicKeySetup {
    optional  string  key  = 1;
}

message HRMPBAlsCalibration {
    repeated  float  dataArray  = 1;
}

message HRMPBAlsReading {
    required  float  lux  = 1;
    optional  float  lux1  = 2;
    optional  float  rawLux  = 3;
    optional  float  rawLux1  = 4;
}

message HRMPBAmbaData {
    optional  int32  storagePercentage  = 1;
}

message HRMPBAmbaError {
    optional  HRMPBAmbaError_AmbaAssertError  ambaAssert  = 1;
    optional  HRMPBAmbaError_AmbaCpuException  ambaException  = 2;
    optional  HRMPBLinuxCrash  linuxCrash  = 3;
}

message HRMPBAmbaError_AmbaAssertError {
    optional  string  file  = 1;
    optional  string  function  = 2;
    optional  uint32  lineNumber  = 3;
    optional  string  backtrace  = 4;
}

message HRMPBAmbaError_AmbaCpuException {
    optional  uint32  lr  = 1;
    optional  uint32  pc  = 2;
    optional  uint32  sp  = 3;
    optional  string  backtrace  = 4;
}

message HRMPBAncsNotificationRule {
    required  uint32  id_p  = 1;
    optional  int32  notifCategory  = 2;
    optional  string  appIdentifierPattern  = 3;
    optional  string  titlePattern  = 4;
    optional  string  subtitlePattern  = 5;
    optional  string  messageContentsPattern  = 6;
    optional  HRMPBContextNotifAnim  notificationAnim  = 7;
}

message HRMPBAndroidTombstone {
    optional  string  processName  = 1;
    optional  string  threadName  = 2;
    optional  string  backtrace  = 3;
    optional  string  log  = 4;
}

message HRMPBAnrLog {
    optional  string  processName  = 1;
    optional  string  backtrace  = 2;
    optional  string  loadavg  = 3;
}

message HRMPBAppCrashReport {
    optional  string  filename  = 1;
    optional  uint32  lineNumber  = 2;
    optional  string  crashDescription  = 3;
    optional  uint32  errorCode  = 4;
}

message HRMPBAsset {
    optional  string  id_p  = 1;
    optional  int32  type  = 2;
}

message HRMPBAvailableLensesGetRequest {
    optional  bool  excludePublishedLensesNames  = 1;
    optional  bool  excludePublishedLensesIconUris  = 2;
}

message HRMPBAvailableLensesGetResponse {
    repeated  HRMPBLens  availableLensesArray  = 1;
    optional  string  nextPageToken  = 2;
}

message HRMPBAvailableWifiNetworks {
    repeated  HRMPBWifiScanResult  networksArray  = 1;
}

message HRMPBBackupStatusData {
    optional  string  contentId  = 1;
    optional  float  backupProgress  = 2;
    optional  uint32  thumbnailSize  = 3;
    optional  string  thumbnailId  = 4;
}

message HRMPBBackupStatusEvent {
    optional  int32  backupStatus  = 1;
    optional  string  contentId  = 2;
    optional  float  backupProgress  = 3;
    optional  uint32  thumbnailSize  = 4;
}

message HRMPBBackupStatusResponse {
    repeated  HRMPBBackupStatusData  backupStatusDataArray  = 1;
}

message HRMPBBattLearningParams {
    optional  uint32  rcomp0  = 1;
    optional  uint32  tempCo  = 2;
    optional  uint32  fullCapRep  = 3;
    optional  uint32  cycles  = 4;
    optional  uint32  fullCapNom  = 5;
}

message HRMPBBatteryPreservationModeRequest {
    optional  int32  mode  = 1;
}

message HRMPBBatteryPreservationModeResponse {
}

message HRMPBBatteryStatusRequest {
    required  int32  requestType  = 1;
    optional  int32  dataType  = 2;
    optional  int32  side  = 3;
}

message HRMPBBatteryStatusResponse {
    optional  int32  soc  = 1;
    optional  int32  voltage  = 2;
    optional  int32  temp  = 3;
    optional  int32  current  = 4;
    optional  int32  socStatus  = 5;
    optional  int32  hardwareStatus  = 6;
    optional  int32  lSoc  = 7;
    optional  int32  rSoc  = 8;
    optional  int32  lVoltage  = 9;
    optional  int32  rVoltage  = 10;
    optional  int32  lTemp  = 11;
    optional  int32  rTemp  = 12;
    optional  int32  lCurrent  = 13;
    optional  int32  rCurrent  = 14;
    optional  int32  lFullcap  = 15;
    optional  int32  rFullcap  = 16;
    optional  int32  lNtcStatus  = 17;
    optional  int32  rNtcStatus  = 18;
    optional  int32  lCurrentAvg  = 19;
    optional  int32  rCurrentAvg  = 20;
    optional  int32  lVoltageAvg  = 21;
    optional  int32  rVoltageAvg  = 22;
    optional  int32  lCyclesPercent  = 23;
    optional  int32  rCyclesPercent  = 24;
    optional  int32  lAgePercent  = 25;
    optional  int32  rAgePercent  = 26;
    optional  int32  chargerInputPowerMw  = 27;
    optional  int32  vbusVoltageMv  = 28;
    optional  int32  vbusCurrentMa  = 29;
    optional  int32  lInternalResistance  = 30;
    optional  int32  rInternalResistance  = 31;
    optional  int32  batteryPreservationModeStatus  = 32;
    optional  int32  lBatteryType  = 33;
    optional  int32  rBatteryType  = 34;
    optional  bool  isBpmEnabled  = 35;
    optional  int32  systemPowerConsumptionMw  = 36;
    optional  int32  lCurrentMaxMA  = 37;
    optional  int32  rCurrentMaxMA  = 38;
    optional  int32  lCurrentMinMA  = 39;
    optional  int32  rCurrentMinMA  = 40;
    optional  uint64  lDurationMsMinMax  = 41;
    optional  uint64  rDurationMsMinMax  = 42;
    optional  float  lBatteryIdVoltage  = 43;
    optional  float  rBatteryIdVoltage  = 44;
}

message HRMPBBleCentralPairRequest {
    optional  bytes  uuid  = 1;
    optional  bytes  advData  = 2;
    optional  bytes  macAddress  = 3;
}

message HRMPBBleCentralPairResponse {
    optional  int32  status  = 1;
    optional  bytes  sessionToken  = 2;
}

message HRMPBBleDisconnectReason {
    optional  uint32  nrfBleStatusCode  = 1;
}

message HRMPBBleName {
    required  string  name  = 1;
}

message HRMPBBoardIdResponse {
    required  uint32  boardId  = 1;
    required  uint32  hardwareMajorVersion  = 2;
    optional  uint32  hardwareMinorVersion  = 3;
}

message HRMPBBoolMessage {
    required  bool  boolField  = 1;
}

message HRMPBBoolValue {
    optional  bool  value  = 1;
}

message HRMPBBootCompletedEvent {
}

message HRMPBBrightnessLevelChangeEvent {
    optional  int32  brightnessLevel  = 1;
    optional  bool  isAutoModeOn  = 2;
}

message HRMPBBrightnessStateChangeRequestEvent {
}

message HRMPBButtonEvent {
    required  int32  side  = 1;
    required  int32  eventType  = 2;
    optional  int32  durationMs  = 3;
}

message HRMPBButtonHoldEvent {
    required  uint32  holdMs  = 1;
}

message HRMPBCalibInfo {
    optional  HRMPBAlsCalibration  alsCalib  = 1;
    optional  HRMPBProxCalibration  proxCalib  = 2;
    optional  HRMPBImuCalibrationOffsets  imuCalib  = 3;
    optional  HRMPBDisplayCalibration  projCalib  = 4;
    optional  HRMPBStereoCalibration  stereoCalib  = 5;
}

message HRMPBCalibration {
    repeated  HRMPBSlamCameraCalibration  camerasArray  = 1;
    optional  HRMPBSE3D  eyeCenterFromImuTransform  = 2;
    optional  HRMPBSE3D  rectifiedCameraCenterFromImuTransform  = 3;
    optional  HRMPBSE3D  eyeCenterFromRigTransform  = 4;
    optional  HRMPBSE3D  rectifiedCameraCenterFromRigTransform  = 5;
}

message HRMPBCameraCalibration {
    optional  float  rectiValid  = 1;
    optional  float  cxPixsDiff  = 2;
    optional  float  cyPixsDiff  = 3;
    optional  float  zErrRot  = 4;
    optional  float  zErrVar  = 5;
    optional  float  minDistortionXPixsDiff  = 6;
    optional  float  minDistortionYPixsDiff  = 7;
}

message HRMPBCameraIntrinsics {
    optional  HRMPBVec2I  resolution  = 1;
    optional  HRMPBVec2D  focalLength  = 2;
    optional  HRMPBVec2D  principalPoint  = 3;
    optional  string  distortionModel  = 4;
    repeated  double  distortionParametersArray  = 5[packed=true];
}

message HRMPBCameraSensorData {
    optional  uint32  agc  = 1;
    optional  uint32  dgc  = 2;
    optional  uint32  startEvIndex  = 3;
    optional  uint32  endEvIndex  = 4;
    optional  int32  startTemperature  = 5;
    optional  int32  endTemperature  = 6;
    optional  uint32  shutterTimeUs  = 7;
    optional  uint32  alsValue  = 8;
    optional  uint32  alsEvLutIndex  = 9;
    optional  int32  startTemperatureVin1  = 10;
    optional  int32  endTemperatureVin1  = 11;
}

message HRMPBCameraSessionEvent {
    optional  int32  status  = 1;
    optional  uint32  cameraMode  = 2;
}

message HRMPBCancelBackupParams {
    repeated  string  uuidArray  = 1;
}

message HRMPBCancelBackupResult {
    optional  bool  result  = 1;
}

message HRMPBChargerEvent {
    optional  int32  chargerEvent  = 1;
}

message HRMPBChargerStateResponse {
    required  bool  isChargerConnected  = 1;
    required  bool  isFullyCharged  = 2;
    optional  int32  batteryTemperatureLeft  = 3;
    optional  int32  chargingLimit  = 4;
    optional  int32  chargingCurrent  = 5;
    optional  int32  batteryTemperatureRight  = 6;
    optional  int32  pdo  = 7;
    optional  int32  dpdmStatus  = 8;
    optional  int32  ccStatus  = 9;
    optional  uint32  inputCurrentL  = 10;
    optional  uint32  inputCurrentR  = 11;
    optional  uint32  inputRegulationVoltageL  = 12;
    optional  uint32  inputRegulationVoltageR  = 13;
    optional  uint32  chargerFaultL  = 14;
    optional  uint32  chargerFaultR  = 15;
    optional  uint32  vbusStatusL  = 16;
    optional  uint32  vbusStatusR  = 17;
    optional  uint32  chargingLimitL  = 18;
    optional  uint32  chargingLimitR  = 19;
    optional  bool  powerGoodStatus  = 20;
    optional  int32  usbBc12Status  = 21;
    optional  uint32  subregulatorFault  = 22;
    optional  uint32  subregulatorInputCurrentLimit  = 23;
    optional  uint32  rdoVoltage  = 24;
    optional  uint32  rdoCurrent  = 25;
    optional  uint32  subregulatorChargeVoltage  = 26;
    optional  uint32  vbusVoltage  = 27;
    optional  uint32  ccStatusRegister  = 28;
    optional  bool  isChargingCase  = 29;
    optional  bool  isChargerMocked  = 30;
}

message HRMPBClientID {
    required  string  clientId  = 1;
    required  bool  requestAuthzCode  = 2;
    repeated  string  scopeArray  = 3;
}

message HRMPBClientLocation {
    required  int32  status  = 1;
    optional  string  debugMessage  = 2;
    optional  HRMPBLocationData  location  = 3;
}

message HRMPBContextNotifAnim {
    optional  uint32  solidDuration  = 1;
    optional  uint32  blinkCount  = 2;
    optional  uint32  blinkDurationOnInMs  = 3;
    optional  uint32  blinkDurationOffInMs  = 4;
    optional  uint32  color  = 5;
    optional  int32  ledSideEnabled  = 6;
}

message HRMPBCoulombCtrlData {
    optional  int32  coulombCtrlTemperature  = 1;
}

message HRMPBCrashReport {
    optional  string  logPayload  = 1;
    optional  HRMPBAppCrashReport  appCrashReport  = 2;
    optional  HRMPBSoftDeviceCrashReport  softDeviceCrashReport  = 3;
    optional  HRMPBHardFaultReport  hardFaultReport  = 4;
    optional  HRMPBWatchdogCrashReport  watchdogCrashReport  = 5;
    optional  HRMPBAmbaError  ambaError  = 6;
    optional  HRMPBSystemCounters  systemCounters  = 7;
    optional  HRMPBAndroidTombstone  androidTombstone  = 8;
    optional  HRMPBKernelPanicLog  kernelPanicLog  = 9;
    optional  HRMPBAnrLog  anrLog  = 10;
}

message HRMPBDisplayCalibration {
    optional  HRMPBProjectorCalibration  leftProjector  = 1;
    optional  HRMPBProjectorCalibration  rightProjector  = 2;
}

message HRMPBDisplayToggleRequest {
}

message HRMPBDisplayToggleResponse {
}

message HRMPBDosaAudioEvent {
    optional  bytes  data_p  = 1;
}

message HRMPBDroppedFramesData {
    optional  int32  vin0Cnt  = 1;
    optional  int32  vin1Cnt  = 2;
}

message HRMPBEmpty {
}

message HRMPBEncryptionNonceExchange {
    optional  bytes  nonce  = 1;
    optional  int32  channelId  = 2;
}

message HRMPBEncryptionSetupNonceExchangeMessage {
    required  bytes  nonce  = 1;
}

message HRMPBErrorReport {
    required  int32  errorType  = 1;
    optional  HRMPBTemperatureResponse  temperatures  = 2;
    optional  uint32  soc  = 3;
    optional  uint32  voltage  = 4;
    optional  uint32  storage  = 5;
    optional  HRMPBCrashReport  crashReport  = 6;
}

message HRMPBEventRegisterListenerRequest {
    repeated  uint32  eventTypesArray  = 1[packed=true];
}

message HRMPBFeatureActionRequest {
    optional  string  featureId  = 1;
    optional  HRMPBFeatureActionSendMedia  sendMedia  = 2;
}

message HRMPBFeatureActionResponse {
    optional  string  featureId  = 1;
    optional  bool  success  = 2;
}

message HRMPBFeatureActionSendMedia {
    repeated  HRMPBRemoteMedia  mediaArray  = 1;
}

message HRMPBFideliusKeys {
    required  bytes  inBeta  = 1;
    required  bytes  outBeta  = 2;
    required  int32  version  = 3;
    required  bytes  iwek  = 4;
}

message HRMPBForgetNetworkRequest {
    optional  string  ssid  = 1;
}

message HRMPBForgetNetworkResponse {
    optional  bool  isSuccessful  = 1;
}

message HRMPBFrameColorMessage {
    required  int32  frameColor  = 1;
    optional  uint32  frameColorEnumVal  = 2;
}

message HRMPBFwVersion {
    optional  string  gitCommit  = 1;
    optional  string  gitTag  = 2;
    optional  string  gitBranch  = 3;
}

message HRMPBGenericAssetsMetadata {
    optional  string  fileIdentifier  = 1;
    optional  HRMPBAsset  asset  = 2;
    optional  uint32  size  = 3;
}

message HRMPBGetAutoBrightnessRequest {
}

message HRMPBGetAutoBrightnessResponse {
    optional  bool  isAutoBrightnessEnabled  = 1;
}

message HRMPBGetBatteryPreservationModeResponse {
    optional  int32  mode  = 1;
}

message HRMPBGetFileRequest {
    optional  string  fileIdentifier  = 1;
    optional  HRMPBRange  range  = 2;
}

message HRMPBGetFileResponse {
    optional  string  fileIdentifier  = 1;
    optional  HRMPBRange  requestedRange  = 3;
    optional  HRMPBRange  actualRange  = 4;
    optional  bytes  data_p  = 5;
}

message HRMPBGetQcomStateRequest {
    optional  int32  socId  = 1;
}

message HRMPBGetQcomStateResponse {
    optional  int32  socId  = 1;
    optional  int32  state  = 2;
}

message HRMPBGetSettingsForCategoryRequest {
    required  int32  category  = 1;
}

message HRMPBGetSettingsForCategoryResponse {
    repeated  HRMPBSetting  settingArray  = 1;
}

message HRMPBGetSystemSoundRequest {
}

message HRMPBGetSystemSoundResponse {
    optional  bool  isSystemSoundEnabled  = 1;
    optional  bool  isSystemSoundMuted  = 2;
}

message HRMPBGetUserDeviceSecurityResponse {
    required  int32  code  = 1;
    optional  bool  requirePasscode  = 2;
    optional  int32  lockoutEvent  = 3;
    optional  int32  lockoutTime  = 4;
    optional  bool  phoneProximity  = 5;
    optional  bool  userLockedOut  = 6;
    optional  int32  attemptsLeft  = 7;
    optional  int32  timeUntilUnlock  = 8;
    optional  bool  directBoot  = 9;
    optional  bool  unlocked  = 10;
}

message HRMPBGitResponse {
    required  string  commitSha  = 1;
    required  string  branch  = 2;
    required  string  tag  = 3;
    optional  string  buildConfig  = 4;
    optional  string  bootloaderGitSha  = 5;
    optional  uint32  bootloaderCrc32  = 6;
}

message HRMPBGpsData {
    optional  int32  latitude  = 1;
    optional  int32  longitude  = 2;
    optional  uint64  updateTimeUtc  = 3;
    optional  uint32  horizontalAccuracy  = 4;
}

message HRMPBGpsStatistics {
    optional  bool  gotLocation  = 1;
    optional  uint32  fixTimeMs  = 2;
    optional  uint32  numSv  = 3;
}

message HRMPBHaltRequest {
    optional  bool  rebootSoc  = 1;
    optional  bool  holdAppSocPower  = 2;
}

message HRMPBHardFaultReport {
    optional  uint32  r0  = 1;
    optional  uint32  r1  = 2;
    optional  uint32  r2  = 3;
    optional  uint32  r3  = 4;
    optional  uint32  r12  = 5;
    optional  uint32  lr  = 6;
    optional  uint32  pc  = 7;
    optional  uint32  xpsr  = 8;
}

message HRMPBHermosaDevFeatureSet {
    optional  bool  enableAdb  = 1;
    optional  bool  enableUart  = 2;
    optional  bool  bootloaderUnlock  = 3;
}

message HRMPBHermosaEventPb {
    optional  HRMPBMediaCountEvent  mediaCountEvent  = 6;
    optional  HRMPBWifiStatus  wifiStatusEvent  = 8;
    optional  HRMPBLocationRequestEvent  locationRequestEvent  = 21;
    optional  HRMPBOTACheckResponse  checkOsOtaUpdateResponseEvent  = 23;
    optional  HRMPBOTADownloadAndInstallResponse  downloadInstallOsOtaUpdateResponseEvent  = 24;
    optional  HRMPBChargerEvent  chargerEvent  = 26;
    optional  HRMPBWifiConnectedClientCountChangeEvent  connectedClientCountChangeEvent  = 29;
    optional  HRMPBEmpty  shakeToReportEvent  = 30;
    optional  HRMPBBrightnessLevelChangeEvent  brightnessLevelChangeEvent  = 32;
    optional  HRMPBSpectaclesLockedWaitingForUnlockEvent  spectaclesLockedWaitingForUnlockEvent  = 34;
    optional  HRMPBBackupStatusEvent  backupStatusEvent  = 35;
    optional  HRMPBQcomStateChangeEvent  qcomStateChangeEvent  = 38;
    optional  HRMPBLensLaunchInfo  lensLaunchEvent  = 39;
    optional  HRMPBLockedBootCompletedEvent  lockedBootCompletedEvent  = 40;
    optional  HRMPBUnlockedBootCompletedEvent  unlockedBootCompletedEvent  = 41;
}

message HRMPBHermosaRpcRequest {
    optional  HRMPBBatteryStatusRequest  batteryStatusRequest  = 4;
    optional  HRMPBEmpty  gitRequest  = 6;
    optional  HRMPBEmpty  getTemperatureRequest  = 7;
    optional  HRMPBHaltRequest  haltRequest  = 17;
    optional  HRMPBQcomBootType  qcomRequest  = 47;
    optional  uint32  id_p  = 61;
    optional  HRMPBEmpty  boardIdRequest  = 63;
    optional  HRMPBEmpty  clearBugRequest  = 66;
    optional  HRMPBEmpty  getSerialNumberRequest  = 89;
    optional  HRMPBSpectaclesPushMessage  pushMessageRequest  = 109;
    optional  HRMPBEmpty  wifiGetStateRequest  = 130;
    optional  HRMPBWifiParams  wifiStartRequest  = 131;
    optional  HRMPBEmpty  wifiStopRequest  = 132;
    optional  HRMPBEmpty  chargerStateRequest  = 140;
    optional  HRMPBEmpty  qcomStateRequest  = 145;
    optional  HRMPBEmpty  mediaCountsGetRequest  = 157;
    optional  HRMPBMediaRequest  mediaRequest  = 158;
    optional  HRMPBUserAssociationRequest  oauthSetUserAssociationRequest  = 159;
    optional  HRMPBBleName  setNameRequest  = 164;
    optional  HRMPBEmpty  getFrameColorRequest  = 165;
    optional  HRMPBEmpty  getLocationEnabledRequest  = 166;
    optional  HRMPBBoolMessage  setLocationEnabledRequest  = 167;
    optional  HRMPBRealTimeMessage  setTimeUtcRequest  = 168;
    optional  HRMPBEmpty  getHomeWifiNetworksRequest  = 172;
    optional  HRMPBWifiAPList  setHomeWifiNetworksRequest  = 173;
    optional  HRMPBEventRegisterListenerRequest  eventRegisterListenerRequest  = 176;
    optional  HRMPBEventRegisterListenerRequest  eventUnregisterListenerRequest  = 177;
    optional  HRMPBEmpty  getAudioLevelRequest  = 183;
    optional  int32  setAudioLevelRequest  = 184;
    optional  HRMPBEmpty  getBrightnessLevelRequest  = 185;
    optional  int32  setBrightnessLevelRequest  = 186;
    optional  string  phoneNameSetRequest  = 189;
    optional  HRMPBProxyStartedRequest  proxyStartedRequest  = 190;
    optional  HRMPBEmpty  oauthGetProdClientidRequest  = 191;
    optional  HRMPBEmpty  getWifiStatusRequest  = 192;
    optional  HRMPBEmpty  getAvailableWifiRequest  = 193;
    optional  bool  bootSocIfNecessary  = 202;
    optional  HRMPBShipmodeRequest  shipmodeRequest  = 204;
    optional  HRMPBOTACheckRequest  checkOsOtaUpdateRequest  = 205;
    optional  HRMPBOTADownloadAndInstallRequest  downloadInstallOsOtaUpdateRequest  = 206;
    optional  HRMPBHermosaDevFeatureSet  setDeveloperFeaturesRequest  = 214;
    optional  HRMPBClientLocation  clientLocationProvidingRequest  = 216;
    optional  HRMPBLowPowerModeMessage  setLowPowerModeRequest  = 217;
    optional  HRMPBEmpty  getLowPowerModeRequest  = 218;
    optional  HRMPBEmpty  unpairDeviceRequest  = 221;
    optional  HRMPBEmpty  clearContentRequest  = 222;
    optional  HRMPBEmpty  clearCacheRequest  = 223;
    optional  HRMPBEmpty  performFactoryResetRequest  = 224;
    optional  HRMPBKeyExchangeMessage  setPairingPublicKeyRequest  = 225;
    optional  HRMPBPeerVerificationMessage  setPeerVerificationRequest  = 226;
    optional  HRMPBEmpty  getQuickSaveModeEnabledRequest  = 227;
    optional  HRMPBBoolMessage  setQuickSaveModeEnabledRequest  = 228;
    optional  HRMPBEncryptionSetupNonceExchangeMessage  encryptionSetupNonceRequest  = 230;
    optional  HRMPBEmpty  setPairingCompletionRequest  = 233;
    optional  HRMPBSetUserDeviceSecurityRequest  setUserDeviceSecurityRequest  = 239;
    optional  HRMPBSetUserDevicePasswordRequest  setUserDevicePasswordRequest  = 240;
    optional  HRMPBAdbPublicKeySetup  setAdbKeyRequest  = 242;
    optional  HRMPBSetAutoBrightnessRequest  setAutoBrightnessRequest  = 244;
    optional  HRMPBGetAutoBrightnessRequest  getAutoBrightnessRequest  = 245;
    optional  HRMPBEmpty  getUserDeviceSecurityRequest  = 246;
    optional  HRMPBEncryptionNonceExchange  setChannelEncryptionNonceRequest  = 250;
    optional  HRMPBShakeToReportRequest  setShakeToReportDataRequest  = 251;
    optional  HRMPBVerifyPasscodeRequest  verifyPasscodeRequest  = 254;
    optional  HRMPBPairingSessionIdRequest  setPairingSessionIdRequest  = 255;
    optional  HRMPBProxyNotifyStatusRequest  proxyNotifyStatusRequest  = 257;
    optional  HRMPBEmpty  getOtaAutoUpdateEnabledRequest  = 258;
    optional  HRMPBBoolValue  setOtaAutoUpdateEnabledRequest  = 259;
    optional  HRMPBGetFileRequest  getTransferFileRequest  = 260;
    optional  HRMPBEmpty  getBackupStatusRequest  = 265;
    optional  HRMPBSoundData  playSoundRequest  = 271;
    optional  HRMPBProxyStartManualRequest  proxyStartManualRequest  = 273;
    optional  HRMPBProxyStopManualRequest  proxyStopManualRequest  = 274;
    optional  HRMPBSetSystemSoundRequest  setSystemSoundRequest  = 275;
    optional  HRMPBGetSystemSoundRequest  getSystemSoundRequest  = 276;
    optional  HRMPBEmpty  cancelOtaUpdateRequest  = 277;
    optional  HRMPBValidatePairingRequest  validatePairingRequest  = 283;
    optional  HRMPBLensLaunchInfo  lensLaunchRequest  = 285;
    optional  HRMPBNrfCrashInfoRequest  getNrfCrashInfoRequest  = 286;
    optional  HRMPBLensSyncRequest  syncLensesRequest  = 287;
    optional  HRMPBUserAdditionalInfo  oauthSetUserAdditionalInfoRequest  = 288;
    optional  HRMPBBleCentralPairRequest  bleCentralPairRequest  = 289;
    optional  HRMPBForgetNetworkRequest  forgetNetworkRequest  = 293;
    optional  HRMPBGetSettingsForCategoryRequest  getSettingsForCategoryRequest  = 297;
    optional  HRMPBSetBatchSettingsRequest  setBatchSettingsRequest  = 299;
    optional  HRMPBBatteryPreservationModeRequest  batteryPreservationModeRequest  = 300;
    optional  HRMPBEmpty  getBatteryPreservationModeRequest  = 302;
    optional  HRMPBCancelBackupParams  cancelBackupRequest  = 303;
    optional  HRMPBResumeBackupParams  resumeBackupRequest  = 304;
    optional  HRMPBAvailableLensesGetRequest  availableLensesGetRequest  = 309;
    optional  HRMPBOpenSocketConnectionRequest  openSocketConnectionRequest  = 311;
    optional  int32  targetSoc  = 312;
    optional  HRMPBTouchEventRequest  setTouchEventRequest  = 313;
    optional  HRMPBInternetConnectivityCheckRequest  internetConnectivityCheckRequest  = 315;
    optional  HRMPBGetQcomStateRequest  getQcomStateRequest  = 318;
    optional  HRMPBDisplayToggleRequest  displayToggleRequest  = 319;
    optional  HRMPBFeatureActionRequest  performFeatureActionRequest  = 321;
}

message HRMPBHermosaRpcResponse {
    optional  int32  error  = 1;
    optional  HRMPBBatteryStatusResponse  batteryStatusResponse  = 5;
    optional  HRMPBGitResponse  gitResponse  = 7;
    optional  HRMPBTemperatureResponse  getTemperatureResponse  = 8;
    optional  HRMPBEmpty  haltResponse  = 18;
    optional  HRMPBEmpty  qcomResponse  = 48;
    optional  uint32  id_p  = 62;
    optional  HRMPBBoardIdResponse  boardIdResponse  = 64;
    optional  HRMPBEmpty  clearBugResponse  = 67;
    optional  string  getSerialNumberResponse  = 89;
    optional  HRMPBClientID  oauthGetClientidResponse  = 127;
    optional  HRMPBWifiParams  wifiGetStateResponse  = 130;
    optional  HRMPBWifiStartResponse  wifiStartResponse  = 131;
    optional  HRMPBEmpty  wifiStopResponse  = 132;
    optional  HRMPBChargerStateResponse  chargerStateResponse  = 140;
    optional  int32  qcomStateResponse  = 145;
    optional  HRMPBMediaCountsResponse  mediaCountsGetResponse  = 157;
    optional  HRMPBMediaResponse  mediaResponse  = 158;
    optional  bool  oauthSetUserAssociationResponse  = 159;
    optional  HRMPBEmpty  setNameResponse  = 164;
    optional  HRMPBFrameColorMessage  getFrameColorResponse  = 165;
    optional  HRMPBBoolValue  getLocationEnabledResponse  = 166;
    optional  HRMPBEmpty  setLocationEnabledResponse  = 167;
    optional  HRMPBEmpty  setTimeUtcResponse  = 168;
    optional  HRMPBWifiAPList  getWifiNetworksResponse  = 172;
    optional  bool  setWifiNetworksResponse  = 173;
    optional  HRMPBEmpty  eventRegisterListenerResponse  = 176;
    optional  HRMPBEmpty  eventUnregisterListenerResponse  = 177;
    optional  int32  getAudioLevelResponse  = 183;
    optional  HRMPBEmpty  setAudioLevelResponse  = 184;
    optional  int32  getBrightnessLevelResponse  = 185;
    optional  HRMPBEmpty  setBrightnessLevelResponse  = 186;
    optional  HRMPBEmpty  phoneNameSetResponse  = 189;
    optional  HRMPBEmpty  proxyStartedResponse  = 190;
    optional  HRMPBClientID  oauthGetProdClientidResponse  = 191;
    optional  HRMPBWifiStatus  getWifiStatusResponse  = 192;
    optional  HRMPBAvailableWifiNetworks  getAvailableWifiResponse  = 193;
    optional  HRMPBEmpty  shipmodeResponse  = 204;
    optional  HRMPBEmpty  checkOsOtaUpdateResponse  = 205;
    optional  HRMPBEmpty  downloadInstallOsOtaUpdateResponse  = 206;
    optional  HRMPBHermosaDevFeatureSet  setDeveloperFeaturesResponse  = 214;
    optional  HRMPBEmpty  clientLocationProvidingResponse  = 216;
    optional  HRMPBEmpty  setLowPowerModeResponse  = 217;
    optional  HRMPBLowPowerModeMessage  getLowPowerModeResponse  = 218;
    optional  HRMPBEmpty  unpairDeviceResponse  = 221;
    optional  HRMPBEmpty  clearContentResponse  = 222;
    optional  HRMPBEmpty  clearCacheResponse  = 223;
    optional  HRMPBEmpty  performFactoryResetResponse  = 224;
    optional  HRMPBKeyExchangeMessage  setPairingPublicKeyResponse  = 225;
    optional  HRMPBPairingSignatureMessage  setPeerVerificationResponse  = 226;
    optional  HRMPBBoolValue  getQuickSaveModeEnabledResponse  = 227;
    optional  HRMPBEmpty  setQuickSaveModeEnabledResponse  = 228;
    optional  HRMPBEncryptionSetupNonceExchangeMessage  encryptionSetupNonceResponse  = 230;
    optional  HRMPBEmpty  setPairingCompletionResponse  = 234;
    optional  HRMPBBoolValue  setUserDeviceSecurityResponse  = 239;
    optional  HRMPBEmpty  setAdbKeyResponse  = 241;
    optional  HRMPBSetAutoBrightnessResponse  setAutoBrightnessResponse  = 244;
    optional  HRMPBGetAutoBrightnessResponse  getAutoBrightnessResponse  = 245;
    optional  HRMPBSetUserDevicePasswordResponse  setUserDevicePasswordResponse  = 246;
    optional  HRMPBGetUserDeviceSecurityResponse  getUserDeviceSecurityResponse  = 247;
    optional  HRMPBEmpty  phoneNotificationEnableResponse  = 248;
    optional  HRMPBPhoneNotificationStatus  phoneNotificationGetStatusResponse  = 249;
    optional  HRMPBEncryptionNonceExchange  setChannelEncryptionNonceResponse  = 250;
    optional  HRMPBEmpty  setShakeToReportDataResponse  = 251;
    optional  HRMPBVerifyPasscodeResponse  verifyPasscodeResponse  = 254;
    optional  HRMPBEmpty  setPairingSessionIdResponse  = 255;
    optional  HRMPBEmpty  proxyNotifyStatusResponse  = 257;
    optional  HRMPBBoolValue  getOtaAutoUpdateEnabledResponse  = 258;
    optional  HRMPBEmpty  setOtaAutoUpdateEnabledResponse  = 259;
    optional  HRMPBGetFileResponse  getTransferFileResponse  = 260;
    optional  HRMPBBackupStatusResponse  getBackupStatusResponse  = 265;
    optional  HRMPBEmpty  playSoundResponse  = 271;
    optional  HRMPBProxyStartManualResponse  proxyStartManualResponse  = 273;
    optional  HRMPBProxyStopManualResponse  proxyStopManualResponse  = 274;
    optional  HRMPBSetSystemSoundResponse  setSystemSoundResponse  = 275;
    optional  HRMPBGetSystemSoundResponse  getSystemSoundResponse  = 276;
    optional  HRMPBEmpty  cancelOtaUpdateResponse  = 277;
    optional  HRMPBValidatePairingResponse  validatePairingResponse  = 282;
    optional  HRMPBLensLaunchResponse  lensLaunchResponse  = 285;
    optional  HRMPBNrfCrashInfoResponse  getNrfCrashInfoResponse  = 286;
    optional  HRMPBLensSyncResponse  syncLensesResponse  = 287;
    optional  bool  oauthSetUserAdditionalInfoResponse  = 288;
    optional  HRMPBBleCentralPairResponse  bleCentralPairResponse  = 289;
    optional  HRMPBForgetNetworkResponse  forgetNetworkResponse  = 293;
    optional  HRMPBGetSettingsForCategoryResponse  getSettingsForCategoryResponse  = 297;
    optional  bool  setBatchSettingsResponse  = 299;
    optional  HRMPBBatteryPreservationModeResponse  batteryPreservationModeResponse  = 300;
    optional  HRMPBGetBatteryPreservationModeResponse  getBatteryPreservationModeResponse  = 302;
    optional  HRMPBCancelBackupResult  cancelBackupResponse  = 303;
    optional  HRMPBResumeBackupResult  resumeBackupResponse  = 304;
    optional  HRMPBAvailableLensesGetResponse  availableLensesGetResponse  = 309;
    optional  HRMPBOpenSocketConnectionResponse  openSocketConnectionResponse  = 311;
    optional  HRMPBTouchEventResponse  setTouchEventResponse  = 312;
    optional  HRMPBInternetConnectivityCheckResponse  internetConnectivityCheckResponse  = 315;
    optional  HRMPBGetQcomStateResponse  getQcomStateResponse  = 318;
    optional  HRMPBDisplayToggleResponse  displayToggleResponse  = 319;
    optional  HRMPBFeatureActionResponse  performFeatureActionResponse  = 321;
}

message HRMPBImageData {
    optional  HRMPBImageData_Burst  burst  = 1;
}

message HRMPBImageData_Burst {
    optional  int32  index  = 1;
    optional  int32  length  = 2;
    optional  int32  frameRate  = 3;
    optional  string  firstImageUuid  = 4;
}

message HRMPBImagePoses {
    repeated  HRMPBSlamCoreImagePose  posesArray  = 1;
    optional  HRMPBCalibration  calibration  = 2;
}

message HRMPBImuActivityRecognitionData {
    repeated  int32  activityArray  = 1;
}

message HRMPBImuCalibrationOffsets {
    optional  int32  accelX  = 1;
    optional  int32  accelY  = 2;
    optional  int32  accelZ  = 3;
    optional  int32  accelRadius  = 4;
    optional  int32  accelAccuracy  = 5;
    optional  int32  gyroX  = 6;
    optional  int32  gyroY  = 7;
    optional  int32  gyroZ  = 8;
    optional  int32  gyroRadius  = 9;
    optional  int32  gyroAccuracy  = 10;
    optional  int32  magX  = 11;
    optional  int32  magY  = 12;
    optional  int32  magZ  = 13;
    optional  int32  magRadius  = 14;
    optional  int32  magAccuracy  = 15;
}

message HRMPBImuDataEvent {
    optional  uint32  sensorId  = 1;
    optional  uint32  timestamp  = 2;
    optional  HRMPBImuVectorData  vectorData  = 3;
    optional  HRMPBImuVectorUncalibratedData  vectorUncalibratedData  = 4;
    optional  HRMPBImuPdrData  pdrData  = 5;
    optional  HRMPBImuActivityRecognitionData  activityRecognition  = 6;
}

message HRMPBImuPdrData {
    optional  sint32  posX  = 1;
    optional  sint32  posY  = 2;
    optional  sint32  posAccuracy  = 3;
    optional  uint32  heading  = 4;
    optional  uint32  headingAccuracy  = 5;
    optional  uint32  steps  = 6;
    optional  uint32  status  = 7;
}

message HRMPBImuVectorData {
    optional  sint32  x  = 1;
    optional  sint32  y  = 2;
    optional  sint32  z  = 3;
    optional  uint32  status  = 4;
}

message HRMPBImuVectorUncalibratedData {
    optional  sint32  x  = 1;
    optional  sint32  y  = 2;
    optional  sint32  z  = 3;
    optional  sint32  xBias  = 4;
    optional  sint32  yBias  = 5;
    optional  sint32  zBias  = 6;
    optional  uint32  status  = 7;
}

message HRMPBInternetConnectivityCheckRequest {
}

message HRMPBInternetConnectivityCheckResponse {
    optional  int32  status  = 1;
}

message HRMPBKernelPanicLog {
    optional  string  backtrace  = 1;
}

message HRMPBKeyExchangeMessage {
    required  bytes  nonce  = 1;
    required  bytes  publicKey  = 2;
}

message HRMPBLens {
    optional  string  id_p  = 1;
    optional  string  name  = 2;
    optional  string  iconUri  = 3;
}

message HRMPBLensLaunchInfo {
    optional  string  lensId  = 1;
}

message HRMPBLensLaunchResponse {
    required  int32  status  = 1;
    required  bool  success  = 2;
}

message HRMPBLensSyncRequest {
}

message HRMPBLensSyncResponse {
    required  bool  success  = 1;
}

message HRMPBLinuxCrash {
    required  int32  type  = 1;
    required  string  identifier  = 2;
    optional  string  backtrace  = 3;
}

message HRMPBLocationData {
    optional  float  latitude  = 1;
    optional  float  longitude  = 2;
    optional  uint32  speedMps  = 3;
    optional  uint64  utcTime  = 4;
    optional  int32  headingDeg  = 5;
    optional  int32  heightMm  = 6;
    optional  uint32  hAccMm  = 7;
    optional  uint32  vAccMm  = 8;
}

message HRMPBLocationRequestEvent {
    required  int32  permissionMode  = 1;
    optional  uint32  desiredLocationPrecisionM  = 2;
    optional  uint32  maxAcquisitionTimeMs  = 3;
}

message HRMPBLockedBootCompletedEvent {
}

message HRMPBLowPowerModeMessage {
    optional  int32  level  = 1;
    optional  bool  persistent  = 2;
}

message HRMPBMediaCountEvent {
    optional  uint32  videos  = 1;
    optional  uint32  photos  = 2;
}

message HRMPBMediaCountsMessage {
    required  uint32  videos  = 1;
    required  uint32  photos  = 2;
}

message HRMPBMediaCountsResponse {
    optional  HRMPBMediaCountsMessage  mediaCounts  = 1;
}

message HRMPBMediaData {
    required  string  uuid  = 1;
    required  int32  type  = 2;
    optional  HRMPBRange  requestedRange  = 3;
    required  HRMPBRange  actualRange  = 4;
    required  bytes  data_p  = 5;
}

message HRMPBMediaFileDeletionRequest {
    required  string  uuid  = 1;
    optional  bool  includeHq  = 2;
}

message HRMPBMediaFileMarkTransferredRequest {
    required  string  uuid  = 1;
}

message HRMPBMediaFileMetadata {
    optional  HRMPBVideoData  videoData  = 1;
    optional  HRMPBImageData  imageData  = 2;
    optional  HRMPBNordicData  nordicData  = 3;
    optional  HRMPBAmbaData  ambaData  = 4;
    optional  HRMPBCameraSensorData  cameraSensorData  = 5;
    optional  HRMPBGpsData  gpsData  = 6;
    optional  bytes  randomBytes  = 7;
    optional  HRMPBTimeData  time  = 8;
    optional  HRMPBFwVersion  fwVersion  = 9;
    optional  bool  hasUploaded  = 10;
    optional  HRMPBCoulombCtrlData  coulombCtrlData  = 11;
    optional  HRMPBMultisnap  multisnap  = 12;
    optional  HRMPBSystemState  systemState  = 13;
    optional  HRMPBPerformanceData  performanceData  = 14;
    optional  int32  buttonSide  = 15;
    optional  HRMPBAlsReading  alsReading  = 16;
    optional  HRMPBLocationData  locationData  = 17;
    optional  string  factorySerialNumber  = 18;
    optional  HRMPBPowerAnalytics  powerAnalytics  = 19;
    repeated  HRMPBGenericAssetsMetadata  genericAssetMetadataArray  = 20;
}

message HRMPBMediaFileTransferRequest {
    required  string  uuid  = 1;
    required  int32  type  = 2;
    optional  HRMPBRange  range  = 3;
}

message HRMPBMediaMetadata {
    required  string  uuid  = 1;
    repeated  HRMPBMediaTypeAndSize  mediaArray  = 2;
    optional  int32  uploadStatus  = 3;
}

message HRMPBMediaRequest {
    required  int32  type  = 1;
    optional  HRMPBMediaFileTransferRequest  mediaFileTransferRequest  = 2;
    optional  HRMPBMediaFileDeletionRequest  mediaFileDeletionRequest  = 3;
    optional  HRMPBMediaFileMarkTransferredRequest  mediaFileMarkTransferredRequest  = 4;
}

message HRMPBMediaResponse {
    repeated  HRMPBMediaMetadata  availableMediaArray  = 1;
    optional  HRMPBMediaData  mediaData  = 2;
    optional  HRMPBMediaFileMetadata  metadata  = 3;
}

message HRMPBMediaTypeAndSize {
    required  int32  type  = 1;
    required  uint32  size  = 2;
}

message HRMPBMultisnap {
    optional  int32  index  = 1;
    optional  string  firstVideoUuid  = 2;
}

message HRMPBNordicData {
    optional  int32  bootSession  = 1;
    optional  string  deviceId  = 3;
}

message HRMPBNrfCrashInfoRequest {
}

message HRMPBNrfCrashInfoResponse {
    optional  HRMPBCrashReport  crashReport  = 1;
}

message HRMPBNrfFdsEntry {
    optional  string  stringField  = 1;
    optional  uint32  intField  = 2;
    optional  bool  boolField  = 3;
    optional  bool  battAnimEnabled  = 4;
    optional  HRMPBUserData  userData  = 5;
    optional  HRMPBCalibInfo  alsCalib  = 6;
    optional  HRMPBCalibInfo  proxCalib  = 7;
    optional  HRMPBCalibInfo  imuCalib  = 8;
    optional  HRMPBShipmodeStatus  shipmodeStatus  = 9;
    optional  HRMPBBattLearningParams  battLearningParamsL  = 10;
    optional  HRMPBBattLearningParams  battLearningParamsR  = 11;
    optional  uint32  factoryResetMagic  = 12;
    optional  bool  uartEnabled  = 13;
    optional  bool  ancsEnabled  = 14;
    optional  string  serialNumber  = 15;
    optional  HRMPBBoardIdResponse  boardId  = 16;
    optional  int32  battPreservationMode  = 17;
    optional  string  lockScreenPin  = 18;
}

message HRMPBOTACheckRequest {
    optional  string  versionsetName  = 1;
}

message HRMPBOTACheckResponse {
    required  string  currentOsVersion  = 1;
    optional  HRMPBEmpty  noUpdateAvailable  = 2;
    optional  string  updateAvailableVersion  = 3;
    optional  int32  error  = 4;
    optional  bool  isRequiredUpdate  = 5;
}

message HRMPBOTADownloadAndInstallRequest {
    optional  string  versionsetName  = 1;
}

message HRMPBOTADownloadAndInstallResponse {
    optional  HRMPBEmpty  otaDownloadStarted  = 1;
    optional  int32  error  = 2;
    optional  int32  otaDownloadProgress  = 3;
    optional  HRMPBEmpty  otaDownloadComplete  = 4;
    optional  HRMPBEmpty  otaInstallStarted  = 5;
    optional  HRMPBEmpty  otaInstallComplete  = 6;
    optional  HRMPBEmpty  otaRestartingDevice  = 7;
    optional  int32  otaInstallProgress  = 8;
}

message HRMPBOpenSocketConnectionRequest {
}

message HRMPBOpenSocketConnectionResponse {
    optional  bytes  connectionInfoBytes  = 1;
    optional  HRMPBSocketConnectionError  error  = 2;
}

message HRMPBPairingSessionIdRequest {
    required  string  pairingSessionId  = 1;
}

message HRMPBPairingSignatureMessage {
    optional  bytes  sigPairing  = 1;
    repeated  string  pairingSccertChainArray  = 2;
}

message HRMPBPeerVerificationMessage {
    required  bytes  tag  = 1;
    required  bytes  ciphertext  = 2;
}

message HRMPBPerformanceData {
    repeated  uint32  eventMap  = 1;
}

message HRMPBPhoneNotification {
    optional  int32  notifCategory  = 1;
    optional  string  appIdentifier  = 2;
    optional  string  title  = 3;
    optional  string  subtitle  = 4;
    optional  string  messageContents  = 5;
    optional  string  messageSize  = 6;
    optional  string  date  = 7;
    optional  string  positiveActionLabel  = 8;
    optional  string  negativeActionLabel  = 9;
    optional  uint32  notificationUid  = 10;
    optional  int32  eventType  = 11;
    optional  bool  silent  = 12;
    optional  bool  important  = 13;
    optional  bool  preExisting  = 14;
    optional  bool  positiveAction  = 15;
    optional  bool  negativeAction  = 16;
    optional  uint32  categoryCount  = 17;
}

message HRMPBPhoneNotificationStatus {
    optional  bool  connectedToBondedPeer  = 1;
    optional  bool  active  = 2;
    optional  bool  enabled  = 3;
}

message HRMPBPoseCoordinateSystem {
    optional  int32  poseCs  = 1;
}

message HRMPBPoseType {
    optional  int32  poseType  = 1;
}

message HRMPBPowerAnalytics {
    optional  uint32  ambaBootsSinceLastCapture  = 1;
    optional  uint32  ambaUpMsSinceLastCapture  = 2;
}

message HRMPBProjectorCalibration {
    optional  uint32  dutyCycleRed  = 1;
    optional  uint32  dutyCycleGreen  = 2;
    optional  uint32  dutyCycleBlue  = 3;
    optional  uint32  idacRed  = 4;
    optional  uint32  idacGreen  = 5;
    optional  uint32  idacBlue  = 6;
    optional  uint32  boresightCorrection  = 7;
    repeated  uint32  lumTableIdacArray  = 8;
    repeated  uint32  lumTableRedArray  = 9;
    repeated  uint32  lumTableGreenArray  = 10;
    repeated  uint32  lumTableBlueArray  = 11;
    optional  uint32  opticalBoresight  = 12;
}

message HRMPBProxCalibration {
    optional  uint32  covered  = 1;
    optional  uint32  uncovered  = 2;
}

message HRMPBProxyNotifyStatusRequest {
    optional  int32  statusCode  = 1;
}

message HRMPBProxyStartManualRequest {
}

message HRMPBProxyStartManualResponse {
    optional  int32  errorCode  = 1;
}

message HRMPBProxyStartedRequest {
    required  string  prxUser  = 1;
    required  string  prxPass  = 2;
    required  int32  port  = 3;
    required  int32  ipv4  = 4;
}

message HRMPBProxyStopManualRequest {
}

message HRMPBProxyStopManualResponse {
}

message HRMPBQcomBootType {
    required  int32  type  = 1;
    optional  bool  force  = 2;
    optional  int32  reason  = 3;
    optional  int32  socId  = 4;
}

message HRMPBQcomStateChangeEvent {
    optional  int32  oldState  = 1;
    optional  int32  newState  = 2;
    optional  int32  socId  = 3;
}

message HRMPBQuaternionD {
    optional  double  w  = 1;
    optional  double  x  = 2;
    optional  double  y  = 3;
    optional  double  z  = 4;
}

message HRMPBRTOSHeapInfo {
    required  uint32  rtosFreeHeapSize  = 1;
    required  uint32  rtosHeapLowWatermarkSize  = 2;
}

message HRMPBRange {
    required  uint32  start  = 1;
    required  uint32  len  = 2;
}

message HRMPBRealTimeMessage {
    required  uint64  timeUtc  = 1;
    optional  int32  timeZone  = 2;
    optional  string  timeZoneStr  = 3;
}

message HRMPBRemoteMedia {
    optional  string  contentUri  = 1;
}

message HRMPBResetReason {
    optional  bool  resetpin  = 1;
    optional  bool  dog  = 2;
    optional  bool  sreq  = 3;
    optional  bool  lockup  = 4;
    optional  bool  off  = 5;
    optional  bool  lpcomp  = 6;
    optional  bool  dif  = 7;
    optional  bool  nfc  = 8;
    optional  bool  por  = 9;
}

message HRMPBResumeBackupParams {
}

message HRMPBResumeBackupResult {
    optional  bool  result  = 1;
}

message HRMPBSE3D {
    optional  HRMPBQuaternionD  rotation  = 1;
    optional  HRMPBVec3D  translation  = 2;
}

message HRMPBServiceStartedEvent {
    optional  string  serviceName  = 1;
    repeated  uint32  rpcTypesArray  = 2[packed=true];
}

message HRMPBSetAutoBrightnessRequest {
    optional  bool  setAutoBrightnessEnabled  = 1;
}

message HRMPBSetAutoBrightnessResponse {
}

message HRMPBSetBatchSettingsRequest {
    repeated  HRMPBSetSettingRequest  settingRequestArray  = 1;
}

message HRMPBSetSettingRequest {
    required  string  settingId  = 1;
    required  HRMPBSettingValue  value  = 2;
}

message HRMPBSetSystemSoundRequest {
    optional  bool  systemSoundEnable  = 1;
    optional  bool  muteSystemSound  = 2;
}

message HRMPBSetSystemSoundResponse {
}

message HRMPBSetUserDevicePasswordRequest {
    required  string  passcode  = 1;
    required  string  newPasscode  = 2;
}

message HRMPBSetUserDevicePasswordResponse {
    required  int32  code  = 1;
}

message HRMPBSetUserDeviceSecurityRequest {
    required  string  passcode  = 1;
    required  string  lagunaId  = 2;
    optional  bool  requirePasscode  = 3;
    optional  int32  lockoutEvent  = 4;
    optional  int32  lockoutTime  = 5;
    optional  bool  phoneProximity  = 6;
}

message HRMPBSetting {
    required  string  settingId  = 1;
    required  string  title  = 2;
    optional  string  desc  = 3;
    required  HRMPBSettingValue  value  = 4;
    optional  int32  category  = 5;
    repeated  HRMPBSettingOption  optionsArray  = 6;
}

message HRMPBSettingOption {
    optional  string  label  = 1;
    optional  HRMPBSettingValue  value  = 2;
}

message HRMPBSettingValue {
    optional  string  stringValue  = 1;
    optional  bool  boolValue  = 2;
    optional  int32  intValue  = 3;
    optional  float  floatValue  = 4;
}

message HRMPBShakeToReportRequest {
    optional  string  title  = 1;
    optional  string  description_p  = 2;
}

message HRMPBShipmodeRequest {
    optional  uint32  delayHrs  = 1;
    optional  bool  deleteContent  = 2;
    optional  bool  skipUnpair  = 3;
}

message HRMPBShipmodeStatus {
    required  bool  inShipmode  = 1;
    required  int32  shipmodeTime  = 2;
    optional  int32  socAtRequested  = 3;
    optional  uint64  timeAtRequested  = 4;
    optional  int32  socAtShipMode  = 5;
    optional  uint64  timeAtShipMode  = 6;
    optional  int32  socAtFirstBoot  = 7;
    optional  uint64  timeAtFirstBoot  = 8;
}

message HRMPBSlamCameraCalibration {
    optional  int32  cameraId  = 1;
    optional  HRMPBCameraIntrinsics  intrinsics  = 2;
    optional  HRMPBSE3D  cameraFromImuTransform  = 3;
    optional  HRMPBSE3D  cameraFromRigTransform  = 4;
}

message HRMPBSlamCoreImagePose {
    optional  HRMPBSlamCorePose  slamPose  = 1;
    optional  int64  rawImageTimestampNs  = 2;
}

message HRMPBSlamCorePose {
    optional  HRMPBSE3D  pose  = 1;
    optional  HRMPBSE3D  appliedMapCorrection  = 2;
    optional  int64  poseTimestampNs  = 3;
    optional  HRMPBTrackingMode  trackingMode  = 4;
    optional  HRMPBPoseType  poseType  = 5;
    optional  HRMPBPoseCoordinateSystem  poseCs  = 6;
}

message HRMPBSlamEvent {
    optional  int32  slamEvent  = 1;
}

message HRMPBSocketConnectionError {
    optional  int32  errorCode  = 1;
}

message HRMPBSoftDeviceCrashReport {
    optional  uint32  faultId  = 1;
    optional  uint32  pc  = 2;
    optional  uint32  errorInfo  = 3;
}

message HRMPBSoundData {
    optional  string  filename  = 1;
    optional  int32  soundType  = 2;
}

message HRMPBSpecsEvent {
    required  uint32  msSinceBoot  = 1;
    optional  int32  eventType  = 2;
    optional  uint32  ambaTimeMs  = 3;
}

message HRMPBSpectaclesLockedWaitingForUnlockEvent {
}

message HRMPBSpectaclesPushMessage {
    optional  string  logMessage  = 1;
    optional  uint32  mediaCount  = 2;
    optional  uint32  battStatus  = 3;
    optional  bool  booted  = 5;
    optional  string  ipAddress  = 6;
    optional  HRMPBMediaCountsMessage  mediaCounts  = 7;
    optional  HRMPBCrashReport  crashReport  = 8;
    optional  HRMPBSpecsEvent  specsEvent  = 9;
    optional  HRMPBResetReason  resetReason  = 10;
    optional  uint32  remainingHeapBytes  = 11;
    optional  int32  wifiConnectionEvent  = 12;
    optional  int32  bluetoothConnectionEvent  = 13;
    optional  bool  receivedBackupPairingConfirmationTap  = 14;
    optional  int32  logLevel  = 15;
    optional  uint32  msSinceBoot  = 19;
    optional  int32  uploadToCloudEvent  = 20;
    optional  HRMPBButtonHoldEvent  buttonHoldEvent  = 21;
    optional  HRMPBSystemCounters  systemCounters  = 22;
    optional  HRMPBErrorReport  errorReport  = 23;
    optional  int32  chargerEvent  = 24;
    optional  HRMPBUserMediaCountsMessage  userMediaCounts  = 25;
    optional  HRMPBSpectaclesPushMessage_InvalidatedRequest  invalidatedRequest  = 26;
    optional  int32  transferThrottledEvent  = 27;
    optional  bool  encryptionLayerFailure  = 28;
    optional  HRMPBWifiThrottlingReport  wifiThrottlingReport  = 29;
    optional  uint32  wifiFrequency  = 30;
    optional  int32  directConnectionInfo  = 31;
    optional  HRMPBUbloxMessage  ubxMessage  = 32;
    optional  HRMPBTaskInfo  taskInfo  = 33;
    optional  HRMPBBleDisconnectReason  bleDisconnectReason  = 34;
    optional  HRMPBLocationData  locationData  = 35;
    optional  HRMPBGpsStatistics  gpsStatistics  = 36;
    optional  HRMPBPhoneNotification  phoneNotification  = 37;
    optional  HRMPBAncsNotificationRule  ancsRule  = 38;
    optional  HRMPBNrfFdsEntry  fdsEntry  = 39;
    optional  HRMPBHermosaEventPb  hermosaEvent  = 41;
    optional  HRMPBEmpty  proxyStart  = 42;
    optional  HRMPBEmpty  proxyStop  = 43;
    optional  HRMPBRTOSHeapInfo  rtosHeapInfo  = 44;
}

message HRMPBSpectaclesPushMessage_InvalidatedRequest {
    optional  uint32  methodIndex  = 1;
    optional  uint32  requestId  = 2;
    optional  uint64  methodUuid  = 3;
}

message HRMPBStereoCalibration {
    optional  HRMPBCameraCalibration  leftCam  = 1;
    optional  HRMPBCameraCalibration  rightCam  = 2;
}

message HRMPBSystemCounters {
    optional  uint32  nordicBootCount  = 1;
    optional  uint32  ambaBootCount  = 2;
    optional  uint32  localMediaCount  = 3;
}

message HRMPBSystemState {
    optional  int32  batterySoc  = 1;
    optional  bool  charging  = 2;
    optional  bool  bleConnected  = 3;
    optional  int32  ambaTemperature  = 4;
    optional  int32  wifiTemperature  = 5;
    optional  float  nordicTemperature  = 6;
    optional  int32  bleRssi  = 7;
}

message HRMPBTaskInfo {
    optional  string  name  = 1;
    optional  uint32  runtimePercentage  = 2;
    optional  uint32  remainingStack  = 3;
    optional  float  runtimePercentageF  = 4;
    optional  uint32  priority  = 5;
}

message HRMPBTelemetryLogDataEvent {
    optional  uint32  eventCount  = 1;
}

message HRMPBTelemetryLoggerConfigEvent {
    repeated  HRMPBTelemetryLoggerConfigEvent_LoggerConfigData  dataArray  = 1;
}

message HRMPBTelemetryLoggerConfigEvent_LoggerConfigData {
    required  uint32  domain  = 1;
    required  uint32  config  = 2;
}

message HRMPBTemperatureResponse {
    required  float  nordicTemp  = 1;
    optional  int32  ambaTemp  = 2;
    optional  int32  wifiTemp  = 3;
    optional  int32  imageSensorTemp  = 4;
    optional  int32  coulombCtrlTemp  = 5;
    optional  int32  status  = 6;
}

message HRMPBThermalEvent {
    optional  int32  sensorId  = 1;
    optional  float  sensorTemp  = 2;
    optional  uint32  thresholdLevel  = 3;
    optional  bool  isTriggered  = 4;
}

message HRMPBThermalShutdownEvent {
    optional  HRMPBThermalEvent  event  = 1;
    optional  uint32  shutdownDelaySeconds  = 2;
    optional  uint32  shutdownDelayMs  = 3;
}

message HRMPBTimeData {
    optional  uint64  captureUtc  = 1;
    optional  uint64  sinceNordicBoot  = 2;
}

message HRMPBTouchEventRequest {
    optional  int32  action  = 1;
    repeated  HRMPBActionPointer  pointersArray  = 2;
}

message HRMPBTouchEventResponse {
}

message HRMPBTrackingMode {
    optional  int32  trackingMode  = 1;
}

message HRMPBUbloxMessage {
    required  uint32  classId  = 1;
    required  uint32  msgId  = 2;
    optional  bytes  payload  = 3;
}

message HRMPBUnlockedBootCompletedEvent {
}

message HRMPBUserAdditionalInfo {
    required  string  userId  = 1;
    optional  string  displayName  = 2;
    optional  string  bitmojiAvatarId  = 3;
    optional  string  bitmojiSelfieId  = 4;
    optional  string  snapadsId  = 5;
    optional  string  email  = 6;
    optional  HRMPBFideliusKeys  fideliusKeys  = 7;
    optional  string  userName  = 8;
    optional  uint64  birthDate  = 9;
}

message HRMPBUserAssociationRequest {
    required  string  accessToken  = 1;
    required  string  refreshToken  = 2;
    required  uint64  expirationTimeMs  = 3;
    required  string  userId  = 4;
    optional  string  displayName  = 5;
    optional  string  bitmojiAvatarId  = 6;
    optional  string  bitmojiSelfieId  = 7;
    optional  string  snapadsId  = 9;
    optional  string  email  = 10;
    optional  HRMPBFideliusKeys  fideliusKeys  = 11;
    optional  string  userName  = 12;
    optional  uint64  birthDate  = 13;
}

message HRMPBUserData {
    optional  bytes  gapAddress  = 1;
    optional  string  deviceName  = 2;
    optional  bytes  encryptionKey  = 3;
    optional  string  userIdentifier  = 6;
    optional  bool  uploadToCloudProvisioned  = 7;
    optional  int32  timeZone  = 8;
    optional  bool  hevcEnabled  = 9;
}

message HRMPBUserMediaCountsMessage {
    required  string  user  = 1;
    required  HRMPBMediaCountsMessage  mediaCounts  = 2;
}

message HRMPBValidatePairingRequest {
    optional  string  userId  = 1;
}

message HRMPBValidatePairingResponse {
    optional  bool  result  = 1;
}

message HRMPBVec2D {
    optional  double  x  = 1;
    optional  double  y  = 2;
}

message HRMPBVec2I {
    optional  int32  x  = 1;
    optional  int32  y  = 2;
}

message HRMPBVec3D {
    optional  double  x  = 1;
    optional  double  y  = 2;
    optional  double  z  = 3;
}

message HRMPBVerifyPasscodeRequest {
    optional  string  passcode  = 1;
    optional  int32  type  = 2;
}

message HRMPBVerifyPasscodeResponse {
    optional  int32  code  = 1;
    optional  int32  attemptsLeft  = 2;
    optional  bool  userLockedOut  = 3;
    optional  int32  timeUntilUnlock  = 4;
}

message HRMPBVideoData {
    optional  int32  durationMs  = 1;
    optional  int32  codec  = 2;
    optional  int32  requestedVideoCount  = 3;
    optional  bool  lastRecordAborted  = 4;
    optional  HRMPBDroppedFramesData  droppedFramesData  = 5;
}

message HRMPBWatchdogCrashReport {
    optional  uint32  pc  = 1;
    optional  uint32  r1  = 2;
    optional  uint32  r2  = 3;
    optional  uint32  r3  = 4;
    optional  uint32  r12  = 5;
    optional  uint32  lr  = 6;
    optional  uint32  r0  = 7;
    optional  uint32  xpsr  = 8;
}

message HRMPBWearDetectorEvent {
    optional  int32  wearEvent  = 1;
}

message HRMPBWifiAPInfo {
    required  int32  state  = 1;
    required  string  ssid  = 2;
    optional  string  password  = 3;
}

message HRMPBWifiAPList {
    repeated  HRMPBWifiAPInfo  wifiApArray  = 1;
}

message HRMPBWifiConnectedClientCountChangeEvent {
    optional  int32  connectedClientCount  = 1;
}

message HRMPBWifiParams {
    required  int32  type  = 1;
    optional  string  ssid  = 2;
    optional  string  password  = 3;
    optional  uint32  frequency  = 4;
    optional  string  country  = 5;
    optional  int32  frequencyStrategy  = 6;
}

message HRMPBWifiScanResult {
    required  string  ssid  = 1;
    required  bool  isCurrentlyConnected  = 2;
    required  int32  wifiLevel  = 3;
    required  bool  isProtected  = 4;
    optional  bool  isSaved  = 5;
}

message HRMPBWifiStartResponse {
    optional  bool  isSuccessful  = 1;
    optional  int32  failureReason  = 2;
}

message HRMPBWifiStatus {
    required  bool  isWifiEnabled  = 1;
    required  bool  isConnectedToWifi  = 2;
    required  string  ssid  = 3;
    required  int32  wifiLevel  = 4;
    optional  string  ipAddress  = 5;
    optional  string  dnsAddress  = 6;
}

message HRMPBWifiThrottlingReport {
    optional  uint32  throttling  = 1;
    optional  bool  dutyCycleControl  = 2;
    optional  HRMPBTemperatureResponse  temperatures  = 3;
}

message HappeningNow {
    optional  HappeningNowWeather  weather  = 1;
    optional  HappeningNowHoroscope  horoscope  = 2;
    optional  bool  breakingNews  = 3;
    optional  int64  breakingNewsExpiresAtMs  = 4;
}

message HappeningNowHoroscope {
    optional  int32  astrologicalSign  = 1;
}

message HappeningNowWeather {
}

message HashTagTopicMetaData {
    optional  string  title  = 1;
}

message Hashtag {
    optional  SCSCOREUUID  id_p  = 1;
    optional  string  title  = 2;
    optional  bool  isServerSuggested  = 3;
    optional  int32  source  = 4;
}

message Hashtag_Source {
}

message HeaderEnvelope {
    optional  bytes  clientHeaderBytes  = 1;
    optional  bytes  serverHeaderBytes  = 2;
    optional  string  sessionId  = 3;
    optional  string  partitionKey  = 4;
    optional  int32  kafkaClusterNumber  = 5;
}

message HeroImageInfo {
    optional  string  URL  = 1;
    optional  int32  type  = 2;
    optional  string  productDeeplink  = 3;
    optional  string  categoryId  = 4;
}

message Hit {
    optional  SCPNLOOKALIEMediaReference  matchedContent  = 1;
    optional  SCPNLOOKALIEMediaReference  sourceMedia  = 2;
    optional  float  score  = 3;
    repeated  string  properties  = 100;
}

message HorizontalSection {
    optional  int32  itemStyle  = 1;
}

message HorizontalSection_ItemStyle {
}

message HourMin {
    optional  int32  hour  = 1;
    optional  int32  minute  = 2;
}

message IMPAcceptPayoutProgramTermRequest {
    optional  int32  programTerm  = 1;
}

message IMPAcceptPayoutProgramTermResponse {
}

message IMPAcceptRoleInviteRequest {
    optional  string  businessId  = 1;
    optional  string  roleType  = 2;
}

message IMPAcceptRoleInviteResponse {
    optional  bool  failedRoleTypeMismatch  = 1;
}

message IMPAccountServiceError {
    optional  int32  errorCode  = 1;
    optional  string  errorMessage  = 2;
}

message IMPActivity {
    optional  IMPCashout  cashout  = 1;
    optional  IMPPayout  payout  = 2;
    optional  int32  activityType  = 3;
}

message IMPAddContentShareRecordRequest {
    optional  IMPContentShareRecord  record  = 1;
}

message IMPAddContentShareRecordResponse {
}

message IMPAddOrgRoleByRoleTypeRequest {
    optional  string  profileId  = 1;
    optional  IMPRoleSpecification  role  = 2;
    optional  string  organizationId  = 3;
}

message IMPAddOrgRoleByRoleTypeResponse {
}

message IMPAddUsersToSnapProABTestGroupRequest {
    repeated  string  userIdsArray  = 1;
}

message IMPAddUsersToSnapProABTestGroupResponse {
}

message IMPAddress {
    optional  string  streetAddress  = 1;
    optional  string  city  = 2;
    optional  string  zipCode  = 3;
    optional  string  country  = 4;
    optional  string  administrativeDistrict  = 5;
}

message IMPAddressV2 {
    optional  string  streetAddress  = 1;
    optional  string  city  = 2;
    optional  string  zipCode  = 3;
    optional  string  country  = 4;
    optional  string  administrativeDistrict  = 5;
}

message IMPAdminGetHighlightsRequest {
    optional  string  profileId  = 1;
    repeated  string  highlightIdsArray  = 2;
}

message IMPAdminGetHighlightsResponse {
    repeated  IMPAdminHighlight  highlightsArray  = 1;
}

message IMPAdminHighlight {
    optional  StoryDoc  story  = 1;
    optional  string  version  = 2;
    optional  bool  isProcessing  = 3;
    optional  string  coverSnapId  = 4;
    optional  bool  failedProcessing  = 5;
    optional  IMPThumbnailInfo  thumbnail  = 6;
    optional  int32  creationSource  = 7;
    repeated  IMPMediaInfo  mediaInfoArray  = 8;
    optional  string  compositeId  = 9;
    optional  string  title  = 10;
}

message IMPAdminListHighlightsRequest {
    optional  string  profileId  = 1;
    optional  string  pageId  = 2;
    optional  int32  limit  = 3;
    optional  int32  sourceFilter  = 4;
}

message IMPAdminListHighlightsResponse {
    repeated  IMPAdminHighlight  highlightsArray  = 1;
    optional  string  nextPageId  = 2;
}

message IMPAdminListManagedSpotlightHighlightsRequest {
    optional  string  profileId  = 1;
    optional  string  pageId  = 2;
    optional  int32  limit  = 3;
    optional  IMPClientInfo  clientInfo  = 4;
}

message IMPAdminListManagedSpotlightHighlightsResponse {
    repeated  IMPAdminHighlight  spotlightHighlightsArray  = 1;
    optional  string  nextPageId  = 2;
}

message IMPAdsAddRolesRequest {
    repeated  IMPAdsRole  rolesArray  = 1;
}

message IMPAdsAdsBusinessAccount {
    optional  string  id_p  = 1;
    optional  string  organizationId  = 2;
    repeated  string  secureActionsArray  = 3;
}

message IMPAdsAdsBusinessAccountSubResponse {
    optional  IMPAdsAdsBusinessAccount  businessaccount  = 1;
}

message IMPAdsAdsBusinessAccountsResponse {
    repeated  IMPAdsAdsBusinessAccountSubResponse  businessaccountsArray  = 1;
}

message IMPAdsAdsInventoryBundle {
    optional  string  id_p  = 1;
    optional  string  displayName  = 2;
    optional  int32  status  = 3;
    optional  int32  targetableBy  = 5;
}

message IMPAdsAdsInventoryBundleItemMapping {
    optional  string  id_p  = 1;
    optional  string  parentBundleId  = 2;
    optional  int32  elementType  = 3;
    optional  string  elementId  = 4;
}

message IMPAdsAdsInventoryBundleItemMappingRequest {
    repeated  IMPAdsAdsInventoryBundleItemMapping  inventoryBundleItemMappingsArray  = 1;
}

message IMPAdsAdsInventoryBundleItemMappingResponse {
    repeated  IMPAdsAdsInventoryBundleItemMappingSubResponse  inventoryBundleItemMappingsArray  = 1;
}

message IMPAdsAdsInventoryBundleItemMappingSubResponse {
    optional  IMPAdsAdsInventoryBundleItemMapping  inventoryBundleItemMapping  = 1;
}

message IMPAdsAdsInventoryBundleSubResponse {
    optional  IMPAdsAdsInventoryBundle  inventoryBundle  = 1;
}

message IMPAdsAdsInventoryBundlesRequest {
    repeated  IMPAdsAdsInventoryBundle  inventoryBundlesArray  = 1;
}

message IMPAdsAdsInventoryBundlesResponse {
    repeated  IMPAdsAdsInventoryBundleSubResponse  inventoryBundlesArray  = 1;
}

message IMPAdsAdsInventoryItem {
    optional  string  id_p  = 1;
    optional  int32  inventoryType  = 2;
    optional  string  displayName  = 3;
    optional  string  targetingValue  = 4;
    optional  int32  status  = 5;
    optional  IMPAdsDiscoverStoryMetadata  discoverStoryMetadata  = 6;
}

message IMPAdsAdsInventoryItemSubResponse {
    optional  IMPAdsAdsInventoryItem  inventoryItem  = 1;
}

message IMPAdsAdsInventoryItemsRequest {
    repeated  IMPAdsAdsInventoryItem  inventoryItemsArray  = 1;
}

message IMPAdsAdsInventoryItemsResponse {
    repeated  IMPAdsAdsInventoryItemSubResponse  inventoryItemsArray  = 1;
}

message IMPAdsAuthorizeActionsResponse {
    optional  string  requestStatus  = 1;
    repeated  string  authorizedInternalActionsArray  = 2;
}

message IMPAdsCreateAdsBusinessAccountRequest {
    optional  string  organizationId  = 1;
    optional  string  snapUserId  = 2;
    optional  int32  profileType  = 3;
}

message IMPAdsCreateAdsBusinessAccountSubResponse {
    optional  IMPAdsCreatedAdsBusinessAccount  businessaccount  = 1;
}

message IMPAdsCreateAdsBusinessAccountsRequest {
    repeated  IMPAdsCreateAdsBusinessAccountRequest  businessaccountsArray  = 1;
}

message IMPAdsCreateAdsBusinessAccountsResponse {
    repeated  IMPAdsCreateAdsBusinessAccountSubResponse  businessaccountsArray  = 1;
}

message IMPAdsCreateMemberRequest {
    repeated  IMPAdsMember  membersArray  = 1;
}

message IMPAdsCreateOrganizationRequest {
    optional  string  name  = 1;
    optional  string  type  = 2;
}

message IMPAdsCreateOrganizationsRequest {
    repeated  IMPAdsCreateOrganizationRequest  organizationsArray  = 1;
}

message IMPAdsCreateOrganizationsResponse {
    repeated  IMPAdsCreateOrganizationsSubResponse  organizationsArray  = 1;
}

message IMPAdsCreateOrganizationsSubResponse {
    optional  IMPAdsCreatedOrganization  organization  = 1;
}

message IMPAdsCreatedAdsBusinessAccount {
    optional  string  id_p  = 1;
    optional  string  organizationId  = 2;
}

message IMPAdsCreatedOrganization {
    optional  string  id_p  = 1;
    repeated  IMPAdsCreatedAdsBusinessAccount  businessaccountsArray  = 2;
}

message IMPAdsDeleteAdsInventoryBundleItemMappingRequest {
    repeated  string  mappingIdsArray  = 1;
}

message IMPAdsDeleteAdsInventoryBundleItemMappingResponse {
}

message IMPAdsDiscoverStoryMetadata {
    optional  string  businessProfileId  = 1;
    optional  string  publisherId  = 2;
}

message IMPAdsListAdsInventoryBundleItemMappingsRequest {
    optional  string  elementItemId  = 1;
}

message IMPAdsListAdsInventoryBundleItemMappingsResponse {
    repeated  IMPAdsAdsInventoryBundleItemMappingSubResponse  inventoryBundleItemMappingsArray  = 1;
}

message IMPAdsMember {
    optional  string  id_p  = 1;
    optional  string  organizationId  = 2;
    optional  string  snapchatUserId  = 3;
    optional  string  displayName  = 4;
    optional  string  snapchatUsername  = 5;
    optional  string  email  = 6;
}

message IMPAdsMemberSubResponse {
    optional  IMPAdsMember  member  = 1;
}

message IMPAdsMembersResponse {
    repeated  IMPAdsMemberSubResponse  membersArray  = 1;
}

message IMPAdsMyBusinessAccount {
    optional  string  id_p  = 1;
    optional  string  organizationId  = 2;
    repeated  string  secureActionsArray  = 3;
    repeated  IMPAdsRoleInfo  roleObjectsArray  = 4;
}

message IMPAdsMyOrganization {
    optional  string  id_p  = 1;
    repeated  string  secureActionsArray  = 2;
    repeated  IMPAdsMyBusinessAccount  businessaccountsArray  = 3;
    optional  string  myMemberId  = 4;
    repeated  string  rolesArray  = 5;
}

message IMPAdsMyOrganizationSubResponse {
    optional  IMPAdsMyOrganization  organization  = 1;
}

message IMPAdsMyOrganizationsListResponse {
    repeated  IMPAdsMyOrganizationSubResponse  organizationsArray  = 1;
    optional  IMPAdsPagination  paging  = 2;
}

message IMPAdsOrganization {
    optional  string  id_p  = 1;
    optional  string  name  = 2;
}

message IMPAdsOrganizationSubResponse {
    optional  IMPAdsOrganization  organization  = 1;
}

message IMPAdsOrganizationsResponse {
    repeated  IMPAdsOrganizationSubResponse  organizationsArray  = 1;
}

message IMPAdsPagination {
    optional  string  nextLink  = 1;
}

message IMPAdsPaging {
    optional  string  nextLink  = 1;
}

message IMPAdsProfileOnboardingParams {
    optional  string  adminDisplayName  = 1;
    optional  string  adminUserId  = 2;
    optional  string  businessAccountId  = 3;
    optional  string  adminEmail  = 4;
}

message IMPAdsProfileOnboardingRequest {
    optional  string  id_p  = 1;
    optional  string  name  = 2;
    optional  string  type  = 3;
    optional  IMPAdsProfileOnboardingParams  onboardingParams  = 4;
    optional  string  country  = 5;
    optional  string  postalCode  = 6;
    optional  string  streetAddress  = 7;
}

message IMPAdsProfilesOnboardingRequest {
    repeated  IMPAdsProfileOnboardingRequest  organizationsArray  = 1;
}

message IMPAdsRole {
    optional  string  id_p  = 1;
    optional  string  memberId  = 2;
    optional  string  businessAccountId  = 3;
    optional  string  organizationId  = 4;
    optional  string  type  = 5;
    optional  string  createdAt  = 6;
}

message IMPAdsRoleInfo {
    optional  string  id_p  = 1;
    optional  string  type  = 2;
}

message IMPAdsRoleSubResponse {
    optional  IMPAdsRole  role  = 1;
}

message IMPAdsRolesResponse {
    repeated  IMPAdsRoleSubResponse  rolesArray  = 1;
    optional  IMPAdsPaging  paging  = 2;
}

message IMPAgeGateSettings {
    optional  int32  globalAgeMin  = 1;
    repeated  int32  countryAgeMinMap  = 2;
}

message IMPArchiveHighlightRequest {
    optional  string  profileId  = 1;
    optional  string  highlightId  = 2;
}

message IMPArchiveHighlightResponse {
}

message IMPAudienceGateSettings {
    optional  IMPAgeGateSettings  ageGateSettings  = 1;
}

message IMPAuditRecord {
    optional  IMPInternalBusinessProfile  profile  = 1;
    optional  int64  createdAt  = 2;
    optional  string  modifiedByUserId  = 3;
    optional  int32  operation  = 4;
}

message IMPAuthorizeActionsRequest {
    optional  string  userId  = 1;
    optional  string  businessId  = 2;
    repeated  string  actionsArray  = 3;
}

message IMPAuthorizeActionsResponse {
    optional  bool  authorized  = 1;
}

message IMPAuthorizeGlobalActionsRequest {
    optional  string  userId  = 1;
    repeated  string  actionsArray  = 2;
}

message IMPAuthorizeGlobalActionsResponse {
    optional  bool  authorized  = 1;
}

message IMPBackfillPublisherHostUserRequest {
    optional  string  pageId  = 1;
    optional  int32  limit  = 2;
    optional  bool  isDryRun  = 3;
}

message IMPBackfillPublisherHostUserResponse {
    optional  string  nextPage  = 1;
}

message IMPBackfillPublisherProfileTypeRequest {
    optional  string  pageId  = 1;
    optional  int32  limit  = 2;
    optional  bool  isDryRun  = 3;
}

message IMPBackfillPublisherProfileTypeResponse {
    optional  string  nextPage  = 1;
}

message IMPBatchBusinessSubscribeRequest {
    optional  string  businessId  = 1;
    repeated  string  userIdsArray  = 2;
}

message IMPBatchBusinessSubscribeResponse {
}

message IMPBatchDeleteRolesByRoleTypeRequest {
    repeated  IMPDeleteRoleByRoleTypeRequest  rolesArray  = 1;
}

message IMPBatchDeleteRolesByRoleTypeResponse {
}

message IMPBatchGetBusinessRequest {
    repeated  string  businessProfileIdsArray  = 1;
    repeated  string  publisherIdsArray  = 2;
    optional  IMPGetBusinessOptions  getBusinessOptions  = 3;
}

message IMPBatchGetBusinessResponse {
    repeated  IMPBusiness  businessesArray  = 1;
}

message IMPBatchGrantRolesRequest {
    repeated  IMPGrantRoleToUserRequest  rolesArray  = 1;
}

message IMPBatchGrantRolesResponse {
}

message IMPBoltMediaWithMLSMediaId {
    optional  IMPBusiness_BoltMedia  boltMedia  = 1;
    optional  string  mlsMediaId  = 2;
}

message IMPBoltUploadObject {
    optional  bytes  boltContentObject  = 1;
    optional  IMPUploadMediaInfo  mediaInfo  = 2;
    optional  string  mediaKey  = 3;
    optional  string  mediaIv  = 4;
}

message IMPBusiness {
    optional  IMPBusiness_Identifiers  identifiers  = 1;
    optional  IMPBusiness_Branding  branding  = 2;
    optional  IMPBusiness_Behaviour  behaviour  = 3;
    optional  IMPBusiness_Visibility  visibility  = 4;
    optional  IMPBusiness_Stats  stats  = 5;
}

message IMPBusinessAccount {
    optional  string  id_p  = 1;
    repeated  string  organizationIdsArray  = 2000;
}

message IMPBusinessLogo {
    optional  string  discoverFeedLogoURL  = 1;
    optional  string  megaProfileLogoURL  = 2;
    optional  string  manageProfileLogoURL  = 3;
    optional  string  originalLogoURL  = 4;
    optional  bool  isDefault  = 100;
}

message IMPBusinessProfile {
    optional  string  id_p  = 1;
    optional  string  title  = 2;
    optional  string  description_p  = 3;
    optional  string  logoURL  = 4;
    optional  string  phoneNumber  = 5;
    optional  string  address  = 6;
    optional  string  emailAddress  = 7;
    optional  string  profileDeeplinkURL  = 8;
    optional  SGTILink  profileLink  = 9;
    optional  string  websiteURL  = 10;
    optional  string  hostAccountUsername  = 11;
    optional  int64  lastUpdateSequence  = 12;
    optional  IMPAddress  businessAddress  = 13;
    optional  string  category  = 14;
    optional  string  displayAddress  = 15;
    optional  SGTILink  managementLink  = 16;
    optional  SGTILink  settingsLink  = 17;
    optional  IMPBusinessLogo  businessLogo  = 18;
    optional  string  hostAccountVerifiedEmoji  = 19;
    optional  string  subtitle  = 20;
    optional  string  hostAccountUserId  = 21;
    repeated  IMPContentIdentifier  contentsArray  = 22;
    optional  int64  initiallyDisplayedContentIndex  = 23;
    optional  string  subcategory  = 24;
    optional  IMPShowDisplayInfo  showInfo  = 25;
    optional  IMPPublisherDisplayInfo  publisherInfo  = 26;
    optional  IMPDeeplinks  deeplinks  = 27;
    optional  bool  isOfficialAccount  = 28;
    optional  string  hostAccountVerifiedEmojiSafe  = 29;
    optional  string  hostAccountVerifiedEmojiWithoutModifiers  = 30;
    optional  string  bitmojiAvatarId  = 31;
    repeated  IMPContentIdentifierV2  contentIdentifiersArray  = 32;
    optional  IMPCommerceStoreInfo  commerceStoreInfo  = 33;
    optional  bool  hasLenses  = 34;
    optional  string  heroImageURL  = 35;
    optional  bool  isLensCreator  = 36;
    optional  bool  hasHighlights  = 37;
    optional  bool  isBrandProfile  = 38;
    optional  int64  createdTimestamp  = 39;
    optional  int32  internalCategory  = 40;
    optional  int64  subscriberCount  = 41;
    optional  int32  moderationStatus  = 42;
    optional  int32  tier  = 43;
    optional  string  hostAccountMutableUsername  = 44;
    optional  string  mutableSubtitle  = 45;
    optional  int32  categoryEnum  = 47;
    optional  int32  subcategoryEnum  = 48;
    optional  int32  heroImageHeight  = 49;
    optional  int32  heroImageWidth  = 50;
    optional  int32  heroImageVerticalPosition  = 51;
    optional  string  originalHeroImageURL  = 52;
    optional  bool  isSnapchatPlusSubscriber  = 53;
    optional  string  placeCollectionId  = 54;
    optional  string  privateEmail  = 100;
    optional  string  privatePhoneNumber  = 101;
    optional  bool  isTestProfile  = 200;
    optional  string  organizationId  = 300;
    optional  string  accountId  = 301;
}

message IMPBusinessProfileAndUserData {
    optional  IMPBusinessProfile  businessProfile  = 1;
    optional  bool  isSubscribed  = 2;
    repeated  string  allowedActionsArray  = 3;
    repeated  IMPPendingRoleInvite  pendingRoleInvitesArray  = 4;
    optional  IMPBusinessProfileUserData  userData  = 5;
    optional  IMPBusinessStory  story  = 6;
    optional  IMPBusinessProfileFeatures  businessProfileFeatures  = 7;
    optional  IMPBusinessProfileSettings  businessProfileSettings  = 8;
}

message IMPBusinessProfileFeatures {
    optional  bool  canEditTitle  = 1;
    optional  bool  canEditHighlights  = 2;
    optional  bool  canEditWebsite  = 3;
    optional  bool  canEditEmail  = 4;
    optional  bool  canAccessStoryReplies  = 5;
    optional  bool  canQuoteStoryReplies  = 6;
    optional  bool  canAccessGifting  = 7;
    optional  bool  canAccessActivityFeed  = 8;
    optional  bool  canUploadHeroImage  = 9;
}

message IMPBusinessProfileSettings {
    optional  bool  showStoryReplies  = 1;
    optional  bool  showSubscriberCount  = 2;
    optional  bool  showGifting  = 3;
    optional  IMPTermsAndConditions  giftingTerms  = 4;
    optional  IMPMonetizationSettings  monetizationSettings  = 5;
    optional  IMPAudienceGateSettings  audienceGateSettings  = 6;
}

message IMPBusinessProfileUserData {
    optional  bool  isSubscribed  = 1;
    repeated  string  allowedActionsArray  = 2;
    repeated  IMPPendingRoleInvite  pendingRoleInvitesArray  = 3;
    repeated  IMPRole  rolesArray  = 4;
    optional  bool  isHost  = 5;
    optional  IMPBusinessUserSettings  userSettings  = 6;
    optional  GPBStringValue  badgeDisplay  = 7;
    optional  int32  audienceGateStatus  = 8;
    optional  string  audienceGateReason  = 9;
}

message IMPBusinessSnap {
    optional  string  businessId  = 1;
    optional  bytes  submittedStorySnapData  = 2;
    optional  string  posterUserId  = 3;
}

message IMPBusinessSnapDump {
    optional  IMPBusinessSnap  businessSnap  = 1;
    optional  int64  ingestTimestampMs  = 2;
}

message IMPBusinessSnapInsights {
    optional  string  businessId  = 1;
    optional  string  snapId  = 2;
    optional  IMPBusinessSnapInsights_GlobalStats  globalStats  = 3;
    repeated  IMPBusinessSnapInsights_SectionStats  sectionStatsArray  = 4;
}

message IMPBusinessSnapInsights_GlobalStats {
    optional  int64  viewCount  = 1;
    optional  int64  screenshotCount  = 2;
}

message IMPBusinessSnapInsights_SectionStats {
    optional  int32  type  = 1;
    optional  int64  viewCount  = 2;
    optional  int64  screenshotCount  = 3;
    repeated  IMPBusinessSnapInsights_SectionStats_Viewer  recentViewersArray  = 4;
}

message IMPBusinessSnapInsights_SectionStats_Viewer {
    optional  string  userId  = 1;
    optional  string  username  = 2;
    optional  string  displayName  = 3;
    optional  int64  viewTimestamp  = 4;
    optional  string  bitmojiAvatarId  = 5;
    optional  string  bitmojiSelfieId  = 6;
    optional  bool  isVerified  = 7;
}

message IMPBusinessStory {
    optional  string  businessId  = 1;
    optional  int32  numSnaps  = 2;
    optional  IMPTimeRange  timeRange  = 3;
    optional  string  thumbnailURL  = 4;
    optional  string  lastSnapId  = 5;
    optional  IMPTimeRange  displayTimeRange  = 6;
    optional  IMPBusinessStoryMetrics  metrics  = 7;
    optional  string  storyId  = 8;
}

message IMPBusinessStoryMetrics {
    optional  int32  reach  = 1;
    optional  int32  screenshotCount  = 2;
    optional  int32  storyReplies  = 3;
}

message IMPBusinessStorySnap {
    optional  string  businessId  = 1;
    optional  string  posterUserId  = 2;
    optional  bytes  submittedStorySnapData  = 3;
}

message IMPBusinessUserLink {
    optional  string  userId  = 1;
    optional  string  businessId  = 2;
}

message IMPBusinessUserSettings {
    optional  bool  showStoryAttribution  = 1;
    optional  IMPBusinessUserSettings_NotificationSettings  notificationSettings  = 2;
    optional  int64  newestReadNotificationTimestamp  = 3;
    optional  int32  profileManagementViewCount  = 4;
}

message IMPBusinessUserSettings_NotificationSettings {
    optional  bool  suppressStoryContributionPushNotifications  = 1;
}

message IMPBusiness_Behaviour {
    optional  bool  isPublisher  = 1;
    optional  bool  isShow  = 2;
    optional  bool  isOfficialAccount  = 3;
    optional  bool  isNews  = 4;
    repeated  int32  featuresArray  = 5[packed=true];
    optional  bool  isSubscribable  = 6;
    optional  int32  adSetting  = 7;
    repeated  IMPContentIdentifierV2  contentsArray  = 8;
    optional  bool  isCuratedPublisher  = 9;
    optional  bool  adsEnabled  = 10;
    optional  bool  isDeleted  = 11;
    optional  bool  isHappeningNowPublisher  = 12;
    optional  int32  audioClassification  = 13;
    optional  bool  isAdsPreRollEnabled  = 14;
    optional  int32  moderationLevel  = 15;
    optional  bool  isDynamicAdsEnabled  = 16;
    repeated  STODiscoverChannelFilter  discoverChannelFilterSetArray  = 17;
    optional  int32  tierLevel  = 18;
}

message IMPBusiness_BoltMedia {
    optional  bytes  contentObject  = 1;
    optional  string  URL  = 2;
}

message IMPBusiness_Branding {
    optional  string  formalDisplayName  = 1;
    optional  string  description_p  = 2;
    optional  string  deeplinkURL  = 3;
    optional  IMPBusiness_Logos  logos  = 4;
    optional  int32  profileLogoDisplay  = 5;
    optional  string  websiteURL  = 6;
    repeated  string  nicknamesArray  = 7;
    optional  string  primaryColor  = 8;
    optional  string  secondaryColor  = 9;
    optional  IMPBusiness_Emoji  emoji  = 10;
    optional  string  bitmojiAvatarId  = 11;
    optional  string  category  = 12;
    optional  string  subcategory  = 13;
    optional  string  phoneNumber  = 14;
    optional  string  emailAddress  = 15;
    optional  IMPAddressV2  address  = 16;
    optional  string  URLSafeFormalName  = 17;
    repeated  string  keywordsArray  = 18;
    optional  string  mutableName  = 19;
    optional  int32  tier  = 20;
    optional  int32  internalCategory  = 21;
    optional  bool  isLensCreator  = 22;
    optional  int32  categoryEnum  = 23;
    optional  int32  subcategoryEnum  = 24;
}

message IMPBusiness_Emoji {
    optional  string  hostAccountVerifiedEmoji  = 1;
    optional  string  hostAccountVerifiedEmojiSafe  = 2;
    optional  string  hostAccountVerifiedEmojiWithoutModifiers  = 3;
}

message IMPBusiness_Identifiers {
    optional  string  businessProfileId  = 1;
    optional  int64  publisherId  = 2;
    optional  string  name  = 3;
    optional  string  organizationId  = 4;
    optional  string  hostAccountUsername  = 5;
    optional  string  hostAccountUserId  = 6;
    optional  int64  versionNumber  = 7;
    optional  string  storeId  = 8;
    optional  string  hostAccountMutableUsername  = 9;
}

message IMPBusiness_Logos {
    optional  string  squareFilledIconURL  = 1;
    optional  string  squareHeroImageURL  = 2;
    optional  string  squareHeroImageBitmojiTemplateId  = 3;
    optional  string  horizontalIconURL  = 4;
    optional  IMPBusiness_BoltMedia  squareFilledIcon  = 5;
    optional  IMPBusiness_BoltMedia  squareHeroImage  = 6;
    optional  IMPBusiness_BoltMedia  horizontalIcon  = 7;
    optional  string  discoverFeedLogoURL  = 20;
    optional  string  megaProfileLogoURL  = 21;
    optional  string  manageProfileLogoURL  = 22;
    optional  string  originalLogoURL  = 100;
}

message IMPBusiness_Stats {
    optional  GPBInt64Value  subscriberCount  = 1;
}

message IMPBusiness_Visibility {
    optional  bool  isEnabled  = 1;
    optional  bool  isSearchable  = 2;
    optional  bool  isEmployeeOnly  = 3;
    optional  bool  isTest  = 4;
    repeated  int64  geofenceIdsArray  = 5[packed=true];
    optional  string  primaryLanguage  = 6;
    repeated  string  whitelistLanguageArray  = 7;
    repeated  string  blacklistLanguageArray  = 8;
    optional  STOContentAccessLists  contentAccessLists  = 9;
    repeated  string  localContentArray  = 10;
    repeated  int32  regionsArray  = 11[packed=true];
    repeated  ContentTag  tagsArray  = 12;
    optional  int32  ageGate  = 13;
    optional  string  homeCountry  = 14;
}

message IMPCameosFeatureStatus {
}

message IMPCashout {
    optional  int64  timestamp  = 1;
    optional  int64  value  = 2;
    optional  int64  crystals  = 3;
    optional  int32  state  = 4;
    optional  string  cashoutDate  = 5;
}

message IMPCheckProfileLinkedToPoliticalAdAccountRequest {
    repeated  string  profileIdsArray  = 1;
    optional  bool  reloadPoliticalAdsProfiles  = 2;
}

message IMPCheckProfileLinkedToPoliticalAdAccountResponse {
    repeated  bool  profileIsLinkedResults  = 1;
}

message IMPCheckUserEligibilityForPublicProfileCreationRequest {
    repeated  IMPCheckUserEligibilityForPublicProfileCreationRequest_UserEligibilityCheckInfo  usersArray  = 1;
}

message IMPCheckUserEligibilityForPublicProfileCreationRequest_UserEligibilityCheckInfo {
    optional  string  userId  = 1;
    optional  int32  type  = 2;
}

message IMPCheckUserEligibilityForPublicProfileCreationResponse {
    repeated  IMPCheckUserEligibilityForPublicProfileCreationResponse_UserEligibilityCheckResult  resultsArray  = 1;
}

message IMPCheckUserEligibilityForPublicProfileCreationResponse_UserEligibilityCheckResult {
    optional  string  userId  = 1;
    optional  int32  eligibilityResult  = 2;
    repeated  string  ineligibilityReasonsArray  = 3;
}

message IMPClearProfileRequest {
    optional  string  profileId  = 1;
}

message IMPClearProfileResponse {
}

message IMPClientInfo {
    optional  int32  cameosFeatureRestricted  = 1;
}

message IMPCollaboratorInviteCheckRequest {
    optional  string  inviterUserId  = 1;
    optional  string  inviteeUserId  = 2;
}

message IMPCollaboratorInviteCheckResponse {
    optional  bool  areBidirectionalFriends  = 1;
    optional  bool  atLeastOneBlocked  = 2;
}

message IMPCommerceStoreInfo {
    optional  string  storeId  = 1;
    optional  int32  storeType  = 2;
    optional  string  businessStoreId  = 3;
    optional  int32  storeVisibilityStatus  = 4;
}

message IMPCommonReportInfo {
    optional  string  profileId  = 1;
    optional  string  highlightId  = 2;
    optional  string  highlightVersion  = 3;
    optional  string  reasonId  = 4;
    optional  string  context  = 5;
    optional  string  reporterUsername  = 6;
}

message IMPContentIdentifier {
    optional  int32  contentType  = 1;
    optional  string  contentId  = 2;
}

message IMPContentIdentifierV2 {
    optional  int32  contentType  = 1;
    optional  string  contentId  = 2;
}

message IMPContentIdentifiersUpdate {
    repeated  IMPContentIdentifier  contentIdsArray  = 1;
}

message IMPContentIdentifiersUpdateV2 {
    repeated  IMPContentIdentifierV2  contentIdsArray  = 1;
}

message IMPContentShareRecord {
    optional  string  grantingPublisherProfileId  = 1;
    optional  string  receivingPublisherProfileId  = 2;
}

message IMPConvertUserInfo {
}

message IMPConvertUserRequest {
    optional  string  userId  = 1;
    optional  string  businessAccountId  = 2;
    optional  string  converterUserId  = 3;
}

message IMPConvertUserResponse {
}

message IMPCopySnapRequest {
    optional  string  snapId  = 1;
    optional  string  mediaId  = 2;
    optional  int64  mediaTypeValue  = 5;
}

message IMPCopySnapResponse {
    optional  string  snapId  = 1;
    optional  string  mediaId  = 2;
    optional  string  mediaURL  = 3;
}

message IMPCreateAccountRequest {
    optional  string  callingUserId  = 1;
    optional  string  callingUserDisplayName  = 2;
    optional  string  callingUserEmail  = 3;
    optional  string  callingUserPhone  = 4;
    optional  string  lastModifiedByUserId  = 5;
    optional  string  businessCategory  = 100;
    optional  string  businessDisplayName  = 101;
    optional  string  businessEmail  = 102;
    optional  string  businessStreetAddress  = 103;
    optional  string  businessPhoneNumber  = 104;
    optional  string  businessWebsite  = 105;
    optional  bytes  businessLogo  = 106;
    optional  string  businessDescription  = 107;
    optional  IMPAddress  businessAddress  = 108;
    optional  string  businessSubcategory  = 109;
    optional  bool  isLensCreator  = 110;
    optional  bool  isOfficial  = 112;
    optional  bool  isBrandProfile  = 113;
    optional  bool  canEditHighlights  = 114;
    optional  bool  isPopular  = 115;
    optional  bool  canAccessStoryReplies  = 116;
    optional  int32  businessCategoryEnum  = 117;
    optional  int32  businessSubcategoryEnum  = 118;
    optional  string  existingOrganizationId  = 200;
    optional  string  organizationDisplayName  = 201;
    optional  bool  canAccessGifting  = 202;
    optional  bytes  heroImage  = 203;
    optional  int32  heroImageVerticalPosition  = 204;
    optional  bytes  originalHeroImage  = 205;
    optional  bool  isStandard  = 206;
    optional  IMPCreateUserInfo  createUserInfo  = 300;
    optional  IMPConvertUserInfo  convertUserInfo  = 301;
    optional  bool  createPublicProfile  = 302;
    optional  bool  isTestProfile  = 400;
    optional  bool  autoDelete  = 401;
    repeated  IMPRoleSpecification  initialRolesArray  = 500;
}

message IMPCreateAccountResponse {
    optional  string  id_p  = 1;
}

message IMPCreateHighlightRequest {
    optional  string  profileId  = 1;
    repeated  IMPHighlightSnap  snapsArray  = 2;
    optional  int32  thumbnailSnapIndex  = 3;
    optional  string  title  = 4;
    optional  IMPBoltUploadObject  coverThumbnailData  = 5;
    optional  string  coverThumbnailURL  = 6;
    optional  IMPThumbnailInfo  thumbnailInfo  = 7;
    optional  bool  isSpotlight  = 8;
}

message IMPCreateHighlightResponse {
    optional  string  highlightId  = 2;
}

message IMPCreatePortfolioRequest {
    optional  string  profileId  = 1;
    optional  IMPLensPortfolio  lensPortfolio  = 2;
    optional  IMPStoryPortfolio  storyPortfolio  = 3;
}

message IMPCreatePortfolioResponse {
    optional  IMPLensPortfolio  lensPortfolio  = 1;
    optional  IMPStoryPortfolio  storyPortfolio  = 2;
}

message IMPCreatePublicProfileRequest {
    optional  string  callingUserId  = 1;
    optional  string  callingUserEmail  = 2;
    optional  string  existingOrganizationId  = 3;
    optional  string  organizationDisplayName  = 4;
    optional  string  title  = 5;
    optional  string  description_p  = 6;
    optional  string  phoneNumber  = 7;
    optional  string  emailAddress  = 8;
    optional  string  websiteURL  = 9;
    optional  IMPAddressV2  addressInfo  = 10;
    optional  int32  businessCategory  = 11;
    optional  int32  businessSubcategory  = 12;
    optional  bytes  businessLogo  = 13;
    optional  bytes  heroImage  = 14;
    optional  int32  tier  = 15;
    optional  int32  internalCategory  = 16;
    optional  int32  heroImageVerticalPosition  = 17;
    optional  bytes  originalHeroImage  = 18;
    optional  bool  isTestProfile  = 19;
    optional  IMPProfileVisibility  visibility  = 100;
    repeated  IMPRoleSpecification  initialRolesArray  = 101;
}

message IMPCreatePublicProfileResponse {
    optional  string  id_p  = 1;
}

message IMPCreatePublisherAccountRequest {
    optional  IMPCreateAccountRequest  createAccountRequest  = 1;
    optional  bytes  publisherMetadata  = 2;
    optional  string  publisherIconURL  = 3;
    optional  int64  publisherId  = 4;
    optional  string  squareFilledIconMediaId  = 5;
}

message IMPCreatePublisherAccountResponse {
    optional  IMPCreateAccountResponse  createAccountResponse  = 1;
}

message IMPCreateUserInfo {
    optional  string  desiredUsername  = 1;
}

message IMPDeactivateBusinessRequest {
    optional  string  businessId  = 1;
}

message IMPDeactivateBusinessResponse {
}

message IMPDeactivatePublicProfileRequest {
    optional  string  id_p  = 1;
}

message IMPDeactivatePublicProfileResponse {
}

message IMPDeeplinks {
    optional  string  snapcodeWebURL  = 1;
}

message IMPDeleteBusinessSnapsBySnapIdRequest {
    repeated  string  snapIdsArray  = 1;
}

message IMPDeleteBusinessSnapsBySnapIdResponse {
}

message IMPDeleteHighlightRequest {
    optional  string  profileId  = 1;
    optional  string  highlightId  = 2;
}

message IMPDeleteHighlightResponse {
}

message IMPDeleteHighlightSnapRequest {
    optional  string  profileId  = 1;
    optional  string  highlightId  = 2;
    optional  string  snapId  = 3;
}

message IMPDeleteHighlightSnapResponse {
}

message IMPDeleteOrgRoleByRoleTypeRequest {
    optional  string  profileId  = 1;
    optional  string  userId  = 2;
    optional  string  roleType  = 3;
    optional  string  email  = 4;
}

message IMPDeleteOrgRoleByRoleTypeResponse {
}

message IMPDeleteProfileRequest {
    optional  string  id_p  = 1;
}

message IMPDeleteProfileResponse {
}

message IMPDeleteRoleByRoleTypeRequest {
    optional  string  profileId  = 1;
    optional  string  userId  = 2;
    optional  string  roleType  = 3;
}

message IMPDeleteRoleByRoleTypeResponse {
}

message IMPDeleteRoleInviteRequest {
    optional  string  businessId  = 1;
    optional  string  inviteeUserId  = 2;
}

message IMPDeleteRoleInviteResponse {
}

message IMPDeleteRoleRequest {
    optional  string  businessId  = 1;
    optional  string  userId  = 2;
    optional  string  roleId  = 3;
}

message IMPDeleteRoleResponse {
}

message IMPDeleteStoryMediaRequest {
    repeated  string  mediaIdsArray  = 1;
}

message IMPDeleteStoryMediaResponse {
}

message IMPEpisodeLaunchInfo {
    optional  int32  episodeNumber  = 1;
    optional  int32  seasonNumber  = 2;
    optional  string  episodeId  = 3;
}

message IMPEpisodeMetadata {
    optional  string  episodeId  = 1;
    optional  string  title  = 2;
    optional  string  synopsis  = 3;
    optional  int32  episodeNumber  = 4;
    optional  string  seasonId  = 5;
    optional  string  showId  = 6;
    optional  string  deeplink  = 7;
}

message IMPEpisodeMetadataPage {
    repeated  IMPEpisodeMetadata  episodesArray  = 1;
    optional  string  nextPageId  = 2;
}

message IMPExportSnapProUserIdsRequest {
}

message IMPExtraContent {
    optional  IMPTrailerContent  trailer  = 1;
}

message IMPExtraMetadata {
    optional  string  showId  = 1;
    optional  string  seasonId  = 2;
    optional  IMPTrailer  trailer  = 3;
}

message IMPGetActiveBusinessStoriesRequest {
    repeated  string  businessIdsArray  = 1;
    optional  bool  includeMetrics  = 2;
}

message IMPGetActiveBusinessStoriesResponse {
    repeated  IMPBusinessStory  storiesArray  = 1;
}

message IMPGetActivityRequest {
    optional  string  payoutEndDate  = 1;
    optional  string  cashoutEndDate  = 2;
    optional  string  timezone  = 3;
    optional  int64  pageSize  = 4;
}

message IMPGetActivityResponse {
    repeated  IMPActivity  activitiesArray  = 1;
    optional  string  nextPayoutEndDate  = 2;
    optional  string  nextCashoutEndDate  = 3;
}

message IMPGetAllWatchedStateForUserRequest {
    optional  string  userId  = 1;
    optional  string  pageId  = 2;
}

message IMPGetAllWatchedStateForUserResponse {
    repeated  IMPWatchedState  watchedStatesArray  = 1;
    optional  string  nextPageId  = 2;
}

message IMPGetAuditTrailRequest {
    optional  string  id_p  = 1;
    optional  string  pageToken  = 2;
}

message IMPGetAuditTrailResponse {
    repeated  IMPAuditRecord  recordsArray  = 1;
    optional  string  pageToken  = 2;
}

message IMPGetBusinessAccountRequest {
    optional  string  id_p  = 1;
}

message IMPGetBusinessAccountResponse {
    optional  IMPBusinessAccount  account  = 1;
}

message IMPGetBusinessOptions {
    optional  bool  includeDeactivatedProfile  = 1;
}

message IMPGetBusinessProfileRequest {
    optional  string  id_p  = 1;
    optional  string  publisherId  = 2;
    optional  bool  includeGatedProfiles  = 3;
}

message IMPGetBusinessProfileResponse {
    optional  IMPBusinessProfileAndUserData  profile  = 1;
}

message IMPGetBusinessProfilesRequest {
    repeated  string  profileIdsArray  = 1;
    repeated  string  publisherIdsArray  = 2;
    optional  bool  includeGatedProfiles  = 3;
    optional  bool  includeAudienceGateSettings  = 4;
}

message IMPGetBusinessProfilesResponse {
    repeated  IMPBusinessProfileAndUserData  profilesByProfileId  = 1;
    repeated  IMPBusinessProfileAndUserData  profilesByPublisherId  = 2;
}

message IMPGetBusinessRequest {
    optional  string  businessProfileId  = 1;
    optional  string  publisherId  = 2;
    optional  IMPGetBusinessOptions  getBusinessOptions  = 3;
}

message IMPGetBusinessResponse {
    optional  IMPBusiness  business  = 1;
}

message IMPGetBusinessStoryManifestForSnapIdsRequest {
    optional  string  businessId  = 1;
    repeated  string  snapIdsArray  = 2;
}

message IMPGetBusinessStoryManifestForSnapIdsResponse {
    optional  SCStoryManifest  manifest  = 1;
}

message IMPGetBusinessStoryManifestRequest {
    optional  string  businessId  = 1;
    optional  IMPTimeRange  timeRange  = 2;
    optional  bool  includeInsights  = 3;
}

message IMPGetBusinessStoryManifestResponse {
    optional  SCStoryManifest  manifest  = 1;
}

message IMPGetBusinessStorySnapViewersRequest {
    optional  string  snapId  = 1;
}

message IMPGetBusinessStorySnapViewersResponse {
    optional  IMPBusinessSnapInsights  insights  = 1;
}

message IMPGetBusinessStorySnapWasPersistedRequest {
    optional  string  businessId  = 1;
    optional  string  clientId  = 2;
}

message IMPGetBusinessStorySnapWasPersistedResponse {
    optional  bool  persisted  = 1;
}

message IMPGetBusinessUserLinksByBusinessRequest {
    repeated  string  businessIdArray  = 1;
}

message IMPGetBusinessUserLinksByBusinessResponse {
    repeated  IMPBusinessUserLink  links  = 1;
}

message IMPGetBusinessUserLinksRequest {
    repeated  string  userIdArray  = 1;
}

message IMPGetBusinessUserLinksResponse {
    repeated  IMPBusinessUserLink  links  = 1;
}

message IMPGetContentShareRecordsForPublisherRequest {
    optional  string  grantingPublisherProfileId  = 1;
}

message IMPGetContentShareRecordsForPublisherResponse {
    repeated  IMPContentShareRecord  recordsArray  = 1;
}

message IMPGetCrystalActivitySummaryRequest {
}

message IMPGetCrystalActivitySummaryResponse {
    optional  int32  payoutState  = 1;
    optional  int64  currentCrystals  = 2;
    optional  int64  currentEarnings  = 3;
    optional  string  onboardingEmail  = 4;
    optional  string  accessCode  = 5;
    optional  bool  canCashout  = 6;
    optional  bool  securityCheckPasses  = 7;
    optional  int32  reasonCode  = 8;
    optional  int64  cashoutThreshold  = 9;
    optional  int64  pendingCrystals  = 10;
}

message IMPGetEpisodeListForSeasonRequest {
    optional  string  showId  = 1;
    optional  string  seasonId  = 2;
    optional  string  pageId  = 3;
    optional  int32  pageSize  = 4;
}

message IMPGetEpisodeListForSeasonResponse {
    repeated  StoryDoc  episodesArray  = 1;
    optional  string  nextPageId  = 2;
}

message IMPGetEpisodeListRequest {
    optional  string  businessProfileId  = 1;
    optional  string  pageId  = 2;
    optional  uint32  limit  = 3;
}

message IMPGetEpisodeListResponse {
    repeated  StoryDoc  episodesArray  = 1;
    optional  string  nextPageId  = 2;
}

message IMPGetEpisodeMetadataBatchRequest {
    repeated  string  episodeIdsArray  = 1;
}

message IMPGetEpisodeMetadataBatchResponse {
    repeated  IMPEpisodeMetadata  episodesArray  = 1;
}

message IMPGetEpisodeMetadataForSeasonRequest {
    optional  string  seasonId  = 1;
    optional  string  pageId  = 2;
    optional  bool  consistent  = 3;
}

message IMPGetEpisodeMetadataForSeasonResponse {
    optional  IMPEpisodeMetadataPage  episodesPage  = 1;
}

message IMPGetEpisodeRequest {
    optional  string  id_p  = 1;
    optional  int32  namespace_p  = 2;
}

message IMPGetEpisodeResponse {
    optional  StoryDoc  episode  = 1;
}

message IMPGetEpisodesForSeasonRequest {
    optional  string  seasonId  = 1;
    optional  string  pageId  = 2;
    optional  string  userId  = 3;
    optional  bool  consistent  = 4;
}

message IMPGetEpisodesForSeasonResponse {
    repeated  StoryDoc  episodesArray  = 1;
    optional  string  nextPageId  = 2;
    repeated  IMPWatchedState  watchedStatesArray  = 3;
}

message IMPGetExtrasForShowRequest {
    optional  string  showId  = 1;
}

message IMPGetExtrasForShowResponse {
    repeated  IMPExtraContent  extrasArray  = 1;
}

message IMPGetFollowersInRangeRequest {
    optional  string  userId  = 1;
    optional  int32  start  = 2;
    optional  int32  end  = 3;
}

message IMPGetFollowersInRangeResponse {
    repeated  IMPUserFollower  followersArray  = 1;
}

message IMPGetGhostIdsRequest {
    repeated  string  userIdsArray  = 1;
}

message IMPGetGhostIdsResponse {
    repeated  string  ghostIds  = 1;
}

message IMPGetGiftRequest {
    optional  string  id_p  = 1;
}

message IMPGetGiftResponse {
    optional  IMPGift  gift  = 1;
}

message IMPGetHighlightsRequest {
    optional  string  profileId  = 1;
    repeated  string  highlightIdsArray  = 2;
}

message IMPGetHighlightsResponse {
    repeated  IMPHighlight  highlightsArray  = 1;
}

message IMPGetInventoryItemsByProfileIdRequest {
    optional  string  organizationId  = 1;
    optional  string  businessProfileId  = 2;
}

message IMPGetInventoryItemsByProfileIdResponse {
    repeated  IMPAdsAdsInventoryItemSubResponse  inventoryItemsArray  = 1;
}

message IMPGetManagedProfileCalloutsRequest {
    repeated  string  idArray  = 1;
}

message IMPGetManagedProfileCalloutsResponse {
    repeated  IMPManagedProfileCallouts  calloutsArray  = 1;
}

message IMPGetOfficialUserCollaboratorsRequest {
    optional  string  userId  = 1;
}

message IMPGetOfficialUserCollaboratorsResponse {
    repeated  IMPOfficialUserCollaborator  usersArray  = 1;
}

message IMPGetOnboardingProgressRequest {
}

message IMPGetOnboardingProgressResponse {
    optional  int64  totalSteps  = 1;
    optional  int64  numOfFinishedSteps  = 2;
    optional  int64  totalProgramsAvailable  = 3;
    optional  int64  numOfIncompletePrograms  = 4;
    repeated  IMPOnboardingSection  onboardingSectionArray  = 5;
}

message IMPGetPastBusinessStoriesRequest {
    optional  string  businessId  = 1;
    optional  string  pageId  = 2;
    optional  int32  limit  = 3;
}

message IMPGetPastBusinessStoriesResponse {
    optional  string  nextPageId  = 1;
    repeated  SCStoryManifest  manifestsArray  = 2;
}

message IMPGetPayoutsRequest {
    optional  int64  startTimestamp  = 1;
    optional  int64  endTimestamp  = 2;
}

message IMPGetPayoutsResponse {
    optional  int32  payoutState  = 1;
    optional  int64  totalEarnings  = 2;
    repeated  IMPPayout  pendingPayoutsArray  = 3;
    repeated  IMPPayout  confirmedPayoutsArray  = 4;
    optional  bool  hasEarningV1  = 5;
    optional  string  onboardingEmail  = 6;
    optional  string  accessCode  = 7;
    optional  int32  reasonCode  = 8;
}

message IMPGetPortfolioRequest {
    optional  string  profileId  = 1;
    optional  int32  portfolioType  = 2;
}

message IMPGetPortfolioResponse {
    optional  IMPLensPortfolio  lensPortfolio  = 1;
    optional  IMPStoryPortfolio  storyPortfolio  = 2;
}

message IMPGetProfileContentRequest {
    optional  int32  contentType  = 1;
    optional  string  order  = 2;
    optional  string  pageId  = 3;
    optional  uint32  limit  = 4;
}

message IMPGetProfileContentResponse {
    optional  int32  contentType  = 1;
    repeated  IMPProfileContent  contentsArray  = 2;
    optional  string  nextPageId  = 3;
}

message IMPGetPublicProfileRequest {
    optional  string  id_p  = 1;
    optional  IMPProfileHydrationOption  hydrationOption  = 2;
    optional  bool  includeGatedProfiles  = 3;
    optional  bool  includeRejectedProfiles  = 4;
    optional  string  userId  = 5;
    optional  bool  omitPlaceholderImage  = 6;
}

message IMPGetPublicProfileResponse {
    optional  IMPProfileAndUserData  profile  = 1;
}

message IMPGetPublicProfilesRequest {
    repeated  string  idsArray  = 1;
    optional  IMPProfileHydrationOption  hydrationOption  = 2;
    optional  bool  includeGatedProfiles  = 3;
}

message IMPGetPublicProfilesResponse {
    repeated  IMPProfileAndUserData  profilesByProfileId  = 1;
}

message IMPGetPublisherOrganizationListRequest {
    optional  string  pageId  = 1;
}

message IMPGetPublisherOrganizationListResponse {
    repeated  IMPPublisherOrganization  publisherOrganizationsArray  = 1;
    optional  string  nextPageId  = 2;
}

message IMPGetPublisherOrganizationsRequest {
    repeated  string  organizationIdsArray  = 1;
}

message IMPGetPublisherOrganizationsResponse {
    repeated  IMPPublisherOrganization  publisherOrganizationsArray  = 1;
}

message IMPGetRecentWatchedStatesForUserRequest {
    optional  string  userId  = 1;
    optional  int32  maxHistoryPerShow  = 2;
    optional  int64  afterTimestampMs  = 3;
}

message IMPGetRecentWatchedStatesForUserResponse {
    repeated  IMPShowWatchedState  showWatchedStateArray  = 1;
}

message IMPGetSeasonListForShowRequest {
    optional  string  showId  = 1;
    optional  string  pageId  = 2;
    optional  int32  episodeLimit  = 3;
}

message IMPGetSeasonListForShowResponse {
    optional  IMPSeasonMetadataPage  seasonsPage  = 1;
    optional  string  nextPageId  = 2;
    optional  int32  showType  = 3;
}

message IMPGetSeasonMetadataBatchRequest {
    repeated  string  seasonIdsArray  = 1;
}

message IMPGetSeasonMetadataBatchResponse {
    repeated  IMPSeasonMetadata  seasonsArray  = 1;
}

message IMPGetSeasonMetadataRequest {
    optional  string  showId  = 1;
    optional  string  pageId  = 2;
    optional  bool  consistent  = 3;
}

message IMPGetSeasonMetadataResponse {
    optional  IMPSeasonMetadataPage  seasonsPage  = 1;
}

message IMPGetSeasonPageRequest {
    optional  string  showId  = 1;
    optional  string  seasonId  = 2;
    optional  string  cursor  = 3;
    optional  int32  pageSize  = 4;
}

message IMPGetSeasonPageResponse {
    repeated  StoryDoc  episodesArray  = 1;
    optional  string  cursor  = 2;
}

message IMPGetShowComponentsRequest {
    repeated  string  storyIdsArray  = 1;
}

message IMPGetShowComponentsResponse {
    repeated  STOEpisode  episodesArray  = 1;
    repeated  STOShowExtra  extrasArray  = 2;
}

message IMPGetShowDisplayInfoRequest {
    optional  string  showId  = 1;
    optional  string  pageId  = 2;
    optional  string  userId  = 3;
    optional  int32  episodeLimit  = 4;
}

message IMPGetShowDisplayInfoResponse {
    optional  IMPSeasonMetadataPage  seasonsPage  = 1;
    optional  int64  initiallyDisplayedSeasonIndex  = 2;
    optional  StoryDoc  upNext  = 3;
    optional  IMPWatchedState  upNextWatchedState  = 4;
    optional  string  title  = 5;
    optional  string  publisherName  = 6;
    optional  int64  publisherId  = 7;
    optional  IMPShowMetadata  showMetadata  = 8;
}

message IMPGetShowMetadataRequest {
    optional  string  showId  = 1;
    optional  string  editionId  = 2;
}

message IMPGetShowMetadataResponse {
    optional  IMPShowMetadata  showMetadata  = 1;
}

message IMPGetSubscriberCountBatchRequest {
    repeated  IMPGetSubscriberCountRequest  requestsArray  = 1;
}

message IMPGetSubscriberCountBatchResponse {
    repeated  IMPGetSubscriberCountResponse  responsesArray  = 1;
}

message IMPGetSubscriberCountRequest {
    optional  string  profileId  = 1;
    optional  int64  when  = 2;
    optional  int32  sourceType  = 3;
}

message IMPGetSubscriberCountResponse {
    optional  string  profileId  = 1;
    optional  int64  when  = 2;
    optional  int64  count  = 3;
}

message IMPGetSubscriberInfoRequest {
    repeated  string  userIdsArray  = 1;
}

message IMPGetSubscriberInfoResponse {
    repeated  IMPSubscriberInfo  subscriberInfosArray  = 1;
}

message IMPGetSubscriptionStatusesRequest {
    repeated  string  businessProfileIdsArray  = 1;
    repeated  IMPSubscriptionQueryId  identifiersArray  = 2;
}

message IMPGetSubscriptionStatusesResponse {
    repeated  bool  subscriptionStatuses  = 1;
}

message IMPGetUserEmployeeStatusRequest {
    optional  string  userId  = 1;
}

message IMPGetUserEmployeeStatusResponse {
    optional  bool  isEmployee  = 1;
}

message IMPGetUserSettingsRequest {
}

message IMPGetUserSettingsResponse {
    optional  IMPUserSettings  settings  = 1;
}

message IMPGetWatchedStateForSeasonRequest {
    optional  string  seasonId  = 1;
    optional  string  pageId  = 2;
}

message IMPGetWatchedStateForSeasonResponse {
    repeated  IMPWatchedState  watchedStatesArray  = 1;
    optional  string  nextPageId  = 2;
}

message IMPGetWatchedStateForShowRequest {
    optional  string  userId  = 1;
    optional  string  showId  = 2;
}

message IMPGetWatchedStateForShowResponse {
    optional  IMPShowWatchedState  showWatchedState  = 1;
}

message IMPGetWatchedStateRequest {
    optional  string  userId  = 1;
    repeated  string  itemIdsArray  = 2;
}

message IMPGetWatchedStateResponse {
    repeated  IMPWatchedState  watchedStatesArray  = 2;
}

message IMPGift {
    optional  string  id_p  = 1;
    optional  string  name  = 2;
    optional  string  thumbnailContentURL  = 3;
    optional  string  openAnimationContentURL  = 4;
    optional  string  sendAnimationContentURL  = 5;
    optional  string  gradientStartColor  = 6;
    optional  string  gradientStopColor  = 7;
    optional  string  openAudioContentURL  = 8;
    optional  string  sendAudioContentURL  = 9;
}

message IMPGiftingFanNotification {
    optional  string  id_p  = 1;
    optional  string  userId  = 2;
    optional  string  creatorUserId  = 3;
}

message IMPGrantRoleToUserRequest {
    optional  string  businessId  = 1;
    optional  string  receivingUserId  = 2;
    optional  string  roleType  = 6;
    optional  IMPRoleSpecification  role  = 7;
}

message IMPGrantRoleToUserResponse {
}

message IMPHasPendingRoleInvitesRequest {
}

message IMPHasPendingRoleInvitesResponse {
    optional  bool  hasPendingInvites  = 1;
}

message IMPHighlight {
    optional  StoryDoc  story  = 1;
    optional  string  version  = 2;
    optional  IMPThumbnailInfo  thumbnailInfo  = 3;
    repeated  IMPMediaInfo  mediaInfoArray  = 4;
    optional  string  compositeId  = 5;
}

message IMPHighlightSnap {
    optional  string  highlightSnapId  = 1;
    optional  string  profileStorySnapId  = 2;
    optional  IMPBoltUploadObject  boltUploadObject  = 3;
    optional  IMPSpotlightSnapObject  spotlightSnapObject  = 4;
}

message IMPHighlightUpdateEvent {
    optional  string  profileId  = 1;
    optional  string  highlightId  = 2;
    optional  int64  version  = 3;
    optional  bool  isDeleted  = 4;
    optional  int32  creationSource  = 5;
    optional  bool  refreshContent  = 6;
}

message IMPHostAccountInfo {
    optional  string  userId  = 1;
    optional  string  username  = 2;
    optional  string  verifiedUserEmoji  = 3;
    optional  string  displayName  = 4;
    optional  bool  isVerified  = 5;
    repeated  IMPOfficialUserCollaborator  collaboratorsArray  = 6;
    optional  string  bitmojiAvatarId  = 7;
    optional  int64  userFollowerCount  = 8;
    repeated  string  blockedUserIdsArray  = 9;
}

message IMPIds {
    repeated  string  idsArray  = 1;
}

message IMPImpalaHostAccountInfoRequest {
    optional  string  userId  = 1;
    optional  string  username  = 2;
    repeated  string  userIdsArray  = 3;
    repeated  string  usernamesArray  = 4;
}

message IMPImpalaHostAccountInfoResponse {
    optional  string  username  = 1;
    optional  string  verifiedUserEmoji  = 2;
    optional  string  displayName  = 3;
    optional  bool  isVerified  = 4;
    repeated  IMPOfficialUserCollaborator  collaboratorsArray  = 5;
    optional  string  bitmojiAvatarId  = 6;
    optional  int64  userFollowerCount  = 7;
    optional  string  userId  = 8;
    repeated  string  blockedUserIdsArray  = 9;
    repeated  IMPHostAccountInfo  infosArray  = 10;
}

message IMPIncrementFriendLinkVersionForHostUserRequest {
    optional  string  userId  = 1;
    optional  string  businessId  = 2;
}

message IMPIncrementFriendLinkVersionForHostUserResponse {
}

message IMPIncrementSubscriberCountRequest {
    optional  string  profileId  = 1;
    optional  int64  delta  = 2;
    optional  int64  windowTimestamp  = 3;
}

message IMPIncrementSubscriberCountResponse {
}

message IMPInsightsAudienceInsights {
    optional  int32  type  = 1;
    repeated  IMPInsightsAudienceInsights_GenderStats  genderDistributionArray  = 2;
    repeated  IMPInsightsAudienceInsights_AgeStats  ageDistributionArray  = 3;
    repeated  IMPInsightsAudienceInsights_GenderAgeStats  genderAgeDistributionArray  = 4;
    repeated  IMPInsightsAudienceInsights_SubscribeSourceStats  subscribeSourceDistributionArray  = 5;
    repeated  IMPInsightsAudienceInsights_LifestyleStats  lifestyleDistributionArray  = 6;
    repeated  IMPInsightsAudienceInsights_RegionStats  topRegionsArray  = 7;
}

message IMPInsightsAudienceInsights_AgeStats {
    optional  int32  age  = 1;
    optional  double  ratio  = 2;
}

message IMPInsightsAudienceInsights_GenderAgeStats {
    optional  int32  gender  = 1;
    optional  int32  age  = 2;
    optional  double  ratio  = 3;
}

message IMPInsightsAudienceInsights_GenderStats {
    optional  int32  gender  = 1;
    optional  double  ratio  = 2;
}

message IMPInsightsAudienceInsights_LifestyleStats {
    optional  string  lifestyle  = 1;
    optional  double  ratio  = 2;
}

message IMPInsightsAudienceInsights_RegionStats {
    optional  string  displayRegionName  = 1;
    optional  double  ratio  = 2;
}

message IMPInsightsAudienceInsights_SubscribeSourceStats {
    optional  int32  source  = 1;
    optional  double  ratio  = 2;
}

message IMPInsightsDailyLensMetrics {
    optional  int64  timestampMsecs  = 1;
    optional  int64  lensReach  = 2;
    optional  int64  lensViews  = 3;
    optional  int64  lensScans  = 4;
    optional  int64  lensShares  = 5;
    optional  int64  lensCameraPlayTimeSec  = 6;
    optional  float  lensCameraTotalViewTimeSec  = 7;
    optional  int64  lensCameraPlayTimeMin  = 8;
    optional  int64  lensCameraTotalViewTimeMin  = 9;
    optional  int64  lensPlays  = 10;
}

message IMPInsightsDailySpotlightMetrics {
    optional  int64  timestampMsecs  = 1;
    optional  int64  spotlightBoosts  = 2;
    optional  int64  spotlightViews  = 3;
    optional  int64  spotlightShares  = 4;
    optional  int64  spotlightSubscribes  = 5;
    optional  int64  spotlightReach  = 6;
    optional  int64  spotlightTotalViewTimeMs  = 7;
    optional  int64  spotlightAverageViewTimeMs  = 8;
}

message IMPInsightsDailyStoryView {
    optional  int64  totalViews  = 1;
    optional  float  avgViewTimeSecs  = 2;
    optional  float  avgCompletionRatio  = 3;
    optional  int64  timestampMsecs  = 4;
    optional  int64  reach  = 5;
    optional  float  pctReachAreSubscribers  = 6;
    optional  int64  storyViews  = 7;
    optional  int64  storyReplies  = 8;
    optional  int64  publicStoryReach  = 9;
    optional  float  publicStoryAvgViewTimeSecs  = 10;
    optional  int64  publicStoryStoryViews  = 11;
}

message IMPInsightsGetActiveStoryManifestRequest {
    optional  string  businessId  = 1;
}

message IMPInsightsGetActiveStoryManifestResponse {
    optional  SCStoryManifest  manifest  = 1;
}

message IMPInsightsGetInsightsSummaryByUserIdRequest {
    optional  string  userId  = 1;
}

message IMPInsightsGetInsightsSummaryRequest {
    optional  string  businessId  = 1;
    optional  bool  includePreviousPeriods  = 2;
    optional  bool  excludeAudienceInsights  = 3;
    optional  IMPClientInfo  clientInfo  = 4;
}

message IMPInsightsGetInsightsSummaryResponse {
    optional  IMPInsightsInfluencerInsights  popularUserInsights  = 1;
    optional  bool  isWhitelisted  = 2;
}

message IMPInsightsGetLensCreatorInsightsRequest {
    optional  string  userId  = 1;
}

message IMPInsightsGetLensCreatorInsightsResponse {
    optional  IMPInsightsInfluencerInsights  lensCreatorInsights  = 1;
}

message IMPInsightsGetLensInsightsRequest {
    optional  string  businessId  = 1;
    optional  int32  startIndex  = 2;
    optional  int32  limit  = 3;
    optional  int32  orderBy  = 4;
}

message IMPInsightsGetLensInsightsResponse {
    optional  int32  nextStartIndex  = 1;
    repeated  IMPInsightsLensLifetimeInsights  lensInsightsArray  = 2;
}

message IMPInsightsGetSnapInsightsRequest {
    optional  string  businessId  = 1;
    optional  string  snapId  = 2;
}

message IMPInsightsGetSnapInsightsResponse {
    repeated  IMPInsightsMetrics  snapLifetimeMetricsArray  = 1;
    optional  bool  isFinishedProcessing  = 2;
    repeated  IMPInsightsReadReceiptSection  readReceiptSectionsArray  = 3;
}

message IMPInsightsGetSpotlightInsightsRequest {
    optional  string  businessId  = 1;
    optional  string  pageId  = 2;
    optional  int32  limit  = 3;
    optional  IMPClientInfo  clientInfo  = 4;
}

message IMPInsightsGetSpotlightInsightsResponse {
    optional  string  nextPageId  = 1;
    repeated  IMPInsightsSpotlightLifetimeInsights  spotlightInsightsArray  = 2;
}

message IMPInsightsGetStoriesInsightsRequest {
    optional  string  businessId  = 1;
    optional  string  pageId  = 2;
    optional  int32  limit  = 3;
}

message IMPInsightsGetStoriesInsightsResponse {
    optional  string  nextPageId  = 1;
    repeated  IMPInsightsStoryLifetimeInsights  storyInsightsArray  = 2;
}

message IMPInsightsGetStoryManifestRequest {
    optional  string  businessId  = 1;
    optional  string  storyId  = 2;
    optional  IMPInsightsTimeRange  timeRange  = 3;
}

message IMPInsightsGetStoryManifestResponse {
    optional  SCStoryManifest  manifest  = 1;
}

message IMPInsightsInfluencerBasicProfile {
    optional  string  displayName  = 1;
    optional  bool  isOfficial  = 2;
}

message IMPInsightsInfluencerInsights {
    optional  string  userId  = 1;
    optional  IMPInsightsInfluencerBasicProfile  basicProfile  = 2;
    optional  IMPInsightsSubscribeInsights  subscribeInsights  = 3;
    optional  IMPInsightsStoryViewInsights  storyViewInsights  = 4;
    optional  IMPInsightsAudienceInsights  subscriberAudienceInsights  = 5;
    repeated  IMPInsightsSnapInsights  snapInsightsArray  = 6;
    repeated  IMPInsightsDailyStoryView  dailyStoryViewsArray  = 7;
    optional  int64  aggregationTimestampMsecs  = 8;
    optional  IMPInsightsStoryInsights  storyInsights  = 9;
    optional  IMPInsightsLensCreatorInsights  lensCreatorInsights  = 10;
    repeated  IMPInsightsDailyLensMetrics  dailyLensMetricsArray  = 11;
    optional  IMPInsightsLensInsights  lensInsights  = 12;
    optional  IMPInsightsSpotlightSummaryMetrics  spotlightSummaryMetrics  = 13;
    repeated  IMPInsightsDailySpotlightMetrics  dailySpotlightMetricsArray  = 14;
}

message IMPInsightsLens {
    optional  string  businessId  = 1;
    optional  string  lensId  = 2;
    optional  string  name  = 3;
    optional  int64  createdTimestampSec  = 4;
    optional  string  thumbnailURL  = 5;
    optional  string  iconURL  = 6;
    optional  string  deeplinkURL  = 7;
}

message IMPInsightsLensCreatorInsights {
    optional  int64  lensReachSinceLastWeek  = 1;
    optional  int64  lensReachSinceLastMonth  = 2;
    optional  int64  lensViewsSinceCreation  = 3;
    optional  int64  lensViewsSinceLastWeek  = 4;
    optional  int64  lensViewsSinceLastMonth  = 5;
    optional  int64  lensScansSinceCreation  = 6;
    optional  int64  lensScansSinceLastWeek  = 7;
    optional  int64  lensScansSinceLastMonth  = 8;
    optional  int64  lensSharesSinceCreation  = 9;
    optional  int64  lensSharesSinceLastWeek  = 10;
    optional  int64  lensSharesSinceLastMonth  = 11;
    optional  int64  lensCameraPlayTimeSecsSinceCreation  = 12;
    optional  int64  lensCameraPlayTimeSecsSinceLastWeek  = 13;
    optional  int64  lensCameraPlayTimeSecsSinceLastMonth  = 14;
    optional  int64  lensCameraTotalViewTimeSecsSinceCreation  = 15;
    optional  int64  lensCameraTotalViewTimeSecsSinceLastWeek  = 16;
    optional  int64  lensCameraTotalViewTimeSecsSinceLastMonth  = 17;
    optional  int64  lensCameraPlayTimeMinsSinceCreation  = 18;
    optional  int64  lensCameraPlayTimeMinsSinceLastWeek  = 19;
    optional  int64  lensCameraPlayTimeMinsSinceLastMonth  = 20;
    optional  int64  lensCameraTotalViewTimeMinsSinceCreation  = 21;
    optional  int64  lensCameraTotalViewTimeMinsSinceLastWeek  = 22;
    optional  int64  lensCameraTotalViewTimeMinsSinceLastMonth  = 23;
    optional  int64  lensPlaysSinceCreation  = 24;
    optional  int64  lensPlaysSinceLastWeek  = 25;
    optional  int64  lensPlaysSinceLastMonth  = 26;
    optional  int64  lensReachSincePreviousWeek  = 100;
    optional  int64  lensReachSincePreviousMonth  = 101;
    optional  int64  lensViewsSincePreviousWeek  = 102;
    optional  int64  lensViewsSincePreviousMonth  = 103;
    optional  int64  lensScansSincePreviousWeek  = 104;
    optional  int64  lensScansSincePreviousMonth  = 105;
    optional  int64  lensSharesSincePreviousWeek  = 106;
    optional  int64  lensSharesSincePreviousMonth  = 107;
    optional  int64  lensCameraPlayTimeSecsSincePreviousWeek  = 108;
    optional  int64  lensCameraPlayTimeSecsSincePreviousMonth  = 109;
    optional  int64  lensCameraTotalViewTimeSecsSincePreviousWeek  = 110;
    optional  int64  lensCameraTotalViewTimeSecsSincePreviousMonth  = 111;
    optional  int64  lensCameraPlayTimeMinsSincePreviousWeek  = 112;
    optional  int64  lensCameraPlayTimeMinsSincePreviousMonth  = 113;
    optional  int64  lensCameraTotalViewTimeMinsSincePreviousWeek  = 114;
    optional  int64  lensCameraTotalViewTimeMinsSincePreviousMonth  = 115;
    optional  int64  lensPlaysSincePreviousWeek  = 116;
    optional  int64  lensPlaysSincePreviousMonth  = 117;
}

message IMPInsightsLensInsights {
    optional  int64  numLenses  = 1;
    repeated  IMPInsightsLensLifetimeInsights  lensLifetimeInsightsArray  = 2;
}

message IMPInsightsLensLifetimeInsights {
    optional  IMPInsightsLens  lens  = 1;
    repeated  IMPInsightsMetrics  lensLifetimeMetricsArray  = 2;
}

message IMPInsightsMetrics {
    optional  int32  name  = 1;
    optional  double  value  = 2;
    repeated  IMPInsightsScoredValue  scoredValuesArray  = 3;
}

message IMPInsightsReadReceiptSection {
    optional  int32  type  = 1;
    repeated  IMPInsightsUser  usersArray  = 2;
}

message IMPInsightsScoredValue {
    optional  string  value  = 1;
    optional  double  score  = 2;
}

message IMPInsightsSnapInsights {
    optional  string  rawSnapId  = 1;
    optional  string  thumbnailURL  = 2;
    optional  string  thumbnailIv  = 3;
    optional  string  thumbnailKey  = 4;
    optional  int64  impressions  = 5;
    optional  int64  reach  = 6;
    optional  int64  shares  = 7;
    optional  int64  screenshots  = 8;
    optional  int64  storyReplies  = 9;
    optional  int64  crystalsEarned  = 10;
}

message IMPInsightsSpotlight {
    optional  string  businessId  = 1;
    optional  string  spotlightId  = 2;
    optional  string  thumbnailURL  = 3;
    optional  int64  creationTimestampMs  = 4;
    optional  SCStoryManifest  manifest  = 5;
}

message IMPInsightsSpotlightLifetimeInsights {
    optional  IMPInsightsSpotlight  spotlight  = 1;
    repeated  IMPInsightsMetrics  spotlightLifetimeInsightsArray  = 2;
}

message IMPInsightsSpotlightSummaryMetrics {
    optional  int64  spotlightBoostsSinceLastWeek  = 1;
    optional  int64  spotlightBoostsSinceLastMonth  = 2;
    optional  int64  spotlightBoostsSincePreviousWeek  = 3;
    optional  int64  spotlightBoostsSincePreviousMonth  = 4;
    optional  int64  spotlightViewsSinceLastWeek  = 11;
    optional  int64  spotlightViewsSinceLastMonth  = 12;
    optional  int64  spotlightViewsSincePreviousWeek  = 13;
    optional  int64  spotlightViewsSincePreviousMonth  = 14;
    optional  int64  spotlightSharesSinceLastWeek  = 21;
    optional  int64  spotlightSharesSinceLastMonth  = 22;
    optional  int64  spotlightSharesSincePreviousWeek  = 23;
    optional  int64  spotlightSharesSincePreviousMonth  = 24;
    optional  int64  spotlightSubscribesSinceLastWeek  = 31;
    optional  int64  spotlightSubscribesSinceLastMonth  = 32;
    optional  int64  spotlightSubscribesSincePreviousWeek  = 33;
    optional  int64  spotlightSubscribesSincePreviousMonth  = 34;
    optional  int64  spotlightReachSinceLastWeek  = 41;
    optional  int64  spotlightReachSinceLastMonth  = 42;
    optional  int64  spotlightReachSincePreviousWeek  = 43;
    optional  int64  spotlightReachSincePreviousMonth  = 44;
    optional  int64  spotlightTotalViewTimeMsSinceLastWeek  = 51;
    optional  int64  spotlightTotalViewTimeMsSinceLastMonth  = 52;
    optional  int64  spotlightTotalViewTimeMsSincePreviousWeek  = 53;
    optional  int64  spotlightTotalViewTimeMsSincePreviousMonth  = 54;
    optional  int64  spotlightAverageViewTimeMsSinceLastWeek  = 61;
    optional  int64  spotlightAverageViewTimeMsSinceLastMonth  = 62;
    optional  int64  spotlightAverageViewTimeMsSincePreviousWeek  = 63;
    optional  int64  spotlightAverageViewTimeMsSincePreviousMonth  = 64;
}

message IMPInsightsStory {
    optional  string  businessId  = 1;
    optional  string  storyId  = 2;
    optional  int32  numSnaps  = 3;
    optional  string  thumbnailURL  = 4;
    optional  IMPInsightsTimeRange  timeRange  = 5;
    optional  bool  userContributedToStory  = 6;
}

message IMPInsightsStoryInsights {
    optional  int64  numStories  = 1;
    repeated  IMPInsightsStoryLifetimeInsights  storyLifetimeInsightsArray  = 2;
}

message IMPInsightsStoryLifetimeInsights {
    optional  IMPInsightsStory  story  = 1;
    repeated  IMPInsightsMetrics  storyLifetimeMetricsArray  = 2;
}

message IMPInsightsStoryViewInsights {
    optional  int64  viewsSinceCreation  = 1;
    optional  int64  viewsSinceLastWeek  = 2;
    optional  int64  viewsSinceLastMonth  = 3;
    optional  float  viewTimeSecsSinceCreation  = 4;
    optional  float  viewTimeSecsLastWeek  = 5;
    optional  float  viewTimeSecsLastMonth  = 6;
    optional  int64  uniqueViewersSinceLastWeek  = 7;
    optional  int64  uniqueViewersSinceLastMonth  = 8;
    optional  int64  uniqueViewersSubscribersSinceLastWeek  = 9;
    optional  int64  uniqueViewersSubscribersSinceLastMonth  = 10;
    optional  int64  uniqueViewersNonSubscribersSinceLastWeek  = 11;
    optional  int64  uniqueViewersNonSubscribersSinceLastMonth  = 12;
    optional  float  averageViewTimeSinceLastWeek  = 13;
    optional  float  averageViewTimeSinceLastMonth  = 14;
    optional  float  averageCompletionPercentageSinceLastWeek  = 15;
    optional  float  averageCompletionPercentageSinceLastMonth  = 16;
    optional  float  storyRepliesLastWeek  = 17;
    optional  float  storyRepliesLastMonth  = 18;
    optional  int64  publicStoryViewsSinceLastWeek  = 19;
    optional  int64  publicStoryViewsSinceLastMonth  = 20;
    optional  int64  publicStoryUniqueViewersSinceLastWeek  = 21;
    optional  int64  publicStoryUniqueViewersSinceLastMonth  = 22;
    optional  float  publicStoryAverageViewTimeSinceLastWeek  = 23;
    optional  float  publicStoryAverageViewTimeSinceLastMonth  = 24;
    optional  int64  viewsPreviousWeek  = 100;
    optional  int64  viewsPreviousMonth  = 101;
    optional  float  viewTimeSecsPreviousWeek  = 102;
    optional  float  viewTimeSecsPreviousMonth  = 103;
    optional  int64  uniqueViewersPreviousWeek  = 104;
    optional  int64  uniqueViewersPreviousMonth  = 105;
    optional  int64  uniqueViewersSubscribersPreviousWeek  = 106;
    optional  int64  uniqueViewersSubscribersPreviousMonth  = 107;
    optional  int64  uniqueViewersNonSubscribersPreviousWeek  = 108;
    optional  int64  uniqueViewersNonSubscribersPreviousMonth  = 109;
    optional  float  averageViewTimePreviousWeek  = 110;
    optional  float  averageViewTimePreviousMonth  = 111;
    optional  float  averageCompletionPercentagePreviousWeek  = 112;
    optional  float  averageCompletionPercentagePreviousMonth  = 113;
    optional  float  storyRepliesPreviousWeek  = 114;
    optional  float  storyRepliesPreviousMonth  = 115;
    optional  int64  publicStoryViewsPreviousWeek  = 116;
    optional  int64  publicStoryViewsPreviousMonth  = 117;
    optional  int64  publicStoryUniqueViewersPreviousWeek  = 118;
    optional  int64  publicStoryUniqueViewersPreviousMonth  = 119;
    optional  float  publicStoryAverageViewTimePreviousWeek  = 120;
    optional  float  publicStoryAverageViewTimePreviousMonth  = 121;
}

message IMPInsightsSubscribeInsights {
    optional  int64  subscribesSinceCreation  = 1;
    optional  int64  subscribesSinceLastWeek  = 2;
    optional  int64  subscribesSinceLastMonth  = 3;
    optional  int64  profileViewsSinceCreation  = 4;
    optional  int64  profileViewsSinceLastWeek  = 5;
    optional  int64  profileViewsSinceLastMonth  = 6;
    optional  int64  subscribesSincePreviousWeek  = 100;
    optional  int64  subscribesSincePreviousMonth  = 101;
    optional  int64  profileViewsSincePreviousWeek  = 102;
    optional  int64  profileViewsSincePreviousMonth  = 103;
}

message IMPInsightsTimeRange {
    optional  int64  startTimestamp  = 1;
    optional  int64  endTimestamp  = 2;
}

message IMPInsightsUser {
    optional  string  userId  = 1;
    optional  string  username  = 2;
    optional  string  displayName  = 3;
    optional  string  bitmojiAvatarId  = 4;
    optional  string  bitmojiSelfieId  = 5;
    optional  bool  isOfficial  = 6;
    optional  string  mutableUsername  = 7;
}

message IMPInternalAdminModerateProfileRequest {
    optional  string  profileId  = 1;
}

message IMPInternalAdminModerateProfileResponse {
}

message IMPInternalArchiveBusinessSnapBySnapIdRequest {
    optional  string  userId  = 1;
    optional  string  snapId  = 2;
}

message IMPInternalArchiveBusinessSnapBySnapIdResponse {
    optional  IMPBusinessSnap  archivedSnap  = 1;
}

message IMPInternalBatchGetBusinessStoryManifestByHostUserIdRequest {
    repeated  string  userIdsArray  = 1;
}

message IMPInternalBatchGetBusinessStoryManifestByHostUserIdResponse {
    repeated  SCStoryManifest  manifests  = 1;
}

message IMPInternalBusinessId {
    optional  string  profileId  = 1;
    optional  string  hostAccountUserId  = 2;
    optional  string  businessAccountId  = 3;
    optional  int64  publisherId  = 4;
}

message IMPInternalBusinessProfile {
    optional  IMPBusinessProfile  profile  = 1;
    optional  IMPInternalBusinessProfileMetadata  internalMetadata  = 2;
    optional  IMPPortfolios  portfolios  = 3;
}

message IMPInternalBusinessProfileMetadata {
    optional  int64  subscriberShardCount  = 1;
    optional  bytes  publisherMetadata  = 2;
    optional  string  publisherIconURL  = 3;
    optional  string  squareFilledIconMediaId  = 4;
    optional  string  inventoryItemId  = 5;
    optional  IMPBoltMediaWithMLSMediaId  squareFilledIconMedia  = 6;
    optional  IMPBoltMediaWithMLSMediaId  heroImageMedia  = 7;
}

message IMPInternalCreateGiftRequest {
    optional  string  name  = 1;
    optional  string  thumbnailContentURL  = 2;
    optional  string  openAnimationContentURL  = 3;
    optional  string  sendAnimationContentURL  = 4;
    optional  string  gradientStartColor  = 6;
    optional  string  gradientStopColor  = 7;
}

message IMPInternalCreateGiftResponse {
    optional  IMPGift  gift  = 1;
}

message IMPInternalCreateHighlightRequest {
    optional  string  profileId  = 1;
    optional  string  userId  = 2;
    repeated  IMPHighlightSnap  snapsArray  = 3;
    optional  int32  thumbnailSnapIndex  = 4;
    optional  string  title  = 5;
    optional  IMPBoltUploadObject  coverThumbnailData  = 6;
    optional  string  coverThumbnailURL  = 7;
    optional  IMPThumbnailInfo  thumbnailInfo  = 8;
    optional  bool  isSpotlight  = 9;
}

message IMPInternalCreateHighlightResponse {
    optional  string  highlightId  = 1;
}

message IMPInternalCreateProfileModerationResultRequest {
    optional  IMPProfileModerationResult  moderationResult  = 1;
}

message IMPInternalCreateProfileModerationResultResponse {
    optional  IMPProfileModerationResult  moderationResult  = 1;
}

message IMPInternalCreatePublisherRequest {
    optional  PartialPublisherMetadata  partialPublisherMetadata  = 1;
    optional  string  hostUserId  = 2;
    optional  string  existingOrganizationId  = 3;
    optional  string  organizationDisplayName  = 4;
    optional  string  lastModifiedByUserId  = 5;
}

message IMPInternalCreatePublisherResponse {
    optional  IMPCreateAccountResponse  createAccountResponse  = 1;
}

message IMPInternalCreatePublisherWithoutUserRequest {
    optional  PartialPublisherMetadata  partialPublisherMetadata  = 1;
    optional  string  existingOrganizationId  = 2;
    optional  string  organizationDisplayName  = 3;
    optional  string  lastModifiedByUserId  = 4;
}

message IMPInternalCreatePublisherWithoutUserResponse {
    optional  IMPCreateAccountResponse  createAccountResponse  = 1;
}

message IMPInternalDeleteBusinessSnapBySnapIdRequest {
    optional  string  userId  = 1;
    optional  string  snapId  = 2;
}

message IMPInternalDeleteBusinessSnapBySnapIdResponse {
    optional  IMPBusinessSnap  deletedSnap  = 1;
}

message IMPInternalDumpBusinessSnapsRequest {
    optional  string  hostUserId  = 1;
    optional  string  businessId  = 2;
    optional  int64  startTimestampMs  = 3;
    optional  int64  endTimestampMs  = 4;
    optional  string  pageId  = 5;
}

message IMPInternalDumpBusinessSnapsResponse {
    repeated  IMPBusinessSnapDump  snapsArray  = 1;
    optional  string  nextPageId  = 2;
}

message IMPInternalGetActiveBusinessProfilesRequest {
    repeated  string  idsArray  = 1;
}

message IMPInternalGetActiveBusinessProfilesResponse {
    repeated  IMPBusinessProfile  profilesArray  = 1;
}

message IMPInternalGetActiveBusinessStorySnapsRequest {
    optional  string  businessId  = 1;
}

message IMPInternalGetActiveBusinessStorySnapsResponse {
    repeated  IMPBusinessStorySnap  snapsArray  = 1;
}

message IMPInternalGetActivityRequest {
    optional  string  userId  = 1;
    optional  string  payoutEndDate  = 2;
    optional  string  cashoutEndDate  = 3;
    optional  int64  pageSize  = 4;
}

message IMPInternalGetActivityResponse {
    optional  IMPGetActivityResponse  response  = 1;
}

message IMPInternalGetBusinessProfileOptions {
    optional  bool  includeProfilesWithRejectedModerationResults  = 1;
}

message IMPInternalGetBusinessProfileRequest {
    optional  string  id_p  = 1;
    optional  IMPInternalBusinessId  internalId  = 2;
    optional  bool  includePortfolios  = 3;
    optional  bool  includeProfilesWithSoftDeletedHostUser  = 4;
    optional  IMPInternalGetBusinessProfileOptions  options  = 5;
}

message IMPInternalGetBusinessProfileResponse {
    optional  IMPBusinessProfile  profile  = 1;
    optional  IMPInternalBusinessProfileMetadata  internalMetadata  = 2;
    optional  IMPInternalBusinessProfile  internalProfile  = 3;
}

message IMPInternalGetBusinessProfilesRequest {
    repeated  string  idsArray  = 1;
    repeated  IMPInternalBusinessId  internalIdsArray  = 2;
    optional  bool  includePortfolios  = 3;
    optional  bool  includeProfilesWithSoftDeletedHostUser  = 4;
}

message IMPInternalGetBusinessProfilesResponse {
    repeated  IMPInternalBusinessProfile  internalProfilesArray  = 1;
}

message IMPInternalGetBusinessSnapsBySnapIdRequest {
    repeated  string  snapIdsArray  = 1;
    optional  bool  returnSourceMediaURL  = 2;
}

message IMPInternalGetBusinessSnapsBySnapIdResponse {
    repeated  IMPBusinessSnap  snaps  = 1;
}

message IMPInternalGetBusinessStoriesRequest {
    optional  string  businessId  = 1;
    optional  string  pageId  = 2;
    optional  int32  limit  = 3;
    optional  string  posterUserId  = 4;
}

message IMPInternalGetBusinessStoriesResponse {
    optional  string  nextPageId  = 1;
    optional  int64  numStoriesLeft  = 2;
    repeated  SCStoryManifest  manifestsArray  = 3;
    repeated  IMPBusinessStory  storiesArray  = 4;
}

message IMPInternalGetBusinessStoryManifestForStoryIdRequest {
    optional  string  businessId  = 1;
    optional  string  storyId  = 2;
    optional  string  posterUserId  = 3;
    optional  IMPTimeRange  timeRange  = 4;
}

message IMPInternalGetBusinessStoryManifestForStoryIdResponse {
    optional  SCStoryManifest  manifest  = 1;
}

message IMPInternalGetBusinessUserSettingsRequest {
    optional  string  businessId  = 1;
    optional  string  userId  = 2;
}

message IMPInternalGetBusinessUserSettingsResponse {
    optional  IMPBusinessUserSettings  userSettings  = 1;
}

message IMPInternalGetCrystalActivitySummaryRequest {
    optional  string  userId  = 1;
}

message IMPInternalGetCrystalActivitySummaryResponse {
    optional  IMPGetCrystalActivitySummaryResponse  response  = 1;
}

message IMPInternalGetHasHighlightsRequest {
    repeated  string  profileIdsArray  = 1;
    optional  int32  sourceFilter  = 2;
}

message IMPInternalGetHasHighlightsResponse {
    repeated  bool  hasHighlights  = 1;
}

message IMPInternalGetOnboardingProgressRequest {
    optional  string  userId  = 1;
}

message IMPInternalGetOnboardingProgressResponse {
    optional  IMPGetOnboardingProgressResponse  response  = 1;
}

message IMPInternalGetPayoutsRequest {
    optional  string  userId  = 1;
    optional  int64  startTimestamp  = 2;
    optional  int64  endTimestamp  = 3;
}

message IMPInternalGetPayoutsResponse {
    optional  IMPGetPayoutsResponse  response  = 1;
}

message IMPInternalGetProfileLinksRequest {
    optional  IMPIds  userIds  = 1;
    optional  IMPIds  profileIds  = 2;
}

message IMPInternalGetProfileLinksResponse {
    repeated  IMPProfileUserLink  linksArray  = 1;
}

message IMPInternalGetProfileModerationResultsRequest {
    repeated  string  profileIdsArray  = 1;
}

message IMPInternalGetProfileModerationResultsResponse {
    repeated  IMPProfileModerationResult  moderationResultsArray  = 1;
}

message IMPInternalGetPublishedGiftsRequest {
}

message IMPInternalGetPublishedGiftsResponse {
    repeated  IMPGift  giftsArray  = 1;
}

message IMPInternalGetPublisherBusinessListRequest {
    optional  string  pageId  = 1;
    optional  bool  includeDisabled  = 2;
}

message IMPInternalGetPublisherBusinessListResponse {
    repeated  IMPBusiness  businessesArray  = 1;
    optional  string  nextPageId  = 2;
}

message IMPInternalGetPublisherProfileListRequest {
    optional  string  pageId  = 1;
    optional  bool  includeDisabled  = 2;
    optional  bool  includeProfilesWithSoftDeletedHostUser  = 3;
}

message IMPInternalGetPublisherProfileListResponse {
    repeated  IMPInternalBusinessProfile  profilesArray  = 1;
    optional  string  nextPageId  = 2;
}

message IMPInternalGetStoryElementsByIdsRequest {
    optional  string  profileId  = 1;
    repeated  string  snapIdsArray  = 2;
}

message IMPInternalGetStoryElementsByIdsResponse {
    repeated  SCStoryElement  snapsArray  = 1;
}

message IMPInternalInvalidateCacheRequest {
    optional  string  cacheKey  = 1;
}

message IMPInternalInvalidateCacheResponse {
}

message IMPInternalIsPayoutOnboardingEligibleRequest {
    optional  string  userId  = 1;
}

message IMPInternalIsPayoutOnboardingEligibleResponse {
    optional  IMPIsPayoutOnboardingEligibleResponse  response  = 1;
}

message IMPInternalListAllProfileModerationResultsRequest {
    optional  string  pageId  = 1;
}

message IMPInternalListAllProfileModerationResultsResponse {
    repeated  IMPProfileModerationResult  moderationResultsArray  = 1;
    optional  string  nextPageId  = 2;
}

message IMPInternalListAllPublicProfilesRequest {
    optional  string  pageId  = 1;
    optional  bool  includePublishers  = 2;
    optional  bool  includeUnlinkedProfiles  = 3;
    optional  IMPInternalProfileHydrationOption  internalHydrationOption  = 4;
    repeated  int32  tiersArray  = 5[packed=true];
    optional  int64  segment  = 100;
    optional  int64  totalSegments  = 101;
}

message IMPInternalListAllPublicProfilesResponse {
    optional  string  nextPageId  = 1;
    repeated  IMPProfileAndUserData  profilesArray  = 2;
}

message IMPInternalListHighlightsRequest {
    optional  string  profileId  = 1;
    optional  string  pageId  = 2;
    optional  int32  limit  = 3;
    optional  int32  sourceFilter  = 4;
}

message IMPInternalListHighlightsResponse {
    repeated  IMPHighlight  highlightsArray  = 1;
    optional  string  nextPageId  = 2;
}

message IMPInternalListManagedBusinessProfilesRequest {
    optional  string  pageId  = 1;
    optional  string  userId  = 2;
    optional  bool  suppressSubscriptionQuery  = 3;
    optional  bool  loadStories  = 4;
    optional  bool  includePublishers  = 5;
    optional  bool  includeUserSettings  = 6;
    optional  bool  includeRejectedProfiles  = 7;
}

message IMPInternalListRolesForBusinessRequest {
    optional  string  userId  = 1;
    optional  IMPListRolesForBusinessRequest  request  = 2;
}

message IMPInternalListRolesForBusinessResponse {
    optional  IMPListRolesForBusinessResponse  response  = 1;
}

message IMPInternalProfileHydrationOption {
    optional  IMPProfileHydrationOption  hydrationOption  = 1;
    optional  bool  skipDisplayInfo  = 2;
}

message IMPInternalPublishGiftRequest {
    optional  string  id_p  = 1;
    optional  int32  tokens  = 2;
}

message IMPInternalPublishGiftResponse {
}

message IMPInternalQueryAvailableResourcesRequest {
    optional  string  snapUserId  = 1;
    optional  int32  resourceType  = 2;
}

message IMPInternalQueryAvailableResourcesResponse {
    repeated  string  resourceIdsArray  = 1;
}

message IMPInternalReportHighlightRequest {
    optional  IMPCommonReportInfo  commonInfo  = 1;
}

message IMPInternalReportHighlightResponse {
}

message IMPInternalReportHighlightSnapRequest {
    optional  string  highlightSnapId  = 1;
    optional  IMPCommonReportInfo  commonInfo  = 2;
}

message IMPInternalReportHighlightSnapResponse {
}

message IMPInternalSendFanNotificationRequest {
    optional  IMPSendFanNotificationRequest  sendFanNotificationRequest  = 1;
}

message IMPInternalSendFanNotificationResponse {
}

message IMPInternalShareStoreToProfileRequest {
    optional  string  storeId  = 1;
    repeated  string  profileIdsArray  = 2;
    optional  string  principalName  = 3;
    optional  int32  storeVisibilityStatus  = 4;
}

message IMPInternalShareStoreToProfileResponse {
}

message IMPInternalStartCashOutRequest {
    optional  string  userId  = 1;
    optional  int64  cashOutAmount  = 2;
    optional  int64  cashOutTimestamp  = 3;
}

message IMPInternalStartCashOutResponse {
    optional  IMPStartCashOutResponse  response  = 1;
}

message IMPInternalStoryIdsFromSnapIdsRequest {
    repeated  string  snapIdsArray  = 1;
    optional  string  businessId  = 2;
}

message IMPInternalStoryIdsFromSnapIdsResponse {
    repeated  string  storyIdsBySnap  = 1;
}

message IMPInternalTakedownBusinessSnapBySnapIdRequest {
    optional  string  snapId  = 1;
}

message IMPInternalTakedownBusinessSnapBySnapIdResponse {
    optional  IMPBusinessSnap  deletedSnap  = 1;
}

message IMPInternalUnpublishGiftRequest {
    optional  string  id_p  = 1;
}

message IMPInternalUnpublishGiftResponse {
}

message IMPInternalUnshareStoreToProfileRequest {
    optional  string  storeId  = 1;
    repeated  string  profileIdsArray  = 2;
    optional  string  principalName  = 3;
}

message IMPInternalUnshareStoreToProfileResponse {
}

message IMPInternalUpdateAttachmentToolV2Request {
    repeated  string  snapUserIdsArray  = 1;
}

message IMPInternalUpdateAttachmentToolV2Response {
}

message IMPInternalUpdateBusinessProfileRequest {
    optional  string  id_p  = 1;
    optional  IMPUpdateInt  subscriberCount  = 2;
    optional  IMPUpdateInt  subscriberShardCount  = 3;
    optional  IMPUpdateBytes  publisherMetadata  = 4;
    optional  IMPUpdateBusinessProfileRequest  updateBusinessProfile  = 5;
    optional  IMPContentIdentifiersUpdate  contentIdentifiersUpdate  = 6;
    optional  IMPUpdateInt  initiallyDisplayedContentIndex  = 7;
    optional  IMPShowDisplayInfo  showDisplayInfo  = 8;
    optional  IMPUpdateString  publisherIconURL  = 9;
    optional  IMPDeeplinks  deeplinks  = 10;
    optional  IMPUpdateString  verifiedUserEmoji  = 11;
    optional  IMPUpdateBool  isOfficial  = 12;
    optional  IMPContentIdentifiersUpdateV2  contentsUpdate  = 13;
    optional  IMPCommerceStoreInfo  commerceStoreInfo  = 15;
    optional  IMPUpdateBool  canEditHighlights  = 16;
    optional  IMPUpdateBool  isLensCreator  = 17;
    optional  IMPUpdateBool  isBrandProfile  = 18;
    optional  int64  publisherId  = 19;
    optional  IMPUpdateString  squareFilledIconMediaId  = 20;
    optional  IMPUpdateInternalProfileCategory  internalCategory  = 21;
    optional  IMPUpdateProfileTier  tier  = 22;
    optional  IMPUpdateString  organizationId  = 23;
    optional  PartialPublisherMetadata  partialPublisherMetadata  = 24;
    optional  IMPUpdateString  lastModifiedByUserId  = 25;
    optional  IMPUpdateBool  canAccessStoryReplies  = 26;
    optional  IMPUpdateBool  canAccessGifting  = 27;
    optional  IMPTermsAndConditions  giftingTerms  = 28;
    optional  int64  expectedVersion  = 100;
    optional  bool  skipStoreSubscriptionCount  = 101;
}

message IMPInternalUpdateBusinessProfileResponse {
    optional  IMPInternalBusinessProfile  profile  = 1;
}

message IMPInternalUpdateProfileHostAccountRequest {
    optional  string  profileId  = 1;
    optional  string  hostAccountUserId  = 2;
}

message IMPInternalUpdateProfileHostAccountResponse {
}

message IMPInternalUpdateProfileModerationResultRequest {
    optional  IMPProfileModerationResult  moderationResult  = 1;
    optional  int64  expectedUpdateTimestampMs  = 2;
}

message IMPInternalUpdateProfileModerationResultResponse {
    optional  IMPProfileModerationResult  moderationResult  = 1;
}

message IMPInternalValidateShareStoreToProfileRequest {
    optional  string  storeOrganizationId  = 1;
    repeated  string  profileIdsArray  = 2;
    optional  string  principalName  = 3;
}

message IMPInternalValidateShareStoreToProfileResponse {
}

message IMPInternalValidateUnshareStoreToProfileRequest {
    optional  string  storeId  = 1;
    repeated  string  profileIdsArray  = 2;
    optional  string  principalName  = 3;
    optional  int32  storeVisibilityStatus  = 4;
}

message IMPInternalValidateUnshareStoreToProfileResponse {
}

message IMPInviteUserToRoleRequest {
    optional  string  businessId  = 1;
    optional  string  receivingUserId  = 2;
    optional  string  invitingUserId  = 5;
    optional  string  roleType  = 6;
    optional  string  receivingUserName  = 7;
}

message IMPInviteUserToRoleResponse {
    optional  bool  autoApproved  = 1;
    optional  bool  roleAlreadyExists  = 2;
}

message IMPIsPayoutOnboardingEligibleRequest {
    optional  bool  isSnapStar  = 1;
}

message IMPIsPayoutOnboardingEligibleResponse {
    optional  bool  isEligible  = 1;
    optional  int64  totalEarnings  = 2;
    optional  bool  securityCheckPasses  = 3;
    optional  int64  totalCrystals  = 4;
    optional  int64  lastPaidOutTimestamp  = 5;
    optional  bool  needForceUpgrade  = 6;
    optional  string  lastPaidOutDate  = 7;
    optional  int64  totalEarningsWithPending  = 8;
    optional  int64  totalCrystalsWithPending  = 9;
}

message IMPLens {
    optional  string  lensId  = 1;
}

message IMPLensPack {
    optional  string  lensPackId  = 1;
    repeated  int32  categoriesArray  = 2[packed=true];
}

message IMPLensPortfolio {
    optional  IMPPortfolioInfo  info  = 1;
    optional  string  portfolioId  = 2;
    optional  int32  creatorType  = 3;
    repeated  int32  specialtiesArray  = 4[packed=true];
    optional  int32  status  = 5;
    repeated  int32  productionFeeArray  = 6[packed=true];
    repeated  string  lensCategoriesArray  = 7;
    repeated  IMPLens  lensesArray  = 8;
    repeated  IMPLensPack  lensPacksArray  = 9;
}

message IMPListAllPortfoliosRequest {
    optional  string  pageId  = 1;
    optional  int32  portfolioType  = 2;
}

message IMPListAllPortfoliosResponse {
    optional  string  pageId  = 1;
    optional  string  nextPageId  = 2;
    repeated  IMPPortfolios  portfoliosArray  = 3;
}

message IMPListAllUsersWithProfileRolesRequest {
    optional  string  pageId  = 1;
    optional  int64  segment  = 2;
    optional  int64  totalSegments  = 3;
}

message IMPListAllUsersWithProfileRolesResponse {
    repeated  string  userIdsArray  = 1;
    optional  string  nextPageId  = 2;
}

message IMPListArchivedHighlightsRequest {
    optional  string  profileId  = 1;
    optional  string  pageId  = 2;
    optional  int32  limit  = 3;
}

message IMPListArchivedHighlightsResponse {
    repeated  IMPHighlight  highlightsArray  = 1;
    optional  string  nextPageId  = 2;
}

message IMPListAuthorizedActionsForBusinessRequest {
    optional  string  userId  = 1;
    optional  string  businessId  = 2;
}

message IMPListAuthorizedActionsForBusinessResponse {
    repeated  string  authorizedActionsArray  = 1;
}

message IMPListGlobalAuthorizedActionsRequest {
    optional  string  userId  = 1;
}

message IMPListGlobalAuthorizedActionsResponse {
    repeated  string  authorizedActionsArray  = 1;
}

message IMPListGlobalRolesRequest {
    optional  string  pageId  = 1;
}

message IMPListGlobalRolesResponse {
    repeated  IMPRole  rolesArray  = 1;
    optional  string  nextPageId  = 2;
}

message IMPListHighlightsRequest {
    optional  string  profileId  = 1;
    optional  string  pageId  = 2;
    optional  int32  limit  = 3;
    optional  int32  sourceFilter  = 4;
}

message IMPListHighlightsResponse {
    repeated  IMPHighlight  highlightsArray  = 1;
    optional  string  nextPageId  = 2;
}

message IMPListManagedBusinessProfilesRequest {
    optional  string  pageId  = 2;
}

message IMPListManagedBusinessProfilesResponse {
    optional  string  pageId  = 1;
    optional  string  nextPageId  = 2;
    repeated  IMPBusinessProfileAndUserData  profilesArray  = 3;
    optional  IMPUserSettings  userSettings  = 4;
    optional  bool  isPopular  = 5;
    optional  bool  profileCreationEligible  = 6;
    optional  bool  alwaysShowSpotlightSendToProfile  = 7;
    optional  bool  publicProfileCreationEligible  = 8;
}

message IMPListManagedPublicProfilesRequest {
    optional  string  pageId  = 1;
}

message IMPListManagedPublicProfilesResponse {
    optional  string  pageId  = 1;
    optional  string  nextPageId  = 2;
    repeated  IMPProfileAndUserData  profilesArray  = 3;
    optional  IMPUserSettings  userSettings  = 4;
    optional  bool  isPopular  = 5;
    optional  bool  profileCreationEligible  = 6;
    optional  bool  publicProfileCreationEligible  = 7;
}

message IMPListPendingRoleInvitesForBusinessRequest {
    optional  string  businessId  = 1;
    optional  string  pageId  = 2;
}

message IMPListPendingRoleInvitesForBusinessResponse {
    optional  string  pageId  = 1;
    optional  string  nextPageId  = 2;
    repeated  IMPPendingRoleInvite  invitesArray  = 3;
}

message IMPListPendingRoleInvitesForUserRequest {
    optional  string  pageId  = 1;
}

message IMPListPendingRoleInvitesForUserResponse {
    optional  string  pageId  = 1;
    optional  string  nextPageId  = 2;
    repeated  IMPBusinessProfileAndUserData  pendingProfilesArray  = 3;
}

message IMPListRolesForBusinessRequest {
    optional  string  businessId  = 1;
    optional  string  pageId  = 2;
    optional  bool  ignoreDisplayInfo  = 3;
}

message IMPListRolesForBusinessResponse {
    optional  string  pageId  = 1;
    optional  string  nextPageId  = 2;
    repeated  IMPRole  rolesArray  = 3;
    repeated  IMPRole  orgRolesArray  = 4;
}

message IMPListRolesForUserRequest {
    optional  string  pageId  = 1;
    optional  bool  includePublishers  = 2;
}

message IMPListRolesForUserResponse {
    optional  string  nextPageId  = 1;
    repeated  IMPRolesForUserForBusiness  rolesForBusinessesArray  = 2;
}

message IMPListSubscribedBusinessProfilesRequest {
    optional  string  pageId  = 1;
}

message IMPListSubscribedBusinessProfilesResponse {
    optional  string  pageId  = 1;
    optional  string  nextPageId  = 2;
    repeated  IMPBusinessProfileAndUserData  profilesArray  = 3;
}

message IMPLogoDimension {
    optional  int32  heightPx  = 1;
    optional  int32  widthPx  = 2;
}

message IMPManagedProfileCallouts {
    optional  int32  manageRolesNuxHintViewCount  = 1;
    optional  GPBInt32Value  subscribersTodayCount  = 2;
    optional  GPBInt32Value  viewsTodayCount  = 3;
    optional  GPBInt32Value  snapsPostedWeekCount  = 4;
}

message IMPMarkCollectionProfileAsSeenRequest {
    optional  string  userId  = 1;
    optional  string  owningCollectionId  = 2;
    optional  int64  clientTimestampMs  = 3;
}

message IMPMarkCollectionProfileAsSeenResponse {
}

message IMPMediaInfo {
    optional  string  highlightSnapId  = 1;
    optional  int32  mediaType  = 2;
    optional  bytes  boltContentObject  = 3;
    optional  string  thumbnailContentURL  = 4;
    optional  string  decryptedBurntInContentURL  = 5;
    optional  string  mediaContentURL  = 6;
    optional  int64  timestampMs  = 7;
    optional  string  highlightSpotlightId  = 8;
    optional  string  boltContentURL  = 9;
}

message IMPMigrateFollowersInRange {
    optional  string  businessId  = 1;
    optional  IMPGetFollowersInRangeRequest  rangeRequest  = 2;
    optional  string  userId  = 3;
}

message IMPMonetizationSetting {
    optional  int32  configuredStatus  = 1;
    optional  IMPTermsAndConditions  monetizationTerms  = 2;
    optional  int32  payoutType  = 3;
    optional  int32  accessAdsStats  = 4;
    optional  int32  profileMonetizedStatus  = 5;
    optional  int32  payoutStatus  = 6;
    optional  int32  reviewStatus  = 7;
}

message IMPMonetizationSettings {
    optional  IMPMonetizationSetting  publicStoriesMonetizationSettings  = 1;
}

message IMPMoveBusinessProfileRequest {
    optional  int64  publisherId  = 1;
    optional  string  businessProfileId  = 2;
    optional  string  existingOrganizationId  = 3;
    optional  string  newOrganizationName  = 4;
}

message IMPMoveBusinessProfileResponse {
    optional  string  previousOrganizationId  = 1;
    optional  string  previousBusinessAccountId  = 2;
    optional  string  organizationId  = 3;
    optional  string  businessAccountId  = 4;
}

message IMPMoveHighlightsToTopRequest {
    optional  string  profileId  = 1;
    repeated  string  highlightIdsArray  = 2;
}

message IMPMoveHighlightsToTopResponse {
}

message IMPOfficialUserCollaborator {
    optional  IMPUserDisplayInfo  displayInfo  = 1;
    optional  int32  permissionBitmask  = 2;
}

message IMPOnboardingSection {
    optional  int32  sectionType  = 1;
    repeated  IMPOnboardingStepStatus  stepStatusArray  = 2;
}

message IMPOnboardingStepStatus {
    optional  int32  onboardingStep  = 1;
    optional  bool  isComplete  = 2;
    optional  bool  isTermAccepted  = 3;
    optional  bool  isPending  = 4;
}

message IMPPayout {
    optional  int64  timestamp  = 1;
    optional  int64  value  = 2;
    optional  int32  payoutType  = 3;
    optional  int64  earnedTimestamp  = 4;
    optional  int64  crystalValue  = 5;
    repeated  IMPPayoutSource  payoutSourcesArray  = 6;
    optional  int32  status  = 7;
    optional  string  payoutDate  = 8;
}

message IMPPayoutSource {
    optional  int64  value  = 1;
    optional  int32  payoutType  = 2;
    optional  int64  earnedTimestamp  = 3;
    optional  int64  valueCents  = 4;
    optional  string  earnedDate  = 5;
    optional  string  description_p  = 6;
}

message IMPPendingRoleInvite {
    optional  string  businessId  = 1;
    optional  string  invitingUserId  = 2;
    optional  string  invitingUsername  = 3;
    optional  string  invitingDisplayName  = 4;
    optional  string  roleType  = 5;
    optional  int32  status  = 6;
    optional  string  invitedUserId  = 7;
    optional  string  invitedUsername  = 8;
    optional  string  invitedUserDisplayName  = 9;
}

message IMPPlaceInfo {
    optional  string  vzPlaceId  = 1;
    optional  string  name  = 2;
    optional  double  distanceM  = 3;
    optional  string  displayAddress  = 4;
    optional  string  storyThumbnailURL  = 5;
    repeated  IMPPlaceInfo_Photo  photosArray  = 6;
    optional  IMPPlaceInfo_Rect  bounds  = 7;
}

message IMPPlaceInfo_Photo {
    optional  int32  imageType  = 1;
    optional  string  imageURL  = 2;
}

message IMPPlaceInfo_Point {
    optional  double  lat  = 1;
    optional  double  lng  = 2;
}

message IMPPlaceInfo_Rect {
    optional  IMPPlaceInfo_Point  p1  = 1;
    optional  IMPPlaceInfo_Point  p2  = 2;
}

message IMPPortfolioInfo {
    optional  string  businessBio  = 1;
    optional  string  businessEmail  = 2;
    repeated  string  languageCodesArray  = 3;
}

message IMPPortfolioSnap {
    optional  string  snapId  = 1;
}

message IMPPortfolios {
    optional  IMPLensPortfolio  lensPortfolio  = 1;
    optional  string  profileId  = 2;
    optional  IMPStoryPortfolio  storyPortfolio  = 3;
}

message IMPProfileAdminUserData {
    repeated  string  allowedActionsArray  = 2;
    repeated  IMPPendingRoleInvite  pendingRoleInvitesArray  = 3;
    repeated  IMPRole  rolesArray  = 4;
    optional  IMPProfileUserSettings  userSettings  = 6;
}

message IMPProfileAndUserData {
    optional  IMPProfileData  profile  = 1;
    optional  IMPProfileUserData  userData  = 2;
    optional  IMPProfileAdminUserData  adminUserData  = 3;
    optional  IMPProfileFeatures  profileFeatures  = 4;
}

message IMPProfileAttribution {
    optional  bool  isLensCreator  = 1;
    optional  int64  creationTimestamp  = 2;
    optional  bool  isBreakingNewsEnabled  = 3;
    optional  int64  lastUpdateSequence  = 4;
    optional  int32  reviewStatus  = 5;
    optional  int64  lastUpdateTimestamp  = 6;
}

message IMPProfileCardContent {
    optional  IMPProfileLiveStory  profileLiveStory  = 1;
}

message IMPProfileCardDisplay {
    optional  string  profileId  = 1;
    optional  string  title  = 2;
    optional  string  userName  = 3;
    optional  string  userDisplayName  = 4;
    optional  int32  badgeType  = 5;
    optional  IMPProfileCardLogo  logo  = 6;
    optional  IMPProfileCardContent  profileContent  = 7;
    optional  IMPProfileUserData  profileUserData  = 8;
    optional  int32  category  = 9;
    optional  int32  subcategory  = 10;
    optional  string  userId  = 11;
    optional  string  showId  = 100;
    optional  int64  publisherId  = 101;
}

message IMPProfileCardLogo {
    optional  string  profileLogoURL  = 1;
    optional  string  bitmojiAvatarId  = 2;
    optional  string  bitmojiAvatarSelfieId  = 3;
}

message IMPProfileCommerceStore {
    optional  int32  contentType  = 1;
    optional  IMPCommerceStoreInfo  commerceStoreInfo  = 2;
}

message IMPProfileContent {
    optional  int32  contentType  = 1;
    optional  SCUnlockableMetaLensMetadata  lens  = 2;
    optional  StoryDoc  episode  = 3;
}

message IMPProfileContents {
    repeated  int32  orderedContentTypesArray  = 1[packed=true];
    optional  IMPProfileLiveStory  liveStory  = 2;
    optional  IMPProfileStory  story  = 3;
    optional  IMPProfileSpotlight  spotlight  = 4;
    optional  IMPProfileLens  lens  = 5;
    optional  IMPProfileCommerceStore  store  = 6;
    optional  IMPProfileEpisode  episode  = 7;
    optional  IMPProfileShow  show  = 8;
    optional  IMPProfileRelatedAccounts  relatedAccounts  = 9;
    optional  IMPProfilePlaceCollection  placeCollection  = 10;
    optional  IMPProfilePlace  place  = 11;
}

message IMPProfileData {
    optional  IMPProfileIdentifiers  identifiers  = 1;
    optional  IMPProfileDisplayInfo  displayInfo  = 2;
    optional  IMPProfileStats  stats  = 3;
    optional  IMPProfileVisibility  visibility  = 4;
    optional  IMPProfileAttribution  attribution  = 5;
    optional  IMPProfileContents  contents  = 100;
}

message IMPProfileDeeplinks {
    optional  string  profileSharingURL  = 1;
    optional  string  sendToURL  = 2;
}

message IMPProfileDisplayInfo {
    optional  string  formalDisplayName  = 1;
    optional  string  URLSafeFormalName  = 2;
    optional  string  description_p  = 3;
    optional  IMPBusiness_Logos  logos  = 4;
    optional  string  websiteURL  = 5;
    optional  string  phoneNumber  = 6;
    optional  string  emailAddress  = 7;
    optional  IMPAddressV2  address  = 8;
    optional  string  displayAddress  = 9;
    optional  IMPBusiness_Emoji  emoji  = 10;
    optional  string  bitmojiAvatarId  = 11;
    optional  int32  category  = 12;
    optional  int32  subcategory  = 13;
    optional  int32  tier  = 14;
    optional  int32  internalCategory  = 15;
    optional  IMPProfileDeeplinks  deeplinks  = 16;
    optional  int32  badgeType  = 17;
    optional  string  primaryColor  = 18;
    optional  string  secondaryColor  = 19;
    optional  IMPProfileLogoInfo  logoInfo  = 20;
    optional  IMPProfileExternalLink  profileExternalLink  = 21;
}

message IMPProfileEpisode {
    optional  int32  contentType  = 1;
    repeated  StoryDoc  episodesArray  = 2;
}

message IMPProfileExternalLink {
    optional  int32  profileExternalLinkType  = 1;
    optional  string  profileExternalLinkDefaultText  = 2;
    optional  string  profileExternalLinkDefaultURL  = 3;
}

message IMPProfileFeatures {
    optional  bool  canEditTitle  = 1;
    optional  bool  canEditHighlights  = 2;
    optional  bool  canEditWebsite  = 3;
    optional  bool  canEditEmail  = 4;
    optional  bool  canAccessStoryReplies  = 5;
    optional  bool  canQuoteStoryReplies  = 6;
    optional  bool  canAccessGifting  = 7;
    optional  bool  canAccessPublicStory  = 8;
    optional  bool  canAccessInAppManagement  = 9;
    optional  bool  canReportProfile  = 10;
    optional  bool  canShowUsername  = 11;
    optional  bool  canAccessActivityFeed  = 12;
    optional  bool  canUploadHeroImage  = 13;
}

message IMPProfileHydrationOption {
    repeated  int32  hydrateContentTypeArray  = 1[packed=true];
    optional  bool  includeAudienceGateSettings  = 2;
    optional  bool  omitPlaceholderImage  = 3;
}

message IMPProfileIdentifiers {
    optional  string  businessProfileId  = 1;
    optional  int64  publisherId  = 2;
    optional  string  hostAccountUsername  = 3;
    optional  string  hostAccountUserId  = 4;
    optional  string  organizationId  = 5;
    optional  string  hostAccountMutableUsername  = 6;
    optional  string  publisherNameId  = 7;
}

message IMPProfileLens {
    optional  int32  contentType  = 1;
    repeated  SCUnlockableMetaLensMetadata  lensesArray  = 2;
}

message IMPProfileLiveStory {
    optional  int32  contentType  = 1;
    optional  IMPBusinessStory  liveStory  = 2;
}

message IMPProfileLogoInfo {
    optional  IMPLogoDimension  heroImageDimension  = 1;
    optional  string  primaryColor  = 2;
    optional  string  secondaryColor  = 3;
    optional  string  originalHeroImageURL  = 4;
    optional  int32  heroImageVerticalPosition  = 5;
}

message IMPProfileModerationResult {
    optional  string  profileId  = 1;
    optional  int32  reviewStatus  = 2;
    repeated  IMPReviewResult  resultsArray  = 3;
    optional  int64  profileFetchedTimestampMs  = 4;
    optional  int64  updateTimestampMs  = 5;
}

message IMPProfilePlace {
    optional  int32  contentType  = 1;
    repeated  IMPPlaceInfo  placesArray  = 2;
}

message IMPProfilePlaceCollection {
    optional  int32  contentType  = 1;
    optional  string  placeCollectionId  = 2;
}

message IMPProfileRelatedAccounts {
    optional  int32  contentType  = 1;
    optional  string  sourceProfileId  = 2;
    optional  string  sourceProfileHostUserId  = 3;
    repeated  IMPProfileCardDisplay  relatedAccountsArray  = 4;
}

message IMPProfileShow {
    optional  int32  contentType  = 1;
    optional  string  showId  = 2;
}

message IMPProfileSpotlight {
    optional  int32  contentType  = 1;
}

message IMPProfileStats {
    optional  int64  subscriberCount  = 1;
}

message IMPProfileStory {
    optional  int32  contentType  = 1;
}

message IMPProfileUpdate {
    optional  string  profileId  = 1;
    optional  int32  eventType  = 2;
    optional  IMPProfileData  oldProfile  = 3;
    optional  IMPProfileData  newProfile  = 4;
}

message IMPProfileUserData {
    optional  bool  isSubscribed  = 1;
    optional  int32  audienceGateStatus  = 2;
    optional  string  audienceGateReason  = 3;
}

message IMPProfileUserLink {
    optional  string  userId  = 1;
    optional  string  profileId  = 2;
    optional  bool  tombstoned  = 3;
    optional  int32  profileType  = 4;
}

message IMPProfileUserSettings {
    optional  int32  profileManagementViewCount  = 1;
    optional  IMPProfileUserSettings_PublicStorySettings  publicStorySettings  = 2;
    optional  IMPProfileUserSettings_SubscriberSetings  subscriberSettings  = 3;
    optional  IMPTermsAndConditions  giftingTerms  = 4;
    optional  IMPMonetizationSettings  monetizationSettings  = 5;
    optional  IMPAudienceGateSettings  audienceGateSettings  = 6;
}

message IMPProfileUserSettings_PublicStorySettings {
    optional  bool  showStoryAttribution  = 1;
    optional  bool  suppressStoryContributionPushNotifications  = 2;
    optional  int64  newestReadNotificationTimestamp  = 3;
    optional  bool  showStoryReplies  = 4;
}

message IMPProfileUserSettings_SubscriberSetings {
    optional  bool  showSubscriberCount  = 1;
}

message IMPProfileVisibility {
    optional  bool  isTestProfile  = 1;
    optional  int32  status  = 2;
}

message IMPPublisherDisplayInfo {
    optional  string  backgroundImageURL  = 1;
    optional  string  horizontalLogoURL  = 2;
    optional  bool  horizontalLogoHidden  = 3;
    optional  string  primaryColor  = 4;
    optional  int32  logoPlacement  = 5;
    optional  string  publisherId  = 6;
    optional  string  backgroundImageBitmojiTemplateId  = 7;
    optional  bool  isBreakingNewsEnabled  = 8;
    optional  bool  isNewProfile  = 9;
    optional  int64  subscriberCount  = 10;
    optional  bool  hideSubscriberCountBanner  = 11;
    optional  string  publisherNameId  = 12;
}

message IMPPublisherMetadata {
    optional  string  publisherFormalDisplayName  = 1;
    optional  string  description_p  = 2;
    optional  string  deepLink  = 3;
    optional  string  logoURL  = 4;
    optional  string  storyViewingLogoURL  = 5;
    optional  string  websiteURL  = 6;
    optional  string  backgroundImageURL  = 7;
    optional  string  horizontalLogoURL  = 8;
    optional  bool  horizontalLogoHidden  = 9;
    optional  string  bitmojiBackgroundImageTemplateId  = 10;
    optional  string  primaryColor  = 11;
    optional  int32  logoPlacement  = 12;
    optional  bool  isBreakingNewsEnabled  = 13;
}

message IMPPublisherOrganization {
    optional  string  profileId  = 1;
    optional  string  organizationId  = 2;
    optional  string  organizationDisplayName  = 3;
}

message IMPPublisherProfileLaunchInfo {
    optional  string  publisherId  = 1;
    optional  string  publisherNameId  = 2;
    optional  IMPPublisherMetadata  metadata  = 3;
    optional  bool  isSubscribed  = 4;
    optional  string  businessProfileId  = 5;
    optional  bool  isSubscribedNotifications  = 6;
    optional  bool  requiresSubscriptionQuery  = 7;
    optional  string  hostAccountUserId  = 8;
}

message IMPPushNotificationData {
    optional  string  businessId  = 1;
    optional  SGTILink  serengetiLink  = 2;
    optional  int64  timestampMs  = 3;
}

message IMPRemoveContentShareRecordRequest {
    optional  string  grantingPublisherProfileId  = 1;
    optional  string  receivingPublisherProfileId  = 2;
}

message IMPRemoveContentShareRecordResponse {
}

message IMPRemoveSelfFromBusinessRequest {
    optional  string  businessId  = 1;
}

message IMPRemoveSelfFromBusinessResponse {
}

message IMPReportBusinessProfileRequest {
    optional  string  businessId  = 1;
    optional  string  reason  = 2;
}

message IMPReportBusinessProfileResponse {
}

message IMPReportHighlightCallbackRequest {
    optional  string  id_p  = 1;
    repeated  bool  actions  = 2;
    optional  string  source  = 3;
    optional  string  referenceId  = 4;
    optional  string  originalPayload  = 5;
}

message IMPReportHighlightCallbackResponse {
}

message IMPReportHighlightRequest {
    optional  IMPCommonReportInfo  commonInfo  = 1;
}

message IMPReportHighlightResponse {
}

message IMPReportHighlightSnapRequest {
    optional  string  highlightSnapId  = 1;
    optional  IMPCommonReportInfo  commonInfo  = 2;
}

message IMPReportHighlightSnapResponse {
}

message IMPResetWatchedStateForUserRequest {
    optional  string  userId  = 1;
}

message IMPResetWatchedStateForUserResponse {
}

message IMPReviewResult {
    optional  string  reviewStatusCode  = 1;
    optional  int32  reviewStatus  = 2;
    optional  string  reason  = 3;
}

message IMPRole {
    optional  string  roleId  = 1;
    optional  string  userId  = 2;
    optional  string  roleType  = 3;
    optional  string  userDisplayName  = 4;
    optional  string  userUsername  = 5;
    optional  string  email  = 6;
    optional  string  userDisplayNameOverride  = 7;
    optional  string  virtualSourceProfileId  = 8;
    optional  int64  createdAt  = 9;
}

message IMPRoleSpecification {
    optional  string  receivingUserId  = 2;
    optional  string  roleType  = 6;
    optional  string  displayNameOverride  = 7;
    optional  string  email  = 8;
}

message IMPRolesForUserForBusiness {
    optional  string  profileId  = 1;
    repeated  IMPRole  rolesArray  = 2;
    repeated  IMPRole  orgRolesArray  = 3;
}

message IMPSearchBusinessProfileResult {
    optional  IMPBusinessProfileAndUserData  profile  = 1;
    optional  IMPBusinessStory  story  = 2;
}

message IMPSearchBusinessProfilesRequest {
    optional  string  businessName  = 1;
    optional  int32  limit  = 2;
}

message IMPSearchBusinessProfilesResponse {
    repeated  IMPBusinessProfileAndUserData  businessProfilesArray  = 1;
    repeated  IMPSearchBusinessProfileResult  resultsArray  = 2;
}

message IMPSearchPublisherProfilesRequest {
    optional  string  searchTerm  = 1;
}

message IMPSearchPublisherProfilesResponse {
    repeated  IMPSearchPublisherProfilesResponse_SearchRecord  searchRecordsArray  = 1;
}

message IMPSearchPublisherProfilesResponse_SearchRecord {
    optional  string  businessId  = 1;
    optional  int64  publisherId  = 2;
    optional  string  businessName  = 3;
}

message IMPSeasonMetadata {
    optional  string  seasonId  = 1;
    optional  string  displayName  = 2;
    optional  string  showId  = 3;
    optional  int32  seasonNumber  = 4;
    optional  int32  episodeCount  = 5;
}

message IMPSeasonMetadataPage {
    repeated  IMPSeasonMetadata  seasonsArray  = 1;
    optional  string  nextPageId  = 2;
}

message IMPSendFanNotificationRequest {
    optional  IMPGiftingFanNotification  fanNotification  = 1;
}

message IMPSendFanNotificationResponse {
}

message IMPSendPushNotificationRequest {
    optional  int32  type  = 1;
    optional  string  recipientUserId  = 2;
    optional  string  senderUserId  = 3;
    optional  IMPPushNotificationData  clientData  = 4;
    optional  string  businessTitle  = 5;
    optional  string  roleType  = 6;
    optional  string  milestoneMessageType  = 7;
    optional  string  inviterUserId  = 8;
}

message IMPSendPushNotificationResponse {
    optional  bool  success  = 1;
}

message IMPSetBusinessProfileRequest {
    optional  IMPBusinessProfile  profile  = 1;
    optional  bytes  logo  = 2;
}

message IMPSetBusinessProfileResponse {
}

message IMPSetProfileFrozenStatusRequest {
    optional  string  profileId  = 1;
    optional  bool  setFrozen  = 2;
}

message IMPSetProfileFrozenStatusResponse {
}

message IMPSetStoryPrivacyToFriendsRequest {
    optional  string  userId  = 1;
}

message IMPSetStoryPrivacyToFriendsResponse {
    optional  bool  wasUpdated  = 1;
    optional  string  previousSetting  = 2;
}

message IMPSetTestProfileFieldRequest {
    optional  string  id_p  = 1;
    optional  bool  isTestProfile  = 2;
}

message IMPSetTestProfileFieldResponse {
}

message IMPSharedBusinessProfile {
    optional  IMPBusinessProfile  businessProfile  = 1;
}

message IMPSharedBusinessProfileSnap {
    optional  IMPBusinessProfile  businessProfile  = 1;
    optional  string  snapId  = 2;
    optional  bool  isUserQuoted  = 3;
}

message IMPShowDisplayInfo {
    optional  string  showImageURL  = 1;
}

message IMPShowMetadata {
    optional  string  showId  = 1;
    optional  string  name  = 2;
    optional  string  description_p  = 3;
    optional  string  backgroundImageURL  = 4;
    optional  string  horizontalLogoURL  = 5;
    optional  int32  showType  = 6;
    optional  string  overlayButtonText  = 7;
    optional  int64  publisherId  = 8;
    optional  string  publisherName  = 9;
    optional  string  businessProfileId  = 10;
    optional  string  logoURL  = 12;
    optional  int32  profileLogoDisplay  = 13;
    optional  string  deeplink  = 14;
    optional  string  websiteURL  = 15;
    optional  int32  totalExtrasCount  = 16;
    optional  string  heroTeaserURL  = 17;
    optional  bool  isRollingNewsEnabled  = 19;
    optional  IMPBusiness_BoltMedia  horizontalLogo  = 20;
    optional  IMPBusiness_BoltMedia  heroIcon  = 21;
    optional  int32  status  = 22;
}

message IMPShowProfileLaunchInfo {
    optional  string  showId  = 1;
    optional  string  name  = 2;
    optional  string  description_p  = 3;
    optional  string  backgroundImageURL  = 4;
    optional  string  horizontalLogoURL  = 5;
    optional  int32  showType  = 6;
    optional  string  businessId  = 7;
    optional  string  overlayButtonText  = 8;
    optional  bool  subscribed  = 9;
    optional  bool  optInNotifications  = 10;
    optional  string  publisherName  = 11;
    optional  bool  autosubscribe  = 12;
    optional  int32  profileLogoDisplay  = 13;
    optional  int64  publisherId  = 14;
    optional  bool  showOptInNotificationDropdown  = 15;
    optional  string  autosubscribeItemId  = 16;
    optional  string  autosubscribeItemIdSpecific  = 17;
    optional  string  publisherLogoURL  = 18;
    optional  string  websiteURL  = 19;
    optional  bool  enableUnskippableAd  = 20;
    optional  bool  requiresSubscriptionQuery  = 21;
    optional  bool  isBreakingNewsEnabled  = 22;
    optional  string  hostAccountUserId  = 23;
}

message IMPShowWatchedState {
    optional  string  showId  = 1;
    optional  IMPWatchedState  lastWatchedEpisode  = 2;
    optional  IMPWatchedState  highestWatchedEpisode  = 3;
    optional  bool  showProfileViewed  = 4;
    repeated  IMPWatchedState  lastWatchedEpisodesArray  = 5;
}

message IMPSpotlightSnapObject {
    optional  string  storyId  = 1;
    optional  string  snapId  = 2;
}

message IMPStartCashOutRequest {
    optional  int64  cashOutAmount  = 1;
    optional  int64  cashOutTimestamp  = 2;
}

message IMPStartCashOutResponse {
    optional  string  error  = 1;
    optional  int32  cashoutFailureReason  = 2;
}

message IMPStoryPortfolio {
    optional  string  portfolioId  = 1;
    optional  IMPPortfolioInfo  info  = 2;
    optional  int32  creatorType  = 3;
    repeated  int32  specialtiesArray  = 4[packed=true];
    optional  int32  status  = 5;
    repeated  int32  productionFeeArray  = 6[packed=true];
    repeated  int32  dealCategoriesArray  = 7[packed=true];
    repeated  IMPPortfolioSnap  snapsArray  = 8;
    optional  int32  creatorAgeRange  = 9;
    optional  bool  showInsightsPublicly  = 10;
}

message IMPStoryReplyActivityFeedHydrationMetadata {
    optional  string  conversationId  = 1;
    optional  uint64  messageId  = 2;
    optional  string  senderId  = 3;
    optional  string  receiverId  = 4;
    optional  string  snapId  = 5;
    optional  string  orderReferenceId  = 6;
}

message IMPStoryReplyGetStoryRepliesBySnapIDRequest {
    optional  string  snapId  = 1;
    optional  string  pageId  = 2;
}

message IMPStoryReplyGetStoryRepliesBySnapIDResponse {
    repeated  IMPStoryReplyStoryReply  repliesArray  = 1;
    optional  string  nextPageId  = 2;
}

message IMPStoryReplyGetStoryRepliesRequest {
    repeated  IMPStoryReplyGetStoryReplyRequestItem  replyRequestItemsArray  = 1;
}

message IMPStoryReplyGetStoryRepliesResponse {
    repeated  IMPStoryReplyGetStoryReplyResponseItem  replyResponseItemsArray  = 1;
}

message IMPStoryReplyGetStoryReplyChatTextRequest {
    repeated  IMPStoryReplyMessageKey  keyArray  = 1;
}

message IMPStoryReplyGetStoryReplyChatTextResponse {
    repeated  IMPStoryReplyStoryReplyChatText  chatsArray  = 1;
}

message IMPStoryReplyGetStoryReplyInfoRequest {
    repeated  IMPStoryReplyMessageKey  messageKeysArray  = 1;
}

message IMPStoryReplyGetStoryReplyInfoResponse {
    repeated  IMPStoryReplyStoryReplyInfo  storyReplyInfosArray  = 1;
}

message IMPStoryReplyGetStoryReplyRequestItem {
    optional  string  conversationId  = 1;
    optional  uint64  messageId  = 2;
    optional  string  senderId  = 3;
    optional  string  receiverId  = 4;
    optional  string  snapId  = 5;
    optional  string  profileId  = 6;
}

message IMPStoryReplyGetStoryReplyResponseItem {
    optional  string  conversationId  = 1;
    optional  uint64  messageId  = 2;
    optional  IMPStoryReplyUserInfo  senderInfo  = 3;
    optional  string  storyReplyText  = 4;
    optional  bool  storyReplyViewed  = 5;
    optional  bool  hasSentGift  = 6;
    optional  string  thumbnailURL  = 7;
    repeated  IMPStoryReplyGift  unopenedGiftsArray  = 100;
}

message IMPStoryReplyGift {
    optional  string  giftId  = 5;
    optional  string  orderReferenceId  = 6;
    optional  string  thumbnailContentURL  = 7;
    optional  string  openAnimationContentURL  = 8;
    optional  string  gradientStartColor  = 9;
    optional  string  gradientStopColor  = 10;
    optional  string  openAudioContentURL  = 11;
}

message IMPStoryReplyHasSentGiftRequest {
    optional  string  senderUserId  = 1;
    optional  string  receiverUserId  = 2;
}

message IMPStoryReplyHasSentGiftResponse {
    optional  bool  hasSentGift  = 1;
}

message IMPStoryReplyIngestIndexingEventsRequest {
    repeated  bytes  eventsArray  = 1;
}

message IMPStoryReplyIngestIndexingEventsResponse {
}

message IMPStoryReplyMessageKey {
    optional  string  senderUserId  = 1;
    optional  string  receiverUserId  = 2;
    optional  int64  senderSequenceNum  = 3;
}

message IMPStoryReplyStoryReply {
    optional  IMPStoryReplyUserInfo  senderInfo  = 1;
    optional  string  conversationId  = 2;
    optional  int64  sentTimestampMsec  = 3;
    optional  string  text  = 4;
    optional  bool  expired  = 5;
    optional  bool  deleted  = 6;
    optional  int64  senderSequenceNumber  = 7;
    repeated  IMPStoryReplyGift  giftsArray  = 8;
    optional  bool  hasSentGift  = 9;
}

message IMPStoryReplyStoryReplyChatText {
    optional  IMPStoryReplyMessageKey  key  = 1;
    optional  string  text  = 2;
    optional  bool  expired  = 3;
    optional  bool  deleted  = 4;
}

message IMPStoryReplyStoryReplyInfo {
    optional  IMPStoryReplyMessageKey  key  = 1;
    optional  string  snapSourceId  = 2;
    optional  string  text  = 3;
    optional  bool  expired  = 4;
    optional  bool  deleted  = 5;
    optional  bool  disclaimerNotSeen  = 6;
    optional  bool  isQuoteNotification  = 7;
}

message IMPStoryReplyUserInfo {
    optional  string  userId  = 1;
    optional  string  displayName  = 2;
    optional  string  bitmojiAvatarId  = 3;
    optional  string  bitmojiSelfieId  = 4;
    optional  bool  isOfficial  = 5;
    optional  bool  isPlusBadgeEnabled  = 6;
}

message IMPSubscriberInfo {
    optional  string  userId  = 1;
    optional  string  username  = 2;
    optional  string  displayName  = 3;
    optional  string  bitmojiAvatarId  = 4;
    optional  string  bitmojiSelfieId  = 5;
}

message IMPSubscriptionQueryId {
    optional  string  businessProfileId  = 1;
    optional  string  publisherNameId  = 2;
}

message IMPTermsAndConditions {
    optional  int32  type  = 1;
    optional  int32  status  = 2;
    optional  string  version  = 3;
    optional  bool  shouldShow  = 4;
    optional  int64  acknowledgedTimestampMs  = 5;
}

message IMPThumbnailInfo {
    optional  string  thumbnailURL  = 1;
    optional  string  thumbnailIv  = 2;
    optional  string  mediaKey  = 3;
    optional  string  mediaId  = 4;
    optional  bytes  thumbnailContentObject  = 5;
    optional  string  thumbnailCoKey  = 6;
    optional  string  thumbnailCoIv  = 7;
}

message IMPTimeRange {
    optional  int64  startTimestamp  = 1;
    optional  int64  endTimestamp  = 2;
}

message IMPTrailer {
    optional  string  id_p  = 1;
}

message IMPTrailerContent {
    optional  StoryDoc  trailer  = 1;
}

message IMPUnarchiveHighlightRequest {
    optional  string  profileId  = 1;
    optional  string  highlightId  = 2;
}

message IMPUnarchiveHighlightResponse {
}

message IMPUnifyBusinessProfileAccountIdsRequest {
    optional  string  businessProfileId  = 1;
}

message IMPUnifyBusinessProfileAccountIdsResponse {
    optional  string  businessProfileId  = 1;
    optional  string  oldBusinessAccountId  = 2;
    optional  string  newBusinessAccountId  = 3;
}

message IMPUnverifyOfficialAccountRequest {
    optional  string  userId  = 1;
}

message IMPUnverifyOfficialAccountResponse {
}

message IMPUpdateAccessAdsStatus {
    optional  int32  val  = 1;
}

message IMPUpdateAgeGateSettings {
    optional  IMPUpdateInt  globalAgeMin  = 1;
    repeated  IMPUpdateInt  countryAgeMinMap  = 2;
}

message IMPUpdateAudienceGateSettings {
    optional  IMPUpdateAgeGateSettings  ageGateSettings  = 1;
}

message IMPUpdateBool {
    optional  bool  val  = 1;
}

message IMPUpdateBusinessProfileRequest {
    optional  string  id_p  = 1;
    optional  IMPUpdateString  title  = 2;
    optional  IMPUpdateString  description_p  = 3;
    optional  IMPUpdateString  phoneNumber  = 4;
    optional  IMPUpdateString  address  = 5;
    optional  IMPUpdateString  emailAddress  = 6;
    optional  IMPUpdateBytes  logo  = 7;
    optional  IMPUpdateString  websiteURL  = 8;
    optional  IMPAddress  addressInfo  = 9;
    optional  IMPUpdateString  category  = 10;
    optional  IMPUpdateString  subcategory  = 11;
    optional  IMPUpdateBytes  heroImage  = 12;
    optional  IMPUpdateCateory  categoryEnum  = 13;
    optional  IMPUpdateSubCateory  subcategoryEnum  = 14;
    optional  IMPUpdateInt  heroImageVerticalPosition  = 15;
    optional  IMPUpdateBytes  originalHeroImage  = 16;
    optional  IMPUpdateString  placeCollectionId  = 17;
    optional  IMPUpdateString  privateEmail  = 100;
    optional  IMPUpdateString  privatePhoneNumber  = 101;
    optional  IMPUpdateBool  isTestProfile  = 200;
}

message IMPUpdateBusinessProfileResponse {
    optional  IMPBusinessProfile  profile  = 1;
}

message IMPUpdateBusinessProfileSettingsRequest {
    optional  string  profileId  = 1;
    optional  GPBBoolValue  showStoryReplies  = 2;
    optional  GPBBoolValue  showSubscriberCount  = 3;
    optional  GPBBoolValue  showGifting  = 4;
    repeated  IMPTermsAndConditions  termsArray  = 5;
    optional  IMPUpdateMonetizationSettings  monetizationSettings  = 6;
    optional  IMPUpdateAudienceGateSettings  audienceGateSettings  = 7;
}

message IMPUpdateBusinessProfileSettingsResponse {
}

message IMPUpdateBusinessSubscribeStatusRequest {
    optional  string  businessId  = 1;
    optional  bool  subscribing  = 2;
}

message IMPUpdateBusinessSubscribeStatusResponse {
}

message IMPUpdateBusinessUserSettingsRequest {
    optional  string  businessId  = 1;
    optional  GPBBoolValue  showStoryAttribution  = 2;
    optional  IMPBusinessUserSettings_NotificationSettings  notificationSettings  = 3;
    optional  GPBInt64Value  newestReadNotificationTimestamp  = 4;
    optional  GPBInt32Value  profileManagementViewCount  = 5;
}

message IMPUpdateBusinessUserSettingsResponse {
}

message IMPUpdateBytes {
    optional  bytes  val  = 1;
}

message IMPUpdateCateory {
    optional  int32  val  = 1;
}

message IMPUpdateConfiguredStatus {
    optional  int32  val  = 1;
}

message IMPUpdateHighlightRequest {
    optional  string  profileId  = 1;
    optional  string  highlightId  = 2;
    optional  string  expectedVersion  = 3;
    repeated  IMPHighlightSnap  snapsArray  = 4;
    optional  int32  thumbnailSnapIndex  = 5;
    optional  string  title  = 6;
    optional  IMPBoltUploadObject  coverThumbnailData  = 7;
    optional  string  coverThumbnailURL  = 8;
    optional  IMPThumbnailInfo  thumbnailInfo  = 9;
}

message IMPUpdateHighlightResponse {
    optional  IMPHighlight  highlight  = 1;
}

message IMPUpdateInt {
    optional  int64  val  = 1;
}

message IMPUpdateInternalProfileCategory {
    optional  int32  val  = 1;
}

message IMPUpdateMonetizationPayoutType {
    optional  int32  val  = 1;
}

message IMPUpdateMonetizationSetting {
    optional  IMPUpdateConfiguredStatus  configuredStatus  = 1;
    optional  IMPTermsAndConditions  monetizationTerms  = 2;
    optional  IMPUpdateMonetizationPayoutType  payoutType  = 3;
    optional  IMPUpdateAccessAdsStatus  accessAdsStatus  = 4;
}

message IMPUpdateMonetizationSettings {
    optional  IMPUpdateMonetizationSetting  publicStoriesMonetizationSettings  = 1;
}

message IMPUpdateOfficialPersonalFriendmojiRequest {
    optional  string  userId  = 1;
    optional  IMPUpdateString  emoji  = 2;
    optional  int32  badgeDisplayType  = 3;
    optional  IMPUpdateString  publicTierEmoji  = 4;
}

message IMPUpdateOfficialPersonalFriendmojiResponse {
}

message IMPUpdatePortfolioRequest {
    optional  string  profileId  = 1;
    optional  int32  portfolioType  = 2;
    optional  IMPLensPortfolio  lensPortfolio  = 3;
    optional  IMPStoryPortfolio  storyPortfolio  = 4;
}

message IMPUpdatePortfolioResponse {
    optional  IMPLensPortfolio  lensPortfolio  = 1;
    optional  IMPStoryPortfolio  storyPortfolio  = 2;
}

message IMPUpdateProfileTier {
    optional  int32  val  = 1;
}

message IMPUpdatePublicProfileRequest {
    optional  string  id_p  = 1;
    optional  IMPUpdateString  title  = 2;
    optional  IMPUpdateString  description_p  = 3;
    optional  IMPUpdateString  phoneNumber  = 4;
    optional  IMPUpdateString  emailAddress  = 5;
    optional  IMPUpdateString  websiteURL  = 6;
    optional  IMPAddressV2  addressInfo  = 7;
    optional  IMPUpdateCateory  category  = 8;
    optional  IMPUpdateSubCateory  subcategory  = 9;
    optional  IMPUpdateBytes  logo  = 10;
    optional  IMPUpdateBytes  heroImage  = 11;
    optional  IMPUpdateInt  heroImageVerticalPosition  = 12;
    optional  IMPUpdateBytes  originalHeroImage  = 13;
    optional  IMPUpdateString  placeCollectionId  = 14;
    optional  IMPUpdateBool  isTestProfile  = 100;
}

message IMPUpdatePublicProfileResponse {
    optional  IMPProfileData  profileData  = 1;
}

message IMPUpdateRoleRequest {
    optional  string  businessId  = 1;
    optional  string  userId  = 2;
    optional  string  roleId  = 3;
    optional  string  newRoleType  = 4;
}

message IMPUpdateRoleResponse {
}

message IMPUpdateString {
    optional  string  val  = 1;
}

message IMPUpdateSubCateory {
    optional  int32  val  = 1;
}

message IMPUpdateSubscriberDisplayNamesRequest {
    optional  string  businessId  = 1;
    optional  string  hostAccountId  = 2;
    optional  int64  shard  = 3;
    optional  string  displayName  = 4;
    optional  bool  allBusinesses  = 5;
    optional  bool  allShards  = 6;
}

message IMPUpdateUserSettingsRequest {
    optional  IMPUserSettings  settings  = 1;
}

message IMPUpdateUserSettingsResponse {
}

message IMPUpdateWatchedStateRequest {
    optional  string  userId  = 1;
    repeated  IMPWatchedStateUpdate  watchedStateUpdatesArray  = 2;
}

message IMPUpdateWatchedStateResponse {
    optional  int64  nextUpdateIntervalMs  = 1;
}

message IMPUploadMediaInfo {
    optional  int32  mediaType  = 1;
    optional  int32  durationMs  = 2;
}

message IMPUserDisplayInfo {
    optional  string  userId  = 1;
    optional  string  username  = 2;
    optional  string  displayName  = 3;
    optional  string  bitmojiAvatarId  = 4;
    optional  string  bitmojiSelfieId  = 5;
    optional  string  mutableUsername  = 6;
}

message IMPUserDisplayInfoDidChangeRequest {
    optional  string  userId  = 1;
    optional  string  displayName  = 2;
    optional  string  username  = 3;
}

message IMPUserDisplayInfoDidChangeResponse {
}

message IMPUserDisplayInfoRequest {
    repeated  string  userIdsArray  = 1;
    optional  string  callingUserId  = 2;
}

message IMPUserDisplayInfoResponse {
    repeated  IMPUserDisplayInfo  displayInfosArray  = 1;
}

message IMPUserFollower {
    optional  string  userId  = 1;
    optional  int32  status  = 2;
    optional  string  datastoreId  = 3;
    optional  int64  creationTimestamp  = 4;
}

message IMPUserSettings {
    optional  GPBInt32Value  manageRolesNuxHintViewCount  = 1;
    optional  GPBBoolValue  unifiedProfileNuxSeen  = 2;
    optional  GPBBoolValue  highlightsNuxSeen  = 3;
}

message IMPWatchedState {
    optional  string  itemId  = 1;
    optional  string  showId  = 2;
    optional  bool  fullyWatched  = 3;
    optional  GPBStringValue  subItemId  = 4;
    optional  GPBInt32Value  subItemProgressMs  = 5;
    optional  GPBInt32Value  approximateProgress  = 6;
    optional  int64  clientTimestampMs  = 7;
}

message IMPWatchedStateUpdate {
    optional  string  itemId  = 1;
    optional  string  showId  = 2;
    optional  bool  fullyWatched  = 3;
    optional  GPBStringValue  subItemId  = 4;
    optional  GPBInt32Value  subItemProgressMs  = 5;
    optional  GPBInt32Value  approximateProgress  = 6;
    optional  int64  clientTimestampMs  = 7;
}

message IMPWhitelistUsersRequest {
    repeated  string  userIdsArray  = 1;
    optional  bool  includeStat  = 2;
}

message IMPWhitelistUsersResponse {
    optional  int64  whitelistedUserCountBefore  = 1;
    optional  int64  whitelistedUserCountAfter  = 2;
}

message IOSFFShortcutsConfig {
    optional  bool  isFfShortcutsEnabled  = 1;
    optional  bool  showFfShortcutsTopLevel  = 2;
    optional  bool  isBatchReplyCameraButtonEnabled  = 3;
}

message IdEntry {
    optional  bytes  name  = 1;
    optional  int64  id_p  = 2;
}

message IdType {
}

message ImageCodec {
    optional  int32  compressFormat  = 1;
    optional  int32  imageCodecLibrary  = 2;
}

message ImageMap {
    repeated  string  imageMap  = 1;
}

message ImageTranscodingConfiguration {
    optional  int32  resolutionWidth  = 1;
    optional  int32  resolutionHeight  = 2;
    optional  int32  qualityFactor  = 3;
    optional  ImageCodec  imageCodec  = 4;
}

message Imagecode {
    optional  int32  type  = 1;
    optional  string  id_p  = 2;
}

message ImpressionCap {
    optional  int32  numLongImpressions  = 1;
    optional  int32  impTimeSecs  = 2;
    optional  int32  timePeriodSecs  = 3;
}

message InAppApprovalRequest {
    optional  TivResponse  response  = 1;
    optional  string  broadcastId  = 2;
}

message InAppApprovalResponse {
    optional  TivResponse  response  = 1;
}

message InAppApprovalTakeover {
    optional  TivRequest  tivRequest  = 1;
    optional  int32  takeoverSource  = 2;
    optional  string  broadcastId  = 3;
}

message IndexBoostsStatsRequest {
    repeated  BoostStats  boostStatsArray  = 1;
}

message IndexPremiumReadReceiptsRequest {
    optional  SCSCORERequestMetadata  metadata  = 1;
    repeated  PremiumReadReceipt  readReceiptsArray  = 2;
}

message IndexPremiumReadReceiptsResponse {
    optional  string  requestId  = 1;
}

message IndexReadReceiptsRequest {
    optional  string  requestId  = 1;
    optional  int64  requestTimestampMs  = 2;
    optional  int32  origin  = 3;
    optional  SCSCOREClientInfo  clientInfo  = 4;
    repeated  SnapReadReceipt  snapReadReceiptsArray  = 5;
}

message IndexReadReceiptsResponse {
    optional  string  requestId  = 1;
}

message IndexTeamSnapchatServeReceiptsRequest {
    optional  SCSCORERequestMetadata  metadata  = 1;
    repeated  TeamSnapchatServeReceipt  teamSnapchatServeReceiptsArray  = 2;
}

message IndexTeamSnapchatServeReceiptsResponse {
    optional  string  requestId  = 1;
}

message IndexingMutation {
    optional  PostReplyRequest  postReplyRequest  = 1;
    optional  UpdateReplyStateRequest  updateReplyStateRequest  = 2;
    optional  UpdateAllRepliesStateRequest  updateAllRepliesStateRequest  = 3;
    optional  ReplyReactRequest  replyReactRequest  = 4;
    optional  DeleteUserRepliesRequest  deleteUserRepliesRequest  = 5;
    optional  UpdateReplyModerationMetadataRequest  updateReplyModerationMetadataRequest  = 6;
}

message Info {
    repeated  CodedDescription  errorsArray  = 2;
}

message InstaloggerClientHeader {
    optional  string  userGuid  = 1;
    optional  int32  osType  = 2;
    optional  string  appBuild  = 3;
    optional  string  appVersion  = 4;
    optional  int32  accountAgeDays  = 5;
    optional  bool  doubleLogged  = 6;
}

message InstaloggerEvent {
    optional  StoryFeedItemLongImpression  impression  = 1;
    optional  StoryFeedItemAction  storyFeedItemAction  = 2;
    optional  StoryFeedItemViewSession  storyFeedItemViewSession  = 3;
    optional  LensContentAction  lensContentAction  = 4;
    optional  int64  timestampMsecs  = 11;
}

message Int32Rules {
    optional  int32  const_p  = 1;
    optional  int32  lt  = 2;
    optional  int32  lte  = 3;
    optional  int32  gt  = 4;
    optional  int32  gte  = 5;
    repeated  int32  inArray  = 6;
    repeated  int32  notInArray  = 7;
    optional  bool  ignoreEmpty  = 8;
}

message Int64Rules {
    optional  int64  const_p  = 1;
    optional  int64  lt  = 2;
    optional  int64  lte  = 3;
    optional  int64  gt  = 4;
    optional  int64  gte  = 5;
    repeated  int64  inArray  = 6;
    repeated  int64  notInArray  = 7;
    optional  bool  ignoreEmpty  = 8;
}

message InterestGroup {
    optional  int32  interestGroupType  = 1;
    optional  float  score  = 2;
}

message InterestGroupType {
}

message IosDeeplink {
    optional  string  iosUri  = 1;
    optional  string  iosAppId  = 2;
}

message IsRegisteredRequest {
    optional  string  lensStudioSerialUuid  = 1;
}

message IsRegisteredResponse {
    optional  bool  registered  = 1;
}

message ItemDetailPageDeeplink {
}

message ItemDetailPageWidget {
    optional  int32  widgetTitle  = 1;
    optional  string  fallbackWidgetTitle  = 2;
    optional  ItemRecommendationWidget  itemRecommendationWidget  = 3;
    optional  ShopOnStoreWidget  shopOnStoreWidget  = 4;
    optional  ARTryOnWidget  arTryOnWidget  = 5;
    optional  VariantWidget  variantWidget  = 6;
    optional  SizeRecommendationWidget  sizeRecommendationWidget  = 7;
}

message ItemFavoritingDeviceContext {
    optional  int32  deviceType  = 1;
    optional  string  appVersion  = 2;
}

message ItemInfo {
    optional  bytes  productId  = 1;
    optional  string  productTitle  = 2;
    optional  string  variantId  = 3;
    optional  int32  productType  = 4;
    optional  uint32  quantity  = 5;
    optional  CurrencyAmount  unitPrice  = 6;
    optional  CurrencyAmount  totalCost  = 7;
    optional  CurrencyAmount  strikethroughUnitPrice  = 8;
    optional  CurrencyAmount  strikethroughLinePrice  = 9;
    optional  bool  requiresShipping  = 10;
    optional  bool  taxable  = 11;
    optional  string  variantTitle  = 12;
}

message ItemRecommendationWidget {
    optional  ItemRecommendationWidgetQueryContext  queryContext  = 1;
}

message ItemRecommendationWidgetQueryContext {
    optional  bytes  queryContext  = 1;
}

message ItemSetId {
    optional  string  externalId  = 1;
    optional  int32  type  = 2;
}

message ItemVariant {
    optional  uint64  snapItemId  = 1;
    optional  int32  availability  = 2;
    repeated  ItemVariantDimensionValue  itemVariantDimensionValuesArray  = 3;
}

message ItemVariantContext {
    repeated  uint64  variantItemIdsArray  = 1[packed=true];
    optional  string  storeId  = 2;
}

message ItemVariantDimension {
    optional  int32  type  = 1;
    optional  string  name  = 2;
}

message ItemVariantDimensionData {
    optional  ItemVariantDimension  itemVariantDimension  = 1;
    optional  AgeGroupDimensionData  ageGroupDimension  = 2;
    optional  ColorDimensionData  colorVariant  = 3;
    optional  GenderDimensionData  genderVariant  = 4;
    optional  MaterialDimensionData  materialVariant  = 5;
    optional  PatternDimensionData  patternVariant  = 6;
    optional  SizeDimensionData  sizeVariant  = 7;
    optional  CustomDimensionData  customVariant  = 8;
}

message ItemVariantDimensionValue {
    optional  ItemVariantDimension  itemVariantDimension  = 1;
    optional  string  dimensionValue  = 2;
}

message JaguarStoryType {
}

message JobConfig {
    optional  string  jobTypeIdentifier  = 1;
    optional  string  jobSubtypeIdentifier  = 2;
    optional  JobTiming  jobTiming  = 3;
    optional  int32  jobPersistence  = 4;
    optional  int32  jobScope  = 5;
    optional  int32  existingJobPolicy  = 6;
    optional  Retry  retry  = 7;
    optional  JobConstraint  jobConstraint  = 8;
    optional  uint32  jobTtl  = 9;
}

message JobConstraint {
    optional  int32  networkConnectivity  = 1;
    optional  int32  batteryState  = 2;
    optional  int32  storage  = 3;
    optional  int32  bandwidthState  = 4;
    repeated  int32  appStateArray  = 5[packed=true];
    optional  int32  appIdleState  = 6;
}

message JobTiming {
    optional  bool  runImmediately  = 1;
    optional  JobTiming_RecurringConfig  recurringConfig  = 2;
}

message JobTiming_RecurringConfig {
    optional  uint32  repeatIntervalSec  = 1;
    optional  uint32  flexIntervalSec  = 2;
    optional  int32  throttleConstraint  = 3;
}

message JoinCustomStoryGroupRequest {
    optional  SCSCORERequestMetadata  requestMetadata  = 1;
    optional  SCSCOREUUID  groupId  = 2;
    optional  EmailCredential  emailCredential  = 3;
}

message JoinCustomStoryGroupResponse {
    optional  UserGroupMetadata  userGroupMetadata  = 1;
    optional  UserPendingGroupMetadata  userPendingGroupMetadata  = 2;
}

message KalmanData {
    optional  float  lat  = 1;
    optional  float  lng  = 2;
    optional  float  speed  = 3;
    optional  float  heading  = 4;
    optional  float  horizontalAccuracy  = 5;
    optional  int32  numberOfPoints  = 6;
    optional  float  speedAccuracy  = 7;
}

message Key {
    optional  int32  type  = 1;
    optional  string  id_p  = 2;
}

message Key_KeyType {
}

message LabelScorePair {
    optional  int32  label  = 1;
    optional  float  score  = 2;
    optional  string  labelName  = 3;
}

message LargeGroupsSettings {
    optional  uint64  maxSize  = 1;
}

message LatLng {
    optional  double  lat  = 1;
    optional  double  lng  = 2;
}

message LegacyBoltResolutionMetadata {
    optional  string  contentId  = 1;
    optional  int32  variantSelected  = 2;
    optional  string  localId  = 3;
}

message LegacyItemDeeplinkContext {
    optional  uint64  snapItemId  = 1;
}

message Lens {
    optional  string  id_p  = 1;
}

message LensBlobTransformParams {
    optional  string  encryptionKey  = 1;
    optional  string  encryptionIv  = 2;
    optional  int32  encryptionAlgorithm  = 3;
}

message LensCategory {
    optional  string  id_p  = 1;
    optional  string  parentId  = 2;
    optional  string  displayName  = 3;
    optional  bool  deprecated  = 4;
}

message LensCategoryList {
    repeated  LensCategory  parentLensCategoriesArray  = 1;
    repeated  LensCategory  subLensCategoriesArray  = 2;
}

message LensCollectionMetadata {
    optional  int64  id_p  = 1;
    optional  string  name  = 2;
    optional  string  attributionUserId  = 3;
    optional  string  customAttributionName  = 4;
    optional  string  description_p  = 5;
    optional  string  tileImageURL  = 6;
    repeated  int64  lensIdsArray  = 7[packed=true];
    optional  GPBTimestamp  startDateTime  = 8;
    optional  GPBTimestamp  endDateTime  = 9;
    optional  GPBTimestamp  updatedAt  = 10;
    optional  GPBTimestamp  createDateTime  = 11;
    optional  int32  visibility  = 12;
    optional  double  collectionScore  = 13;
    repeated  int64  includeLensIdsArray  = 14[packed=true];
    repeated  int64  excludeLensIdsArray  = 15[packed=true];
    optional  int32  collectionType  = 16;
    optional  int64  seedLensId  = 17;
    optional  string  tileImageWebpURL  = 18;
    optional  string  deeplinkURL  = 19;
    optional  bool  showCollectionName  = 20;
}

message LensContentAction {
    optional  StoryFeedBaseInfo  baseInfo  = 1;
    optional  int32  action  = 2;
    optional  int32  numRecipients  = 3;
    optional  bytes  attachedInfo  = 4;
}

message LensContentArchiveMetadata {
    optional  uint64  lensId  = 1;
    optional  bytes  checksum  = 2;
}

message LensContentChecksumValidationParams {
    optional  bytes  checksum  = 1;
}

message LensContentSignatureValidationParams {
    optional  bytes  signature  = 1;
    optional  string  contentId  = 2;
}

message LensContentTransformParams {
    optional  LensContentSignatureValidationParams  signatureValidatonParams  = 1;
    optional  LensContentChecksumValidationParams  checksumValidationParams  = 2;
    optional  GPBUInt64Value  lensId  = 3;
}

message LensContext {
    optional  bytes  lensContextToken  = 1;
    optional  uint64  interactedItemId  = 2;
}

message LensCreator {
    optional  string  creatorUuid  = 1;
    optional  fixed64  lensId  = 2;
}

message LensCreatorStats {
    optional  int64  addedFollowerCount  = 1;
    optional  uint64  createdLensCount  = 2;
    optional  uint64  lensFavoriteCount  = 3;
    optional  uint64  lensUnfavoriteCount  = 4;
}

message LensCreatorSubscribeState {
    optional  int32  state  = 1;
    optional  int64  stateTimestampMsecs  = 2;
    optional  int64  stateExpireTimestampMsecs  = 3;
}

message LensData {
    optional  SCSCORELensInfo  lensInfo  = 1;
    repeated  LensStats  lensStatsArray  = 2;
    optional  WindowedLensFeedbackStats  windowedLensFeedbackStats  = 3;
    optional  ExplorationMetadata  explorationMetadata  = 4;
}

message LensFeedbackStats {
    repeated  LensStats  countryStats  = 1;
    optional  LensStats  globalStats  = 2;
    repeated  LensStatsForGender  genderStatsArray  = 3;
}

message LensHideState {
    optional  int32  state  = 1;
    optional  int64  stateTimestampMsecs  = 2;
    optional  int64  stateExpireTimestampMsecs  = 3;
    optional  string  creatorUuid  = 4;
}

message LensIconMetadata {
    optional  uint32  URLHash  = 1;
}

message LensInfo {
    optional  uint64  unlockableId  = 1;
    optional  string  domainKey  = 2;
}

message LensPack {
    optional  string  lensPackId  = 1;
    optional  string  lensPackName  = 2;
    optional  string  description_p  = 3;
    repeated  int32  categoriesArray  = 4[packed=true];
    optional  int64  priceMicroInUsd  = 5;
    repeated  SCLensesPbSingleLensResponse  lensesArray  = 6;
}

message LensScores {
    optional  float  score  = 1;
    optional  string  lensId  = 2;
}

message LensStaticRemoteAssetsMetadata {
    optional  string  assetId  = 1;
    optional  bytes  checksum  = 2;
    optional  int32  assetType  = 3;
}

message LensStats {
    optional  LensStats_Context  context  = 1;
    optional  uint64  shareCount  = 2;
    optional  uint64  uniqueShareCount  = 3;
    optional  uint64  storyViewCount  = 4;
    optional  uint64  uniqueStoryViewCount  = 5;
    optional  uint64  snapViewCount  = 6;
    optional  uint64  uniqueSnapViewCount  = 7;
    optional  uint64  unlockCount  = 8;
    optional  uint64  uniqueUnlockCount  = 9;
    optional  uint64  storyPostCount  = 10;
    optional  uint64  uniqueStoryPostCount  = 11;
    optional  uint64  snapSendCount  = 12;
    optional  uint64  uniqueSnapSendCount  = 13;
    optional  uint64  scanCount  = 14;
    optional  uint64  uniqueScanCount  = 15;
    repeated  LensStats_AggregatedStats  aggregatedStatsPerVersion  = 16;
    repeated  LensStats_AggregatedStats  aggregatedStatsMap  = 17;
    optional  uint64  carouselSwipeCount  = 18;
    optional  uint64  carouselUniqueSwipeCount  = 19;
    optional  uint64  carouselSnapSaveCount  = 20;
    optional  uint64  carouselUniqueSnapSaveCount  = 21;
    optional  uint64  carouselSnapSendCount  = 22;
    optional  uint64  carouselStoryPostCount  = 23;
    optional  LensStats_AggregatedStats  aggregatedStats  = 24;
    optional  uint64  leSendCount  = 25;
    optional  uint64  lePostCount  = 26;
    optional  uint64  leSaveCount  = 27;
    optional  uint64  leSwipeCount  = 28;
    optional  uint64  appwideLensPostCount  = 29;
    optional  uint64  appwideLensSendCount  = 30;
    optional  uint64  appwideLensSaveCount  = 31;
    optional  uint64  appwideLensSwipeCount  = 32;
}

message LensStatsForGender {
    optional  int32  gender  = 1;
    optional  LensStats  lensStats  = 2;
}

message LensStats_AggregatedStats {
    optional  float  popularity  = 1;
    optional  float  unlockRate  = 2;
    optional  float  contentProductionRate  = 3;
    optional  float  unlockLift  = 4;
    optional  float  productionLift  = 5;
    optional  float  consumptionLift  = 6;
    optional  float  reachScore  = 7;
    optional  float  productionVolume  = 8;
    optional  float  carouselLensUseRate  = 9;
    optional  float  carouselProductionVolume  = 10;
    optional  float  leSendRate  = 11;
    optional  float  leSaveRate  = 12;
    optional  float  lePostRate  = 13;
    optional  float  appwideProductionVolume  = 15;
    optional  float  appwideLensUseRate  = 16;
}

message LensStats_Context {
    optional  string  countryCode  = 1;
    optional  int64  beginDateTimestampSecs  = 2;
    optional  int32  gender  = 3;
}

message LensTopicMetaData {
    optional  string  lensId  = 1;
    optional  string  lensName  = 2;
    optional  string  iconURL  = 3;
    optional  string  creatorId  = 4;
    optional  string  creatorName  = 5;
    optional  bool  isOfficialCreator  = 6;
    optional  bool  isBusinessCategoryType  = 7;
}

message LensesSignals {
    optional  uint64  lastLensActivatedTime  = 1;
    optional  uint64  lastSnappableLensActivatedTime  = 2;
}

message Link {
    optional  Weblink  weblink  = 1;
    optional  IosDeeplink  ios  = 2;
    optional  AndroidDeeplink  android  = 3;
    optional  ItemDetailPageDeeplink  itemDetailPageDeeplink  = 4;
}

message ListCustomStoryGroupsRequest {
    optional  SCSCORERequestMetadata  requestMetadata  = 1;
    optional  bool  includeBlocked  = 2;
}

message ListCustomStoryGroupsResponse {
    repeated  CustomStoryGroup  customStoryGroupsArray  = 1;
}

message ListSnapsRequest {
    optional  string  userId  = 1;
    optional  string  appId  = 2;
    optional  string  snapId  = 3;
}

message ListSnapsResponse {
    repeated  ListSnapsResponse_AppStorySnap  snapsArray  = 1;
}

message ListSnapsResponse_AppStorySnap {
    optional  string  appId  = 1;
    optional  string  snapId  = 2;
    optional  int64  creationTimestampMsec  = 3;
    optional  int64  expirationTimestampMsec  = 4;
    optional  int32  mediaType  = 5;
    optional  string  mediaURL  = 6;
    optional  string  mediaId  = 7;
    optional  string  mediaKey  = 8;
    optional  string  mediaIv  = 9;
    optional  bool  isZipped  = 10;
    optional  double  duration  = 11;
    optional  SCMTStreamingMediaInfo  streamingMediaInfo  = 12;
    optional  string  lensId  = 13;
    optional  int64  viewCount  = 14;
    optional  int64  screenShotCount  = 15;
    optional  string  storyId  = 16;
    optional  string  snapClientId  = 17;
    optional  bool  isInfiniteDuration  = 18;
    optional  string  snapAttachmentURL  = 19;
    optional  string  thumbnailURL  = 20;
    optional  string  thumbnailIv  = 21;
    optional  string  caption  = 22;
    optional  string  optimizedMediaURL  = 23;
    optional  string  squareThumbnailURL  = 25;
}

message ListUserCustomStoryGroupsRequest {
    optional  SCSCORERequestMetadata  requestMetadata  = 1;
    optional  SCSCOREUUID  requestedUserId  = 2;
}

message ListUserCustomStoryGroupsResponse {
    repeated  PublicGroupMetadata  customStoryGroupsArray  = 1;
}

message LiveHideDetail {
    optional  string  creatorId  = 1;
    optional  int32  state  = 2;
    optional  int64  stateTimestampMsecs  = 3;
    optional  int64  stateExpireTimestampMsecs  = 4;
}

message LiveSubscribeDetail {
    optional  string  streamId  = 1;
    optional  int32  state  = 2;
    optional  int64  stateTimestampMsecs  = 3;
    optional  int64  stateExpireTimestampMsecs  = 4;
}

message Location {
    optional  LatLng  ll  = 1;
    optional  uint32  heading  = 3;
}

message LocationData {
    optional  string  city  = 1;
    optional  string  country  = 2;
    optional  string  ipAddress  = 3;
    optional  double  longitude  = 4;
    optional  double  latitude  = 5;
    optional  uint32  asn  = 6;
}

message LocationHistoryEntry {
    optional  int64  timestamp  = 1;
    optional  SCMTUserLocationRequest  request  = 2;
    optional  LoggedAction  action  = 3;
    optional  KalmanData  kalmanData  = 4;
    optional  SCMTLocationUpdate  lastSavedLocation  = 5;
    optional  SCMTKalmanData  locationKalmanData  = 6;
}

message LocationHistoryMetaData {
    optional  int64  homeS2CellId  = 1;
    optional  int64  workS2CellId  = 2;
    repeated  TopLocationSummary  dailyTopLocationsArray  = 3;
    repeated  TopLocationSummary  topLocationsPer6DayArray  = 4;
    repeated  string  visitedLocalitiesArray  = 5;
    repeated  PreciseLocation  visitedLocationsArray  = 6;
    repeated  LocationHistoryMetaData_Visitation  visitationsArray  = 7;
}

message LocationHistoryMetaData_Visitation {
    optional  string  locality  = 1;
    repeated  PreciseLocation  locationsArray  = 2;
}

message LocationHistoryRow {
    optional  string  rowKey  = 1;
    optional  LocationHistoryEntry  locationHistoryEntry  = 2;
}

message LogTivNotificationDisplayedRequest {
    optional  string  transactionId  = 1;
    optional  string  broadcastId  = 2;
    optional  int64  clientPerceivedElapsedTimeMs  = 3;
}

message LogTivNotificationDisplayedResponse {
}

message LogTivNotificationReceivedRequest {
    optional  string  transactionId  = 1;
    optional  string  broadcastId  = 2;
}

message LogTivNotificationReceivedResponse {
}

message LoggedAction {
    repeated  string  messageArray  = 2;
    repeated  SCMT1Type  actionTypeArray  = 3;
    optional  SCMT1Sticker  typeSticker  = 4;
    repeated  SCMT1Action  actionArray  = 5;
}

message LogoDisplayValue {
    optional  int32  value  = 1;
}

message LookBuilderCategoryWidget {
    optional  CommerceAction  action  = 1;
    optional  int32  type  = 2;
    optional  LensInfo  metainfo  = 3;
}

message MLBAdcReadRequest {
    required  uint32  pinNum  = 1;
}

message MLBAdcReadResponse {
    required  float  voltage  = 1;
}

message MLBAllLedsConf {
    required  uint32  current  = 2;
    required  uint32  pwm  = 3;
}

message MLBAlsCalib {
    required  float  val300  = 1;
    required  float  val3500  = 2;
    required  float  val10000  = 3;
}

message MLBAlsReading {
    required  float  lux  = 1;
    optional  float  lux1  = 2;
    optional  float  rawLux  = 3;
    optional  float  rawLux1  = 4;
}

message MLBAlsWeights {
    required  float  primary  = 1;
    required  float  secondary  = 2;
}

message MLBAmbaAuthChipTestRequest {
    required  int32  requestType  = 1;
}

message MLBAmbaBootType {
    required  int32  bootType  = 1;
}

message MLBAmbaData {
    optional  int32  storagePercentage  = 1;
}

message MLBAmbaError {
    optional  MLBAmbaError_AmbaAssertError  ambaAssert  = 1;
    optional  MLBAmbaError_AmbaCpuException  ambaException  = 2;
    optional  MLBLinuxCrash  linuxCrash  = 3;
}

message MLBAmbaError_AmbaAssertError {
    optional  string  file  = 1;
    optional  string  function  = 2;
    optional  uint32  lineNumber  = 3;
    optional  string  backtrace  = 4;
}

message MLBAmbaError_AmbaCpuException {
    optional  uint32  lr  = 1;
    optional  uint32  pc  = 2;
    optional  uint32  sp  = 3;
    optional  string  backtrace  = 4;
}

message MLBAmbaGpioReadRequest {
    required  int32  gpio  = 1;
}

message MLBAmbaGpioSetRequest {
    required  int32  gpio  = 1;
    required  int32  setting  = 2;
}

message MLBAmbaRequest {
    required  uint64  requestId  = 1;
    required  int32  type  = 2;
    optional  MLBAuthRequest  authRequest  = 3;
    optional  MLBFirmwareUpdateUploadRequest  fwUpdateUploadRequest  = 4;
    repeated  MLBMediaRequest  mediaRequestArray  = 5;
    repeated  MLBLogRequest  logRequestArray  = 6;
    repeated  MLBCancellationRequest  cancellationRequestArray  = 7;
    optional  bool  wifiSharingRequest  = 8;
    optional  MLBStereoCalibrationDataRequest  stereoCalibrationDataRequest  = 9;
    optional  MLBGpsRequest  gpsRequest  = 10;
}

message MLBAmbaResponse {
    required  uint64  requestId  = 1;
    required  int32  status  = 2;
    required  bool  requestComplete  = 3;
    optional  MLBAuthResponse  authResponse  = 4;
    optional  MLBMediaResponse  mediaResponse  = 5;
    optional  MLBLogResponse  logResponse  = 6;
    optional  MLBFirmwareUpdateUploadResponse  fwUpdateUploadResponse  = 7;
    optional  int32  wifiSharingStatus  = 8;
    optional  MLBStereoCalibrationData  stereoCalibrationData  = 9;
}

message MLBAmbaShellCommandConf {
    required  string  command  = 1;
}

message MLBAmbaUartConf {
    required  bool  uartForwardingEnabled  = 1;
}

message MLBAncsNotificationRule {
    required  uint32  id_p  = 1;
    optional  int32  notifCategory  = 2;
    optional  string  appIdentifierPattern  = 3;
    optional  string  titlePattern  = 4;
    optional  string  subtitlePattern  = 5;
    optional  string  messageContentsPattern  = 6;
    optional  MLBContextNotifAnim  notificationAnim  = 7;
}

message MLBAnimRequest {
    required  int32  animType  = 1;
}

message MLBAppCrashReport {
    optional  string  filename  = 1;
    optional  uint32  lineNumber  = 2;
    optional  string  crashDescription  = 3;
    optional  uint32  errorCode  = 4;
}

message MLBAuthRequest {
    required  int32  authOperation  = 1;
    optional  bytes  mfiChallenge  = 2;
    optional  bytes  appAuthResponse  = 3;
}

message MLBAuthResponse {
    optional  MLBAuthRequest  requestInfo  = 1;
    optional  bytes  responseData  = 2;
}

message MLBAuthzCode {
    required  string  authzCode  = 1;
    required  string  codeVerifier  = 2;
    required  string  redirectUri  = 3;
}

message MLBAvailableStorageResponse {
    optional  int32  status  = 1;
    optional  uint32  availableStorage  = 2;
    optional  uint32  availableStoragePercentage  = 3;
}

message MLBBackgroundUpdateRequest {
    optional  string  targetHash  = 1;
    optional  string  targetVersionTag  = 2;
    optional  uint32  timeUntilWindowMillis  = 3;
    optional  uint32  windowLengthMillis  = 4;
}

message MLBBackgroundUpdateResponse {
    optional  bool  isBackgroundStateValid  = 1;
    optional  string  targetHash  = 2;
    optional  string  targetVersionTag  = 3;
    optional  uint32  timeUntilWindowMillis  = 4;
    optional  uint32  windowLengthMillis  = 5;
    optional  int32  lastFailureReason  = 6;
    optional  uint64  elapsedTimeMillis  = 7;
}

message MLBBatteryStatusRequest {
    required  int32  requestType  = 1;
    optional  int32  dataType  = 2;
    optional  int32  side  = 3;
}

message MLBBatteryStatusResponse {
    optional  int32  soc  = 1;
    optional  int32  voltage  = 2;
    optional  int32  temp  = 3;
    optional  int32  current  = 4;
    optional  int32  socStatus  = 5;
    optional  int32  hardwareStatus  = 6;
}

message MLBBleAddress {
    required  uint32  addrIdPeer  = 1;
    required  uint32  addrType  = 2;
    required  bytes  addr  = 3;
}

message MLBBleDisconnectReason {
    optional  uint32  nrfBleStatusCode  = 1;
}

message MLBBleName {
    required  string  name  = 1;
}

message MLBBluetoothParams {
    required  int32  type  = 1;
    optional  bytes  deviceUuid  = 2;
    optional  string  displayName  = 3;
    optional  bool  strongBleRssi  = 4;
    optional  int32  pairingMode  = 5;
}

message MLBBluetoothUpdate {
    required  int32  updateType  = 1;
}

message MLBBoardIdResponse {
    required  uint32  boardId  = 1;
    required  uint32  hardwareMajorVersion  = 2;
    optional  uint32  hardwareMinorVersion  = 3;
}

message MLBBoolMessage {
    required  bool  boolField  = 1;
}

message MLBBoolValue {
    optional  bool  value  = 1;
}

message MLBButtonHoldEvent {
    required  uint32  holdMs  = 1;
}

message MLBButtonRequest {
    required  uint32  durationMs  = 1;
    optional  int32  side  = 2;
}

message MLBBytesValue {
    optional  bytes  value  = 1;
}

message MLBCameraSensorData {
    optional  uint32  agc  = 1;
    optional  uint32  dgc  = 2;
    optional  uint32  startEvIndex  = 3;
    optional  uint32  endEvIndex  = 4;
    optional  int32  startTemperature  = 5;
    optional  int32  endTemperature  = 6;
    optional  uint32  shutterTimeUs  = 7;
    optional  uint32  alsValue  = 8;
    optional  uint32  alsEvLutIndex  = 9;
    optional  int32  startTemperatureVin1  = 10;
    optional  int32  endTemperatureVin1  = 11;
}

message MLBCancellationRequest {
    required  uint64  requestId  = 1;
}

message MLBChargerStateResponse {
    required  bool  isChargerConnected  = 1;
    required  bool  isFullyCharged  = 2;
    required  int32  batteryTemperatureLeft  = 3;
    required  int32  chargingLimit  = 4;
    optional  int32  chargingCurrent  = 5;
    optional  int32  batteryTemperatureRight  = 6;
}

message MLBClientID {
    required  string  clientId  = 1;
    required  bool  requestAuthzCode  = 2;
}

message MLBCodecMetaFrame {
    optional  uint64  pts  = 1;
}

message MLBContextNotifAnim {
    optional  uint32  solidDuration  = 1;
    optional  uint32  blinkCount  = 2;
    optional  uint32  blinkDurationOnInMs  = 3;
    optional  uint32  blinkDurationOffInMs  = 4;
    optional  uint32  color  = 5;
    optional  int32  ledSideEnabled  = 6;
}

message MLBContextRequest {
    optional  bool  animate  = 1;
    optional  MLBContextNotifAnim  notificationAnim  = 2;
}

message MLBCoulombCtrlData {
    optional  int32  coulombCtrlTemperature  = 1;
}

message MLBCrashReport {
    optional  string  logPayload  = 1;
    optional  MLBAppCrashReport  appCrashReport  = 2;
    optional  MLBSoftDeviceCrashReport  softDeviceCrashReport  = 3;
    optional  MLBHardFaultReport  hardFaultReport  = 4;
    optional  MLBWatchdogCrashReport  watchdogCrashReport  = 5;
    optional  MLBAmbaError  ambaError  = 6;
    optional  MLBSystemCounters  systemCounters  = 7;
}

message MLBDfuRequest {
    required  int32  dfuType  = 1;
}

message MLBDoubleValue {
    optional  double  value  = 1;
}

message MLBDroppedFramesData {
    optional  int32  vin0Cnt  = 1;
    optional  int32  vin1Cnt  = 2;
}

message MLBEmpty {
}

message MLBEncryptionSetupNonceExchangeMessage {
    required  bytes  nonce  = 1;
}

message MLBEncryptionSetupRequest {
    required  int32  type  = 1;
    optional  MLBEncryptionSetupNonceExchangeMessage  setupMessage  = 2;
}

message MLBEncryptionSetupResponse {
    optional  MLBEncryptionSetupNonceExchangeMessage  setupMessage  = 1;
    optional  int32  status  = 2;
}

message MLBErrorReport {
    required  int32  errorType  = 1;
    optional  MLBTemperatureResponse  temperatures  = 2;
    optional  uint32  soc  = 3;
    optional  uint32  voltage  = 4;
    optional  uint32  storage  = 5;
    optional  MLBCrashReport  crashReport  = 6;
}

message MLBFactoryBitsMessage {
    required  uint32  factoryBits  = 1;
}

message MLBFirmwareUpdateUploadRequest {
    required  int32  type  = 1;
    required  bytes  data_p  = 2;
    required  uint32  startPos  = 3;
    required  bool  overwriteExistingFile  = 4;
}

message MLBFirmwareUpdateUploadResponse {
    required  int32  type  = 1;
    required  uint32  fileSize  = 2;
}

message MLBFloatValue {
    optional  float  value  = 1;
}

message MLBFrameColorMessage {
    required  int32  frameColor  = 1;
    optional  uint32  frameColorEnumVal  = 2;
}

message MLBFwVersion {
    optional  string  gitCommit  = 1;
    optional  string  gitTag  = 2;
    optional  string  gitBranch  = 3;
}

message MLBGetFirmwareUpdateHashResponse {
    optional  string  digest  = 1;
}

message MLBGitResponse {
    required  string  commitSha  = 1;
    required  string  branch  = 2;
    required  string  tag  = 3;
    optional  string  buildConfig  = 4;
    optional  string  bootloaderGitSha  = 5;
    optional  uint32  bootloaderCrc32  = 6;
}

message MLBGpioReadRequest {
    required  uint32  pinNum  = 1;
}

message MLBGpioReadResponse {
    required  int32  setting  = 1;
}

message MLBGpioSetRequest {
    required  uint32  pinNum  = 1;
    required  int32  setting  = 2;
}

message MLBGpsData {
    optional  int32  latitude  = 1;
    optional  int32  longitude  = 2;
    optional  uint64  updateTimeUtc  = 3;
    optional  uint32  horizontalAccuracy  = 4;
}

message MLBGpsRequest {
    required  int32  type  = 1;
    optional  MLBRange  fileRange  = 2;
    optional  bytes  fileData  = 3;
}

message MLBGpsStatistics {
    optional  bool  gotLocation  = 1;
    optional  uint32  fixTimeMs  = 2;
}

message MLBGpsUpdateRequest {
    required  int32  latitude  = 1;
    required  int32  longitude  = 2;
    required  uint32  horizontalAccuracy  = 3;
}

message MLBGuppyBatteryMessage {
    optional  int32  batteryLevel  = 1;
    optional  int64  timeSinceUpdatedInMs  = 2;
}

message MLBHardFaultReport {
    optional  uint32  r0  = 1;
    optional  uint32  r1  = 2;
    optional  uint32  r2  = 3;
    optional  uint32  r3  = 4;
    optional  uint32  r12  = 5;
    optional  uint32  lr  = 6;
    optional  uint32  pc  = 7;
    optional  uint32  xpsr  = 8;
}

message MLBHummingbird {
    optional  int32  sessionId  = 1;
}

message MLBIMUDataFrame {
    required  uint32  timeStamp  = 1;
    required  sint32  gyroX  = 2;
    required  sint32  gyroY  = 3;
    required  sint32  gyroZ  = 4;
    required  sint32  accelX  = 5;
    required  sint32  accelY  = 6;
    required  sint32  accelZ  = 7;
}

message MLBIMUDataSet {
    optional  MLBIMUMetaData  imuMetaData  = 1;
    repeated  MLBIMUDataFrame  imuDataFramesArray  = 2;
    repeated  MLBVideoMetaFrame  videoFramesArray  = 3;
    repeated  MLBCodecMetaFrame  codecFramesArray  = 4;
}

message MLBIMUDataSetCollection {
    repeated  MLBIMUDataSet  imuDataSetsArray  = 1;
}

message MLBIMUFrame {
    required  sint32  gyroX  = 1;
    required  sint32  gyroY  = 2;
    required  sint32  gyroZ  = 3;
    required  sint32  accelX  = 4;
    required  sint32  accelY  = 5;
    required  sint32  accelZ  = 6;
}

message MLBIMUMetaData {
    optional  uint32  id_p  = 1;
    optional  int32  imuSampleFreq  = 2;
    optional  uint32  imuVersion  = 3;
}

message MLBImageData {
    optional  MLBImageData_Burst  burst  = 1;
}

message MLBImageData_Burst {
    optional  int32  index  = 1;
    optional  int32  length  = 2;
    optional  int32  frameRate  = 3;
    optional  string  firstImageUuid  = 4;
}

message MLBImuRequest {
    required  int32  requestType  = 1;
}

message MLBImuResponse {
    required  int32  responseType  = 1;
    required  int32  dataX  = 2;
    required  int32  dataY  = 3;
    required  int32  dataZ  = 4;
}

message MLBInt32Value {
    optional  int32  value  = 1;
}

message MLBInt64Value {
    optional  int64  value  = 1;
}

message MLBKeyExchangeMessage {
    required  bytes  nonce  = 1;
    required  bytes  publicKey  = 2;
}

message MLBLinuxCrash {
    required  int32  type  = 1;
    required  string  identifier  = 2;
    optional  string  backtrace  = 3;
}

message MLBLocationData {
    optional  float  latitude  = 1;
    optional  float  longitude  = 2;
    optional  uint32  speedMps  = 3;
    optional  uint64  utcTime  = 4;
    optional  int32  headingDeg  = 5;
    optional  int32  heightMm  = 6;
    optional  uint32  hAccMm  = 7;
    optional  uint32  vAccMm  = 8;
}

message MLBLogData {
    required  string  name  = 1;
    optional  MLBRange  requestedRange  = 2;
    required  MLBRange  actualRange  = 3;
    required  bytes  data_p  = 4;
}

message MLBLogFileMetadata {
    required  string  name  = 1;
    required  uint32  size  = 2;
}

message MLBLogFileTransferRequest {
    required  string  name  = 1;
    optional  MLBRange  range  = 2;
}

message MLBLogRequest {
    required  int32  type  = 1;
    optional  MLBLogFileTransferRequest  logFileTransferRequest  = 2;
}

message MLBLogResponse {
    repeated  MLBLogFileMetadata  logFileMetadataArray  = 1;
    optional  MLBLogData  logData  = 2;
    optional  bool  deletedAnalytics  = 3;
}

message MLBMediaCountsMessage {
    required  uint32  videos  = 1;
    required  uint32  photos  = 2;
}

message MLBMediaCountsResponse {
    optional  MLBMediaCountsMessage  mediaCounts  = 1;
}

message MLBMediaData {
    required  string  uuid  = 1;
    required  int32  type  = 2;
    optional  MLBRange  requestedRange  = 3;
    required  MLBRange  actualRange  = 4;
    required  bytes  data_p  = 5;
}

message MLBMediaFileDeletionRequest {
    required  string  uuid  = 1;
    optional  bool  includeHq  = 2;
}

message MLBMediaFileMarkTransferredRequest {
    required  string  uuid  = 1;
}

message MLBMediaFileMetadata {
    optional  MLBVideoData  videoData  = 1;
    optional  MLBImageData  imageData  = 2;
    optional  MLBNordicData  nordicData  = 3;
    optional  MLBAmbaData  ambaData  = 4;
    optional  MLBCameraSensorData  cameraSensorData  = 5;
    optional  MLBGpsData  gpsData  = 6;
    optional  bytes  randomBytes  = 7;
    optional  MLBTimeData  time  = 8;
    optional  MLBFwVersion  fwVersion  = 9;
    optional  bool  hasUploaded  = 10;
    optional  MLBCoulombCtrlData  coulombCtrlData  = 11;
    optional  MLBMultisnap  multisnap  = 12;
    optional  MLBSystemState  systemState  = 13;
    optional  MLBPerformanceData  performanceData  = 14;
    optional  int32  buttonSide  = 15;
    optional  MLBAlsReading  alsReading  = 16;
    optional  MLBLocationData  locationData  = 17;
    optional  string  factorySerialNumber  = 18;
    optional  MLBPowerAnalytics  powerAnalytics  = 19;
    optional  MLBHummingbird  hummingbird  = 20;
}

message MLBMediaFileTransferRequest {
    required  string  uuid  = 1;
    required  int32  type  = 2;
    optional  MLBRange  range  = 3;
}

message MLBMediaMetadata {
    required  string  uuid  = 1;
    repeated  MLBMediaTypeAndSize  mediaArray  = 2;
}

message MLBMediaRequest {
    required  int32  type  = 1;
    optional  MLBMediaFileTransferRequest  mediaFileTransferRequest  = 2;
    optional  MLBMediaFileDeletionRequest  mediaFileDeletionRequest  = 3;
    optional  MLBMediaFileMarkTransferredRequest  mediaFileMarkTransferredRequest  = 4;
}

message MLBMediaResponse {
    repeated  MLBMediaMetadata  availableMediaArray  = 1;
    optional  MLBMediaData  mediaData  = 2;
}

message MLBMediaTypeAndSize {
    required  int32  type  = 1;
    required  uint32  size  = 2;
}

message MLBMultisnap {
    optional  int32  index  = 1;
    optional  string  firstVideoUuid  = 2;
}

message MLBNordicData {
    optional  int32  bootSession  = 1;
    optional  string  deviceId  = 3;
}

message MLBPeerVerificationMessage {
    required  bytes  tag  = 1;
    required  bytes  ciphertext  = 2;
}

message MLBPerformanceData {
    repeated  uint32  eventMap  = 1;
}

message MLBPhoneNotification {
    required  int32  notifCategory  = 1;
    optional  string  appIdentifier  = 2;
    optional  string  title  = 3;
    optional  string  subtitle  = 4;
    optional  string  messageContents  = 5;
    optional  string  messageSize  = 6;
    optional  string  date  = 7;
    optional  string  positiveActionLabel  = 8;
    optional  string  negativeActionLabel  = 9;
}

message MLBPowerAnalytics {
    optional  uint32  ambaBootsSinceLastCapture  = 1;
    optional  uint32  ambaUpMsSinceLastCapture  = 2;
}

message MLBPowerWatchdogStatus {
    optional  bool  isEnabled  = 1;
    optional  uint32  msUntilExpiration  = 2;
}

message MLBQcaTemperatureResponse {
    required  int32  qcaTemp  = 1;
}

message MLBRange {
    required  uint32  start  = 1;
    required  uint32  len  = 2;
}

message MLBReadRequest {
    required  uint32  address  = 1;
    required  uint32  nBytes  = 2;
}

message MLBRealTimeMessage {
    required  uint64  timeUtc  = 1;
    optional  int32  timeZone  = 2;
}

message MLBResetReason {
    optional  bool  resetpin  = 1;
    optional  bool  dog  = 2;
    optional  bool  sreq  = 3;
    optional  bool  lockup  = 4;
    optional  bool  off  = 5;
    optional  bool  lpcomp  = 6;
    optional  bool  dif  = 7;
    optional  bool  nfc  = 8;
    optional  bool  por  = 9;
}

message MLBRfSwitchRequest {
    required  int32  position  = 1;
}

message MLBRpcError {
    required  string  errorCode  = 1;
    required  string  description_p  = 2;
    required  uint32  line  = 3;
    required  string  function  = 4;
    required  string  file  = 5;
}

message MLBSerialNumberRequest {
    optional  bool  clearCache  = 1;
}

message MLBSerialNumberResponse {
    required  bytes  serialNumber  = 1;
    optional  string  factorySerialNumber  = 2;
}

message MLBSetContextAnimMessage {
    required  uint32  solidDuration  = 1;
    required  uint32  blinkCount  = 2;
    required  uint32  blinkDurationOnInMs  = 3;
    required  uint32  blinkDurationOffInMs  = 4;
}

message MLBSetRgbMessage {
    required  uint32  red  = 1;
    required  uint32  green  = 2;
    required  uint32  blue  = 3;
}

message MLBSetSideEnabledMessage {
    required  int32  sideEnabled  = 1;
}

message MLBShipmodeRequest {
    optional  uint32  delayHrs  = 1;
    optional  bool  deleteContent  = 2;
}

message MLBSingleLedConf {
    required  uint32  ledNum  = 1;
    required  uint32  current  = 2;
    required  uint32  pwm  = 3;
    optional  int32  side  = 4;
}

message MLBSnapScanFrame {
    required  uint32  yuvFrameBufAddr  = 1;
    required  uint32  yuvFrameLen  = 2;
    required  uint32  imagePitch  = 3;
    required  uint32  imageDim  = 4;
    optional  uint32  throttleFreqUs  = 5;
    optional  uint32  throttleDurUs  = 6;
    optional  uint32  timeoutSec  = 7;
}

message MLBSnapScanResponse {
    required  bool  success  = 1;
    optional  bytes  snapCodeData  = 2;
}

message MLBSoftDeviceCrashReport {
    optional  uint32  faultId  = 1;
    optional  uint32  pc  = 2;
    optional  uint32  errorInfo  = 3;
}

message MLBSpecsEvent {
    required  uint32  msSinceBoot  = 1;
    optional  int32  eventType  = 2;
    optional  uint32  ambaTimeMs  = 3;
}

message MLBSpectaclesPushMessage {
    optional  string  logMessage  = 1;
    optional  uint32  mediaCount  = 2;
    optional  uint32  battStatus  = 3;
    optional  bool  booted  = 5;
    optional  string  ipAddress  = 6;
    optional  MLBMediaCountsMessage  mediaCounts  = 7;
    optional  MLBCrashReport  crashReport  = 8;
    optional  MLBSpecsEvent  specsEvent  = 9;
    optional  MLBResetReason  resetReason  = 10;
    optional  uint32  remainingHeapBytes  = 11;
    optional  int32  wifiConnectionEvent  = 12;
    optional  int32  bluetoothConnectionEvent  = 13;
    optional  bool  receivedBackupPairingConfirmationTap  = 14;
    optional  int32  logLevel  = 15;
    optional  bool  linuxBooted  = 16;
    optional  int32  systemStatus  = 17;
    optional  MLBSnapScanResponse  snapScanResponse  = 18;
    optional  uint32  msSinceBoot  = 19;
    optional  int32  uploadToCloudEvent  = 20;
    optional  MLBButtonHoldEvent  buttonHoldEvent  = 21;
    optional  MLBSystemCounters  systemCounters  = 22;
    optional  MLBErrorReport  errorReport  = 23;
    optional  int32  chargerEvent  = 24;
    optional  MLBUserMediaCountsMessage  userMediaCounts  = 25;
    optional  MLBSpectaclesPushMessage_InvalidatedRequest  invalidatedRequest  = 26;
    optional  int32  transferThrottledEvent  = 27;
    optional  bool  encryptionLayerFailure  = 28;
    optional  MLBWifiThrottlingReport  wifiThrottlingReport  = 29;
    optional  uint32  wifiFrequency  = 30;
    optional  int32  directConnectionInfo  = 31;
    optional  MLBUbloxMessage  ubxMessage  = 32;
    optional  MLBTaskInfo  taskInfo  = 33;
    optional  MLBBleDisconnectReason  bleDisconnectReason  = 34;
    optional  MLBLocationData  locationData  = 35;
    optional  MLBGpsStatistics  gpsStatistics  = 36;
    optional  MLBPhoneNotification  phoneNotification  = 37;
    optional  MLBAncsNotificationRule  ancsRule  = 38;
}

message MLBSpectaclesPushMessage_InvalidatedRequest {
    optional  uint32  methodIndex  = 1;
    optional  uint32  requestId  = 2;
    optional  uint64  methodUuid  = 3;
}

message MLBStereoCalibrationData {
    optional  bytes  factoryCalibration  = 1;
}

message MLBStereoCalibrationDataRequest {
    optional  bool  factoryCalibration  = 1;
}

message MLBStillCaptureFpsMessage {
    optional  int32  fps  = 1;
}

message MLBStringValue {
    optional  string  value  = 1;
}

message MLBSystemCounters {
    optional  uint32  nordicBootCount  = 1;
    optional  uint32  ambaBootCount  = 2;
    optional  uint32  localMediaCount  = 3;
}

message MLBSystemState {
    optional  int32  batterySoc  = 1;
    optional  bool  charging  = 2;
    optional  bool  bleConnected  = 3;
    optional  int32  ambaTemperature  = 4;
    optional  int32  wifiTemperature  = 5;
    optional  float  nordicTemperature  = 6;
    optional  int32  bleRssi  = 7;
}

message MLBTaskInfo {
    optional  string  name  = 1;
    optional  uint32  runtimePercentage  = 2;
    optional  uint32  remainingStack  = 3;
    optional  float  runtimePercentageF  = 4;
}

message MLBTemperatureResponse {
    required  float  nordicTemp  = 1;
    optional  int32  ambaTemp  = 2;
    optional  int32  wifiTemp  = 3;
    optional  int32  imageSensorTemp  = 4;
    optional  int32  coulombCtrlTemp  = 5;
    optional  int32  status  = 6;
}

message MLBTestResult {
    required  bool  testPassed  = 1;
    optional  uint32  version  = 2;
}

message MLBTimeData {
    optional  uint64  captureUtc  = 1;
    optional  uint64  sinceNordicBoot  = 2;
}

message MLBUInt32Value {
    optional  uint32  value  = 1;
}

message MLBUInt64Value {
    optional  uint64  value  = 1;
}

message MLBUbloxMessage {
    required  uint32  classId  = 1;
    required  uint32  msgId  = 2;
    optional  bytes  payload  = 3;
}

message MLBUploadToCloudStatusInfo {
    required  int32  status  = 1;
}

message MLBUserAssociationMessage {
    required  string  userIdentifier  = 1;
}

message MLBUserMediaCountsMessage {
    required  string  user  = 1;
    required  MLBMediaCountsMessage  mediaCounts  = 2;
}

message MLBUserMediaCountsRequest {
    required  string  user  = 1;
}

message MLBVideoData {
    optional  int32  durationMs  = 1;
    optional  int32  codec  = 2;
    optional  int32  requestedVideoCount  = 3;
    optional  bool  lastRecordAborted  = 4;
    optional  MLBDroppedFramesData  droppedFramesData  = 5;
}

message MLBVideoMetaFrame {
    optional  uint32  sofTs  = 1;
    optional  uint32  rawTs  = 2;
    optional  uint32  eofTs  = 3;
    optional  uint64  pts  = 4;
}

message MLBVideoModeMsg {
    required  int32  videoMode  = 1;
}

message MLBWatchdogCrashReport {
    optional  uint32  pc  = 1;
    optional  uint32  r1  = 2;
    optional  uint32  r2  = 3;
    optional  uint32  r3  = 4;
    optional  uint32  r12  = 5;
    optional  uint32  lr  = 6;
    optional  uint32  r0  = 7;
    optional  uint32  xpsr  = 8;
}

message MLBWifiAPInfo {
    required  int32  state  = 1;
    required  string  ssid  = 2;
    optional  string  password  = 3;
}

message MLBWifiAPList {
    repeated  MLBWifiAPInfo  wifiApArray  = 1;
}

message MLBWifiParams {
    required  int32  type  = 1;
    optional  string  ssid  = 2;
    optional  string  password  = 3;
    optional  uint32  frequency  = 4;
    optional  string  country  = 5;
    optional  int32  frequencyStrategy  = 6;
}

message MLBWifiStartApRequest {
    required  string  ssid  = 1;
}

message MLBWifiThrottlingReport {
    optional  uint32  throttling  = 1;
    optional  bool  dutyCycleControl  = 2;
    optional  MLBTemperatureResponse  temperatures  = 3;
}

message MLBWifiUpdate {
    required  int32  updateType  = 1;
    optional  string  ipAddress  = 2;
    optional  uint32  frequency  = 3;
}

message MLBWriteRequest {
    required  uint32  addr  = 1;
    required  bytes  data_p  = 2;
    optional  bool  reset  = 3;
}

message MapRecord {
    optional  string  key  = 1;
    optional  string  value  = 2;
}

message MapRecords {
    repeated  MapRecord  recordsArray  = 1;
}

message MapRules {
    optional  uint64  minPairs  = 1;
    optional  uint64  maxPairs  = 2;
    optional  bool  noSparse  = 3;
    optional  FieldRules  keys  = 4;
    optional  FieldRules  values  = 5;
    optional  bool  ignoreEmpty  = 6;
}

message MaterialDimensionData {
    repeated  string  dimensionValuesArray  = 1;
}

message MdpMediaAttribution {
    optional  int32  mediaSource  = 1;
    optional  int32  assetType  = 2;
}

message MediaInfo {
    optional  string  mediaId  = 1;
    optional  string  color  = 2;
}

message MediaLibraryMediaIds {
    repeated  MediaInfo  tileLogosArray  = 1;
    optional  MediaInfo  horizontalIcon  = 2;
    optional  MediaInfo  squareHeroImage  = 3;
}

message MediaLinkPayload {
    optional  string  format  = 1;
    optional  string  downloadURL  = 2;
    optional  string  thumbnailDownloadURL  = 3;
    optional  string  lensId  = 4;
}

message MediaReference {
    optional  string  URL  = 2;
    optional  bytes  contentObject  = 3;
    optional  VideoDescription  videoDescription  = 5;
    optional  int64  mediaListId  = 6;
    optional  int32  claimBehavior  = 7;
    optional  int32  mediaType  = 8;
    optional  string  localContentKey  = 9;
    optional  string  localCacheKey  = 10;
}

message MediaSignals {
    optional  uint32  mediaDurationMs  = 1;
    optional  int32  mediaType  = 2;
}

message MediaType {
}

message MembershipBasicSettings {
    optional  bool  showOnFriendshipProfile  = 1;
}

message MembershipCredentials {
    optional  EmailCredential  emailCredential  = 1;
}

message MemoriesAsset {
    optional  Asset  asset  = 1;
    optional  uint64  size  = 2;
    optional  string  URL  = 3;
    optional  string  md5  = 4;
    optional  MapRecords  uploadHeaders  = 5;
    optional  string  encryptionKey  = 6;
    optional  string  encryptionIv  = 7;
    optional  string  downloadURL  = 8;
}

message MemoriesAssetList {
    repeated  MemoriesAsset  valueArray  = 1;
}

message MemoriesEntry {
    optional  string  entryId  = 1;
    optional  uint64  seqNum  = 2;
    optional  uint32  entryType  = 3;
    repeated  string  snapIdsArray  = 4;
    optional  uint64  createTimeMs  = 5;
    optional  uint32  status  = 6;
    optional  bool  isPrivate  = 7;
    optional  SPCPStringListValue  highlightedSnapIds  = 8;
    optional  GPBStringValue  title  = 9;
    optional  GPBUInt64Value  lastAutosaveTimeMs  = 10;
    optional  GPBStringValue  externalId  = 11;
    optional  GPBUInt32Value  entrySource  = 12;
    optional  MemoriesSnapOrder  snapOrder  = 13;
    optional  MemoriesAssetList  assets  = 14;
    optional  SDMSnapDoc  snapDoc  = 15;
}

message MemoriesFeaturedStory {
    optional  SCCOREUUID  featuredStoryId  = 1;
    optional  string  title  = 2;
    optional  string  subtitle  = 3;
    optional  uint64  activationTimeMs  = 4;
    optional  uint64  expirationTimeMs  = 5;
    optional  uint32  featuredStoryType  = 6;
    optional  MemoriesFeaturedStory_ContentReference  content  = 7;
}

message MemoriesFeaturedStory_ContentReference {
    optional  ChatFeaturedStoryContent  chatContent  = 1;
}

message MemoriesMetadata {
    optional  MemoriesAssetList  assets  = 1;
    optional  SDMSnapDoc  snapDoc  = 2;
}

message MemoriesNullableMetadata {
    optional  int32  null  = 1;
    optional  MemoriesMetadata  metadata  = 2;
}

message MemoriesSearchConfidenceMapConfig {
    repeated  string  conceptArray  = 1;
    repeated  float  thresholdArray  = 2[packed=true];
}

message MemoriesSnapOrder {
    repeated  uint64  value  = 1;
}

message Merchant {
    optional  string  name  = 1;
}

message MessageRules {
    optional  bool  skip  = 1;
    optional  bool  required  = 2;
}

message MiniSelectorTabularTextRenderingGroups {
    repeated  TextRenderingGroup  textRenderingGroupsArray  = 1;
}

message ModerationFeatures {
    optional  Audience  audience  = 1;
    optional  BrandSafety  brandSafety  = 2;
    optional  ContentQuality  contentQuality  = 3;
    optional  ContentQualitySubTags  contentQualitySubTags  = 4;
}

message ModerationFilterType {
}

message ModerationLevelValue {
    optional  int32  value  = 1;
}

message MultiEmbeddingResult {
    repeated  Embedding  embeddingArray  = 1;
}

message MultiFloat {
    repeated  float  valueArray  = 1[packed=true];
}

message MultiString {
    repeated  string  valueArray  = 1;
}

message MusicScores {
    optional  float  score  = 1;
    optional  uint64  musicId  = 2;
}

message MyBoost {
    optional  int64  progressMs  = 1;
    optional  int32  boostType  = 2;
    optional  int64  timestampMsec  = 3;
    optional  string  snapId  = 4;
}

message NativeCheckoutAction {
    optional  ShowcaseStoreMetadata  storeMetadata  = 1;
}

message NetworkConditionEnums {
}

message NetworkSpan {
    optional  int64  id_p  = 1;
    optional  int64  endpoint  = 2;
    optional  int64  networkRequestSeqnum  = 3;
    optional  int64  tid  = 4;
    optional  fixed64  queryFp  = 5;
    optional  int64  startUs  = 6;
    optional  int64  endUs  = 7;
    optional  int64  queueLatencyUs  = 8;
    optional  int64  firstByteLatencyUs  = 9;
    optional  int64  networkLatencyUs  = 10;
    optional  int64  uploadedBytes  = 12;
    optional  int64  downloadedBytes  = 13;
    optional  int64  receivedBytesPartial  = 14;
    optional  int64  totalUncompressedBytesToUpload  = 15;
    optional  int64  totalCompressedBytesToUpload  = 16;
    optional  int64  totalUncompressedBytesToDownload  = 17;
    optional  int64  totalCompressedBytesToDownload  = 18;
    optional  int64  startEstUploadKbps  = 19;
    optional  int64  startEstDownloadKbps  = 20;
    optional  int64  endEstUploadKbps  = 21;
    optional  int64  endEstDownloadKbps  = 22;
    optional  bytes  requestId  = 23;
    optional  int64  tidSubmit  = 24;
    optional  int64  tidStart  = 25;
    optional  int64  tidComplete  = 26;
}

message NewChatPageConfig {
    optional  bool  isNewChatPageEnabled  = 1;
    optional  bool  showKeyboardOnEntry  = 2;
    optional  bool  disablePageAnimation  = 3;
    optional  bool  hideTabIcons  = 4;
    optional  bool  isPillTextFieldEnabledForNewCallTab  = 5;
    optional  bool  isNoTabDesignEnabled  = 6;
    optional  bool  isHideGroupsEnabled  = 7;
}

message NewRecentCameraModesConfig {
    optional  bool  enableNewRecentCameraModes  = 1;
}

message OcrResult {
    optional  string  textResult  = 1;
}

message OneTapLoginLogoutRequest {
    optional  string  deviceId  = 2;
    optional  string  deviceName  = 3;
}

message OneTapLoginLogoutResponse {
    optional  int32  status  = 1;
    optional  string  userId  = 2;
    optional  string  error  = 3;
    optional  int64  errorCode  = 4;
    optional  string  token  = 5;
    optional  int64  expiresAtSeconds  = 6;
}

message OneTapLoginTokenDescriptor {
    optional  int64  tokenCreateTime  = 1;
    optional  string  tokenDeviceName  = 2;
    optional  string  tokenDeviceId  = 3;
}

message OperaSignals {
    optional  int32  contentViewSource  = 1;
    optional  int32  playbackItemType  = 2;
    optional  bool  useVerticalNavigation  = 3;
}

message OptInStatus {
    optional  bool  isOptedIn  = 1;
    optional  int64  updateTimestampMsecs  = 2;
}

message Options {
    optional  int32  units  = 1;
    optional  int32  format  = 4;
    optional  int32  costingType  = 12;
    repeated  Costing  costings  = 13;
    repeated  Location  locationsArray  = 14;
}

message Order {
    optional  bytes  accountId  = 1;
    optional  int32  accountType  = 2;
    optional  bytes  orderId  = 3;
    optional  string  externalOrderId  = 4;
    optional  string  externalOrderName  = 5;
    optional  GPBTimestamp  createdAt  = 6;
    optional  GPBTimestamp  updatedAt  = 7;
    repeated  OrderBillingItem  billingItemsArray  = 8;
    optional  GPBTimestamp  chargeTime  = 9;
    optional  int32  billingPurchaseState  = 10;
    optional  ShippingAddress  shippingAddress  = 11;
    optional  ShippingOption  shippingOption  = 12;
    optional  CurrencyAmount  subtotalPrice  = 13;
    optional  CurrencyAmount  totalTax  = 14;
    optional  CurrencyAmount  totalPrice  = 15;
    repeated  PaymentMethod  paymentMethodsArray  = 16;
    optional  int32  commercePartner  = 17;
    optional  bytes  storeId  = 18;
    optional  string  storeName  = 19;
    optional  string  storeIconURL  = 20;
    optional  bool  isThirdPartyStore  = 21;
    optional  string  storeEmail  = 22;
    optional  string  discountCode  = 23;
    optional  DiscountInfo  discountInfo  = 24;
    optional  ContactDetails  contactDetails  = 25;
    optional  int32  predefinedSource  = 26;
    optional  string  dynamicSource  = 27;
    optional  StorePolicy  storePolicy  = 28;
    optional  string  supportURL  = 29;
}

message OrderBillingItem {
    optional  ItemInfo  itemInfo  = 1;
    optional  int32  commercePartner  = 2;
    optional  string  variantDescription  = 3;
    optional  string  productImageURL  = 4;
    optional  PrintingMetadata  printingMetadata  = 5;
}

message OurStoryDestination {
}

message OurStoryFilter {
    repeated  int32  destinationsArray  = 1[packed=true];
    optional  int64  startTsMs  = 2;
    optional  int64  endTsMs  = 3;
    optional  uint32  limit  = 4;
    optional  QueryCursor  queryCursor  = 5;
    repeated  int32  filterSourcesArray  = 6[packed=true];
    optional  bool  returnFirstSnapOnly  = 7;
    optional  bool  includeDeletedSnaps  = 8;
    optional  bool  excludeCameoSnaps  = 9;
}

message OurStoryFilterOptions {
    optional  int32  filterDestination  = 1;
    repeated  int32  filterSourcesArray  = 2[packed=true];
    optional  bool  returnFirstSnapOnly  = 3;
    optional  bool  excludeCameoSnaps  = 4;
}

message Owner {
    optional  SCSCOREUUID  userId  = 1;
    optional  SCSCOREUUID  groupId  = 2;
    optional  SCSCOREUUID  profileId  = 3;
}

message PBUFEmojiInfo {
    optional  int32  type  = 1;
    optional  string  source  = 2;
    optional  string  title  = 3;
    optional  string  emojiDesc  = 4;
    optional  string  emojiPickerDesc  = 5;
    optional  int32  defaultType  = 6;
    optional  string  defaultVal  = 7;
    optional  int32  emojiLegendRank  = 8;
}

message PBUFFriend {
    optional  string  name  = 1;
    optional  string  userId  = 2;
    optional  int32  type  = 3;
    optional  string  display  = 4;
    optional  string  birthday  = 5;
    optional  int64  ts  = 6;
    optional  int64  reverseTs  = 7;
    optional  int32  direction  = 8;
    optional  int32  storyPrivacy  = 9;
    optional  bool  canSeeCustomStories  = 10;
    optional  int32  pendingSnapsCount  = 11;
    optional  int64  expiration  = 12;
    optional  bool  isSharedStory  = 13;
    optional  bool  hasCustomDescription  = 14;
    optional  string  sharedStoryId  = 15;
    optional  bool  localStory  = 16;
    optional  bool  ignoredLink  = 17;
    optional  bool  hiddenLink  = 18;
    optional  string  addSource  = 19;
    optional  int32  addSourceType  = 20;
    optional  string  friendmojiString  = 21;
    optional  bool  needsLove  = 22;
    optional  bool  autoAdded  = 23;
    optional  bool  newLink  = 24;
    optional  bool  dontDecayThumbnail  = 25;
    optional  string  venue  = 26;
    repeated  string  friendmojiSymbolsArray  = 27;
    repeated  PBUFFriendmoji  friendmojisArray  = 28;
    optional  int32  snapStreakCount  = 29;
    optional  int64  snapStreakExpiration  = 30;
    optional  string  bitmojiAvatarId  = 31;
    optional  int64  score  = 32;
}

message PBUFFriendmoji {
    optional  string  categoryName  = 1;
    optional  int64  expirationTime  = 2;
}

message PBUFFriendsRequest {
    optional  int64  friendsSyncToken  = 1;
}

message PBUFFriendsResponse {
    repeated  PBUFFriend  friendsArray  = 1;
    optional  int64  friendsSyncToken  = 2;
    optional  int32  friendsSyncType  = 3;
    repeated  PBUFFriend  addedFriendsArray  = 4;
    repeated  string  bestsArray  = 5;
    repeated  PBUFEmojiInfo  extraFriendmojiMutableDict  = 6;
    repeated  PBUFEmojiInfo  extraFriendmojiReadOnlyDict  = 7;
}

message PBUFFriendsScoreRequest {
    repeated  string  userIdsArray  = 1;
}

message PBUFFriendsScoreResponse {
    repeated  int64  scores  = 1;
}

message PageNavigation {
    optional  CommercePageMetricsMetadata  pageMetadata  = 1;
    optional  GetCommercePageRequest  getCommercePageRequest  = 2;
    optional  GetItemRecommendationsRequest  getItemRecommendationRequest  = 3;
}

message PairAccountRequest {
    optional  string  token  = 1;
}

message PairAccountResponse {
    optional  int32  status  = 1;
}

message PairedAccount {
    optional  string  accountId  = 1;
    optional  int32  origin  = 2;
}

message PartialPublisherMetadata {
    optional  GPBStringValue  businessProfileId  = 1;
    optional  GPBInt64Value  publisherId  = 2;
    optional  PartialPublisherMetadata_BehaviouralMetadata  behaviouralMetadata  = 4;
    optional  PartialPublisherMetadata_CreationMetadata  creationMetadata  = 5;
    optional  PartialPublisherMetadata_BrandingMetadata  brandingMetadata  = 6;
    optional  PartialPublisherMetadata_VisibilityMetadata  visibilityMetadata  = 7;
}

message PartialPublisherMetadata_BehaviouralMetadata {
    optional  GPBBoolValue  adsEnabled  = 1;
    optional  GPBBoolValue  isComScoreIntegrationEnabled  = 2;
    optional  GPBBoolValue  isOurStories  = 3;
    optional  GPBBoolValue  isShow  = 4;
    optional  FeaturesValue  publisherFeatures  = 5;
    optional  GPBBoolValue  subscribable  = 6;
    optional  GPBStringValue  tier  = 7;
    optional  GPBInt32Value  topsnapLimit  = 8;
    optional  TypeValue  type  = 9;
    optional  GPBBoolValue  rollingNewsEnabled  = 10;
    optional  GPBBoolValue  videoModeEnabled  = 11;
    optional  AdSettingValue  adSetting  = 12;
    optional  ModerationLevelValue  moderationLevel  = 13;
    optional  GPBInt32Value  targetSnapLengthMs  = 14;
    optional  AudioClassificationValue  audioClassification  = 15;
    optional  GPBBoolValue  isAdsPreRollEnabled  = 16;
    optional  GPBInt32Value  webviewLimit  = 17;
    optional  GPBBoolValue  isDynamicAdsEnabled  = 18;
    optional  DiscoverChannelsFilterValue  discoverChannelFilterSet  = 19;
    optional  TierLevelValue  tierLevel  = 20;
}

message PartialPublisherMetadata_BrandingMetadata {
    optional  GPBStringValue  articleCss  = 1;
    optional  GPBStringValue  primaryColor  = 3;
    optional  GPBStringValue  secondaryColor  = 4;
    optional  GPBStringValue  URLSafeFormalName  = 5;
    optional  GPBStringValue  mutablePublisherName  = 6;
    optional  Tags  tags  = 7;
    optional  SPCPStringListValue  nicknames  = 8;
    optional  SPCPInt64ListValue  deeplinks  = 10;
    optional  LogoDisplayValue  profileLogoDisplay  = 11;
    optional  GPBStringValue  squareHeroImageBitmojiTemplateId  = 12;
    optional  GPBStringValue  horizontalIcon  = 13;
    optional  GPBStringValue  squareHeroImageURL  = 14;
    optional  GPBStringValue  publisherIconURL  = 19;
    optional  GPBStringValue  publisherIconId  = 20;
    optional  MediaLibraryMediaIds  mediaIds  = 21;
    optional  GPBStringValue  formalName  = 22;
    optional  GPBStringValue  description_p  = 23;
    optional  GPBStringValue  websiteURL  = 24;
}

message PartialPublisherMetadata_CreationMetadata {
    optional  GPBBoolValue  advancedAdsEnabled  = 1;
    optional  GPBInt32Value  advancedAdsMinSlots  = 2;
    optional  GPBInt32Value  advancedAdsMaxSlots  = 3;
    optional  GPBInt32Value  advancedAdsMinSpacing  = 4;
    optional  GPBInt32Value  advancedAdsLatestFirstSlot  = 5;
    optional  GPBInt32Value  defaultNumSnaps  = 6;
    optional  FlagsValue  publisherFlags  = 7;
    optional  SPCPInt32ListValue  defaultAdSlots  = 8;
    optional  GPBStringValue  managerEmail  = 10;
    optional  GPBBoolValue  permitAutoPublishFromFeed  = 12;
    optional  GPBInt32Value  timeUntilAutoPublishFeedStory  = 13;
    optional  GPBStringValue  managerName  = 14;
    optional  HourMin  dynamicEditionAutoCreateStoryTimeUtc  = 15;
}

message PartialPublisherMetadata_VisibilityMetadata {
    optional  GPBStringValue  primaryLanguage  = 1;
    optional  GPBStringValue  homeCountry  = 2;
    optional  ShareOptionValue  defaultShareOption  = 3;
    optional  SPCPInt64ListValue  geofenceIds  = 5;
    optional  ContentAgeGateLevelValue  ageGate  = 6;
    optional  GPBBoolValue  publishingEnabled  = 7;
    optional  GPBInt64Value  launchDateTimestamp  = 8;
    optional  SPCPStringListValue  enabledCountry  = 9;
    optional  SPCPStringListValue  disabledCountry  = 10;
    optional  SPCPStringListValue  enabledDistributionCountry  = 11;
    optional  SPCPStringListValue  disabledDistributionCountry  = 12;
    optional  SPCPStringListValue  enabledLanguage  = 13;
    optional  SPCPStringListValue  disabledLanguage  = 14;
    optional  GPBBoolValue  isEmployeeOnly  = 16;
    optional  GPBBoolValue  isSearchable  = 17;
    optional  SPCPStringListValue  localContent  = 18;
    optional  STOContentAccessLists  contentAccessLists  = 20;
    optional  PublishingApprovalsValue  publishingApprovals  = 21;
    optional  EditorialApprovalValue  editorialApproval  = 22;
    optional  GPBStringValue  editorialRationale  = 23;
    optional  GPBInt64Value  editorialApprovedTimestamp  = 24;
}

message PartialToken {
    repeated  int32  sequenceIdsArray  = 1[packed=true];
}

message PastMember {
    optional  SCSCOREUUID  userId  = 1;
    optional  int64  leftTsMs  = 11;
}

message PatternDimensionData {
    repeated  string  dimensionValuesArray  = 1;
}

message PayCheckoutRequest {
    optional  SCCOREUUID  userId  = 1;
    optional  bytes  checkoutId  = 2;
    repeated  PaymentMethod  paymentMethodsArray  = 3;
    optional  string  requestId  = 4;
    optional  string  deviceId  = 5;
}

message PayCheckoutResponse {
    optional  Order  order  = 1;
    optional  CommerceApiServiceError  error  = 2;
    optional  string  requestId  = 3;
}

message PaymentMethod {
    optional  int32  type  = 1;
    optional  CreditCard  creditCard  = 2;
}

message PendingGroupMetadata {
    optional  SCSCOREUUID  groupId  = 1;
    optional  string  displayName  = 2;
    optional  int32  customStoryType  = 3;
    optional  CommunityProfileMetadata  communityMetadata  = 4;
    optional  bool  isDeleted  = 5;
}

message PendingUserMembership {
    optional  SCSCOREUUID  userId  = 1;
    optional  int64  expiryTsMs  = 2;
}

message PerceptionSignals {
    repeated  string  scannedCategoryIdsArray  = 1;
}

message PerfLoggerEvent {
    optional  string  eventName  = 1;
    repeated  double  metricValues  = 2;
    repeated  string  params  = 3;
    optional  int64  timestampMs  = 4;
}

message PermanentLocations {
    optional  S2CellData  home  = 1;
    optional  S2CellData  work  = 2;
    optional  float  homeConfidence  = 3;
    optional  float  workConfidence  = 4;
    optional  int64  firstLocationShare  = 5;
    optional  CampusData  campus  = 6;
}

message PinBestFriendRequest {
    optional  UUID  friendUserId  = 1;
}

message PinBestFriendResponse {
}

message Pinned {
    optional  int32  pinType  = 1;
    optional  int32  positionStart  = 2;
    optional  int32  positionEnd  = 3;
}

message PlusSubscriptionInfo {
    optional  int32  activeTier  = 1;
    optional  int32  status  = 2;
    optional  uint64  originalSubscriptionTimeMillis  = 3;
    optional  uint64  expirationTimeMillis  = 4;
}

message PostDownloadTransformParams {
    optional  LensBlobTransformParams  lensBlobTransformParams  = 1;
    optional  LensContentTransformParams  lensContentTransformParams  = 2;
}

message PostReplyRequest {
    optional  SCSCORERequestMetadata  metadata  = 1;
    optional  Reply  reply  = 2;
}

message PostReplyResponse {
    optional  string  requestId  = 1;
    optional  SCSCOREUUID  replyId  = 2;
    optional  int32  approvalState  = 3;
}

message PreciseLocation {
    optional  int64  timestamp  = 1;
    optional  double  lat  = 2;
    optional  double  lng  = 3;
    optional  float  horizontalAccuracyMeters  = 4;
}

message PremiumContent {
    optional  string  premiumContentBundleId  = 1;
    optional  int64  priceFloorMicroDollars  = 2;
}

message PremiumContentId {
    optional  int32  contentType  = 1;
    optional  string  contentGroupId  = 2;
    optional  string  seasonId  = 3;
    optional  string  storyId  = 4;
}

message PremiumContentStats {
    optional  PremiumContentId  contentId  = 1;
    optional  int64  watchCount  = 2;
    optional  int64  boostCount  = 3;
    optional  int64  shareCount  = 4;
}

message PremiumContentType {
}

message PremiumContentWatchHistory {
    optional  PremiumContentId  contentId  = 1;
    repeated  PremiumReadReceipt  lastWatchedStoriesArray  = 2;
}

message PremiumReadReceipt {
    optional  string  publisherId  = 1;
    optional  string  storyId  = 2;
    optional  SCSCOREUUID  viewerUserId  = 3;
    optional  int64  viewTimeMs  = 4;
    optional  string  subItemId  = 5;
    optional  int32  subItemProgressMs  = 6;
    optional  int32  approximateProgress  = 7;
    optional  int32  contentType  = 8;
    optional  int64  version  = 9;
    optional  int64  segmentId  = 10;
    optional  int64  shareCount  = 11;
}

message PrewarmConfig {
    repeated  PrewarmConfig_HostConfigs  prewarmConfigBasedOnSignal  = 1;
    optional  int32  delayFirstPrewarmInSec  = 2;
}

message PrewarmConfig_HostConfig {
    optional  string  endpoint  = 1;
    optional  PrewarmConfig_HostConfig_Concurrent  concurrentOperation  = 2;
    optional  PrewarmConfig_HostConfig_Recurring  recurringOperation  = 3;
}

message PrewarmConfig_HostConfig_Concurrent {
    optional  int32  concurrentCount  = 1;
}

message PrewarmConfig_HostConfig_Recurring {
    optional  int32  recurringIntervalSec  = 1;
}

message PrewarmConfig_HostConfigs {
    repeated  PrewarmConfig_HostConfig  hostConfigsArray  = 1;
    optional  int32  throttleSec  = 2;
}

message PriceTier {
    optional  uint32  tier  = 1;
    optional  uint32  tokens  = 2;
}

message PrintingMetadata {
    optional  bytes  snapId  = 1;
    optional  string  encryptionKey  = 2;
    optional  string  encryptionIv  = 3;
    optional  string  URL  = 4;
    optional  string  requestId  = 5;
}

message PrivateStoryProfileMetadata {
}

message ProcessingStatus {
}

message ProductDetails {
    optional  ProductMetadata  productMetadata  = 1;
    optional  string  description_p  = 2;
    repeated  SCAdsMediaRenderInfo  additionalImagesArray  = 3;
}

message ProductInfo {
    optional  bytes  id_p  = 1;
    optional  string  descriptionHtml  = 2;
    repeated  ProductVariant  variantsArray  = 3;
    optional  int32  commercePartner  = 4;
    optional  bytes  storeId  = 5;
    optional  string  title  = 6;
    repeated  ProductVariant_VariantCategoryPair  productVariantCategoriesArray  = 7;
    optional  StoreInfo  storeInfo  = 8;
    optional  bool  shouldUseWebview  = 9;
    optional  uint32  checkoutItemLimit  = 10;
    optional  ProductInfo_UnlockableInfo  unlockableInfo  = 11;
    optional  SnapCodeInfo  productScanCardInfo  = 12;
    optional  bool  isPdpShareable  = 13;
    optional  int32  type  = 14;
    optional  CustomBitmojiInfo  customBitmojiInfo  = 15;
    repeated  ProductInfo_ImageDetails  imageDetailsListArray  = 16;
    optional  string  productURL  = 17;
}

message ProductInfo_ImageDetails {
    optional  bytes  externalImageId  = 1;
    optional  string  imageURL  = 2;
    optional  uint32  height  = 3;
    optional  uint32  width  = 4;
    optional  ImageMap  imageMap  = 5;
}

message ProductInfo_UnlockableInfo {
    optional  bytes  unlockableId  = 1;
    optional  bytes  scannableId  = 2;
    optional  string  unlockableScanURL  = 3;
}

message ProductMetadata {
    optional  string  externalId  = 1;
    optional  string  title  = 2;
    optional  string  link  = 3;
    optional  int32  availability  = 4;
    optional  ProductPrice  price  = 5;
    optional  ProductPrice  salePrice  = 6;
    optional  SCAdsMediaRenderInfo  mainMedia  = 7;
    optional  FormattedProductPrice  formattedPrice  = 8;
    optional  FormattedProductPrice  formattedSalePrice  = 9;
    optional  ARMetadata  arMetadata  = 10;
}

message ProductPrice {
    optional  int64  microAmount  = 1;
    optional  int32  currency  = 2;
}

message ProductVariant {
    optional  bytes  id_p  = 1;
    repeated  string  imageUrlsArray  = 2;
    optional  CurrencyAmount  price  = 3;
    optional  bool  requiresShipping  = 4;
    optional  bool  taxable  = 5;
    optional  string  title  = 6;
    repeated  ProductVariant_VariantCategoryPair  variantCategoriesArray  = 7;
    optional  bool  available  = 8;
    repeated  ImageMap  imageListArray  = 9;
    optional  CurrencyAmount  strikethroughPrice  = 10;
    optional  bytes  pixelItemId  = 11;
}

message ProductVariant_VariantCategoryPair {
    optional  bytes  variantCategoryId  = 1;
    optional  string  variantCategoryValue  = 2;
}

message ProvisionStudioMetadataRequest {
    optional  string  registrationToken  = 1;
    optional  string  lensStudioSerialUuid  = 2;
    optional  string  lensStudioVersion  = 3;
    optional  string  minVersionAndroid  = 4;
    optional  string  minVersionIos  = 5;
}

message ProvisionStudioMetadataResponse {
}

message PsuggestiveScore {
    optional  float  score  = 1;
    optional  int32  version  = 2;
}

message PublicGroupMetadata {
    optional  SCSCOREUUID  groupId  = 1;
    optional  int32  customStoryType  = 2;
    optional  string  displayName  = 3;
    optional  int64  createdTsMs  = 4;
    optional  CommunityProfileMetadata  communityMetadata  = 5;
}

message PublishTopicStickerRequest {
    optional  TopicStickerId  id_p  = 1;
    optional  uint64  publishAt  = 2;
    optional  uint64  unpublishAt  = 3;
}

message PublishTopicStickerResponse {
}

message PublisherData {
    optional  string  userId  = 1;
    optional  string  userName  = 2;
    optional  string  displayName  = 3;
    optional  string  description_p  = 4;
    optional  int64  publishTimestamp  = 5;
    optional  string  bitmojiAvatarId  = 6;
    optional  string  bitmojiSelfieId  = 7;
}

message PublisherMetadata {
    optional  int64  publisherId  = 1;
    optional  string  name  = 2;
    optional  bool  adsEnabled  = 11;
    optional  bool  isComScoreIntegrationEnabled  = 12;
    optional  bool  isOurStories  = 13;
    optional  bool  isShow  = 14;
    repeated  int32  publisherFeaturesArray  = 15[packed=true];
    optional  bool  subscribable  = 17;
    optional  string  tier  = 18;
    optional  int32  topsnapLimit  = 19;
    optional  int32  type  = 20;
    optional  bool  rollingNewsEnabled  = 21;
    optional  bool  videoModeEnabled  = 22;
    optional  int32  adSetting  = 23;
    optional  int32  moderationLevel  = 24;
    optional  int32  targetSnapLengthMs  = 25;
    optional  int32  audioClassification  = 26;
    optional  bool  isAdsPreRollEnabled  = 27;
    optional  int32  webviewLimit  = 28;
    optional  bool  isDynamicAdsEnabled  = 29;
    repeated  STODiscoverChannelFilter  discoverChannelFilterSetArray  = 30;
    optional  int32  tierLevel  = 31;
    optional  bool  advancedAdsEnabled  = 41;
    optional  int32  advancedAdsMinSlots  = 42;
    optional  int32  advancedAdsMaxSlots  = 43;
    optional  int32  advancedAdsMinSpacing  = 44;
    optional  int32  advancedAdsLatestFirstSlot  = 45;
    optional  int32  defaultNumSnaps  = 46;
    repeated  int32  publisherFlagsArray  = 47[packed=true];
    repeated  int32  defaultAdSlotsArray  = 48[packed=true];
    optional  string  managerEmail  = 50;
    optional  string  homeCountry  = 51;
    optional  bool  permitAutoPublishFromFeed  = 52;
    optional  int32  timeUntilAutoPublishFeedStory  = 53;
    optional  string  managerName  = 54;
    optional  HourMin  dynamicEditionAutoCreateStoryTimeUtc  = 55;
    optional  string  articleCss  = 71;
    optional  string  primaryColor  = 73;
    optional  string  secondaryColor  = 74;
    optional  string  URLSafeFormalName  = 76;
    optional  string  mutablePublisherName  = 77;
    optional  string  horizontalIcon  = 78;
    optional  Tags  tags  = 83;
    repeated  string  nicknamesArray  = 84;
    repeated  int64  deeplinksArray  = 86[packed=true];
    optional  string  squareHeroImageURL  = 89;
    optional  int32  profileLogoDisplay  = 90;
    optional  string  squareHeroImageBitmojiTemplateId  = 91;
    optional  MediaLibraryMediaIds  mediaIds  = 92;
    optional  string  primaryLanguage  = 101;
    optional  int32  defaultShareOption  = 102;
    repeated  int32  supportedRegionsArray  = 103[packed=true];
    repeated  int64  geofenceIdsArray  = 104[packed=true];
    optional  int32  ageGate  = 105;
    optional  bool  publishingEnabled  = 106;
    optional  int64  launchDateTimestamp  = 107;
    repeated  string  whitelistCountryArray  = 108;
    repeated  string  blacklistCountryArray  = 109;
    repeated  string  whitelistDistributionCountryArray  = 110;
    repeated  string  blacklistDistributionCountryArray  = 111;
    repeated  string  whitelistLanguageArray  = 112;
    repeated  string  blacklistLanguageArray  = 113;
    optional  bool  isHidden  = 114;
    optional  bool  isEmployeeOnly  = 115;
    optional  bool  isSearchable  = 116;
    repeated  string  localContentArray  = 117;
    optional  STOContentAccessLists  contentAccessLists  = 119;
    repeated  int32  publishingApprovalsArray  = 120[packed=true];
    optional  int32  editorialApproval  = 121;
    optional  string  editorialRationale  = 122;
    optional  int64  editorialApprovedTimestamp  = 123;
    optional  int64  editorialReviewRequestedTimestamp  = 124;
}

message PublisherRecentWatchHistory {
    optional  string  publisherId  = 1;
    repeated  PremiumReadReceipt  lastWatchedEpisodesArray  = 2;
    optional  PremiumReadReceipt  highestWatchedEpisode  = 3;
}

message PublisherRecentWatchHistoryList {
    repeated  PublisherRecentWatchHistory  publisherHistoryListArray  = 1;
}

message PublisherSubscribeDetail {
    optional  int32  state  = 1;
    optional  int64  stateTimestampMsecs  = 2;
    optional  int64  stateExpireTimestampMsecs  = 3;
    optional  int64  editionId  = 4;
}

message PublishingApprovalsValue {
    repeated  int32  valueArray  = 1[packed=true];
}

message PushEligibilityCheckDetail {
}

message QueryCursor {
    optional  bytes  paginationCursor  = 1;
}

message QueryTopicStickersRequest {
    optional  string  cursor  = 1;
    optional  uint32  limit  = 2;
    optional  int32  updatedAtOrder  = 3;
    optional  int32  rankOrder  = 4;
    optional  TopicStickerStatus  status  = 5;
    optional  string  text  = 6;
}

message QueryTopicStickersResponse {
    repeated  VendingTopicSticker  topicStickersArray  = 1;
    optional  string  cursor  = 2;
}

message QuestionResponse {
    optional  int32  questionId  = 1;
    repeated  int32  choiceArray  = 2[packed=true];
}

message QuickAddPrivacy {
}

message RarePosterBoostAdjustment {
    optional  int32  originalPosition  = 1;
    optional  int32  boostPosition  = 2;
    optional  int32  numPostDays28D  = 3;
}

message ReactionCount {
    optional  int64  reactTypeId  = 1;
    optional  int64  reactCount  = 2;
}

message ReadReceiptState {
    optional  bool  wasSaved  = 1;
    optional  bool  wasScreenshotted  = 2;
    optional  bool  wasScreenrecorded  = 3;
    optional  bool  wasRewatched  = 4;
}

message RecentWatchHistoryList {
    optional  int32  contentType  = 1;
    optional  PublisherRecentWatchHistoryList  publisherHistory  = 2;
    optional  StoryRecentWatchHistoryList  storyHistory  = 3;
}

message RecentlyViewedContext {
    optional  uint64  snapItemId  = 1;
    optional  string  storeId  = 2;
}

message RecentlyViewedPreferencesWidget {
}

message RecipientsSignals {
    repeated  string  userIdsArray  = 1;
}

message RecommendationReason {
}

message RegisterStudioRequest {
    optional  string  registrationToken  = 1;
    optional  string  encryptedLensStudioSerialUuid  = 2;
    optional  string  lensStudioSerialUuid  = 3;
    optional  bytes  encryptionKey  = 4;
    optional  bytes  keySignature  = 5;
    optional  string  publicCert  = 6;
}

message RegisterStudioResponse {
}

message Regulations {
    optional  bool  restrictedDeliverySignals  = 1;
}

message RemoteAsset {
    optional  string  URL  = 1;
    optional  string  checksum  = 2;
}

message RemoveFavoriteRequest {
    optional  ItemFavoritingDeviceContext  deviceContext  = 1;
    optional  FavoriteItem  favoriteItem  = 2;
}

message RemoveFavoriteResponse {
}

message RenderingMetadata {
    optional  string  json  = 1;
    repeated  RemoteAsset  remoteAssetsArray  = 2;
}

message RenderingOption {
    optional  int32  name  = 1;
}

message RepeatedRules {
    optional  uint64  minItems  = 1;
    optional  uint64  maxItems  = 2;
    optional  bool  unique  = 3;
    optional  FieldRules  items  = 4;
    optional  bool  ignoreEmpty  = 5;
}

message RepliesLookupRequest {
    optional  SCSCORERequestMetadata  metadata  = 1;
    repeated  ReplyIdentifier  replyIdentifiersArray  = 2;
}

message RepliesLookupResponse {
    optional  string  requestId  = 1;
    repeated  Reply  repliesListArray  = 2;
}

message Reply {
    optional  SCSCOREUUID  replyId  = 1;
    optional  SCSCOREUUID  snapPosterId  = 2;
    optional  string  snapId  = 3;
    optional  string  replyText  = 4;
    repeated  ReactionCount  reactCountsArray  = 5;
    optional  int64  reportCount  = 6;
    optional  SCSCOREUUID  replyPosterId  = 7;
    optional  int32  approvalState  = 8;
    optional  string  replyPosterFirstName  = 9;
    optional  string  replyPosterLastName  = 10;
    optional  int64  replyTimestampMs  = 11;
    optional  string  replyPosterDisplayName  = 12;
    optional  string  replyPosterBitmojiAvatarId  = 13;
    optional  string  replyPosterBitmojiSelfieId  = 14;
    optional  int64  lastStateUpdateTsMs  = 15;
    repeated  int32  moderationFilterTypeArray  = 16[packed=true];
    optional  bytes  snapModerationFeatures  = 17;
    optional  float  textModerationPredictionScore  = 18;
}

message ReplyDeletion {
    optional  string  snapId  = 1;
    optional  SCSCOREUUID  replyId  = 2;
}

message ReplyIdentifier {
    optional  string  snapId  = 1;
    optional  SCSCOREUUID  replyId  = 2;
}

message ReplyModerationMetadata {
    optional  ReplyIdentifier  replyIdentifier  = 1;
    optional  bytes  moderationFeatures  = 2;
}

message ReplyReactRequest {
    optional  SCSCORERequestMetadata  metadata  = 1;
    optional  SCSCOREUUID  replyReactorUserId  = 2;
    repeated  ReplyReaction  reactionsArray  = 3;
}

message ReplyReactResponse {
    optional  string  requestId  = 1;
}

message ReplyReaction {
    optional  int64  reactTypeId  = 1;
    optional  SCSCOREUUID  replyId  = 2;
    optional  string  snapId  = 3;
    optional  int32  option  = 4;
    optional  int64  count  = 5;
}

message ReplyReactionOption {
}

message ReportOption {
    optional  bool  createJira  = 1;
    optional  bool  uploadLog  = 2;
    optional  bool  fromTestAutomation  = 3;
    optional  bool  isAutoShake  = 4;
    repeated  string  jiraLabelsArray  = 5;
}

message Request {
    optional  string  userId  = 1;
    optional  string  caller  = 2;
    optional  Request_Signals  requestSignals  = 3;
    optional  int64  lookbackDays  = 4;
}

message RequestDomainRoutingRule {
    repeated  string  endpointsArray  = 1;
    optional  string  hostname  = 2;
}

message RequestOrigin {
}

message Request_Signals {
    optional  string  queueId  = 1;
    optional  double  taskPriority  = 2;
    optional  int64  userFollowerCount  = 3;
    optional  string  taskId  = 4;
    optional  string  abuseType  = 5;
}

message ResendSmsTfaCodeRequest {
    optional  string  tfaToken  = 1;
}

message ResendSmsTfaCodeResponse {
    optional  string  error  = 1;
    optional  string  metricSafeErrorMessage  = 2;
}

message Response {
    optional  string  userId  = 1;
    optional  Scores  riskScores  = 2;
    optional  Features  features  = 3;
}

message ResponseStatus {
    optional  int32  code  = 1;
}

message RetrieveConversionValueRequest {
    optional  string  idfv  = 1;
    optional  int32  currentConversionValue  = 2;
    optional  int64  updatedTime  = 3;
}

message RetrieveConversionValueResponse {
    optional  int32  conversionValue  = 1;
    optional  bool  isHighestConversionValue  = 2;
}

message Retry {
    optional  int32  retryType  = 1;
    optional  uint32  retryIntervalSec  = 2;
    optional  uint32  maxBackoffExponent  = 3;
    optional  uint32  maxRetryCount  = 4;
}

message ReverseBestFriend {
    optional  UUID  friendUserId  = 1;
    optional  uint32  myRank  = 2;
}

message ReverseBestFriends {
    repeated  ReverseBestFriend  reverseBestFriendsArray  = 2;
}

message RevokeCameraHintsRequest {
    repeated  string  hintIdsArray  = 1;
}

message RevokeCameraHintsResponse {
}

message RevokeSharedPaymentMethodRequest {
    optional  string  userId  = 1;
    optional  string  miniProgramId  = 2;
    optional  string  partnerPaymentMethodNonce  = 3;
}

message RevokeSharedPaymentMethodResponse {
    optional  int32  status  = 1;
}

message RingLightConfig {
    optional  bool  enableRingLight  = 1;
    repeated  sint32  presetColorsArray  = 2[packed=true];
    optional  bool  showRingFlashWidgetTooltip  = 3;
    optional  int32  widgetDesignVersion  = 4;
    optional  RingLightConfig_LensConfig  lensConfig  = 5;
}

message RingLightConfig_LensConfig {
    optional  int64  lensId  = 1;
}

message RoutingSignals {
    optional  string  URL  = 1;
}

message S2CellData {
    optional  string  s2CellId  = 1;
    optional  float  lat  = 2;
    optional  float  lng  = 3;
    optional  int64  timestamp  = 4;
}

message S2CellTiming {
    optional  string  s2CellId  = 1;
    optional  int64  enterTimestamp  = 2;
    optional  int64  latestTimestamp  = 3;
}

message SASAudioFingerprintMessage {
    optional  string  submissionId  = 1;
    optional  string  geoHash  = 2;
    optional  int64  userTimestamp  = 3;
    optional  int64  messageTimestamp  = 4;
    optional  double  longitude  = 5;
    optional  double  latitude  = 6;
    optional  SnapBrainResponse_Results_AudioFingerprint  audioFingerprint  = 7;
    optional  string  signedURL  = 8;
    optional  string  captionText  = 9;
    optional  int32  mediaType  = 10;
    optional  int64  captureTimestamp  = 11;
    optional  string  userId  = 12;
    repeated  string  sharedStoryIdsArray  = 13;
    optional  int32  orientation  = 14;
    optional  bool  isFrontFacing  = 15;
    optional  double  timeLength  = 16;
}

message SASAudioStitch {
    optional  string  id_p  = 1;
    optional  double  length  = 2;
    repeated  SASAudioStitchPoint  audioStitchPointsArray  = 3;
    optional  int32  totalPointsCount  = 4;
    optional  int32  snapsPerRow  = 5;
    optional  int32  snapsPerColumn  = 6;
    optional  int32  source  = 7;
}

message SASAudioStitchIngest {
    optional  string  sharedStorySubmissionId  = 1;
    optional  SASAudioFingerprintMessage  audioFingerprintMessage  = 100;
    optional  SASSnapDeletionMessage  snapDeletionMessage  = 101;
}

message SASAudioStitchMediaRequest {
    optional  SASAudioStitch  audioStitch  = 1;
    optional  string  entityKind  = 2;
    repeated  string  signedUrls  = 3;
}

message SASAudioStitchMediaResponse {
    optional  SASAudioStitch  audioStitch  = 1;
    optional  string  entityKind  = 2;
    optional  bool  success  = 3;
    optional  SASMediaInfo  mediaInfo  = 4;
}

message SASAudioStitchPoint {
    optional  string  submissionId  = 1;
    optional  double  startTime  = 2;
    optional  double  endTime  = 3;
    optional  int32  positionIndex  = 4;
}

message SASComputeAudioStitchesRequest {
    repeated  string  snapIdsArray  = 1;
    optional  int32  matchThreshold  = 2;
    optional  int64  maxTimestampDiff  = 3;
}

message SASComputeAudioStitchesResponse {
    repeated  SASAudioStitch  audioStitchesArray  = 1;
}

message SASDataflowMessage {
    repeated  SASDataflowMessage_AudioStitchAction  audioStitchActionsArray  = 1;
}

message SASDataflowMessage_AudioStitchAction {
    optional  SASAudioStitch  audioStitch  = 1;
    optional  int32  action  = 2;
}

message SASGetTrackStitchRequest {
    optional  string  trackId  = 1;
    optional  int64  createdTimestamp  = 2;
}

message SASGetTrackStitchResponse {
    optional  SASAudioStitch  audioStitch  = 1;
}

message SASMatchSnapRequest {
    optional  SASAudioFingerprintMessage  audioFingerprintMessage  = 1;
}

message SASMatchSnapResponse {
    optional  SASTrackMatch  trackMatch  = 1;
}

message SASMediaInfo {
    optional  string  bucket  = 1;
    optional  string  mediaPath  = 2;
    optional  string  thumbnailPath  = 3;
    optional  int64  mediaSize  = 4;
}

message SASSnapDeletionMessage {
    optional  int64  userTimestamp  = 1;
    optional  int64  messageTimestamp  = 2;
    optional  int64  captureTimestamp  = 3;
}

message SASTrack {
    optional  string  trackId  = 1;
    optional  SnapBrainResponse_Results_AudioFingerprint  audioFingerprint  = 2;
}

message SASTrackMatch {
    optional  string  submissionId  = 1;
    optional  string  trackId  = 2;
    optional  double  matchTime  = 3;
    optional  int32  matchScore  = 4;
    optional  double  matchLength  = 5;
}

message SASUploadTrackRequest {
    optional  bytes  mediaString  = 1;
    optional  string  trackId  = 2;
}

message SASUploadTrackResponse {
}

message SCACHAchievementCountInfo {
    optional  int32  type  = 1;
    optional  int64  cumulativeTotal  = 2;
    optional  int64  weeklyTotal  = 3;
    optional  int64  biWeeklyTotal  = 4;
}

message SCACHAchievementInfo {
    optional  int32  type  = 1;
    optional  int64  count  = 2;
    optional  int64  streakCount  = 3;
    optional  int64  earnedAtTimestampMs  = 4;
    optional  int64  updatedAtTimestampMs  = 5;
}

message SCACHPassportAchievement {
    optional  string  title  = 1;
    optional  string  bitmojiStickerId  = 2;
    optional  string  description_p  = 3;
    optional  int64  streakCount  = 4;
    optional  bool  isExpiring  = 5;
    optional  bool  isActive  = 6;
    optional  int64  countAccumulated  = 7;
    optional  int64  countNeeded  = 8;
    optional  int32  type  = 9;
    optional  int32  familyType  = 10;
}

message SCACHUserAchievementCountInfo {
    optional  string  userId  = 1;
    repeated  SCACHAchievementCountInfo  countsArray  = 2;
}

message SCAPbDataContentResolve {
    optional  int64  contentResolveTimeMs  = 1;
    optional  int32  resolveType  = 2;
    optional  bytes  contentId  = 3;
    optional  int32  resolveError  = 4;
    optional  bytes  mediaId  = 5;
    optional  bytes  networkRulesCofRuleId  = 8;
    optional  uint64  networkMappingVersion  = 9;
    repeated  int64  locationsGuaranteedAvailableArray  = 10[packed=true];
    repeated  int64  locationsInferredAvailableArray  = 11[packed=true];
    optional  int64  optimalLocation  = 12;
    optional  int64  locationSelected  = 13;
    optional  bool  secondaryURLGenerated  = 14;
    optional  bool  avoidedFutureLocations  = 15;
    optional  uint32  boltTenantUsecase  = 16;
    optional  SCAPbDataContentResolve_VariantInfo  variantInfo  = 17;
    optional  int64  networkRuleId  = 18;
    optional  int64  contentResolveDurationMs  = 19;
}

message SCAPbDataContentResolve_VariantInfo {
    optional  bytes  variantCofConfigId  = 1;
    optional  bytes  variantCofRuleId  = 2;
    repeated  int32  availableVariantsArray  = 3[packed=true];
    optional  int32  optimalVariant  = 4;
    optional  int32  variantSelected  = 5;
    repeated  int32  cachedVariantsArray  = 6[packed=true];
}

message SCAPbDataDynamicSamplingConfig {
    repeated  string  overriddenEventNamesArray  = 1;
}

message SCAPbDataEvent {
    optional  int64  eventName  = 1;
    optional  int32  offsetTsStart  = 2;
    optional  int32  payloadIdentifier  = 4;
    optional  bytes  payloadBytes  = 5;
    optional  int32  sequenceNumber  = 6;
    optional  int32  deviceConnectivity  = 8;
    optional  int64  connectionDownloadBandwidthBps  = 9;
    optional  bytes  payloadProto  = 11;
    optional  bytes  payloadJson  = 12;
    optional  double  eventSamplingRate  = 13;
    optional  double  userSamplingRate  = 14;
    optional  int64  pageViewId  = 15;
    optional  bool  isInCall  = 16;
    optional  int32  pageTabType  = 17;
}

message SCAPbDataFrameEnd {
    optional  int32  lastSequenceNumber  = 1;
}

message SCAPbDataFrameStart {
    optional  bytes  sessionId  = 1;
    optional  int64  clientReferenceTs  = 2;
    optional  fixed32  appVersion  = 3;
    optional  fixed32  osVersion  = 4;
    optional  int32  locale  = 5;
    optional  int32  osType  = 6;
    optional  int32  deviceModel  = 7;
    optional  int32  appVariant  = 8;
    optional  string  userId  = 9;
    optional  bytes  clientId  = 11;
    optional  bytes  telemetrySessionId  = 12;
    optional  int32  priority  = 13;
    optional  int32  sequenceIdStart  = 31;
    optional  int32  osMinorVersion  = 32;
    optional  int32  connectionDownloadBandwidthKbytesPerSecond  = 34;
    optional  string  deviceModelFallback  = 35;
    optional  string  localeFallback  = 36;
    optional  bytes  userAgent  = 38;
    optional  bytes  appBuildFallback  = 39;
    optional  bytes  osMinorVersionFallback  = 40;
    optional  bool  appDataSaverMode  = 41;
    optional  bytes  appStartupTypeFallback  = 42;
    optional  bytes  userGuid  = 43;
    optional  bytes  logQueueName  = 44;
    optional  string  appVersionString  = 45;
    optional  string  osVersionString  = 46;
    optional  string  blizzardSchemaVersion  = 47;
    optional  bool  appMultiWindowMode  = 48;
}

message SCAPbDataLoggedEvent {
    optional  SCAPbDataFrameStart  startFrame  = 1;
    repeated  SCAPbDataEvent  eventsArray  = 2;
    optional  SCAPbDataFrameEnd  endFrame  = 3;
}

message SCAPbDataLoggedEventList {
    repeated  SCAPbDataLoggedEvent  eventsArray  = 1;
    repeated  SCAPbDataSequentialItem  sequentialItemsArray  = 2;
}

message SCAPbDataSamplingOverridePolicy {
    optional  double  perUserSamplingRate  = 1;
    optional  double  perEventSamplingRate  = 2;
    optional  string  salt  = 3;
}

message SCAPbDataSequentialItem {
    optional  SCAPbDataFrameStart  frameStart  = 1;
    optional  SCAPbDataEvent  event  = 2;
}

message SCARBarV2CofConfig {
    optional  bool  isFeatureEnabled  = 1;
    optional  int32  closeButtonPosition  = 2;
    optional  bool  isOptimisationsEnabled  = 3;
    optional  bool  isInteractiveAnimationsEnabled  = 4;
    optional  bool  isAdditionalAnimationsEnabled  = 5;
    optional  bool  isMinimizedLensExplorerEnabled  = 6;
}

message SCActivationPbCountrySuggestions {
    repeated  string  countriesArray  = 1;
}

message SCActivationPbJanusRegCofConfig {
    optional  int32  janusRegMode  = 1;
}

message SCActivationPbOneTapPersistent {
    optional  int32  storageMode  = 1;
    optional  uint64  tokenTtlSeconds  = 2;
    optional  uint64  tenuredThresholdSeconds  = 3;
    optional  uint32  sharedDeviceThreshold  = 4;
    optional  bool  isTwoFaEligible  = 5;
    optional  uint32  maxCourtesyOptIns  = 6;
}

message SCActivationPbPhoneNumberDynamicLengthRestriction {
    repeated  SCActivationPbPhoneNumberDynamicLengthRestrictionConfig  configsArray  = 1;
}

message SCActivationPbPhoneNumberDynamicLengthRestrictionConfig {
    optional  string  country  = 1;
    optional  uint32  minLength  = 2;
    optional  uint32  maxLength  = 3;
}

message SCActivationPbRegistrationAgeVerificationV2 {
    optional  bool  beginWithToday  = 1;
    optional  bool  enableCooldown  = 2;
    optional  uint64  coolDownMillis  = 3;
}

message SCActivationPbRegistrationCountrySuggestion {
    optional  bool  enabled  = 1;
    repeated  SCActivationPbCountrySuggestions  countrySuggestions  = 2;
}

message SCActivationPbSuggestedUsernamePageV3 {
    optional  bool  hideBackButton  = 1;
    optional  bool  showChangeUsernameLaterLabel  = 2;
    optional  bool  showUsernameSuggestions  = 3;
}

message SCAdInfo {
}

message SCAddBasicUnlockRequest {
    optional  SCBasicUnlock  unlock  = 1;
    optional  string  userId  = 2;
    optional  int32  unlocksNamespace  = 3;
}

message SCAddFriendsTakeoverOnCameraConfig {
    optional  bool  enabled  = 1;
    optional  int32  maxBidirectionalFriendCount  = 2;
    optional  int32  maxCardsPerSession  = 3;
    optional  int32  coolDownInHours  = 4;
}

message SCAddUnlockRequest {
    optional  int64  unlockableId  = 1;
    optional  int32  unlockType  = 2;
    optional  bool  geofilterResponseRequired  = 3;
    optional  string  deepLinkAppId  = 4;
    repeated  string  deepLinkProperties  = 5;
    optional  SCULRequestInfo  requestInfo  = 6;
    optional  SCUnlockMetadata  unlockMetadata  = 7;
    optional  int32  unlocksNamespace  = 8;
}

message SCAdsABTest {
    optional  string  adLoadTestExperimentGroup  = 1;
    optional  SCAdsBudgetAbStudy  budgetAbStudy  = 2;
    optional  SCAdsPredictionStudy  skipPrediction  = 3;
    optional  SCAdsPredictionStudy  swipePrediction  = 4;
    optional  SCAdsPredictionStudy  installPrediction  = 5;
    optional  SCAdsClientRankingStudy  clientRankingAbStudy  = 6;
    optional  SCAdsWebviewPrefetchStudy  webviewPrefetchStudy  = 7;
    optional  string  abTestUserSegment  = 8;
    optional  string  abTestUserSegment20  = 9;
    optional  bool  storyAdsDisabled  = 10;
    optional  bool  discoverFeedCarouselAdsEnabled  = 11;
    optional  int32  discoverFeedCarouselAdsNumOrganicTilesBetweenAds  = 12;
    optional  int32  discoverFeedCarouselAdsMinFeedAdPositionIndex  = 13;
    optional  bool  userInAdsHoldout  = 14;
    optional  GPBBoolValue  adserverOgRouteToApiGw  = 15;
    optional  bool  isAcquiredUser  = 16;
    optional  uint32  latencyDelayMs  = 17;
    optional  GPBInt32Value  newUserGracePeriodDaysSinceCreation  = 18;
    optional  GPBInt32Value  discoverFeedStoryAdsNumOrganicTilesBetweenAds  = 19;
    optional  GPBInt32Value  discoverFeedStoryAdsMinFeedAdPositionIndex  = 20;
    optional  bool  arShoppingEnabled  = 21;
    optional  float  webviewPrefetchThreshold  = 22;
    optional  SCAdsOnDeviceInventoryConfigs  onDeviceInventoryConfigs  = 23;
    optional  bool  webviewPrefetchDisableOverride  = 24;
    optional  bool  arShoppingRemoteLensEnabled  = 25;
    optional  int32  voperaVariantIdentifier  = 26;
    optional  string  lookserySponsoredGeoBackStudyGroup  = 27;
    optional  bool  disableBlockWebviewPreloading  = 28;
    optional  bool  isForcedExternalBrowser  = 29;
    optional  bool  shouldWebviewURLAddClickId  = 30;
    optional  bool  webviewLightningModeSafeguardEnabled  = 31;
    optional  bool  webviewClientCrawlSafeguardEnabled  = 32;
    optional  bool  storiesRemoveInterstitial  = 33;
    optional  bool  storiesEnableThinProgressBar  = 34;
    optional  bool  storiesEnableProgressBar  = 35;
    optional  bool  shouldDeeplinkURLAddClickId  = 36;
    optional  bool  webviewLightningModeServerRedirectURLEnable  = 37;
    optional  bool  webviewExtendedLifecycleServerControlEnabled  = 38;
    optional  float  lightningModeServerAppraisalScoreThreshold  = 39;
}

message SCAdsAdBaseConfig {
    optional  bool  allProductTypesEnabled  = 1;
    repeated  int32  supportedProductTypesArray  = 2[packed=true];
    optional  bool  allAdTypesEnabled  = 3;
    repeated  int32  supportedAdTypesArray  = 4[packed=true];
    optional  bool  allCtaStylesEnabled  = 5;
    repeated  int32  supportedCtaStylesArray  = 6[packed=true];
    optional  bool  dpaSupported  = 7;
}

message SCAdsAdFlagData {
    optional  GPBBoolValue  adFlagged  = 1;
    optional  int32  adFlaggedReason  = 2;
    optional  GPBStringValue  adFlaggedNote  = 3;
}

message SCAdsAdHidingData {
    optional  GPBBoolValue  adHidden  = 1;
    optional  int32  reason  = 2;
}

message SCAdsAdInsertionConfig {
    optional  GPBInt32Value  minSnapFromStart  = 1;
    optional  GPBFloatValue  minTimeFromStartSeconds  = 2;
    optional  GPBInt32Value  minStoriesFromStart  = 3;
    optional  GPBInt32Value  minStoriesBeforeEnd  = 4;
    optional  GPBInt32Value  minStoriesBetweenAds  = 5;
    optional  GPBInt32Value  minSnapsBetweenAds  = 6;
    optional  GPBFloatValue  minTimeBetweenAdsSeconds  = 7;
    optional  GPBInt32Value  minSnapsBeforeEnd  = 8;
    optional  GPBFloatValue  minTimeBeforeEndSeconds  = 9;
    optional  GPBFloatValue  minTimeInsertionThresholdSeconds  = 10;
    optional  GPBInt32Value  globalMinSnapsBetweenAds  = 11;
    optional  GPBFloatValue  globalMinTimeBetweenAdsSeconds  = 12;
    optional  GPBInt32Value  maxSnapsNum  = 13;
}

message SCAdsAdKitAdDismissAffordance {
    optional  bool  shouldEnableDismissDelay  = 1;
    optional  GPBInt32Value  dismissDelaySeconds  = 2;
    optional  GPBInt32Value  endcardDismissDelaySeconds  = 3;
}

message SCAdsAdKitApplication {
    optional  string  applicationIdentifier  = 1;
    optional  bytes  snapkitAppId  = 2;
    optional  int64  adkitSdkVersionNumeric  = 3;
}

message SCAdsAdKitFeatureFlags {
    optional  bool  shouldDisableAds  = 1;
    optional  int32  endCardAffordance  = 2;
    optional  SCAdsAdKitAdDismissAffordance  adkitDismissAffordance  = 3;
    optional  bool  shouldEnableBolt  = 4;
    optional  GPBInt64Value  boltStreamingThresholdMs  = 5;
    optional  SCAdsAdKitAdDismissAffordance  adkitRewardedDismissAffordance  = 6;
    optional  string  skAdNetworkVersion  = 7;
    optional  int32  embeddedAdStyle  = 8;
    optional  int32  webBrowserType  = 9;
    repeated  SCAdsAdKitVideoAssetOption  videoAssetOptions  = 10;
    optional  bool  shouldEnableGraphene  = 11;
    optional  GPBUInt32Value  grapheneSamplingPercentage  = 12;
    optional  bool  shouldEnableHeaderBidding  = 13;
    optional  bool  smallFormatLocalization  = 14;
    optional  bool  shouldDisableCof  = 15;
    optional  bool  crashReportingDisabled  = 16;
    optional  bool  shouldDisableCofPersistence  = 17;
}

message SCAdsAdKitVideoAssetOption {
    optional  string  stringValue  = 1;
}

message SCAdsAdMetadataCacheConfig {
    optional  int64  adMetadataCacheTtlSecs  = 1;
    optional  int64  adMetadataBackupCacheTtlSecs  = 2;
}

message SCAdsAdPosition {
    optional  uint32  index  = 1;
    optional  uint32  numBrandSafeSlots  = 2;
    optional  int32  feedType  = 3;
}

message SCAdsAdRankingContext {
    repeated  SCAdsViewSessionContext  viewSessionArray  = 1;
    optional  int32  operaType  = 2;
    optional  GPBInt64Value  timeSinceForegroundMillis  = 3;
    repeated  bytes  adOrganicSignalsArray  = 4;
    optional  GPBInt64Value  fourthTabTotalTimeSpentMillis  = 5;
    optional  GPBInt64Value  fourthTabSessionTimeSpentMillis  = 6;
    optional  GPBInt64Value  fourthTabFriendStoriesTotalViewTimeMillis  = 7;
    optional  GPBInt64Value  fourthTabNonFriendStoriesTotalViewTimeMillis  = 8;
    optional  GPBInt64Value  fourthTabFriendStoriesSessionViewTimeMillis  = 9;
    optional  GPBInt64Value  fourthTabNonFriendStoriesSessionViewTimeMillis  = 10;
}

message SCAdsAdRenderData {
    optional  bytes  adId  = 1;
    optional  bytes  lineitemId  = 2;
    optional  int32  adType  = 3;
    optional  SCAdsSCTAd  sctAd  = 4;
    optional  SCAdsStoryAd  storyAd  = 5;
    repeated  string  thirdParty3VUrlsArray  = 6;
    repeated  string  thirdParty3ViUrlsArray  = 7;
    repeated  SCAdsAdSnap  adSnapsArray  = 8;
    repeated  GPBStringValue  thirdParty3ViEngagedViewUrlsArray  = 9;
    optional  SCAdsProfileInfo  profileInfo  = 10;
    optional  bool  hideReportAdCommentBox  = 11;
    optional  bool  hideAdSlug  = 12;
    optional  int32  nonFeedStoryAdVisibleSnapCount  = 13;
    optional  SCAdsStoreContext  storeContext  = 14;
    optional  bool  isDynamicProduct  = 15;
}

message SCAdsAdRequest {
    optional  SCAdsUser  user  = 1;
    optional  SCAdsApplication  application  = 2;
    optional  SCAdsPreferences  preferences  = 3;
    optional  SCAdsDevice  device  = 4;
    optional  SCAdsNetwork  network  = 5;
    repeated  SCAdsInventoryRequest  inventoryRequestsArray  = 6;
    optional  bool  isDebug  = 7;
    optional  SCAdsMixerInfo  mixerInfo  = 8;
    repeated  SCAdsStoryItem  storiesArray  = 9;
    optional  int64  timestamp  = 10;
    repeated  bytes  recentViewReceiptsArray  = 11;
    optional  SCAdsDiscoverPage  discoverPage  = 12;
    optional  bytes  clientRequestId  = 13;
    optional  SCAdsLocation  location  = 14;
    repeated  SCAdsThirdPartyAdNetworkInfo  thirdPartyAdNetworkInfosArray  = 15;
    optional  SCAdsAdRankingContext  adRankingContext  = 16;
    optional  SCAdsLensRankingContext  lensRankingContext  = 17;
}

message SCAdsAdResponse {
    optional  bytes  encryptedUserTrackData  = 1;
    repeated  SCAdsInventoryResponse  inventoryResponsesArray  = 2;
}

message SCAdsAdResponseData {
    optional  string  adId  = 1;
    optional  string  adKey  = 2;
    optional  int32  adType  = 3;
    optional  string  creativeId  = 4;
    optional  string  brandName  = 5;
    optional  string  brandHeadlineMessage  = 6;
    repeated  SCAdsRendition  renditionsArray  = 7;
    optional  string  tileHeadline  = 8;
    optional  string  tileImageURL  = 9;
    optional  string  tileLogoURL  = 10;
    repeated  SCAdsContent  contentsArray  = 11;
    optional  bool  isPrivateURL  = 12;
}

message SCAdsAdScoresConfig {
    optional  float  thresholdRatio  = 1;
}

message SCAdsAdServeItem {
    optional  bytes  adData  = 1;
    optional  bytes  encryptedAdTrackData  = 2;
    optional  bytes  adId  = 3;
    optional  SCAdsAdPosition  adPosition  = 4;
    optional  bytes  serveItemId  = 5;
    optional  bytes  viewReceipt  = 6;
    optional  bytes  adRenderData  = 7;
    optional  int32  adType  = 8;
    optional  int32  demandSource  = 10;
    repeated  SCAdsThirdPartyAdNetworkTrackInfo  eligibleThirdPartyAdNetworkTrackInfoArray  = 11;
    optional  bytes  pixelId  = 12;
    optional  SCAdsSKAdNetworkAttribution  skAdNetworkAttribution  = 13;
    optional  int64  adMetadataCacheTtlSecs  = 14;
    optional  float  organicValue  = 15;
    optional  SCAdsAdInsertionConfig  adInsertionConfig  = 16;
    optional  int64  serveTimestampMillis  = 17;
    optional  SCAdsAdMetadataCacheConfig  adMetadataCacheConfig  = 18;
    optional  bool  adSwipeUpLikely  = 19;
    optional  SCAdsOnDeviceInfo  onDeviceInfo  = 20;
    optional  bool  enableAppInstallTrackRevamp  = 21;
    optional  int32  sponsoredUnlockableType  = 22;
    optional  bytes  adSquadId  = 23;
    optional  bytes  campaignId  = 24;
    optional  bytes  adAccountId  = 25;
    optional  float  swipeProbability  = 26;
    repeated  SCAdsLensPosition  lensPositionsArray  = 27;
    repeated  SCAdsClientCrawlRequest  clientCrawlRequestsArray  = 28;
    optional  int32  optimizationGoal  = 29;
}

message SCAdsAdSnap {
    optional  bytes  creativeId  = 1;
    optional  int32  adSnapType  = 2;
    optional  string  brandName  = 3;
    optional  string  brandHeadlineMessage  = 4;
    optional  int32  slugType  = 5;
    optional  SCAdsTopSnap  topSnap  = 6;
    optional  SCAdsBottomSnap  bottomSnap  = 7;
    optional  bool  isSharable  = 8;
    optional  SCAdsZipPackageInfo  zipPackageInfo  = 9;
    optional  SCAdsPoliticalAdInfo  politicalAdInf  = 10;
    optional  bool  isUnskippable  = 11;
    optional  int64  unskippableDurationMs  = 12;
    repeated  SCAdsAdditionalFormat  additionalFormatsArray  = 13;
    optional  int32  adSkippableType  = 14;
    optional  SCAdsPayToPromoteInfo  payToPromoteInfo  = 15;
    optional  string  offerDisclaimer  = 16;
}

message SCAdsAdToCall {
    optional  string  phoneNumber  = 1;
    optional  string  phoneNumberAlias  = 2;
}

message SCAdsAdToCallImpressionTrack {
    optional  SCAdsCommonSnapAdImpressionTrack  commonSnapAdImpression  = 1;
    optional  GPBBoolValue  didCall  = 2;
}

message SCAdsAdToLens {
    repeated  SCAdsSnapcodeInfo  lensSnapcodeArray  = 1;
}

message SCAdsAdToLensImpressionTrack {
    optional  SCAdsCommonSnapAdImpressionTrack  commonSnapAdImpression  = 1;
    repeated  SCAdsLensCarouselImpressionTrack  adToLensCarouselImpressionsArray  = 2;
}

message SCAdsAdToMessage {
    optional  string  phoneNumber  = 1;
    optional  string  phoneNumberAlias  = 2;
    optional  string  messageId  = 3;
    optional  string  messageText  = 4;
}

message SCAdsAdToMessageImpressionTrack {
    optional  SCAdsCommonSnapAdImpressionTrack  commonSnapAdImpression  = 1;
    optional  GPBBoolValue  didMessage  = 2;
}

message SCAdsAdToPlace {
    optional  string  placeId  = 1;
}

message SCAdsAdToPlaceImpressionTrack {
    optional  SCAdsCommonSnapAdImpressionTrack  commonSnapAdImpression  = 1;
    optional  GPBStringValue  placeProfileId  = 2;
}

message SCAdsAdTrackItem {
    optional  bytes  encryptedAdTrackData  = 1;
    optional  SCAdsImpressionData  impressionData  = 2;
    optional  GPBStringValue  sessionId  = 3;
    optional  GPBInt32Value  trackSeqNum  = 4;
    optional  GPBInt32Value  attemptSeqNum  = 5;
    optional  GPBBoolValue  clientRankingNoShow  = 6;
    optional  SCAdsClientRankingModelOutput  clientRankingModelOutput  = 7;
    optional  SCAdsClientRankingFeatures  clientRankingFeatures  = 8;
    optional  bytes  opportunityRequestId  = 9;
    optional  SCAdsRTBTrackData  rtbTrackData  = 10;
    optional  SCAdsFailureToDeliverReason  failureToDeliverReason  = 11;
    optional  SCAdsAdInsertionConfig  adInsertionConfig  = 12;
    optional  SCAdsClientAdFreshStatus  adFreshStatus  = 13;
    optional  SCAdsDisplayedPreRollAdInfo  displayedPreRollAdInfo  = 14;
    optional  bytes  serveItemId  = 15;
    repeated  SCAdsClientCrawlAttempt  clientAttemptedCrawlsArray  = 16;
    optional  GPBBoolValue  isIntermediateTrack  = 17;
}

message SCAdsAdUATInfoCardConfig {
    optional  SCAdsAdUATInfoCardConfig_AdUATInfoCardStyleConfig  defaultConfig  = 1;
    repeated  SCAdsAdUATInfoCardConfig_AdTypeToConfigMap  adTypeToConfigArray  = 2;
    repeated  int32  excludedAdProductTypesArray  = 3[packed=true];
}

message SCAdsAdUATInfoCardConfig_AdTypeToConfigMap {
    optional  int32  adType  = 1;
    optional  SCAdsAdUATInfoCardConfig_AdUATInfoCardStyleConfig  config  = 2;
}

message SCAdsAdUATInfoCardConfig_AdUATInfoCardStyleConfig {
    optional  int32  cardType  = 1;
    optional  int32  animationType  = 2;
    optional  SCAdsAdUATInfoCardConfig_Animation  cardAnimation  = 3;
    optional  SCAdsAdUATInfoCardConfig_Animation  cardColorAnimation  = 4;
    optional  SCAdsAdUATInfoCardConfig_Animation  buttonAnimation  = 5;
    optional  int32  buttonStyle  = 6;
    optional  int32  collectionCardType  = 7;
    optional  SCAdsAdUATInfoCardConfig_Animation  collectionCardAnimation  = 8;
    optional  SCAdsAdUATInfoCardConfig_Animation  collectionCardFinalAnimation  = 9;
}

message SCAdsAdUATInfoCardConfig_Animation {
    optional  double  delay  = 1;
    optional  double  duration  = 2;
}

message SCAdsAdditionalFormat {
    optional  int32  additionalFormatType  = 1;
    optional  SCAdsMediaRenderInfo  renderInfo  = 2;
    optional  SCAdsMediaRenderInfo  thumbnailInfo  = 3;
}

message SCAdsAppInstall {
    optional  string  androidPackageId  = 1;
    optional  string  iosAppId  = 2;
    optional  string  appTitle  = 3;
    optional  SCAdsMediaRenderInfo  iconRenderInfo  = 4;
    optional  string  iosAppTitle  = 5;
    optional  string  androidAppTitle  = 6;
    optional  SCAdsAppPopularityInfo  iosPopularityInfo  = 7;
    optional  SCAdsAppPopularityInfo  androidPopularityInfo  = 8;
    repeated  string  playStoreParams  = 9;
    optional  string  productPageId  = 10;
    optional  bool  enableSkoverlay  = 11;
}

message SCAdsAppInstallImpressionTrack {
    optional  SCAdsCommonSnapAdImpressionTrack  commonSnapAdImpression  = 1;
    optional  GPBBoolValue  loadedOnEntry  = 2;
    optional  GPBBoolValue  loadedOnExit  = 3;
    optional  GPBFloatValue  visibleLoadTimeMs  = 4;
    optional  GPBBoolValue  skoverlayEnabled  = 5;
    optional  GPBBoolValue  customProductPageEnabled  = 6;
}

message SCAdsAppPopularityInfo {
    optional  GPBFloatValue  appRating  = 1;
    optional  GPBInt64Value  appDownloads  = 2;
}

message SCAdsAppStorePagePrefetchConfig {
    optional  bool  maxConcurrentPrefetchOperations  = 1;
    optional  int32  prefetchOrder  = 2;
    optional  bool  useJobScheduler  = 3;
    optional  bool  preloadOnBgQueue  = 4;
}

message SCAdsApplication {
    optional  string  appName  = 1;
    optional  int64  appVersionNumeric  = 2;
    optional  string  appVariant  = 3;
    optional  int32  appVariantEnum  = 4;
    optional  int32  appType  = 5;
    optional  SCAdsAdKitApplication  adKitApplication  = 7;
    optional  GPBInt64Value  appUptimeMs  = 8;
    optional  string  sourceAppId  = 9;
    optional  bool  isNativeClient  = 10;
}

message SCAdsAudienceOnDeviceConfig {
    optional  SCAdsEncryptedContentCategoryBucketMapping  encryptedAppCategoryBucketMapping  = 1;
    optional  SCAdsEncryptedAppToSlcMapping  encryptedAppToSlcMapping  = 2;
    optional  SCAdsContentCategoryBucketMapping  shopperCategoryAppBucketMapping  = 3;
    optional  SCAdsContentCategoryBucketMapping  shopperCategoryPixelBucketMapping  = 4;
}

message SCAdsAutoAdvanceControlConfig {
    optional  bool  enable  = 1;
    optional  uint32  numberOfLoops  = 2;
    optional  double  videoLengthThresholdMs  = 3;
    optional  double  imageAdsAutoAdvanceDurationMs  = 4;
}

message SCAdsBatchTrackRequest {
    optional  SCAdsCommonRequestData  commonRequestData  = 1;
    repeated  SCAdsSingleTrack  tracksArray  = 2;
}

message SCAdsBatchedOnDeviceConversionEvents {
    repeated  SCAdsOnDeviceConversionEvent  conversionEventsArray  = 1;
}

message SCAdsBottomSnap {
    optional  SCAdsAdToLens  adToLens  = 1;
    optional  SCAdsLongformVideo  longformVideo  = 2;
    optional  SCAdsDeeplink  deepLink  = 3;
    optional  SCAdsAppInstall  appInstall  = 4;
    optional  SCAdsWebViewAttachment  webView  = 5;
    optional  SCAdsCollection  collection  = 6;
    optional  SCAdsAdToCall  adToCall  = 7;
    optional  SCAdsAdToMessage  adToMessage  = 8;
    optional  SCAdsAdToPlace  adToPlace  = 9;
    optional  SCAdsProtoRenderLeadGeneration  leadGeneration  = 10;
    optional  SCAdsShowcaseAttachment  showcase  = 11;
    optional  SCAdsReminder  reminder  = 12;
}

message SCAdsBucketDefinition {
    optional  int32  lowerBoundInclusive  = 1;
    optional  int32  upperBoundExclusive  = 2;
    optional  int32  bucket  = 3;
}

message SCAdsBudgetAbStudy {
    optional  string  experimentId  = 1;
    optional  int64  studyVersion  = 2;
    optional  int32  budgetSegmentId  = 3;
}

message SCAdsCanOpenUrlExclusionConfig {
    optional  string  appScheme  = 1;
    optional  string  onDeviceMatchKey  = 2;
}

message SCAdsCanOpenUrlExclusionConfigV2 {
    optional  string  appScheme  = 1;
    optional  string  appId  = 2;
}

message SCAdsCanOpenUrlExclusionConfigs {
    repeated  SCAdsCanOpenUrlExclusionConfig  canOpenURLExclusionConfigArray  = 1;
}

message SCAdsCanOpenUrlExclusionConfigsV2 {
    repeated  SCAdsCanOpenUrlExclusionConfigV2  canOpenURLExclusionConfigV2Array  = 1;
}

message SCAdsCategoryEventBucketDefinition {
    optional  bytes  encryptedCategoryBlock  = 1;
    optional  int32  event  = 2;
    repeated  SCAdsBucketDefinition  bucketDefinitionsArray  = 3;
}

message SCAdsClientAdFreshStatus {
    optional  int32  freshStatus  = 1;
}

message SCAdsClientCrawlAttempt {
    optional  string  crawlURL  = 1;
    optional  string  creativeId  = 2;
}

message SCAdsClientCrawlRequest {
    optional  string  crawlURL  = 1;
    optional  string  creativeId  = 2;
}

message SCAdsClientRankingFeatures {
    optional  GPBStringValue  appVersion  = 1;
    optional  int32  deviceOs  = 2;
    optional  GPBInt32Value  totalUniqueSnapsViewed  = 3;
    optional  GPBInt32Value  numOfTapBacks  = 4;
    optional  GPBBoolValue  playList  = 5;
    optional  int32  playbackAudio  = 6;
    optional  GPBBoolValue  postRoll  = 7;
    optional  GPBInt32Value  snapIndexPosition  = 8;
    repeated  GPBFloatValue  timeViewedArrayArray  = 9;
    optional  GPBInt32Value  totalUniqueSnaps  = 10;
    optional  GPBBoolValue  isLastSnapVideo  = 11;
    optional  GPBInt32Value  totalUniqueAdsViewed  = 12;
}

message SCAdsClientRankingModelOutput {
    optional  GPBStringValue  modelId  = 1;
    optional  GPBFloatValue  score  = 2;
    optional  GPBInt64Value  inferenceLatency  = 3;
    optional  GPBInt64Value  loadingLatency  = 4;
    optional  GPBStringValue  error  = 5;
}

message SCAdsClientRankingStudy {
    optional  string  modelId  = 1;
    optional  float  avgTimeViewedWeight  = 2;
    optional  float  stdWeight  = 3;
    optional  float  constant  = 4;
    optional  float  threshold  = 5;
    optional  int32  numSnaps  = 6;
}

message SCAdsClientToTargetingFields {
    repeated  uint64  installedAppBitArrayArray  = 1[packed=true];
    optional  SCAdsOnDeviceRequest  onDeviceRequest  = 2;
}

message SCAdsCognacMetadata {
    optional  GPBStringValue  orgId  = 1;
    optional  GPBStringValue  gameId  = 2;
    optional  GPBStringValue  buildId  = 3;
    optional  GPBStringValue  slotId  = 4;
    optional  GPBStringValue  developerFacingRequestId  = 5;
}

message SCAdsCollection {
    optional  string  headline  = 1;
    optional  SCAdsCollectionItemAttachment  defaultAttachment  = 2;
    repeated  SCAdsCollectionItem  itemsArray  = 3;
}

message SCAdsCollectionImpressionTrack {
    optional  SCAdsCommonSnapAdImpressionTrack  topsnapImpression  = 1;
    repeated  SCAdsCollectionItemImpressionTrack  collectionItemsTrackArray  = 2;
}

message SCAdsCollectionItem {
    optional  SCAdsMediaRenderInfo  itemIcon  = 1;
    optional  SCAdsCollectionItemAttachment  itemAttachment  = 2;
    optional  string  title  = 3;
    optional  int64  dpaProductId  = 4;
}

message SCAdsCollectionItemAttachment {
    optional  SCAdsDeeplink  deepLink  = 1;
    optional  SCAdsWebViewAttachment  webviewAttachment  = 2;
    optional  SCAdsAppInstall  appInstall  = 3;
    optional  SCAdsShowcaseAttachment  showcaseAttachment  = 4;
}

message SCAdsCollectionItemImpressionTrack {
    optional  GPBStringValue  productId  = 1;
    optional  GPBInt32Value  positionIndex  = 2;
    optional  int32  attachmentType  = 3;
    optional  SCAdsRemoteWebpageImpressionTrack  remoteWebpage  = 4;
    optional  SCAdsDeepLinkImpressionTrack  deepLink  = 5;
    optional  SCAdsShowcaseImpressionTrack  showcase  = 6;
    optional  SCAdsAppInstallImpressionTrack  appInstall  = 7;
    optional  int32  viewState  = 8;
}

message SCAdsCommonRequestData {
    optional  SCAdsApplication  application  = 1;
    optional  SCAdsPreferences  preferences  = 2;
    optional  SCAdsDevice  device  = 3;
    optional  SCAdsNetwork  network  = 4;
    optional  GPBBoolValue  isDebug  = 5;
}

message SCAdsCommonSnapAdImpressionTrack {
    optional  GPBFloatValue  topsnapTimeViewedSeconds  = 1;
    optional  GPBFloatValue  topsnapMediaDurationSeconds  = 2;
    optional  GPBFloatValue  longformTimeViewedSeconds  = 3;
    optional  GPBBoolValue  swiped  = 4;
    optional  GPBInt64Value  deltaBetweenReceiveAndRenderMillis  = 5;
    optional  GPBInt32Value  swipeCount  = 6;
    optional  bytes  creativeId  = 7;
    optional  GPBFloatValue  topsnapTimeViewedBeforeInteractionSeconds  = 8;
    optional  SCAdsTopsnapVolumes  topsnapVolumes  = 9;
    optional  GPBFloatValue  topsnapMaxContinuousTimeViewedSeconds  = 10;
    optional  GPBFloatValue  topsnapAudibleTimeViewedSeconds  = 11;
    optional  int32  topsnapMediaType  = 12;
    optional  GPBBoolValue  wasPrefetched  = 13;
    optional  GPBFloatValue  unskippableDurationSeconds  = 14;
    optional  GPBFloatValue  unskippableViewTimeSeconds  = 15;
    optional  int32  adSkippableType  = 16;
    optional  GPBBoolValue  fatalMediaLoadError  = 17;
    optional  GPBBoolValue  wasBoosted  = 18;
    optional  GPBInt32Value  autoEndCardInteractionCount  = 19;
    optional  SCAdsDpaMetadata  dpa  = 20;
    optional  GPBInt32Value  autoEndCardViewedCount  = 21;
    optional  GPBInt64Value  adResponseParseCompleteTsMs  = 22;
    optional  GPBInt64Value  adInsertionCompleteTsMs  = 23;
    optional  GPBInt64Value  topsnapFullyPresentTsMs  = 24;
    optional  GPBInt64Value  ctaInteractableTsMs  = 25;
    optional  GPBInt64Value  attachmentPageLoadedTsMs  = 26;
    optional  GPBInt64Value  attachmentTriggeredTsMs  = 27;
    optional  GPBInt64Value  attachmentFullyPresentedTsMs  = 28;
    optional  GPBInt64Value  attachmentDismissTriggerTsMs  = 29;
    optional  GPBInt64Value  topsnapDimissTriggerTsMs  = 30;
    optional  GPBInt64Value  ctaWillDisplayTsMs  = 31;
    optional  GPBInt64Value  ctaDidDisplayTsMs  = 32;
    optional  GPBInt64Value  topsnapPlaybackBeginTsMs  = 33;
    optional  int32  preferredAttachmentType  = 34;
    optional  int32  actualAttachmentType  = 35;
    optional  GPBBoolValue  isExternalAttachment  = 36;
    optional  SCAdsSwipeSensitivity  swipeSensitivity  = 37;
}

message SCAdsComposerCtaConfig {
    optional  bool  enableV1  = 1;
    repeated  int32  supportedCtaTypesArray  = 4[packed=true];
    repeated  int32  supportedProductTypesArray  = 5[packed=true];
    optional  bool  enableDpa  = 6;
    optional  bool  enableUab  = 7;
    optional  bool  enableUat  = 8;
}

message SCAdsComposerDpaAutomaticConfig {
    optional  uint32  supportedVersion  = 1;
    optional  bool  imageFitCover  = 2;
    optional  bool  imageFitContain  = 3;
    optional  bool  imageFitNone  = 4;
    optional  bool  overrideFillWidth  = 5;
    optional  bool  overrideFillHeight  = 6;
    optional  bool  overrideFit  = 7;
    optional  bool  enableAutomatic  = 8;
    optional  bool  enableAutomaticAnimations  = 9;
}

message SCAdsContent {
    optional  string  adKey  = 1;
    optional  int32  adType  = 2;
    optional  string  brandName  = 3;
    optional  string  brandHeadlineMessage  = 4;
    optional  string  creativeId  = 5;
    repeated  SCAdsRenditionV2  renditionV2Array  = 6;
}

message SCAdsContentCategoryBucketMapping {
    optional  int64  version  = 1;
    repeated  SCAdsNonEncryptedContentCategoryBlock  nonEncryptedContentCategoryBlocksArray  = 2;
    repeated  SCAdsNonEncryptedCategoryEventBucketDefinition  nonEncryptedCategoryEventBucketDefinitionArray  = 3;
    repeated  int32  eligibleEventsArray  = 4[packed=true];
}

message SCAdsCookieInfo {
    optional  string  cookieName  = 1;
    optional  bytes  cookieContent  = 2;
    optional  int32  cookieContentTransformation  = 3;
    optional  int32  cookieType  = 4;
}

message SCAdsCustomIntervalsConfig {
    repeated  float  customAdTimesSecondsArray  = 1[packed=true];
    optional  float  minTimeUntilEndSeconds  = 2;
}

message SCAdsDebugConfig {
    optional  bool  isTestUser  = 1;
    optional  bool  isAutomationUser  = 2;
    optional  bool  skipInventoryCapping  = 3;
    repeated  string  testGroupsArray  = 4;
}

message SCAdsDeepLinkImpressionTrack {
    optional  SCAdsCommonSnapAdImpressionTrack  commonSnapAdImpression  = 1;
    optional  GPBInt32Value  deepLinkedToAppCount  = 2;
    optional  GPBInt32Value  deepLinkedToAppInstallCount  = 3;
    optional  GPBBoolValue  deepLinkFallbackToWebview  = 4;
    optional  string  deeplinkUri  = 5;
    optional  GPBBoolValue  customProductPageEnabled  = 6;
    optional  GPBBoolValue  deepLinkFallbackToDefaultBrowser  = 7;
    optional  SCAdsRemoteWebpageImpressionTrack  remoteWebpageImpressionTrack  = 8;
}

message SCAdsDeeplink {
    optional  string  uri  = 1;
    optional  string  appTitle  = 2;
    optional  string  iosAppId  = 3;
    optional  string  androidPackageId  = 4;
    optional  string  deepLinkWebFallbackURL  = 5;
    optional  int32  deepLinkFallbackType  = 6;
    optional  SCAdsMediaRenderInfo  iconRenderInfo  = 7;
    optional  string  iosUri  = 8;
    optional  string  iosAppTitle  = 9;
    optional  string  androidUri  = 10;
    optional  string  androidAppTitle  = 11;
    optional  string  productPageId  = 13;
}

message SCAdsDefaultCTAConfig {
    optional  bool  enable  = 1;
    optional  SCAdsDefaultCTAConfig_CTAConfig  pillCtaConfig  = 2;
    optional  SCAdsDefaultCTAConfig_CTAConfig  infoCardConfig  = 3;
    optional  SCAdsDefaultCTAConfig_CTAConfig  collectionCardConfig  = 4;
}

message SCAdsDefaultCTAConfig_CTAConfig {
    optional  bool  enable  = 1;
    optional  double  interactivePaddingHeight  = 2;
    optional  double  animationTimeMs  = 3;
    optional  double  animationDelayMs  = 4;
}

message SCAdsDevice {
    optional  bytes  idfa  = 1;
    optional  int32  platformType  = 2;
    optional  string  deviceModel  = 3;
    optional  int64  osVersionNumeric  = 4;
    optional  string  deviceLanguage  = 5;
    optional  bool  soundIsOn  = 6;
    optional  string  buildNumber  = 7;
    optional  GPBInt32Value  batteryPercent  = 8;
    optional  GPBBoolValue  isBatteryCharging  = 9;
    optional  GPBInt64Value  diskTotalSpaceKb  = 10;
    optional  GPBInt64Value  diskFreeSpaceKb  = 11;
    optional  int32  androidMobileServiceType  = 12;
    optional  GPBInt64Value  systemUptimeMs  = 13;
    optional  bytes  idfv  = 14;
    optional  int32  attAuthStatus  = 15;
    optional  GPBFloatValue  audioPlaybackVolume  = 16;
    optional  GPBInt64Value  screenWidth  = 17;
    optional  GPBInt64Value  screenHeight  = 18;
}

message SCAdsDeviceInfo {
    optional  SCAdsScreenDimension  screenDimension  = 1;
}

message SCAdsDifferentialPrivacyParameters {
    optional  float  tNoise  = 1;
    optional  float  tDp  = 2;
    optional  int64  maxN  = 3;
}

message SCAdsDiscoverChannelMetadata {
    optional  string  inventoryFullyQualified  = 1;
    optional  string  channel  = 2;
    optional  string  channelId  = 3;
    optional  string  productType  = 4;
    optional  string  publisher  = 5;
}

message SCAdsDiscoverPage {
    optional  string  mixerVersion  = 1;
    optional  SCAdsSubsBrandSafety  subsBrandSafety  = 2;
    repeated  SCAdsDiscoverPage_Feed  feedsArray  = 3;
}

message SCAdsDiscoverPage_Feed {
    optional  uint32  storyOffset  = 1;
    optional  int32  feedType  = 2;
    repeated  SCAdsStoryItem  storiesArray  = 3;
    optional  int32  feedStyle  = 4;
    optional  bool  adsDisabled  = 5;
    optional  uint32  minAdsPos  = 6;
    repeated  string  sccTagsArray  = 7;
}

message SCAdsDiscoverPage_FeedStyle {
}

message SCAdsDisplayedPreRollAdInfo {
    optional  bytes  adId  = 1;
    optional  bytes  requestId  = 2;
}

message SCAdsDpaMetadata {
    optional  int32  layout  = 1;
    optional  GPBStringValue  templateName  = 2;
}

message SCAdsEncryptedAppSlcBlock {
    repeated  bytes  encryptedAppIdArray  = 1;
    optional  bytes  encryptedSlcBlock  = 2;
}

message SCAdsEncryptedAppToSlcMapping {
    optional  int64  version  = 1;
    repeated  SCAdsEncryptedAppSlcBlock  encryptedAppSlcBlocksArray  = 2;
}

message SCAdsEncryptedContentCategoryBlock {
    repeated  bytes  encryptedContentIdArray  = 1;
    optional  bytes  encryptedCategoryBlock  = 2;
}

message SCAdsEncryptedContentCategoryBucketMapping {
    optional  int64  version  = 1;
    repeated  SCAdsEncryptedContentCategoryBlock  encryptedContentCategoryBlocksArray  = 2;
    repeated  SCAdsCategoryEventBucketDefinition  categoryEventBucketDefinitionArray  = 3;
    repeated  int32  eligibleEventsArray  = 4[packed=true];
}

message SCAdsEncryptedConversionEventInfo {
    optional  bytes  decryptedAnonymizedId  = 1;
    optional  bytes  encryptedKeySaid  = 2;
    optional  bytes  encryptedConversionEvents  = 3;
}

message SCAdsEvenlySpreadConfig {
    optional  float  firstAdBreakSeconds  = 1;
}

message SCAdsFailureToDeliverReason {
    optional  int32  reason  = 1;
    optional  GPBStringValue  additionalInfo  = 2;
}

message SCAdsFeatureFlags {
    optional  bool  isPetraCapable  = 1;
    optional  bool  isDpaCapable  = 2;
    repeated  int32  protoCapableAdTypesArray  = 3[packed=true];
    optional  bool  canSupportCognacSkippableAds  = 4;
    optional  bool  canSupportExtendedPlayAds  = 5;
    repeated  int32  dpaCapableAdTypesArray  = 6[packed=true];
    optional  bool  storyAdsInUserStoriesEnabled  = 7;
    optional  SCAdsPetraFeatureFlags  petraFeatureFlags  = 8;
    optional  bool  canSupportShowsSkippableAds  = 9;
    repeated  int32  supportedAdTypesArray  = 10[packed=true];
    optional  int32  additionalFormatType  = 11;
    optional  bool  storyAdsInContentInterstitialEnabled  = 12;
    optional  bool  canSupportCollectionV2  = 13;
    optional  string  maxSupportedSkAdNetworkVersion  = 14;
    optional  bool  canSupportCollectionAppInstall  = 15;
    optional  bool  topsnapProductsInShowcaseAttachment  = 16;
    optional  bool  canSupportCollectionShowcaseAttachment  = 17;
    optional  bool  canSupportLeadGenV15  = 18;
    optional  string  maxSupportedSkAdNetworkViewThroughVersion  = 19;
    optional  bool  canSupportDpaStoryAds  = 20;
    optional  GPBInt32Value  supportedLeadGenVersion  = 21;
    optional  bool  canSupportDefaultBrowserDeeplinkFallback  = 22;
    repeated  int32  composerSupportedItemTypesArray  = 23[packed=true];
    optional  GPBInt32Value  supportedDpaComposerTemplateVersion  = 24;
    optional  bool  supportsOrganicStore  = 25;
    optional  bool  multiAdPodRequestEnabled  = 26;
    optional  bool  offerDisclaimerEnabled  = 27;
}

message SCAdsFilterCarouselImpressionTrack {
    optional  SCAdsSnapCreationInfo  snapCreationInfo  = 1;
    optional  bytes  snapSessionId  = 2;
    optional  GPBInt64Value  carouselSize  = 3;
    repeated  SCAdsFilterImpressionTrack  filterImpressionsArray  = 4;
    optional  SCAdsDeviceInfo  deviceInfo  = 5;
    optional  string  snapSessionIdString  = 6;
}

message SCAdsFilterImpressionTrack {
    optional  GPBStringValue  geofilterId  = 1;
    optional  GPBInt64Value  totalSwipedViewMillis  = 2;
    optional  bytes  encGeoData  = 3;
    optional  GPBInt64Value  swipedOverCount  = 4;
    optional  GPBBoolValue  withSnapSend  = 5;
    optional  GPBBoolValue  withStoryPost  = 6;
    optional  GPBBoolValue  withMemoriesSave  = 7;
    optional  GPBInt64Value  filterIndexPos  = 8;
    optional  int32  geofilterType  = 9;
    optional  bytes  encryptedAdTrackData  = 10;
    optional  GPBInt64Value  filterGeofilterIndexPos  = 11;
    optional  GPBInt64Value  firstSeenTimestamp  = 12;
    optional  bytes  encryptedSponsoredUnlockableTargetingInfoData  = 13;
    optional  bytes  rankingId  = 14;
    optional  bytes  rankingData  = 15;
    optional  GPBInt64Value  snapSendRecipientCount  = 16;
    optional  GPBInt64Value  snapSendCount  = 17;
    optional  GPBInt64Value  storyPostCount  = 18;
    optional  GPBInt64Value  memoriesSaveCount  = 19;
    optional  GPBInt64Value  captureTimeMillis  = 20;
    optional  GPBInt64Value  postCaptureTimeMillis  = 21;
    optional  GPBInt64Value  maxSwipeTimeMillis  = 22;
    optional  GPBInt64Value  maxContinuousTimeMillis  = 23;
    optional  GPBInt64Value  totalTimeMillis  = 24;
    optional  GPBInt64Value  reactionTimestamp  = 25;
    optional  GPBInt64Value  shareTimestamp  = 26;
    optional  GPBInt64Value  swipeUpTimestamp  = 27;
    optional  GPBInt64Value  saveTimestamp  = 28;
    optional  GPBInt64Value  screenshotTimestamp  = 29;
    optional  SCAdsUnlockableAttachmentImpression  attachmentImpression  = 30;
    optional  GPBBoolValue  withAttachmentOpen  = 31;
    optional  int32  attachmentType  = 32;
    optional  SCAdsAdFlagData  adFlagData  = 33;
}

message SCAdsFixedAdsConfig {
    optional  SCAdsFixedIntervalsConfig  fixedIntervalsConfig  = 1;
    optional  SCAdsEvenlySpreadConfig  evenlySpreadConfig  = 2;
    optional  SCAdsCustomIntervalsConfig  customIntervalsConfig  = 3;
    optional  SCAdsAdScoresConfig  adScoresConfig  = 4;
    optional  SCAdsPerStoryConfig  perStoryConfig  = 5;
    optional  SCAdsStoryDocConfig  storyDocConfig  = 6;
    optional  int32  allowlistType  = 7;
}

message SCAdsFixedAdsPublisherConfig {
    repeated  SCAdsStoryConfig  stories  = 1;
}

message SCAdsFixedAdsPublisherIDAllowlistConfig {
    repeated  int64  publisherIdsArray  = 1[packed=true];
}

message SCAdsFixedAdsTreatmentAllowlistConfig {
    repeated  string  treatmentsArray  = 1;
}

message SCAdsFixedIntervalsConfig {
    optional  float  fixedIntervalSeconds  = 1;
    optional  float  firstAdBreakSeconds  = 2;
    optional  float  minTimeUntilEndSeconds  = 3;
}

message SCAdsGender {
}

message SCAdsHOperaSwipeIntentConfig {
    optional  bool  enable  = 1;
    optional  float  velocityThreshold  = 2;
    optional  float  distanceThreshold  = 3;
    optional  float  liveAreaPillCtaXInset  = 4;
    optional  float  liveAreaPillCtaYInset  = 5;
    optional  float  liveAreaCardCtaXInset  = 6;
    optional  float  liveAreaCardCtaYInset  = 7;
    optional  float  liveAreaCollectionCardCtaXInset  = 8;
    optional  float  liveAreaCollectionCardCtaYInset  = 9;
}

message SCAdsImpressionData {
    optional  int32  adType  = 1;
    optional  SCAdsThreeVImpressionTrack  threeV  = 2;
    optional  SCAdsAppInstallImpressionTrack  appInstall  = 3;
    optional  SCAdsLongformVideoImpressionTrack  longformVideo  = 4;
    optional  SCAdsRemoteWebpageImpressionTrack  remoteWebpage  = 5;
    optional  SCAdsLocalWebpageImpressionTrack  localWebpage  = 6;
    optional  SCAdsStoryImpressionTrack  story  = 7;
    optional  SCAdsLensCarouselImpressionTrack  lensCarousel  = 8;
    optional  SCAdsFilterCarouselImpressionTrack  filterCarousel  = 9;
    optional  SCAdsDeepLinkImpressionTrack  deepLink  = 10;
    optional  SCAdsFilterImpressionTrack  filter  = 11;
    optional  SCAdsLensImpressionTrack  lens  = 12;
    optional  SCAdsSubscribeImpressionTrack  subscribe  = 13;
    optional  SCAdsAdToLensImpressionTrack  adToLens  = 14;
    repeated  GPBStringValue  thirdPartyUrlsArray  = 15;
    optional  SCAdsViewContext  viewContext  = 16;
    optional  SCAdsAdFlagData  adFlagData  = 17;
    optional  GPBInt64Value  screenWidth  = 18;
    optional  GPBInt64Value  screenHeight  = 19;
    optional  GPBInt64Value  creativeHeight  = 20;
    optional  GPBInt64Value  creativeWidth  = 21;
    optional  GPBBoolValue  isUnskippableAd  = 22;
    optional  SCAdsCollectionImpressionTrack  collection  = 23;
    optional  SCAdsUnlockableViewImpressionTrack  unlockableView  = 24;
    optional  SCAdsCognacMetadata  cognac  = 25;
    repeated  GPBStringValue  thirdPartyImpressionUrlsArray  = 26;
    repeated  GPBStringValue  thirdPartyClickUrlsArray  = 27;
    optional  SCAdsLensExplorerImpressionTrack  lensExplorer  = 28;
    optional  SCAdsAdToCallImpressionTrack  adToCall  = 29;
    optional  SCAdsAdToMessageImpressionTrack  adToMessage  = 30;
    optional  SCAdsShowcaseImpressionTrack  showcase  = 31;
    optional  SCAdsAdToPlaceImpressionTrack  adToPlace  = 32;
    optional  int32  additionalFormatType  = 33;
    optional  GPBFloatValue  skAdNetworkVersion  = 34;
    optional  SCAdsProtoLeadGenerationImpressionTrack  leadGeneration  = 35;
    repeated  GPBStringValue  thirdPartyEngagedViewUrlsArray  = 36;
    optional  GPBBoolValue  openProfilePage  = 37;
    optional  SCAdsAdHidingData  adHidingData  = 38;
    optional  SCAdsProtoPayToPromoteImpressionTrack  payToPromote  = 39;
    optional  GPBStringValue  skAdNetworkClickThroughVersion  = 40;
    optional  GPBStringValue  skAdNetworkViewThroughVersion  = 41;
    optional  SCAdsReminderTrack  reminder  = 42;
}

message SCAdsInitRequest {
    optional  bytes  idfa  = 1;
    optional  bytes  encryptedUserData  = 3;
    optional  bool  isRerouteRequest  = 4;
    optional  bool  isDebug  = 5;
    optional  SCAdsPreferences  preferences  = 6;
    optional  SCAdsApplication  application  = 7;
    optional  SCAdsDevice  device  = 8;
    optional  SCAdsNetwork  network  = 9;
    optional  bytes  said  = 10;
    optional  bytes  fsnEncryptedUserData  = 11;
    optional  bytes  cofToken  = 12;
    optional  SCAdsClientToTargetingFields  clientToTargetingFields  = 13;
    optional  bytes  clientRequestId  = 14;
}

message SCAdsInitResponse {
    optional  bytes  sessionId  = 1;
    optional  GPBInt32Value  timeToLiveSeconds  = 2;
    optional  string  initHostAndPath  = 3;
    optional  string  serveHostAndPath  = 4;
    optional  string  trackHostAndPath  = 5;
    optional  string  trackAndGetHostAndPath  = 6;
    optional  string  serveHostAndPathBatch  = 7;
    optional  string  initHostAndPathV2  = 8;
    optional  string  trackHostAndPathV2  = 9;
    optional  string  batchTrackHostAndPathV2  = 10;
    optional  bool  shouldInitializePetra  = 11;
    optional  bytes  sceid  = 12;
    optional  bytes  pixelToken  = 13;
    optional  bytes  encryptedUserData  = 14;
    optional  string  initGatewayHostAndPathV1  = 15;
    optional  bool  shouldDisableServeRequest  = 16;
    optional  SCAdsOnDeviceResponse  onDeviceResponse  = 17;
    optional  string  conversionProfileHostAndPathV1  = 18;
    optional  bool  shouldSendGeoLocation  = 19;
    optional  string  appIdObfuscationHostAndPathV1  = 20;
}

message SCAdsInitToTargetingFields {
    optional  SCAdsApplication  application  = 1;
    optional  SCAdsClientToTargetingFields  clientFields  = 2;
}

message SCAdsInteractiveAreaConfigV2 {
    optional  bool  enabled  = 1;
    optional  SCAdsInteractiveAreaConfigV2_SwipeSensitivityConfig  defaultConfig  = 2;
    repeated  SCAdsInteractiveAreaConfigV2_AdTypeToConfigMap  adTypeToConfigArray  = 3;
    repeated  int32  excludedAdProductTypesArray  = 4[packed=true];
    repeated  int32  excludedCtaStylesArray  = 5[packed=true];
}

message SCAdsInteractiveAreaConfigV2_AdTypeToConfigMap {
    optional  int32  adType  = 1;
    optional  SCAdsInteractiveAreaConfigV2_SwipeSensitivityConfig  config  = 2;
}

message SCAdsInteractiveAreaConfigV2_Inset {
    optional  double  px  = 1;
    optional  double  percentage  = 2;
}

message SCAdsInteractiveAreaConfigV2_Insets {
    optional  SCAdsInteractiveAreaConfigV2_Inset  topInset  = 1;
    optional  SCAdsInteractiveAreaConfigV2_Inset  rightInset  = 2;
    optional  SCAdsInteractiveAreaConfigV2_Inset  bottomInset  = 3;
    optional  SCAdsInteractiveAreaConfigV2_Inset  leftInset  = 4;
}

message SCAdsInteractiveAreaConfigV2_SwipeSensitivityConfig {
    optional  double  distanceThreshold  = 1;
    optional  double  velocityThreshold  = 2;
    optional  SCAdsInteractiveAreaConfigV2_Insets  edgeInsets  = 3;
    optional  int32  interactiveAreaType  = 4;
}

message SCAdsInventoryRequest {
    optional  int32  inventoryType  = 1;
    optional  string  inventoryId  = 2;
    optional  string  debugAdId  = 4;
    optional  GPBInt32Value  positionId  = 5;
    optional  int32  numAdsRequested  = 6;
    optional  bool  isUnskippableAdSlot  = 7;
    optional  int32  responseDataType  = 8;
    optional  SCAdsDiscoverChannelMetadata  discoverChannelMetadata  = 9;
    optional  SCAdsFeatureFlags  featureFlags  = 10;
    optional  bytes  clientInventoryRequestId  = 11;
    optional  bytes  publisherSlotId  = 12;
    optional  SCAdsRequestEngagementSignals  clientEngagementSignal  = 13;
    optional  int64  debugProductId  = 16;
    optional  bool  shouldSkipStoryAdRequest  = 17;
    optional  bool  isPrefetchRequest  = 18;
    optional  bytes  mockAdRequestParams  = 19;
    optional  int32  inventorySubType  = 20;
    repeated  int64  debugProductIdsArray  = 21[packed=true];
    optional  SCAdsInventoryRequestDebugFlags  inventoryRequestDebugFlags  = 22;
    optional  int32  numberOfSubCreatives  = 23;
    optional  SCAdsDisplayedPreRollAdInfo  displayedPreRollAdInfo  = 24;
    repeated  bytes  clientRequestIdsArray  = 25;
}

message SCAdsInventoryRequestDebugFlags {
    optional  bool  dpaTopSnapDynamic  = 1;
    optional  int32  creativeElementInteractionType  = 2;
    optional  int32  collectionDefaultFallbackInteractionType  = 3;
    optional  DpaStoryAdMetadata  dpaStoryAdMetadata  = 4;
    repeated  string  debugProductIdsArray  = 5;
}

message SCAdsInventoryResponse {
    optional  int32  errorCode  = 1;
    optional  bytes  requestId  = 2;
    optional  string  trackURL  = 3;
    optional  string  trackAndGetURL  = 4;
    repeated  SCAdsAdServeItem  itemsArray  = 5;
    optional  string  waterfall  = 6;
    optional  string  jsonTrackURL  = 7;
    optional  string  protoTrackURL  = 8;
    optional  string  batchTrackURL  = 9;
}

message SCAdsInventoryTrackRequest {
    optional  bytes  requestId  = 1;
    optional  int32  inventoryType  = 2;
    optional  GPBStringValue  inventoryId  = 3;
    repeated  SCAdsAdTrackItem  itemsArray  = 4;
    optional  bytes  adRequestClientId  = 5;
    optional  int32  inventorySubType  = 6;
}

message SCAdsLensCarouselImpressionTrack {
    optional  SCAdsSnapCreationInfo  snapCreationInfo  = 1;
    optional  GPBStringValue  lensSessionId  = 2;
    optional  GPBInt64Value  carouselSize  = 3;
    repeated  SCAdsLensImpressionTrack  lensImpressionsArray  = 4;
    optional  SCAdsDeviceInfo  deviceInfo  = 5;
    optional  int32  carouselExitEvent  = 6;
    optional  int32  cameraType  = 7;
    optional  GPBStringValue  lastInteractedLensId  = 8;
}

message SCAdsLensExplorerImpressionTrack {
    optional  SCAdsDeviceInfo  deviceInfo  = 1;
    repeated  SCAdsLensTileImpressionTrack  lensTileImpressionsArray  = 2;
}

message SCAdsLensImpressionTrack {
    optional  GPBStringValue  lensId  = 1;
    optional  GPBInt64Value  totalSwipedViewMillis  = 2;
    optional  GPBStringValue  lensOptionId  = 3;
    optional  GPBInt64Value  swipedOverCount  = 4;
    optional  GPBBoolValue  withSnapSend  = 5;
    optional  GPBBoolValue  withStoryPost  = 6;
    optional  GPBBoolValue  withMemoriesSave  = 7;
    optional  GPBBoolValue  withSelfieCamera  = 8;
    optional  GPBBoolValue  withWorldCamera  = 9;
    optional  GPBBoolValue  isAudioOn  = 10;
    optional  GPBInt64Value  lensIndexPos  = 11;
    optional  bytes  encryptedAdTrackData  = 12;
    optional  bytes  encryptedSponsoredUnlockableTargetingInfoData  = 13;
    optional  bytes  rankingId  = 14;
    optional  bytes  rankingData  = 15;
    optional  SCAdsUnlockableAttachmentImpression  attachmentImpression  = 16;
    optional  bytes  encGeoData  = 17;
    optional  GPBBoolValue  withAttachmentOpen  = 18;
    optional  int32  attachmentType  = 19;
    optional  GPBInt64Value  snapSendRecipientCount  = 20;
    optional  GPBInt64Value  snapSendCount  = 21;
    optional  GPBInt64Value  storyPostCount  = 22;
    optional  GPBInt64Value  memoriesSaveCount  = 23;
    optional  GPBInt64Value  captureTimeMillis  = 24;
    optional  GPBInt64Value  postCaptureTimeMillis  = 25;
    optional  GPBInt64Value  maxSwipeTimeMillis  = 26;
    optional  GPBInt64Value  maxContinuousTimeMillis  = 27;
    optional  GPBInt64Value  totalTimeMillis  = 28;
    optional  GPBInt64Value  reactionTimestamp  = 29;
    optional  GPBInt64Value  shareTimestamp  = 30;
    optional  GPBInt64Value  swipeUpTimestamp  = 31;
    optional  GPBInt64Value  saveTimestamp  = 32;
    optional  GPBInt64Value  screenshotTimestamp  = 33;
    optional  int32  unlockType  = 34;
    optional  bytes  lensCreativeId  = 35;
    optional  GPBInt64Value  firstFaceRenderTimestamp  = 36;
    optional  GPBInt64Value  firstTriggerTimestamp  = 37;
    optional  SCAdsLensPerformanceMetrics  lensPerformanceMetrics  = 38;
    optional  SCAdsAdFlagData  adFlagData  = 39;
    optional  SCAdsLensProductImpressionCollectionTrack  lensProductImpressionCollectionTrack  = 40;
    optional  int32  lensSource  = 41;
    repeated  SCAdsLensStackImpressionTrack  stackedImpressionsArray  = 42;
    optional  GPBBoolValue  isCachedBeforeSession  = 43;
    optional  GPBBoolValue  isCachedAfterSession  = 44;
    optional  bytes  noFillServeItemId  = 45;
    optional  GPBInt64Value  snapTakenCount  = 46;
    optional  GPBInt64Value  infoClickedCount  = 47;
    optional  GPBBoolValue  withMediaPlayPrecapture  = 48;
    optional  GPBBoolValue  withMediaPlayPostcapture  = 49;
    optional  GPBBoolValue  isRendered  = 50;
    optional  bytes  mixerRequestId  = 51;
    optional  GPBStringValue  lensNamespace  = 52;
    optional  int32  sponsoredType  = 53;
}

message SCAdsLensPerformanceMetrics {
    optional  GPBFloatValue  avgFps  = 1;
    optional  GPBInt64Value  lensApplyDelayMillis  = 2;
    optional  GPBInt64Value  frameProcessingTimeAvgMillis  = 3;
}

message SCAdsLensPosition {
    optional  int32  cameraType  = 1;
    optional  int32  position  = 2;
}

message SCAdsLensProductImpressionCollectionTrack {
    repeated  SCAdsLensProductImpressionTrack  productImpressionsArray  = 1;
}

message SCAdsLensProductImpressionTrack {
    optional  int64  productId  = 1;
    optional  GPBStringValue  option  = 2;
    optional  GPBInt32Value  positionIndex  = 3;
    optional  GPBInt32Value  swipedOverCount  = 4;
    optional  GPBInt64Value  totalTimeMillis  = 5;
    optional  GPBBoolValue  withSnapSend  = 6;
    optional  GPBBoolValue  withStoryPost  = 7;
    optional  GPBBoolValue  withSnapSave  = 8;
    optional  GPBBoolValue  productTapped  = 9;
    optional  GPBInt64Value  firstTriggerTimestamp  = 10;
}

message SCAdsLensRankingContext {
    repeated  SCAdsLensViewSessionContext  lensViewSessionArray  = 1;
    optional  int32  cameraDirection  = 2;
}

message SCAdsLensStackImpressionTrack {
    repeated  GPBStringValue  appliedLensIdsArray  = 1;
    optional  GPBInt64Value  snapSendCount  = 2;
    optional  GPBInt64Value  storyPostCount  = 3;
    optional  GPBInt64Value  memoriesSaveCount  = 4;
}

message SCAdsLensTileImpressionTrack {
    optional  GPBStringValue  lensSessionId  = 1;
    optional  SCAdsLensImpressionTrack  lensImpression  = 2;
    optional  SCAdsTileViewImpressionTrack  tileImpression  = 3;
}

message SCAdsLensViewSessionContext {
    optional  GPBInt64Value  startTimestampMillis  = 1;
    optional  GPBInt64Value  totalLensViewTimeMillis  = 2;
    optional  GPBInt64Value  totalLensAdViewTimeMillis  = 3;
    optional  GPBInt32Value  totalLensViewCount  = 4;
    optional  GPBInt32Value  totalLensAdViewCount  = 5;
    optional  GPBInt32Value  totalLensAdSwipeUpCount  = 6;
    optional  GPBInt32Value  totalLensSwipeUpCount  = 7;
    optional  GPBInt64Value  totalLensAdLongformViewTimeMillis  = 8;
    optional  GPBInt32Value  totalLensSnapTakenCount  = 9;
    optional  GPBInt32Value  totalAdLensSnapTakenCount  = 10;
    optional  GPBInt32Value  totalLensShareCount  = 11;
    optional  GPBInt32Value  totalAdLensShareCount  = 12;
    optional  GPBInt32Value  totalLensSnapSendCount  = 13;
    optional  GPBInt32Value  totalAdLensSnapSendCount  = 14;
}

message SCAdsLocalWebpageImpressionTrack {
    optional  SCAdsCommonSnapAdImpressionTrack  commonSnapAdImpression  = 1;
    optional  GPBInt32Value  pageHeight  = 2;
    optional  GPBInt32Value  pageHeightSeen  = 3;
    optional  GPBInt32Value  pageCurrentOffset  = 4;
}

message SCAdsLocation {
    optional  GPBDoubleValue  latitude  = 1;
    optional  GPBDoubleValue  longitude  = 2;
    optional  GPBInt32Value  accuracyInMeters  = 3;
    optional  GPBInt64Value  locationCapturedTimestampMillis  = 4;
}

message SCAdsLongformVideo {
    optional  int64  bottomSnapMediaDurationMs  = 1;
    optional  SCAdsMediaRenderInfo  videoRenderInfo  = 2;
    optional  SCAdsMediaRenderInfo  firstFrameImageInfo  = 3;
}

message SCAdsLongformVideoImpressionTrack {
    optional  SCAdsCommonSnapAdImpressionTrack  commonSnapAdImpression  = 1;
    optional  GPBFloatValue  longformMediaDurationSeconds  = 2;
}

message SCAdsMediaLocation {
    optional  int32  mediaLocationType  = 1;
    optional  bytes  mediaInfo  = 2;
}

message SCAdsMediaRenderInfo {
    optional  int32  mediaType  = 1;
    repeated  SCAdsMediaLocation  mediaLocationsArray  = 2;
}

message SCAdsMediaTopSnap {
    optional  int64  topSnapMediaDurationMs  = 1;
    optional  SCAdsMediaRenderInfo  topSnapRenderInfo  = 2;
    optional  SCAdsMediaRenderInfo  topSnapThumbnailInfo  = 3;
}

message SCAdsMidRollStoryAdConfig {
    optional  bool  enablePublisherStories  = 1;
    optional  bool  enableShows  = 2;
    optional  uint32  additionalNumberOfSnapsWithPreparedMedia  = 3;
}

message SCAdsMixerInfo {
    optional  uint32  storyOffset  = 1;
    optional  string  version  = 2;
    optional  uint32  minAdsPos  = 3;
    optional  int32  feedType  = 4;
    optional  SCAdsSubsBrandSafety  subsBrandSafety  = 5;
}

message SCAdsMockAdRequestParams {
    optional  int32  debugAdType  = 1;
    optional  int32  debugErrorCode  = 2;
    optional  bool  forcePoliticalAd  = 3;
}

message SCAdsMultiAdPodsConfig {
    optional  bool  enable  = 1;
    optional  uint32  adsPerPod  = 2;
    repeated  int32  supportedInventoryTypesArray  = 3[packed=true];
    optional  bool  showAdPosition  = 4;
    optional  bool  allowPartialMediaDownload  = 5;
    optional  double  timeGapBetweenMultiAdPods  = 6;
    repeated  int32  supportedAdProductTypesArray  = 7[packed=true];
    optional  bool  useServerInsertion  = 8;
    optional  int32  publisherMultiAuctionRequestCount  = 9;
    optional  int32  showsMultiAuctionRequestCount  = 10;
}

message SCAdsMultiClickSkipAdConfig {
    optional  bool  enableInFus  = 1;
    optional  bool  enableInCi  = 2;
    optional  float  durationThreshold  = 3;
    optional  uint32  skipSegments  = 4;
    optional  float  eovThreshold  = 5;
    optional  int32  fastForwardType  = 6;
    optional  float  fastForwardPlaybackRate  = 7;
    optional  float  fastForwardDurationMilli  = 8;
    optional  bool  enableMovingProgressBar  = 9;
}

message SCAdsNetwork {
    optional  int32  connectionType  = 1;
    optional  string  mccMnc  = 2;
    optional  bytes  clientIp  = 3;
    optional  string  carrier  = 4;
    optional  int64  kiloBytesPerSecond  = 5;
    optional  int32  cellularNetworkType  = 6;
}

message SCAdsNonEncryptedCategoryEventBucketDefinition {
    optional  string  categoryBlock  = 1;
    optional  int32  event  = 2;
    repeated  SCAdsBucketDefinition  bucketDefinitionsArray  = 3;
}

message SCAdsNonEncryptedContentCategoryBlock {
    repeated  string  contentIdArray  = 1;
    optional  string  categoryBlock  = 2;
}

message SCAdsOnDeviceAnonymizedId {
    optional  bytes  encryptedAnonymizedId  = 1;
    optional  int64  batchedConversionEventsDateTsMs  = 2;
    optional  int64  generationNumber  = 3;
}

message SCAdsOnDeviceAppIdObfuscationRequest {
    repeated  bytes  hashedAppIdsArray  = 1;
}

message SCAdsOnDeviceAppIdObfuscationResponse {
    repeated  bytes  hashedAppIdsArray  = 1;
}

message SCAdsOnDeviceConversionEvent {
    optional  bytes  eventId  = 1;
    optional  int32  eventType  = 2;
    optional  bytes  pageTopDomain  = 3;
    repeated  int32  slcsArray  = 5[packed=true];
}

message SCAdsOnDeviceConversionEventRequest {
    repeated  bytes  decryptedAnonymizedIdsArray  = 1;
}

message SCAdsOnDeviceConversionEventResponse {
    repeated  SCAdsEncryptedConversionEventInfo  encryptedConversionEventListArray  = 1;
}

message SCAdsOnDeviceInfo {
    optional  bytes  onDeviceMatchKey  = 1;
    optional  int32  eventType  = 2;
    optional  SCAdsDifferentialPrivacyParameters  dpParams  = 3;
    optional  bool  enableSidgExclusion  = 4;
    optional  bool  enableCanOpenURLExclusion  = 5;
}

message SCAdsOnDeviceInventoryConfig {
    optional  int32  supportedInventoryType  = 1;
    optional  int32  multiAuctionSize  = 2;
    optional  bool  onDeviceEnabled  = 3;
    optional  bool  canOpenURLEnabled  = 4;
}

message SCAdsOnDeviceInventoryConfigs {
    repeated  SCAdsOnDeviceInventoryConfig  onDeviceInventoryConfigsArray  = 1;
}

message SCAdsOnDevicePublicKey {
    optional  bytes  publicKey  = 1;
    optional  int64  keyGenerationTsMs  = 2;
    optional  int32  publicKeyType  = 3;
}

message SCAdsOnDeviceRequest {
    optional  SCAdsOnDevicePublicKey  onDevicePublicKey  = 1;
    optional  int64  latestGenerationNumber  = 2;
    optional  int64  serverLastFetchTsMs  = 3;
}

message SCAdsOnDeviceResponse {
    repeated  SCAdsOnDeviceAnonymizedId  onDeviceAnonymizedIdsArray  = 1;
    optional  int64  serverLastFetchTsMs  = 2;
    optional  SCAdsOnDeviceInventoryConfigs  onDeviceInventoryConfigs  = 3;
    optional  string  appIdSlcMappingURL  = 4;
    optional  float  slcDpNoise  = 5;
    optional  string  slcExperimentName  = 6;
    optional  float  aicDpNoiseBWeekly  = 7;
    optional  float  aicDpNoiseT  = 8;
}

message SCAdsOrganicAdToken {
    repeated  int64  productIdsArray  = 1[packed=true];
    optional  SCAdsStoreContext  storeContext  = 2;
}

message SCAdsPayToPromoteInfo {
    optional  int32  corpus  = 1;
    optional  string  publisherId  = 2;
    optional  string  storyId  = 3;
}

message SCAdsPdpContext {
    optional  int64  productId  = 1;
    optional  bytes  organicAdToken  = 2;
}

message SCAdsPerStoryConfig {
    optional  bool  isControl  = 1;
    optional  string  cofKeyPrefix  = 2;
    optional  string  strategy  = 3;
}

message SCAdsPetraFeatureFlags {
    repeated  int32  capableAdTypesArray  = 1[packed=true];
    repeated  int32  capableTopsnapMediaTypesArray  = 2[packed=true];
    repeated  int32  capableNativeTemplateTypesArray  = 3[packed=true];
}

message SCAdsPetraTrackInfo {
    optional  string  queryId  = 1;
    optional  int32  nativeTemplateType  = 2;
}

message SCAdsPoliticalAdInfo {
    optional  string  payingAdvertiserName  = 1;
}

message SCAdsPredictionStudy {
    optional  string  experimentId  = 1;
    optional  int64  studyVersion  = 2;
    optional  string  modelId  = 3;
}

message SCAdsPreferences {
    optional  bool  limitAdTracking  = 1;
    optional  bool  audienceMatchOptOut  = 2;
    optional  bool  externalActivityMatchOptOut  = 3;
    optional  bool  thirdPartyAdNetworkOptOut  = 4;
}

message SCAdsProfileInfo {
    optional  bytes  profileId  = 1;
    optional  SCAdsMediaRenderInfo  profileIconRenderInfo  = 2;
    optional  bool  isDefaultProfileLogo  = 3;
}

message SCAdsProtoLeadGenerationFieldIdentifier {
    optional  int32  validationType  = 1;
    optional  int32  standardType  = 2;
    optional  GPBStringValue  customId  = 3;
}

message SCAdsProtoLeadGenerationImpressionTrack {
    optional  SCAdsCommonSnapAdImpressionTrack  commonSnapAdImpression  = 1;
    optional  SCAdsProtoLeadGenerationSubmittedLead  submittedLead  = 2;
}

message SCAdsProtoLeadGenerationSubmittedField {
    optional  SCAdsProtoLeadGenerationFieldIdentifier  identifier  = 1;
    optional  string  value  = 2;
    repeated  string  subValues  = 3;
}

message SCAdsProtoLeadGenerationSubmittedLead {
    repeated  SCAdsProtoLeadGenerationSubmittedField  submittedFieldsArray  = 1;
    repeated  bool  consentCheckboxes  = 2;
}

message SCAdsProtoPayToPromoteImpressionTrack {
}

message SCAdsProtoRenderLeadGeneration {
    optional  string  advertiserFormDescription  = 1;
    repeated  SCAdsProtoRenderLeadGeneration_FieldRequest  requestedFieldsArray  = 2;
    optional  string  privacyPolicyURL  = 3;
    optional  SCAdsProtoRenderLeadGeneration_CustomLegalDisclaimer  customLegalDisclaimer  = 4;
    optional  SCAdsMediaRenderInfo  bannerRenderInfo  = 5;
    optional  SCAdsMediaRenderInfo  iconRenderInfo  = 6;
}

message SCAdsProtoRenderLeadGeneration_CustomLegalDisclaimer {
    optional  string  title  = 1;
    optional  string  body  = 2;
    repeated  SCAdsProtoRenderLeadGeneration_LegalConsentCheckbox  consentCheckboxesArray  = 3;
}

message SCAdsProtoRenderLeadGeneration_FieldRequest {
    optional  SCAdsProtoLeadGenerationFieldIdentifier  identifier  = 1;
    optional  bool  required  = 2;
    optional  string  label  = 3;
    repeated  string  subFieldLabelsArray  = 4;
}

message SCAdsProtoRenderLeadGeneration_LegalConsentCheckbox {
    optional  string  label  = 1;
    optional  bool  required  = 2;
}

message SCAdsPublisherRequestConfig {
    optional  int32  multiauctionSize  = 1;
    optional  int32  mediaBufferSize  = 2;
    optional  int32  requestBufferSize  = 3;
}

message SCAdsRTBPricingData {
    optional  int64  bidMicroDollars  = 1;
    optional  double  finalBid  = 2;
    optional  double  runnerUpBid  = 3;
    optional  double  paidPrice  = 4;
    optional  double  internalFloor  = 5;
    optional  double  bidRequestFloor  = 6;
    optional  double  eventProb  = 7;
    optional  double  lambda  = 8;
    optional  double  gamma  = 9;
    optional  double  phi  = 10;
    optional  string  exchange  = 11;
}

message SCAdsRTBTrackData {
    optional  int32  rtbTrackType  = 1;
    optional  SCAdsRTBPricingData  rtbPricingData  = 2;
}

message SCAdsReminder {
    optional  string  actionCta  = 1;
    optional  GPBInt64Value  triggerTimestamp  = 2;
    optional  SCAdsReminderLocation  triggerLocation  = 3;
    optional  string  eventName  = 4;
    optional  string  eventDescription  = 5;
    optional  SCAdsReminderAttachment  reminderAttachment  = 6;
}

message SCAdsReminderAttachment {
    optional  SCAdsDeeplink  deepLink  = 1;
    optional  SCAdsWebViewAttachment  webviewAttachment  = 2;
}

message SCAdsReminderLocation {
    optional  GPBDoubleValue  latitude  = 1;
    optional  GPBDoubleValue  longitude  = 2;
    optional  GPBDoubleValue  radius  = 3;
}

message SCAdsReminderTrack {
    optional  SCAdsCommonSnapAdImpressionTrack  commonSnapAdImpression  = 1;
}

message SCAdsRemoteWebpageImpressionTrack {
    optional  SCAdsCommonSnapAdImpressionTrack  commonSnapAdImpression  = 1;
    optional  GPBBoolValue  loadedOnEntry  = 2;
    optional  GPBBoolValue  loadedOnExit  = 3;
    optional  GPBFloatValue  visibleLoadTime  = 4;
    optional  GPBBoolValue  pixelCookieSet  = 5;
    optional  GPBInt32Value  initalPageStatusCode  = 6;
    optional  GPBFloatValue  webpageHalfOpenViewedSeconds  = 7;
    optional  GPBBoolValue  webpageFatalError  = 8;
    optional  GPBBoolValue  apkDownloaded  = 9;
    optional  SCAdsWebViewContext  webviewContext  = 10;
    optional  int32  webviewExitMethod  = 11;
}

message SCAdsRendition {
    optional  int32  height  = 1;
    optional  int32  width  = 2;
    optional  string  mediaURL  = 3;
    optional  int32  fileSize  = 4;
}

message SCAdsRenditionV2 {
    optional  int32  height  = 1;
    optional  int32  width  = 2;
    optional  string  URL  = 3;
    optional  int32  fileSize  = 4;
    optional  string  minimumClientVersion  = 5;
    optional  int32  type  = 6;
}

message SCAdsRequestEngagementFriendUserStories {
    optional  GPBInt32Value  numUnviewedFriendStories  = 1;
}

message SCAdsRequestEngagementSignals {
    optional  SCAdsRequestEngagementFriendUserStories  fus  = 1;
}

message SCAdsResponseDataType {
}

message SCAdsRetroRequestConfig {
    optional  bool  persistenceEnabled  = 1;
    optional  bool  retryEnabled  = 2;
    optional  int32  maxFileAgeMillis  = 3;
    optional  int32  maxFileSizeBytes  = 4;
    optional  int32  maxPersistedRequests  = 5;
    optional  int64  initialRetryDelayMillis  = 6;
    optional  int32  maxNetworkRetriesPersistence  = 7;
    optional  int32  maxNetworkRetries  = 8;
    optional  int64  maxAgeMillis  = 9;
    optional  int32  maxRetroRetries  = 10;
    optional  int64  retryDelaySeconds  = 11;
}

message SCAdsSCTAd {
    optional  int64  unlockableId  = 1;
    optional  int64  mediaUnlockableId  = 2;
    optional  string  brandName  = 3;
    optional  bytes  creatorUserId  = 4;
    optional  bool  isRegulatedContent  = 5;
    optional  SCAdsSCTAttachment  attachment  = 6;
}

message SCAdsSCTAttachment {
    optional  SCAdsAppInstall  appInstall  = 1;
    optional  SCAdsLongformVideo  longformVideo  = 2;
    optional  SCAdsWebViewAttachment  webviewAttachment  = 3;
    optional  SCAdsDeeplink  deepLink  = 4;
    optional  string  callToAction  = 5;
    optional  int32  attachmentType  = 6;
}

message SCAdsSKAdNetworkAttribution {
    optional  string  skAdNetworkVersion  = 3;
    optional  GPBInt32Value  skAdNetworkCampaignIdentifier  = 4;
    optional  GPBInt64Value  skAdNetworkTimestampMs  = 5;
    optional  bytes  skAdNetworkNonce  = 6;
    optional  bytes  skAdNetworkAttributionSignature  = 7;
    optional  int32  signatureContentTransformation  = 8;
    optional  string  skAdNetworkViewThroughVersion  = 9;
    optional  bytes  skAdNetworkViewThroughNonce  = 10;
    optional  bytes  skAdNetworkViewThroughAttributionSignature  = 11;
    optional  GPBInt32Value  skAdNetworkSourceIdentifier  = 12;
}

message SCAdsSKOverlayPreloadConfig {
    optional  bool  enabled  = 1;
    optional  float  preloadWindowLevel  = 2;
    optional  float  displayWindowLevel  = 3;
    optional  int32  maxNumPreloadedOverlays  = 4;
}

message SCAdsScreenDimension {
    optional  GPBInt32Value  height  = 1;
    optional  GPBInt32Value  width  = 2;
}

message SCAdsShowcaseAttachment {
    optional  SCAdsWebViewAttachment  webviewAttachment  = 1;
    optional  SCAdsDeeplink  deeplink  = 2;
    optional  SCAdsShowcaseCallout  showcaseCallout  = 3;
    optional  bytes  showcaseContextToken  = 4;
}

message SCAdsShowcaseCallout {
    optional  string  text  = 1;
}

message SCAdsShowcaseImpressionTrack {
    optional  SCAdsCommonSnapAdImpressionTrack  commonSnapAdImpression  = 1;
    optional  GPBFloatValue  totalCatalogViewTime  = 2;
    optional  GPBFloatValue  totalShowcaseWebviewTime  = 3;
    optional  GPBInt32Value  productsViewed  = 4;
    repeated  SCAdsShowcaseProductInteraction  productInteractionsArray  = 5;
    optional  GPBBoolValue  storeOpened  = 6;
    optional  GPBFloatValue  totalStoreViewTime  = 7;
    optional  GPBInt32Value  lastViewedIndex  = 8;
}

message SCAdsShowcaseProductInteraction {
    optional  GPBInt32Value  index  = 1;
    optional  GPBStringValue  productId  = 2;
}

message SCAdsSingleTrack {
    optional  bytes  encryptedUserTrackData  = 1;
    optional  SCAdsInventoryTrackRequest  inventoryTrackRequest  = 2;
    optional  GPBInt64Value  creationTimestampMs  = 3;
    optional  GPBInt32Value  numberOfAttempts  = 4;
}

message SCAdsSnapCreationInfo {
    optional  GPBInt64Value  camera  = 1;
    optional  GPBBoolValue  isAudioOn  = 2;
    optional  int32  mediaType  = 3;
    optional  GPBInt64Value  snapDurationMillis  = 4;
    optional  GPBInt64Value  snapPreviewMillis  = 5;
    optional  GPBInt64Value  geofilterLoadedCount  = 6;
    optional  int32  filterCarouselEntryDirection  = 7;
    optional  GPBInt64Value  filterSwipeCount  = 8;
}

message SCAdsSnapcodeInfo {
    optional  string  scancodeId  = 1;
    optional  string  scancodeVersion  = 2;
}

message SCAdsStoreContext {
    optional  bytes  storeId  = 1;
    optional  bytes  categoryId  = 2;
}

message SCAdsStoryAd {
    optional  string  placementId  = 1;
    optional  bytes  compositeCreativeId  = 2;
    optional  string  tileBaseURL  = 3;
    optional  string  tileImageURLPostfix  = 4;
    optional  string  tileLogoURLPostfix  = 5;
    optional  string  tileHeadline  = 6;
    optional  bool  shouldLoop  = 7;
}

message SCAdsStoryConfig {
    repeated  SCAdsStrategyConfig  ads  = 1;
}

message SCAdsStoryDocConfig {
    optional  string  strategy  = 1;
}

message SCAdsStoryImpressionTrack {
    optional  GPBFloatValue  timeViewedSeconds  = 1;
    optional  GPBFloatValue  mediaDurationSeconds  = 2;
    optional  GPBInt32Value  snapCount  = 3;
    optional  GPBInt32Value  viewedSnapIndex  = 4;
    optional  int32  exitEvent  = 5;
    optional  GPBInt32Value  uniqueSwipeUps  = 6;
    optional  GPBInt32Value  totalSwipeUps  = 7;
    optional  GPBBoolValue  isAudioOn  = 8;
    repeated  SCAdsStorySnapImpressionTrack  snapImpressionsArray  = 9;
    optional  SCAdsTileImpressionTrack  tileImpression  = 10;
    optional  bytes  creativeId  = 11;
}

message SCAdsStoryItem {
    optional  bool  isSubscribed  = 2;
    optional  bool  isPinned  = 3;
    optional  bool  isBrandSafeQualified  = 4;
    optional  double  finalScore  = 5;
    optional  int32  corpus  = 6;
    optional  uint64  fp  = 7;
    repeated  SCAdsStoryItem_SccTagWeightPair  sccTagsArray  = 8;
    optional  float  userEngagementScore  = 9;
}

message SCAdsStoryItem_SccTagWeightPair {
    optional  int32  sccTag  = 1;
    optional  float  weight  = 2;
}

message SCAdsStorySnapImpressionTrack {
    optional  GPBInt32Value  snapIndex  = 1;
    optional  GPBInt32Value  swipeUpCount  = 2;
    optional  int32  skipEvent  = 3;
    optional  int32  adType  = 4;
    optional  SCAdsThreeVImpressionTrack  threeV  = 5;
    optional  SCAdsAppInstallImpressionTrack  appInstall  = 6;
    optional  SCAdsLongformVideoImpressionTrack  longformVideo  = 7;
    optional  SCAdsRemoteWebpageImpressionTrack  remoteWebpage  = 8;
    optional  SCAdsLocalWebpageImpressionTrack  localWebpage  = 9;
    optional  SCAdsDeepLinkImpressionTrack  deepLink  = 10;
    optional  SCAdsSubscribeImpressionTrack  subscribe  = 11;
    optional  SCAdsAdToLensImpressionTrack  adToLens  = 12;
    optional  SCAdsAdToCallImpressionTrack  adToCall  = 13;
    optional  SCAdsAdToMessageImpressionTrack  adToMessage  = 14;
    optional  SCAdsShowcaseImpressionTrack  showcase  = 15;
}

message SCAdsStrategyConfig {
    repeated  float  adArray  = 1[packed=true];
}

message SCAdsSubsBrandSafety {
    optional  int32  mode  = 1;
    optional  bool  isBrandSafe  = 2;
}

message SCAdsSubscribeImpressionTrack {
    optional  SCAdsCommonSnapAdImpressionTrack  commonSnapAdImpression  = 1;
    optional  GPBBoolValue  channelSubscribedEndStatus  = 2;
}

message SCAdsSwipeSensitivity {
    optional  GPBFloatValue  startSwipeTapPositionXRelative  = 1;
    optional  GPBFloatValue  startSwipeTapPositionX  = 2;
    optional  GPBFloatValue  startSwipeTapPositionYRelative  = 3;
    optional  GPBFloatValue  startSwipeTapPositionY  = 4;
    optional  GPBFloatValue  endSwipeTapPositionXRelative  = 5;
    optional  GPBFloatValue  endSwipeTapPositionX  = 6;
    optional  GPBFloatValue  endSwipeTapPositionYRelative  = 7;
    optional  GPBFloatValue  endSwipeTapPositionY  = 8;
    optional  GPBFloatValue  swipeTapDuration  = 9;
}

message SCAdsThirdPartyAdNetworkInfo {
    optional  bytes  requestSignals  = 2;
    optional  int32  contentTransformation  = 3;
    optional  int32  adNetworkType  = 4;
}

message SCAdsThirdPartyAdNetworkTrackInfo {
    optional  SCAdsPetraTrackInfo  petraTrackInfo  = 1;
}

message SCAdsThirdPartyExposureLoggingConfig {
    optional  bool  enabled  = 1;
    optional  SCAdsThirdPartyExposureLoggingConfig_AppsFlyerExposureLoggingConfig  appsflyerConfig  = 2;
}

message SCAdsThirdPartyExposureLoggingConfig_AppsFlyerExposureLoggingConfig {
    optional  bool  enabled  = 1;
    optional  string  apiKey  = 2;
    optional  string  endpoint  = 3;
    optional  bool  requiresIdfa  = 4;
}

message SCAdsThreeVImpressionTrack {
    optional  SCAdsCommonSnapAdImpressionTrack  commonSnapAdImpression  = 1;
}

message SCAdsTileImpressionTrack {
    optional  GPBBoolValue  isViewed  = 1;
    optional  GPBBoolValue  isViewedAppSession  = 2;
    optional  GPBBoolValue  tileTapped  = 3;
    optional  GPBFloatValue  tileTimeViewedSeconds  = 4;
    optional  GPBBoolValue  hasCta  = 5;
    optional  GPBBoolValue  ctaTapped  = 6;
}

message SCAdsTileViewImpressionTrack {
    optional  GPBStringValue  lensId  = 1;
    optional  bytes  encryptedAdTrackData  = 2;
    optional  bytes  encryptedSponsoredUnlockableTargetingInfoData  = 3;
    optional  bytes  rankingId  = 4;
    optional  bytes  rankingData  = 5;
    optional  bytes  encGeoData  = 6;
    optional  bytes  lensCreativeId  = 7;
    optional  SCAdsAdFlagData  adFlagData  = 8;
    optional  GPBInt64Value  tileTimeMillis  = 9;
    optional  GPBBoolValue  tileTapped  = 10;
    optional  GPBBoolValue  launchedSelfie  = 11;
    optional  GPBInt64Value  tileIndexPos  = 12;
    optional  GPBInt64Value  tileMaxViewedPercentage  = 13;
}

message SCAdsTopSnap {
    optional  SCAdsWebView  webviewTopSnap  = 1;
    optional  SCAdsMediaTopSnap  mediaTopSnap  = 2;
    optional  string  swipeUpArrowText  = 3;
    optional  GPBBoolValue  enableComposerTopSnap  = 4;
    optional  int32  itemType  = 5;
}

message SCAdsTopsnapVolumes {
    optional  GPBFloatValue  maxVolumeAtStart  = 1;
    optional  GPBFloatValue  maxVolumeAt25PercentMediaDuration  = 2;
    optional  GPBFloatValue  maxVolumeAt50PercentMediaDuration  = 3;
    optional  GPBFloatValue  maxVolumeAt75PercentMediaDuration  = 4;
    optional  GPBFloatValue  maxVolumeAt97PercentMediaDuration  = 5;
    optional  GPBFloatValue  maxVolumeAt100PercentMediaDuration  = 6;
}

message SCAdsTrackRequest {
    optional  bytes  encryptedUserTrackData  = 1;
    optional  SCAdsApplication  application  = 2;
    optional  SCAdsPreferences  preferences  = 3;
    optional  SCAdsDevice  device  = 4;
    optional  SCAdsNetwork  network  = 5;
    repeated  SCAdsInventoryTrackRequest  inventoryTrackRequestsArray  = 6;
    optional  GPBBoolValue  isDebug  = 7;
    optional  GPBInt64Value  creationTimestampMs  = 8;
    optional  GPBInt32Value  numberOfAttempts  = 9;
    optional  GPBStringValue  serializedV1Track  = 10;
    optional  SCAdsAdKitFeatureFlags  adkitFeatureFlags  = 11;
    optional  bytes  encryptedUserData  = 12;
    optional  bytes  clientRequestId  = 13;
}

message SCAdsTrackResponse {
    optional  string  waterfall  = 1;
    optional  int32  statusCode  = 2;
}

message SCAdsUnlockableAttachmentImpression {
    optional  SCAdsUnlockableLongformVideoView  longformVideoImpression  = 1;
    optional  SCAdsUnlockableLongformWebviewView  remoteWebpageImpression  = 2;
    optional  SCAdsUnlockableLongformAppInstall  appInstallImpression  = 3;
    optional  SCAdsUnlockableDeepLink  deepLinkImpression  = 4;
}

message SCAdsUnlockableDeepLink {
    optional  GPBInt64Value  openTimestampMs  = 1;
    optional  GPBBoolValue  redirectToStore  = 2;
    optional  GPBBoolValue  redirectToWebview  = 3;
}

message SCAdsUnlockableLongformAppInstall {
    optional  GPBInt64Value  openTimestampMs  = 1;
    optional  GPBBoolValue  loadedOnEntry  = 2;
    optional  GPBBoolValue  loadedOnExit  = 3;
    optional  GPBFloatValue  visibleLoadTimeMs  = 4;
}

message SCAdsUnlockableLongformVideoView {
    optional  GPBFloatValue  viewTimeSec  = 1;
    optional  GPBFloatValue  mediaDurationSec  = 2;
    optional  GPBInt64Value  renderedTimestampMs  = 3;
    optional  GPBInt64Value  openTimestampMs  = 4;
}

message SCAdsUnlockableLongformWebviewView {
    optional  GPBFloatValue  viewTimeSec  = 1;
    optional  GPBInt64Value  renderedTimestampMs  = 2;
    optional  GPBBoolValue  loadedOnEntry  = 3;
    optional  GPBBoolValue  loadedOnExit  = 4;
    optional  GPBInt64Value  openTimestampMs  = 5;
    optional  GPBBoolValue  pixelCookieSet  = 6;
}

message SCAdsUnlockableViewImpressionTrack {
    optional  GPBFloatValue  timeViewedSeconds  = 1;
    optional  GPBFloatValue  mediaDurationSeconds  = 2;
    optional  bytes  encGeoData  = 3;
    optional  GPBBoolValue  isAudioOn  = 4;
    optional  int32  snapViewType  = 5;
    optional  SCAdsDeviceInfo  deviceInfo  = 6;
    optional  int32  snappableInviteAction  = 7;
}

message SCAdsUnskippableAdsConfig {
    optional  bool  enableUnskippableAds  = 1;
    optional  double  eovThreshold  = 2;
    optional  double  timeGapThreshold  = 3;
    optional  double  unskippableTime  = 4;
}

message SCAdsUser {
    optional  SCAdsUserData  userData  = 1;
    optional  bytes  encryptedUserData  = 2;
    optional  bool  isTestGroupQa  = 3;
    optional  bytes  fsnEncryptedUserData  = 4;
    optional  bytes  said  = 5;
    optional  int32  budgetSegmentId  = 6;
}

message SCAdsUserData {
    optional  bytes  said  = 1;
    optional  bool  isAdsHoldout  = 2;
    optional  SCAdsDebugConfig  debugConfig  = 3;
    optional  SCAdsABTest  abTest  = 4;
    optional  bool  isEmployee  = 5;
    optional  bool  isNewUser  = 6;
    optional  string  targetingToken  = 7;
    optional  GPBInt64Value  createdTimestampMillis  = 8;
    optional  GPBInt32Value  age  = 9;
    optional  int32  gender  = 10;
    optional  int32  snapUserStatus  = 11;
    optional  bool  storyAdsInUserStoriesEnabled  = 12;
    optional  bool  isPartiallyFilled  = 13;
    optional  bytes  userId  = 14;
    optional  bytes  clientIp  = 15;
}

message SCAdsViewContext {
    optional  int32  exitEvent  = 1;
    optional  int32  viewSource  = 2;
    optional  GPBInt32Value  storiesLeft  = 3;
    optional  int32  renderedPosition  = 4;
    optional  int32  intendedPosition  = 5;
    optional  GPBInt32Value  adIndexPos  = 6;
    optional  GPBInt32Value  snapIndex  = 7;
    optional  GPBInt32Value  snapCount  = 8;
    optional  GPBStringValue  editionId  = 9;
    optional  GPBStringValue  publisherId  = 10;
    optional  GPBStringValue  posterId  = 11;
    optional  GPBFloatValue  audioPlaybackVolume  = 12;
    optional  GPBInt32Value  autoAdvanceIndex  = 13;
    optional  GPBInt32Value  autoAdvanceCount  = 14;
    optional  GPBBoolValue  isArchivedEdition  = 15;
    optional  GPBBoolValue  useTrackAndGet  = 16;
    optional  int32  attachmentTriggerType  = 17;
    optional  int32  operaType  = 18;
    optional  GPBBoolValue  isOptionalAdBreak  = 19;
    optional  int32  operaActionBarType  = 20;
    optional  GPBInt32Value  placementInPod  = 21;
    optional  GPBInt32Value  adsPerPod  = 22;
    optional  int32  precedingStoryType  = 23;
    optional  int32  adInsertionDelayedReason  = 24;
    optional  GPBBoolValue  isWithinPayToPromoteContent  = 25;
    optional  GPBStringValue  profileId  = 26;
    optional  GPBStringValue  organicAssetId  = 27;
    optional  int32  organicAssetType  = 28;
    optional  GPBStringValue  organicContextAssetId  = 29;
    optional  int32  organicContextAssetType  = 30;
    optional  GPBStringValue  parentAdId  = 31;
    optional  GPBStringValue  organicContextProfileId  = 32;
    optional  GPBBoolValue  subscriberStatus  = 33;
    optional  GPBStringValue  gameBuildId  = 34;
    optional  GPBStringValue  podId  = 35;
    optional  GPBInt32Value  podIndexPos  = 36;
    optional  GPBInt32Value  adsPerPodOriginal  = 37;
}

message SCAdsViewSessionContext {
    optional  int64  startTimestampMillis  = 1;
    optional  int32  viewSource  = 2;
    optional  GPBInt64Value  timeSinceSessionStartMillis  = 3;
    optional  GPBInt64Value  totalAdSnapViewTimeMillis  = 4;
    optional  GPBInt32Value  totalSnapViewCount  = 5;
    optional  GPBInt32Value  totalAdSnapViewCount  = 6;
    optional  GPBInt32Value  totalAdSwipeUpCount  = 7;
    optional  GPBInt32Value  totalSwipeUpCount  = 8;
    optional  GPBInt64Value  totalAdLongformViewTimeMillis  = 9;
    optional  GPBInt64Value  totalLongformViewTimeMillis  = 10;
    optional  GPBInt32Value  totalStoriesViewCount  = 11;
    optional  GPBInt32Value  availableStoriesCount  = 12;
    optional  int32  exitEvent  = 13;
    optional  GPBBoolValue  isLastSnapAd  = 14;
    repeated  SCAdsViewedAdContext  viewedAdArray  = 15;
}

message SCAdsViewedAdContext {
    optional  int32  adExitEvent  = 1;
    optional  GPBInt32Value  adLoadingSpinnerTimeMillis  = 2;
    optional  GPBInt32Value  adViewTimeMillis  = 3;
    optional  GPBBoolValue  adSwipeUp  = 4;
}

message SCAdsWebView {
    optional  string  URL  = 1;
    repeated  SCAdsCookieInfo  cookieInfoArray  = 2;
}

message SCAdsWebViewAttachment {
    optional  SCAdsWebView  webview  = 1;
    optional  bool  blockWebviewPreloading  = 2;
    optional  bool  allowAutoFill  = 3;
    optional  bool  allowApkDownload  = 5;
    optional  SCAdsPdpContext  pdpContext  = 6;
    optional  int32  webBrowserType  = 7;
    optional  SCAdsWebViewMetadata  webviewMetadata  = 8;
    optional  bool  allowClickId  = 9;
    optional  bool  enableLightningModeHtmlPrefetch  = 10;
    optional  GPBBoolValue  enableWebviewAdBackgroundContinueLoad  = 11;
}

message SCAdsWebViewAutofillInfo {
    optional  GPBBoolValue  autofillConsentPromptEvent  = 1;
    optional  GPBBoolValue  autofillConsentPromptAcceptance  = 2;
    optional  GPBInt32Value  autofillInsertedCount  = 3;
    optional  GPBBoolValue  autofillDetected  = 4;
    optional  GPBInt32Value  autofillDetectedCount  = 5;
    repeated  GPBStringValue  autofillDetectedListArray  = 6;
    repeated  GPBStringValue  autofillInsertedListArray  = 7;
    optional  GPBBoolValue  autofillSavePromptEvent  = 8;
    optional  GPBBoolValue  autofillSavePromptAcceptance  = 9;
    optional  GPBBoolValue  autofillInsertionEdit  = 10;
}

message SCAdsWebViewContext {
    optional  bool  pageViewGaHit  = 1;
    optional  bool  gaHitCounts  = 2;
    optional  int64  domDownloadLatencyMillis  = 3;
    optional  int64  domLoadLatencyMillis  = 4;
    optional  bool  hasSubsequentNavigation  = 5;
    optional  bool  prefetched  = 6;
    repeated  GPBStringValue  gaHitTypesArray  = 7;
    optional  GPBInt32Value  loadProgress  = 8;
    optional  int64  firstContentfulPaintLatency  = 9;
    optional  SCAdsWebViewLoadInfo  webViewLoadInfo  = 10;
    optional  GPBBoolValue  gaIncluded  = 11;
    optional  GPBInt64Value  firstGaTriggerLatency  = 12;
    optional  int32  resourcesPrefetchCount  = 13;
    optional  int32  prefetchMode  = 14;
    optional  bool  openInBrowser  = 15;
    optional  bool  landingPageGaPageViewHit  = 16;
    optional  GPBInt64Value  firstPixelTriggerLatency  = 17;
    optional  int32  webBrowserType  = 18;
    optional  bool  hasJsBasedPerformanceTiming  = 19;
    optional  SCAdsWebViewAutofillInfo  webViewAutofillInfo  = 20;
    optional  GPBInt64Value  firstGaHitTsMs  = 21;
    optional  GPBInt64Value  firstAdobePingTsMs  = 22;
    optional  GPBInt64Value  adobePingCount  = 23;
    optional  GPBInt64Value  htmlPrefetchStartTsMs  = 24;
    optional  GPBInt64Value  htmlPrefetchEndTsMs  = 25;
    optional  bool  loadPrefetchedHtml  = 26;
    optional  string  rawPerformanceMetrics  = 27;
    optional  bool  perfMetricsLoadError  = 28;
    optional  string  perfMetricLoadErrorReason  = 29;
    optional  GPBBoolValue  lightningModeEnableServerSetting  = 30;
    optional  GPBStringValue  lightningModeURL  = 31;
}

message SCAdsWebViewInHouseCache {
    optional  string  pageURL  = 1;
}

message SCAdsWebViewLoadInfo {
    optional  GPBInt64Value  domDownloadLatencyMillis  = 1;
    optional  GPBInt64Value  domLoadLatencyMillis  = 2;
    optional  GPBInt64Value  firstContentfulPaintLatency  = 3;
    optional  GPBInt64Value  fullLoadLatency  = 4;
    optional  GPBInt32Value  loadProgress  = 5;
    optional  GPBBoolValue  hasSubsequentNavigation  = 6;
    optional  GPBInt32Value  resourcesLoadedFromCache  = 7;
    optional  GPBInt32Value  resourcesLoadedFromNetwork  = 8;
    optional  GPBInt64Value  resourcesLoadedSizeBytes  = 9;
    optional  GPBStringValue  browserUserAgent  = 10;
    optional  GPBStringValue  pageURL  = 11;
    optional  GPBInt32Value  cssResourcesCacheLoad  = 12;
    optional  GPBInt32Value  scriptResourcesCacheLoad  = 13;
    optional  GPBInt32Value  imgResourcesCacheLoad  = 14;
    optional  GPBInt32Value  linkResourcesCacheLoad  = 15;
    optional  GPBInt32Value  cssResourcesNetworkLoad  = 16;
    optional  GPBInt32Value  scriptResourcesNetworkLoad  = 17;
    optional  GPBInt32Value  imgResourcesNetworkLoad  = 18;
    optional  GPBInt32Value  linkResourcesNetworkLoad  = 19;
    optional  GPBInt64Value  webviewInitializeStartTsMs  = 20;
    optional  GPBInt64Value  webviewInitializeEndTsMs  = 21;
    optional  GPBInt64Value  webviewLoadURLTsMs  = 22;
    optional  GPBInt64Value  webviewNavigationStartTsMs  = 23;
    optional  GPBInt64Value  htmlResponseStartLatencyMs  = 24;
    optional  GPBInt64Value  domInteractiveLatencyMs  = 25;
    optional  GPBInt64Value  domContentLoadedStartLatencyMs  = 26;
    optional  GPBInt64Value  domCompleteLatencyMs  = 27;
    optional  GPBStringValue  perfMetricsPageURL  = 28;
    optional  GPBBoolValue  webviewInitializedSuccessfully  = 29;
    optional  GPBStringValue  webviewInitializeErrorReason  = 30;
    optional  GPBInt64Value  webviewNavigationFinishTsMs  = 31;
    repeated  int32  subNavigationTypesArray  = 32[packed=true];
    optional  GPBInt64Value  htmlResolveServerRedirectCount  = 33;
    optional  GPBInt64Value  htmlResolveServerRedirectCompleteTsMs  = 34;
    optional  GPBStringValue  serverRedirectResolvedURL  = 35;
}

message SCAdsWebViewMetadata {
    optional  string  id_p  = 1;
    optional  string  baseURL  = 2;
    repeated  GPBStringValue  gaScriptsUrlsArray  = 3;
    optional  GPBStringValue  snapPixelScriptURL  = 4;
    optional  GPBStringValue  resourcePrefetchHintsURL  = 5;
    repeated  SCWebViewResourceInfo  renderCriticalResourcesArray  = 6;
    optional  SCAdsWebViewInHouseCache  inhouseCache  = 7;
    optional  GPBBoolValue  hasServerRedirect  = 8;
    optional  GPBStringValue  serverRedirectResolvedURLMatchPrefix  = 9;
    optional  GPBInt64Value  expectedServerRedirectCount  = 10;
}

message SCAdsWebviewPrefetchStudy {
    optional  string  experimentId  = 1;
    optional  int64  studyVersion  = 2;
    optional  float  percentileThreshold  = 3;
    optional  bool  predictivePrefetchEnabled  = 4;
    optional  string  modelId  = 5;
}

message SCAdsZipPackageInfo {
    optional  string  renditionBaseURL  = 1;
    repeated  SCSnapAdsRenditionV3  renditionsArray  = 2;
}

message SCAirGetSignedUrlRequest {
    optional  string  reportId  = 1;
}

message SCAppInsightsReport {
    optional  SCUserAgentAgent  agent  = 1;
    optional  bytes  crashReport  = 2;
}

message SCAtlasEmojiInfo {
    optional  int32  type  = 1;
    optional  string  source  = 2;
    optional  string  title  = 3;
    optional  string  emojiDescription  = 4;
    optional  string  emojiPickerDescription  = 5;
    optional  int32  defaultType  = 6;
    optional  string  defaultValue  = 7;
    optional  int32  emojiLegendRank  = 8;
}

message SCAtlasExtraFriendmoji {
    optional  string  categoryName  = 1;
    optional  SCAtlasEmojiInfo  emojiInfo  = 2;
}

message SCAtlasFriendmoji {
    optional  string  categoryName  = 1;
    optional  int64  expirationTime  = 2;
}

message SCAtlasGetOutgoingFriendsRequest {
    optional  SCCOREUUID  userId  = 1;
    repeated  SCCOREUUID  friendUserIdsArray  = 2;
}

message SCAtlasGetOutgoingFriendsResponse {
    repeated  SCAtlasOutgoingFriend  outgoingFriendsArray  = 1;
    repeated  SCAtlasExtraFriendmoji  extraMutableFriendmojisArray  = 2;
    repeated  SCAtlasExtraFriendmoji  extraReadOnlyFriendmojisArray  = 3;
}

message SCAtlasOutgoingFriend {
    optional  SCCOREUUID  userId  = 1;
    optional  string  mutableUsername  = 2;
    optional  string  displayName  = 3;
    optional  int32  friendLinkType  = 4;
    optional  GTPDate  birthday  = 5;
    optional  int64  addedTs  = 6;
    optional  int64  reverseAddedTs  = 7;
    optional  bool  canFriendSeeCustomStories  = 8;
    repeated  SCAtlasFriendmoji  friendmojisArray  = 9;
    optional  string  bitmojiAvatarId  = 10;
    optional  string  bitmojiSelfieId  = 11;
    optional  string  bitmojiSceneId  = 12;
    optional  string  bitmojiBackgroundId  = 13;
    optional  bool  isBitmojiFriendmojiSharingSupported  = 14;
    repeated  SCFideliusFriendDeviceKey  fideliusFriendInfoArray  = 15;
    optional  bool  isStoryMuted  = 16;
    optional  SCCOREUUID  snapProId  = 17;
    optional  bool  isCameosSharingSupported  = 18;
    optional  int32  cameosSharingPolicy  = 19;
    optional  int32  plusBadgeVisibility  = 20;
    optional  string  postViewEmoji  = 22;
}

message SCAttributionInfo {
    optional  string  userId  = 1;
    optional  string  displayName  = 2;
    optional  string  username  = 3;
}

message SCAuraPbAstrologyProfile {
    repeated  SCAuraPbAstrologySnapADT  snapsArray  = 2;
}

message SCAuraPbAstrologySnapADT {
    optional  SCAuraPbPersonalitySnapContainer  personalitySnap  = 1;
    optional  SCAuraPbCompatibilitySnapContainer  compatibilitySnap  = 2;
    optional  SCAuraPbSummarySnapContainer  summarySnap  = 3;
}

message SCAuraPbAuraSyncFriendAstrologyRequest {
    optional  SCAuraPbUUID  requestId  = 1;
    optional  bytes  syncToken  = 2;
    optional  string  acceptLanguage  = 3;
    optional  SCAuraPbUUID  friendId  = 4;
    optional  SCAuraPbBirthInfo  birthInfo  = 5;
    optional  float  displayPixelDensity  = 6;
    optional  string  myDisplayName  = 7;
    optional  string  friendDisplayName  = 8;
    optional  bool  myBirthdayPartyEnabled  = 9;
}

message SCAuraPbAuraSyncFriendAstrologyResponse {
    optional  SCAuraPbUUID  requestId  = 1;
    optional  bytes  nextSyncToken  = 2;
    optional  uint64  nextSyncEpochSec  = 3;
    optional  SCAuraPbAstrologyProfile  friendPersonalityProfile  = 4;
    optional  GPBEmpty  friendPersonalityProfileNotModified  = 5;
    optional  SCAuraPbAstrologyProfile  friendCompatibilityProfile  = 6;
    optional  GPBEmpty  friendCompatibilityProfileNotModified  = 7;
}

message SCAuraPbAuraSyncMyAstrologyRequest {
    optional  SCAuraPbUUID  requestId  = 1;
    optional  bytes  syncToken  = 2;
    optional  string  acceptLanguage  = 3;
    optional  SCAuraPbBirthInfo  birthInfo  = 4;
    optional  float  displayPixelDensity  = 5;
    optional  string  myDisplayName  = 6;
}

message SCAuraPbAuraSyncMyAstrologyResponse {
    optional  SCAuraPbUUID  requestId  = 1;
    optional  bytes  nextSyncToken  = 2;
    optional  uint64  nextSyncEpochSec  = 3;
    optional  SCAuraPbAstrologyProfile  myPersonalityProfile  = 4;
    optional  GPBEmpty  myPersonalityProfileNotModified  = 5;
}

message SCAuraPbBirthInfo {
    optional  uint32  year  = 1;
    optional  uint32  month  = 2;
    optional  uint32  day  = 3;
    optional  uint32  hour  = 4;
    optional  uint32  minute  = 5;
    optional  double  lat  = 6;
    optional  double  lng  = 7;
}

message SCAuraPbBirthInfoSetting {
    optional  uint32  hourOfDay  = 1;
    optional  uint32  minuteOfHour  = 2;
    optional  string  locationName  = 3;
    optional  double  latitude  = 4;
    optional  double  longitude  = 5;
}

message SCAuraPbCompatibilitySnapContainer {
    optional  bytes  serializedSnapData  = 1;
    optional  string  chromeTitle  = 2;
    optional  string  chromeSubtitle  = 3;
}

message SCAuraPbPersonalitySnapContainer {
    optional  bytes  serializedSnapData  = 1;
    optional  string  chromeTitle  = 2;
    optional  string  chromeSubtitle  = 3;
}

message SCAuraPbSummarySnapContainer {
    optional  bytes  serializedSnapData  = 1;
    optional  string  chromeTitle  = 2;
    optional  string  chromeSubtitle  = 3;
}

message SCAuraPbUUID {
    optional  fixed64  highBits  = 1;
    optional  fixed64  lowBits  = 2;
}

message SCAuthApprovalRequest {
    optional  string  approvalToken  = 1;
    repeated  string  scopesApprovedArray  = 2;
}

message SCAuthApprovalResponse {
    optional  string  redirectUri  = 1;
    optional  string  code  = 2;
    optional  string  state  = 3;
}

message SCAuthApproveRequest {
    optional  string  approvalToken  = 1;
    repeated  string  scopesApprovedArray  = 2;
}

message SCAuthApproveResponse {
    optional  string  redirectUri  = 1;
    optional  string  code  = 2;
    optional  string  state  = 3;
}

message SCAuthAuthorizationRequest {
    optional  string  responseType  = 1;
    optional  string  clientId  = 2;
    optional  string  redirectUri  = 3;
    optional  string  scope  = 4;
    optional  string  state  = 5;
    optional  string  codeChallengeMethod  = 6;
    optional  string  codeChallenge  = 7;
}

message SCAuthAuthorizationResponse {
    optional  string  approvalToken  = 1;
    optional  string  clientName  = 2;
    optional  string  clientDescription  = 3;
    optional  string  clientIconURL  = 4;
    repeated  SCAuthScope  scopesRequestedArray  = 5;
    optional  bool  consentRequired  = 6;
}

message SCAuthAuthorizeRequest {
    optional  string  responseType  = 1;
    optional  string  clientId  = 2;
    optional  string  redirectUri  = 3;
    optional  string  scope  = 4;
    optional  string  state  = 5;
    optional  string  codeChallengeMethod  = 6;
    optional  string  codeChallenge  = 7;
}

message SCAuthAuthorizeResponse {
    optional  string  approvalToken  = 1;
    optional  string  clientName  = 2;
    optional  string  clientDescription  = 3;
    optional  string  clientIconURL  = 4;
    repeated  SCAuthScope  scopesRequestedArray  = 5;
    optional  bool  consentRequired  = 6;
}

message SCAuthDenialRequest {
    optional  string  approvalToken  = 1;
}

message SCAuthDenyRequest {
    optional  string  approvalToken  = 1;
}

message SCAuthDenyResponse {
}

message SCAuthError {
    optional  string  error  = 1;
    optional  string  errorDescription  = 2;
    optional  string  state  = 3;
}

message SCAuthPbAutomationDetectionConfig {
    optional  bool  enabled  = 1;
    optional  string  boltURL  = 2;
    repeated  int32  enabledContextsArray  = 3[packed=true];
}

message SCAuthPbUserReachabilityTakeoverCofConfig {
    optional  bool  enabled  = 1;
    optional  int32  displayFrequencySec  = 2;
}

message SCAuthRevocationRequest {
    optional  string  clientId  = 1;
    optional  string  token  = 2;
    optional  string  clientSecret  = 3;
}

message SCAuthRevokeClientsRequest {
    optional  string  userId  = 1;
    repeated  string  clientIdsArray  = 2;
}

message SCAuthRevokeRequest {
    optional  string  clientId  = 1;
    optional  string  token  = 2;
    optional  string  clientSecret  = 3;
}

message SCAuthRevokeResponse {
}

message SCAuthScope {
    optional  string  name  = 1;
    repeated  string  descriptionsArray  = 2;
    optional  bool  toggleable  = 3;
    optional  string  icon  = 4;
}

message SCAuthStatusPersistencePbIsEligibleForV2Request {
    optional  string  persistentDeviceId  = 1;
}

message SCAuthStatusPersistencePbIsEligibleForV2Response {
    optional  bool  isEligible  = 1;
}

message SCAuthTokenRequest {
    optional  string  clientId  = 1;
    optional  string  clientSecret  = 2;
    optional  string  grantType  = 3;
    optional  string  code  = 4;
    optional  string  redirectUri  = 5;
    optional  string  codeVerifier  = 6;
    optional  string  refreshToken  = 7;
}

message SCAuthTokenResponse {
    optional  string  accessToken  = 1;
    optional  string  tokenType  = 2;
    optional  uint32  expiresIn  = 3;
    optional  string  refreshToken  = 4;
    optional  string  scope  = 5;
}

message SCAuthUserSessionValidationRequest {
    optional  string  refreshToken  = 1;
}

message SCAvatarBuilderClosetData {
    repeated  SCAvatarBuilderClosetData_ClosetItem  closetItemsArray  = 1;
}

message SCAvatarBuilderClosetData_ClosetItem {
    repeated  int64  outfit  = 1;
    optional  string  image  = 2;
    optional  int64  clothingType  = 3;
}

message SCBackgroundPrefetchConfig {
    optional  bool  prefetchGeoLenses  = 1;
    optional  bool  prefetchUnlockLenses  = 2;
    optional  bool  prefetchPrecachedGeoLenses  = 3;
}

message SCBasicUnlock {
    optional  int64  unlockableId  = 1;
    optional  SCUnlockGroup  unlockGroup  = 2;
    optional  GPBTimestamp  unlockDate  = 3;
    optional  GPBTimestamp  expirationDate  = 4;
    repeated  string  deepLinkProperties  = 5;
}

message SCBasicUnlocksRequest {
    optional  string  userId  = 1;
    repeated  SCUnlockGroup  requiredGroupsArray  = 2;
    optional  int32  unlocksNamespace  = 3;
}

message SCBasicUnlocksResponse {
    repeated  SCBasicUnlock  unlocksArray  = 1;
}

message SCBillboardPbAction {
    optional  SCBillboardPbActionSyncContact  syncContact  = 1;
    optional  SCBillboardPbActionOpenMini  openMini  = 2;
    optional  SCBillboardPbActionBirthdaySettings  openBirthdaySettings  = 3;
    optional  SCBillboardPbActionEmailVerification  verifyEmail  = 4;
    optional  SCBillboardPbActionPhoneVerification  verifyPhone  = 5;
    optional  SCBillboardPbActionSuicidePrevention  openSuicidePrevention  = 6;
    optional  SCBillboardPbActionEnableNotification  enableNotification  = 7;
    optional  SCBillboardPbActionPhoneReverification  reverifyPhone  = 8;
    optional  SCBillboardPbActionEnableMicrophone  enableMicrophone  = 9;
    optional  SCBillboardPbActionFriendCheckup  friendCheckup  = 10;
    optional  SCBillboardPbActionOpenUrl  openURL  = 11;
    optional  SCBillboardPbActionOpenSettings  openSettings  = 12;
    optional  SCBillboardPbActionCreateGroup  createGroup  = 13;
    optional  SCBillboardPbActionLockScreenWidgets  lockScreenWidgets  = 14;
    optional  SCBillboardPbActionOpenDeeplink  openDeeplink  = 15;
    optional  SCBillboardPbActionOpenDwebTray  openDwebTray  = 16;
    optional  SCBillboardPbActionOpenOTLOptInDialog  openOtlOptIn  = 17;
}

message SCBillboardPbActionBirthdaySettings {
}

message SCBillboardPbActionCreateGroup {
}

message SCBillboardPbActionEmailVerification {
}

message SCBillboardPbActionEnableMicrophone {
}

message SCBillboardPbActionEnableNotification {
}

message SCBillboardPbActionFriendCheckup {
}

message SCBillboardPbActionLockScreenWidgets {
}

message SCBillboardPbActionOpenDeeplink {
    optional  string  deeplink  = 1;
}

message SCBillboardPbActionOpenDwebTray {
}

message SCBillboardPbActionOpenMini {
    optional  string  miniId  = 1;
}

message SCBillboardPbActionOpenOTLOptInDialog {
}

message SCBillboardPbActionOpenSettings {
}

message SCBillboardPbActionOpenUrl {
    optional  string  URL  = 1;
}

message SCBillboardPbActionPhoneReverification {
}

message SCBillboardPbActionPhoneVerification {
}

message SCBillboardPbActionSuicidePrevention {
}

message SCBillboardPbActionSyncContact {
}

message SCBillboardPbCampaign {
    optional  string  campaignId  = 1;
    optional  bool  enabled  = 2;
    optional  SCBillboardPbFeedHeaderPromptUXConfig  fhpConfig  = 4;
    optional  SCBillboardPbSupProperties  supProperties  = 5;
    optional  string  targetingEvaluationCof  = 6;
    optional  SCBillboardPbCampaignUXConfig  config  = 7;
}

message SCBillboardPbCampaignSnapshot {
    optional  string  campaignCofName  = 1;
    optional  int32  preCheckSource  = 2;
    optional  string  recycleCofName  = 3;
}

message SCBillboardPbCampaignUXConfig {
    optional  SCBillboardPbProfileActivityCardUXConfig  pacConfig  = 1;
    optional  SCBillboardPbFeedHeaderPromptUXConfig  fhpConfig  = 2;
    optional  SCBillboardPbFullScreenTakeoverUXConfig  fstConfig  = 3;
}

message SCBillboardPbCampaignsPriority {
    repeated  string  campaignIdsByPriorityArray  = 1;
    repeated  SCBillboardPbCampaignSnapshot  campaignSnapshotsArray  = 2;
    optional  int32  maxCampaignNums  = 3;
    optional  int32  backgroundComputeIntervalSec  = 4;
}

message SCBillboardPbFeedHeaderPromptUXConfig {
    optional  string  primaryTextKey  = 1;
    optional  string  secondaryTextKey  = 2;
    optional  string  accessibilityLabelKey  = 3;
    optional  string  emoji  = 4;
    optional  SCBillboardPbAction  onTapAction  = 5;
}

message SCBillboardPbFullSceenTakeoverClickButton {
    optional  string  textKey  = 1;
    optional  SCBillboardPbAction  action  = 2;
}

message SCBillboardPbFullSceenTakeoverDismissButton {
    optional  string  textKey  = 1;
}

message SCBillboardPbFullSceenTakeoverText {
    optional  string  textKey  = 1;
    optional  int32  type  = 2;
    optional  MapRecords  tagToLink  = 3;
}

message SCBillboardPbFullSceenTakeoverTitle {
    optional  string  textKey  = 1;
}

message SCBillboardPbFullScreenTakeoverImage {
    optional  string  imageURL  = 1;
}

message SCBillboardPbFullScreenTakeoverUIComponent {
    optional  SCBillboardPbFullScreenTakeoverImage  image  = 1;
    optional  SCBillboardPbFullSceenTakeoverText  text  = 2;
}

message SCBillboardPbFullScreenTakeoverUXConfig {
    optional  SCBillboardPbFullScreenTakeoverImage  mainImage  = 1;
    optional  SCBillboardPbFullSceenTakeoverTitle  title  = 2;
    repeated  SCBillboardPbFullScreenTakeoverUIComponent  uiComponentsArray  = 3;
    optional  SCBillboardPbFullSceenTakeoverClickButton  clickButton  = 4;
    optional  SCBillboardPbFullSceenTakeoverDismissButton  dismissButton  = 5;
    repeated  int32  dismissTypesArray  = 6[packed=true];
}

message SCBillboardPbProfileActivityCardIcon {
    optional  string  iconURL  = 1;
    optional  bool  isMiniCard  = 2;
}

message SCBillboardPbProfileActivityCardSubtitle {
    optional  string  textKey  = 1;
}

message SCBillboardPbProfileActivityCardTitle {
    optional  string  textKey  = 1;
}

message SCBillboardPbProfileActivityCardUIComponent {
    optional  SCBillboardPbProfileActivityCardTitle  title  = 1;
    optional  SCBillboardPbProfileActivityCardSubtitle  subtitle  = 2;
    optional  SCBillboardPbProfileActivityCardIcon  icon  = 3;
}

message SCBillboardPbProfileActivityCardUXConfig {
    repeated  SCBillboardPbProfileActivityCardUIComponent  uiComponentsArray  = 1;
    optional  SCBillboardPbAction  action  = 2;
}

message SCBillboardPbRecycleBasedProperty {
    optional  int32  millisSupPropertyId  = 1;
    optional  int32  secsSupPropertyId  = 2;
}

message SCBillboardPbRecycleMetadata {
    optional  SCBillboardPbRecycleBasedProperty  recycleBasedProperty  = 1;
    repeated  int32  recycleIntervalsArray  = 2[packed=true];
    optional  int32  cycleSupPropertyId  = 3;
    repeated  SCBillboardPbSupProperty  supPropertiesToResetArray  = 4;
}

message SCBillboardPbSupProperties {
    repeated  int32  impressionCountIdArray  = 1[packed=true];
    repeated  int32  firstImpressionMillisIdArray  = 2[packed=true];
    repeated  int32  clickCountIdArray  = 3[packed=true];
    repeated  int32  clickTimeIdArray  = 4[packed=true];
    repeated  int32  dismissCountIdArray  = 5[packed=true];
    repeated  int32  dismissTimeIdArray  = 6[packed=true];
    repeated  int32  firstImpressionSecsIdArray  = 8[packed=true];
    repeated  int32  lastClickSecsIdArray  = 9[packed=true];
    repeated  int32  lastDismissSecsIdArray  = 10[packed=true];
    repeated  int32  lastImpressionMillisIdArray  = 11[packed=true];
    repeated  int32  lastImpressionSecsIdArray  = 12[packed=true];
}

message SCBillboardPbSupProperty {
    optional  int32  propertyId  = 1;
    optional  int32  type  = 2;
}

message SCBitmoji3DSelfieMapping {
    optional  int32  version  = 1;
    repeated  SCSelfie  selfiesArray  = 2;
}

message SCBitmoji3dClientCacheConfig {
    repeated  string  sceneIdsToInvalidateArray  = 1;
    optional  int64  invalidationRequestDateEpoch  = 2;
}

message SCBitmojiAvatarOption {
    optional  string  optionKey  = 1;
    optional  int32  optionValue  = 2;
}

message SCBitmojiAvatarOptions {
    repeated  SCBitmojiAvatarOption  optionsArray  = 1;
}

message SCBitmojiBackgroundDetail {
    optional  bool  isPlusExclusive  = 1;
    optional  bool  isNew  = 2;
}

message SCBitmojiBitmojiCostumeData {
    repeated  SCBitmojiAvatarOption  optionsArray  = 1;
}

message SCBitmojiBottom {
    optional  int32  bottom  = 1;
    optional  int32  bottomTone1  = 2;
    optional  int32  bottomTone2  = 3;
    optional  int32  bottomTone3  = 4;
    optional  int32  bottomTone4  = 5;
    optional  int32  bottomTone5  = 6;
    optional  int32  bottomTone6  = 7;
    optional  int32  bottomTone7  = 8;
    optional  int32  bottomTone8  = 9;
    optional  int32  bottomTone9  = 10;
    optional  int32  bottomTone10  = 11;
}

message SCBitmojiCategory {
    repeated  SCBitmojiClosetItem  itemsArray  = 1;
    optional  int32  closetCategory  = 2;
    optional  int32  categorySizeLimit  = 3;
    optional  bytes  nextPageToken  = 4;
}

message SCBitmojiChangeStyleRequest {
    optional  int32  style  = 1;
}

message SCBitmojiChangeStyleResponse {
    optional  int32  result  = 1;
    optional  BMCompactAvatarId  avatarId  = 2;
}

message SCBitmojiClaimDropItemRequest {
    optional  int32  dropId  = 1;
    optional  int32  merchandisedGarmentId  = 2;
}

message SCBitmojiClaimDropItemResponse {
    optional  int32  status  = 1;
    optional  SCBitmojiCategory  closetCategory  = 2;
}

message SCBitmojiClosetItem {
    optional  SCBitmojiTop  top  = 1;
    optional  SCBitmojiBottom  bottom  = 2;
    optional  SCBitmojiFootwear  footwear  = 3;
    optional  SCBitmojiSock  sock  = 4;
    optional  SCBitmojiOuterwear  outerwear  = 5;
    optional  SCBitmojiOnePiece  onePiece  = 6;
    optional  SCBitmojiOutfit  outfit  = 7;
}

message SCBitmojiClosetItems {
    repeated  SCBitmojiClosetItem  itemsArray  = 1;
}

message SCBitmojiConsumeCostumeOverrideRequest {
    optional  SCBitmojiUUID  costumeOverrideId  = 1;
}

message SCBitmojiConsumeCostumeOverrideResponse {
    optional  int32  status  = 1;
}

message SCBitmojiCreateAvatarRequest {
    optional  AvatarData  avatarData  = 1;
    optional  SCBitmojiCreateAvatarRequest_TouVersion  touVersion  = 2;
}

message SCBitmojiCreateAvatarRequest_TouVersion {
    optional  uint64  touVersion  = 1;
}

message SCBitmojiCreateAvatarResponse {
    optional  BMCompactAvatarId  avatarId  = 1;
}

message SCBitmojiCreateCostumeOverrideRequest {
    optional  SCBitmojiAvatarOptions  avatarOptions  = 1;
    optional  SCBitmojiBitmojiCostumeData  costumeData  = 2;
    optional  int32  costumeType  = 3;
    optional  string  title  = 4;
    optional  string  creatorName  = 5;
    optional  uint64  inventory  = 6;
}

message SCBitmojiCreateCostumeOverrideResponse {
    optional  SCBitmojiUUID  costumeOverrideId  = 1;
    optional  int32  status  = 2;
    optional  string  shareURL  = 3;
}

message SCBitmojiDrop {
    optional  int32  dropId  = 1;
    repeated  SCBitmojiMerchandisedGarment  merchandisedGarmentsArray  = 2;
    optional  SCBitmojiDrop_Asset  bannerImage  = 3;
    optional  SCBitmojiDrop_Asset  brandLogo  = 4;
    optional  string  backgroundColor  = 5;
    optional  int32  startTime  = 6;
    optional  int32  endTime  = 7;
    optional  string  creatorName  = 8;
}

message SCBitmojiDrop_Asset {
    optional  string  assetURL2X  = 1;
    optional  string  assetURL3X  = 2;
}

message SCBitmojiFlatlandBackgroundDefaults {
    optional  int32  version  = 1;
    repeated  int32  backgroundIdsArray  = 2[packed=true];
}

message SCBitmojiFlatlandBackgroundList {
    optional  int32  version  = 1;
    repeated  int32  backgroundIdsArray  = 2[packed=true];
    repeated  int32  newBackgroundIdsArray  = 3[packed=true];
    repeated  SCBitmojiBackgroundDetail  backgroundDetails  = 4;
}

message SCBitmojiFlatlandSceneDefaults {
    optional  int32  version  = 1;
    repeated  int32  sceneIdsArray  = 2[packed=true];
}

message SCBitmojiFlatlandSceneList {
    optional  int32  version  = 1;
    repeated  int32  sceneIdsArray  = 2[packed=true];
    repeated  int32  newSceneIdsArray  = 3[packed=true];
    repeated  int32  wheelchairSceneIdsArray  = 4[packed=true];
}

message SCBitmojiFootwear {
    optional  int32  footwear  = 1;
    optional  int32  footwearTone1  = 2;
    optional  int32  footwearTone2  = 3;
    optional  int32  footwearTone3  = 4;
    optional  int32  footwearTone4  = 5;
    optional  int32  footwearTone5  = 6;
    optional  int32  footwearTone6  = 7;
    optional  int32  footwearTone7  = 8;
    optional  int32  footwearTone8  = 9;
    optional  int32  footwearTone9  = 10;
    optional  int32  footwearTone10  = 11;
}

message SCBitmojiGarment {
    optional  SCBitmojiTop  top  = 1;
    optional  SCBitmojiBottom  bottom  = 2;
    optional  SCBitmojiFootwear  footwear  = 3;
    optional  SCBitmojiSock  sock  = 4;
    optional  SCBitmojiOuterwear  outerwear  = 5;
    optional  SCBitmojiOnePiece  onePiece  = 6;
}

message SCBitmojiGetAvatarRequest {
    optional  SCBitmojiUUID  costumeOverrideId  = 1;
}

message SCBitmojiGetAvatarResponse {
    optional  AvatarData  avatarData  = 1;
}

message SCBitmojiGetCostumeOverrideInfoRequest {
    optional  SCBitmojiUUID  costumeOverrideId  = 1;
}

message SCBitmojiGetCostumeOverrideInfoResponse {
    optional  int32  costumeType  = 1;
    optional  string  title  = 2;
    optional  string  creatorName  = 3;
    optional  int32  inventoryStatus  = 4;
}

message SCBitmojiGetCostumeOverrideRequest {
    optional  SCBitmojiUUID  costumeOverrideId  = 1;
}

message SCBitmojiGetCostumeOverrideResponse {
    optional  SCBitmojiBitmojiCostumeData  costumeData  = 1;
    optional  int32  costumeType  = 2;
}

message SCBitmojiGetDropRequest {
    optional  int32  dropId  = 1;
}

message SCBitmojiGetDropResponse {
    optional  SCBitmojiDrop  drop  = 1;
}

message SCBitmojiGetStylesRequest {
}

message SCBitmojiGetStylesResponse {
    repeated  BMCompactAvatarId  savedStylesArray  = 1;
}

message SCBitmojiIsCostumeCompatibleRequest {
    optional  SCBitmojiUUID  costumeOverrideId  = 1;
    optional  BMCompactAvatarId  avatarId  = 2;
}

message SCBitmojiIsCostumeCompatibleResponse {
    optional  bool  isCostumeCompatible  = 1;
}

message SCBitmojiMerchandisedGarment {
    optional  SCBitmojiGarment  garment  = 1;
    optional  string  name  = 2;
    optional  int32  merchandisedGarmentId  = 3;
    optional  int32  tokenPrice  = 4;
}

message SCBitmojiOnePiece {
    optional  int32  top  = 1;
    optional  int32  topTone1  = 2;
    optional  int32  topTone2  = 3;
    optional  int32  topTone3  = 4;
    optional  int32  topTone4  = 5;
    optional  int32  topTone5  = 6;
    optional  int32  topTone6  = 7;
    optional  int32  topTone7  = 8;
    optional  int32  topTone8  = 9;
    optional  int32  topTone9  = 10;
    optional  int32  topTone10  = 11;
    optional  int32  bottom  = 12;
    optional  int32  bottomTone1  = 13;
    optional  int32  bottomTone2  = 14;
    optional  int32  bottomTone3  = 15;
    optional  int32  bottomTone4  = 16;
    optional  int32  bottomTone5  = 17;
    optional  int32  bottomTone6  = 18;
    optional  int32  bottomTone7  = 19;
    optional  int32  bottomTone8  = 20;
    optional  int32  bottomTone9  = 21;
    optional  int32  bottomTone10  = 22;
}

message SCBitmojiOuterwear {
    optional  int32  outerwear  = 1;
    optional  int32  outerwearTone1  = 2;
    optional  int32  outerwearTone2  = 3;
    optional  int32  outerwearTone3  = 4;
    optional  int32  outerwearTone4  = 5;
    optional  int32  outerwearTone5  = 6;
    optional  int32  outerwearTone6  = 7;
    optional  int32  outerwearTone7  = 8;
    optional  int32  outerwearTone8  = 9;
    optional  int32  outerwearTone9  = 10;
    optional  int32  outerwearTone10  = 11;
}

message SCBitmojiOutfit {
    optional  int32  outfitId  = 1;
    optional  int32  top  = 2;
    optional  int32  bottom  = 3;
    optional  int32  footwear  = 4;
    optional  int32  sock  = 5;
    optional  int32  outerwear  = 6;
    optional  int32  isTucked  = 7;
    optional  int32  topTone1  = 8;
    optional  int32  topTone2  = 9;
    optional  int32  topTone3  = 10;
    optional  int32  topTone4  = 11;
    optional  int32  topTone5  = 12;
    optional  int32  topTone6  = 13;
    optional  int32  topTone7  = 14;
    optional  int32  topTone8  = 15;
    optional  int32  topTone9  = 16;
    optional  int32  topTone10  = 17;
    optional  int32  bottomTone1  = 18;
    optional  int32  bottomTone2  = 19;
    optional  int32  bottomTone3  = 20;
    optional  int32  bottomTone4  = 21;
    optional  int32  bottomTone5  = 22;
    optional  int32  bottomTone6  = 23;
    optional  int32  bottomTone7  = 24;
    optional  int32  bottomTone8  = 25;
    optional  int32  bottomTone9  = 26;
    optional  int32  bottomTone10  = 27;
    optional  int32  footwearTone1  = 28;
    optional  int32  footwearTone2  = 29;
    optional  int32  footwearTone3  = 30;
    optional  int32  footwearTone4  = 31;
    optional  int32  footwearTone5  = 32;
    optional  int32  footwearTone6  = 33;
    optional  int32  footwearTone7  = 34;
    optional  int32  footwearTone8  = 35;
    optional  int32  footwearTone9  = 36;
    optional  int32  footwearTone10  = 37;
    optional  int32  sockTone1  = 38;
    optional  int32  sockTone2  = 39;
    optional  int32  sockTone3  = 40;
    optional  int32  sockTone4  = 41;
    optional  int32  outerwearTone1  = 42;
    optional  int32  outerwearTone2  = 43;
    optional  int32  outerwearTone3  = 44;
    optional  int32  outerwearTone4  = 45;
    optional  int32  outerwearTone5  = 46;
    optional  int32  outerwearTone6  = 47;
    optional  int32  outerwearTone7  = 48;
    optional  int32  outerwearTone8  = 49;
    optional  int32  outerwearTone9  = 50;
    optional  int32  outerwearTone10  = 51;
}

message SCBitmojiProfilePbBitmojiProfileFlatlandWebViewConfig {
    optional  bool  enabled  = 1;
    optional  int32  webViewType  = 2;
}

message SCBitmojiRecentOutfits {
    repeated  SCBitmojiOutfit  recentOutfitsArray  = 1;
}

message SCBitmojiSelfieList {
    optional  int32  version  = 1;
    repeated  int32  selfiesArray  = 2[packed=true];
}

message SCBitmojiSnapchatUserInfo {
    optional  string  snapchatUserId  = 1;
    optional  string  bitmojiLinkageId  = 2;
    optional  GPBTimestamp  created  = 3;
}

message SCBitmojiSock {
    optional  int32  sock  = 1;
    optional  int32  sockTone1  = 2;
    optional  int32  sockTone2  = 3;
    optional  int32  sockTone3  = 4;
    optional  int32  sockTone4  = 5;
}

message SCBitmojiTop {
    optional  int32  top  = 1;
    optional  int32  topTone1  = 2;
    optional  int32  topTone2  = 3;
    optional  int32  topTone3  = 4;
    optional  int32  topTone4  = 5;
    optional  int32  topTone5  = 6;
    optional  int32  topTone6  = 7;
    optional  int32  topTone7  = 8;
    optional  int32  topTone8  = 9;
    optional  int32  topTone9  = 10;
    optional  int32  topTone10  = 11;
}

message SCBitmojiUUID {
    optional  bytes  id_p  = 1;
}

message SCBitmojiUnlinkAccountRequest {
}

message SCBitmojiUnlinkAccountResponse {
}

message SCBitmojiUpdate2dSelfieRequest {
    optional  uint32  selfieId  = 1;
}

message SCBitmojiUpdate2dSelfieResponse {
}

message SCBitmojiUpdate3dProfileRequest {
    optional  uint32  sceneId  = 1;
    optional  uint32  backgroundId  = 2;
    optional  string  sceneIdStr  = 3;
    optional  string  backgroundIdStr  = 4;
}

message SCBitmojiUpdate3dProfileResponse {
}

message SCBitmojiUpdateAvatarDataPayload {
    optional  int64  gender  = 1;
    optional  int64  style  = 2;
    repeated  int64  optionIds  = 3;
    optional  SCBitmojiUUID  costumeOverrideId  = 4;
}

message SCBitmojiUpdateAvatarRequest {
    optional  AvatarData  avatarData  = 1;
    optional  SCBitmojiUUID  costumeOverrideId  = 2;
}

message SCBitmojiUpdateAvatarResponse {
    optional  BMCompactAvatarId  avatarId  = 1;
}

message SCBoltAllProvidersReplicationPolicy {
}

message SCBoltApplicationVersion {
    optional  int32  applicableVersionMajor  = 1;
    optional  int32  applicableVersionMinor  = 2;
}

message SCBoltBoltDefaultPolicy {
    optional  uint32  numberOfReplicas  = 1;
}

message SCBoltContentDescriptor {
    optional  SCBoltApplicationVersion  minimumSupportedApplicationVersion  = 1;
    optional  string  contentId  = 2;
    repeated  string  contentPathPartsArray  = 3;
    optional  GPBTimestamp  contentExpiryTime  = 4;
    optional  GPBTimestamp  contentDescriptorExpiryTime  = 5;
    repeated  uint64  readyLocationIdsArray  = 6[packed=true];
    repeated  uint64  futureLocationIdsArray  = 7[packed=true];
    optional  GPBTimestamp  futureLocationsReadyTime  = 8;
    optional  uint32  claimId  = 9;
    optional  uint32  useCase  = 10;
    optional  SCBoltUInt64Value  contentLength  = 11;
    optional  uint32  hostPatternVersion  = 12;
    optional  uint32  boltCdnExperimentationId  = 13;
}

message SCBoltContentObject {
    optional  bytes  contentObjectId  = 1;
    optional  SCBoltContentDescriptor  contentDescriptor  = 2;
    optional  SCMossMediaBundle  mediaBundle  = 3;
}

message SCBoltCountriesPolicy {
    repeated  uint64  countryExpectedDownloads  = 1;
}

message SCBoltNoReplicationPolicy {
}

message SCBoltReplicationPolicy {
    optional  SCBoltCountriesPolicy  countriesPolicy  = 1;
    optional  SCBoltBoltDefaultPolicy  boltDefaultPolicy  = 2;
    optional  SCBoltNoReplicationPolicy  noReplicationPolicy  = 3;
    optional  SCBoltAllProvidersReplicationPolicy  allProvidersReplicationPolicy  = 4;
    optional  SCBoltStringRegionsPolicy  stringRegionsPolicy  = 99;
}

message SCBoltStorageClassPolicy {
    optional  string  storageClass  = 1;
}

message SCBoltStoragePolicy {
    optional  SCBoltStorageClassPolicy  storageClassPolicy  = 1;
}

message SCBoltStringRegionsPolicy {
    repeated  string  stringRegionArray  = 2;
}

message SCBoltUInt64Value {
    optional  uint64  value  = 1;
}

message SCBoltv2Claim {
    optional  uint32  useCase  = 1;
    optional  string  externalId  = 2;
    optional  SCBoltv2ClaimPolicy  claimPolicy  = 3;
    optional  SCBoltv2MediaOptimizationProperties  mediaOptimizationProperties  = 4;
    optional  bool  allowReclaim  = 5;
}

message SCBoltv2ClaimPolicy {
    optional  GPBTimestamp  expiration  = 1;
    optional  SCBoltReplicationPolicy  replication  = 2;
    optional  uint64  cdnTtlSeconds  = 3;
    optional  SCBoltStoragePolicy  storagePolicy  = 4;
}

message SCBoltv2ContentReferenceResult {
    optional  int32  statusCode  = 1;
    optional  string  contentURL  = 2;
    optional  bytes  contentObject  = 3;
    optional  SCCORECodeProperties  statusCodeProperties  = 4;
}

message SCBoltv2ExternalContentReference {
    optional  int32  storageProvider  = 1;
    optional  int32  storageRegion  = 2;
    optional  string  bucketName  = 3;
    optional  string  objectPath  = 4;
}

message SCBoltv2GetUploadLocationsRequest {
    optional  SCBoltv2UserContext  userContext  = 1;
    optional  uint32  batchSize  = 2;
    optional  int32  storageProvider  = 3;
    optional  int32  contentReferenceResultOption  = 4;
    repeated  string  suffixExtensionsArray  = 5;
    optional  int32  storageRegion  = 6;
    repeated  int32  uploadURLTypesArray  = 7[packed=true];
    optional  SCBoltv2Claim  claim  = 8;
    repeated  string  URLHeaders  = 9;
    optional  bool  skipCdnForUploadURL  = 10;
    optional  bytes  uploadCofConfig  = 11;
    optional  SCBoltStoragePolicy  storagePolicy  = 12;
    optional  uint32  uploadURLExpirationHours  = 13;
}

message SCBoltv2GetUploadLocationsResponse {
    repeated  SCBoltv2UploadLocation  uploadLocationsArray  = 1;
}

message SCBoltv2MediaOptimizationProperties {
    optional  int32  featureContentType  = 1;
    optional  bool  excludeSource  = 2;
    optional  SCBoltv2ClaimPolicy  claimPolicyOverride  = 3;
    repeated  SCBoltv2VariantProperties  variantPropertiesArray  = 4;
    optional  bool  forceTranscode  = 5;
    optional  string  debugInfo  = 6;
    optional  bool  asyncNotificationIncludeMediaOptimizationDetails  = 7;
    optional  bool  alwaysIncludeSource  = 8;
    optional  bool  asyncExpediteNotifications  = 9;
    optional  bool  bestEffort  = 10;
    optional  bool  needFollowUpCheck  = 99;
}

message SCBoltv2MediaTransformationProperties {
    optional  uint32  sourceX  = 1;
    optional  uint32  sourceY  = 2;
    optional  uint32  sourceWidth  = 3;
    optional  uint32  sourceHeight  = 4;
    optional  uint32  outputWidth  = 5;
    optional  uint32  outputHeight  = 6;
}

message SCBoltv2SegmentFrameProperties {
    optional  uint32  startFrame  = 1;
    optional  uint32  endFrame  = 2;
}

message SCBoltv2SegmentTimeProperties {
    optional  uint64  startMillis  = 1;
    optional  uint64  endMillis  = 2;
}

message SCBoltv2SubtitleProperties {
    optional  string  language  = 1;
    optional  SCBoltv2ExternalContentReference  externalContentReference  = 2;
    optional  string  externalURL  = 3;
}

message SCBoltv2UploadCofConfig {
    optional  uint32  numUploadUrls  = 1;
    optional  int64  storageRegionId  = 2;
    optional  uint32  uploadURLExpirationHours  = 3;
}

message SCBoltv2UploadLocation {
    optional  string  uploadURL  = 1;
    optional  GPBTimestamp  uploadURLExpiryTime  = 2;
    optional  GPBDuration  validDurationAfterSuccessfulUpload  = 3;
    optional  SCBoltv2ContentReferenceResult  contentReference  = 4;
    optional  int32  uploadURLType  = 5;
    repeated  string  URLHeaders  = 6;
    optional  string  multipartUploadURLTemplate  = 7;
    repeated  string  multipartUploadURLSignaturesArray  = 8;
    optional  string  multipartCompletionURL  = 9;
}

message SCBoltv2UserContext {
    optional  string  userCountry  = 1;
    optional  string  userIp  = 2;
    optional  string  userId  = 3;
    optional  string  userRegion  = 4;
    optional  string  appVersion  = 10;
}

message SCBoltv2VariantProperties {
    optional  int32  mediaVariantName  = 1;
    optional  bool  required  = 2;
    optional  bool  unencryptedOutput  = 3;
    optional  string  outputKey  = 4;
    optional  string  outputIv  = 5;
    optional  SCBoltv2VodStreamingProperties  vodStreamingProperties  = 10;
    optional  SCBoltv2VideoProperties  videoProperties  = 11;
    optional  bool  includeBeforeCompleted  = 12;
    optional  SCBoltv2MediaTransformationProperties  mediaTransformationProperties  = 13;
}

message SCBoltv2VideoProperties {
    optional  bool  calculateVmaf  = 1;
    optional  SCBoltv2SegmentFrameProperties  segmentFrameProperties  = 2;
    optional  SCBoltv2SegmentTimeProperties  segmentTimeProperties  = 3;
    optional  int32  audioNormalizationProperties  = 4;
}

message SCBoltv2VodStreamingProperties {
    repeated  SCBoltv2SubtitleProperties  webvttSubtitlesArray  = 1;
}

message SCCNativeDULPABConfig {
    repeated  int32  disabledMediaSourcesArray  = 1[packed=true];
}

message SCCOMMONRuid {
    optional  int32  type  = 1;
    optional  string  stringValue  = 2;
    optional  string  loggingIdValue  = 3;
}

message SCCOMMONVersionNumber {
    repeated  uint32  numbersArray  = 1[packed=true];
}

message SCCOMMONVersionNumberRange {
    optional  SCCOMMONVersionNumber  min  = 1;
    optional  bool  minInclusive  = 2;
    optional  SCCOMMONVersionNumber  max  = 3;
    optional  bool  maxInclusive  = 4;
}

message SCCOREAppVersion {
    optional  SCCOREAppVersion_VersionNumber  versionNumber  = 1;
    optional  int32  flavor  = 2;
}

message SCCOREAppVersion_VersionNumber {
    optional  int32  major  = 1;
    optional  int32  minor  = 2;
    optional  int32  patch  = 3;
    optional  int32  build  = 4;
}

message SCCORECodeProperties {
    optional  uint32  errorCode  = 1;
    optional  string  errorDescription  = 2;
    optional  bool  isRetryable  = 3;
    optional  string  source  = 4;
}

message SCCORECompositeStoryId {
    optional  int32  corpus  = 1;
    optional  string  id_p  = 2;
    optional  int64  version  = 3;
}

message SCCOREGeoHeader {
    optional  SCCORELocation  location  = 1;
    optional  SCCOREISP  isp  = 2;
}

message SCCOREISP {
    optional  uint32  asn  = 1;
}

message SCCORELocation {
    optional  string  country  = 1;
    optional  string  region  = 2;
    optional  string  city  = 3;
    optional  double  latitude  = 4;
    optional  double  longitude  = 5;
    optional  int32  continent  = 6;
}

message SCCORETopic {
    optional  int32  type  = 1;
}

message SCCOREUUID {
    optional  fixed64  highBits  = 1;
    optional  fixed64  lowBits  = 2;
}

message SCCPCharm {
    optional  int32  identifier  = 1;
    optional  string  displayName  = 2;
    optional  SCCPCharmDescription  description_p  = 3;
    optional  string  dialogButtonText  = 4;
    optional  SCCPCharmGraphic  graphic  = 5;
    optional  bool  hideable  = 6;
    optional  sint64  displayOrder  = 7;
}

message SCCPCharmDescription {
    optional  string  template_p  = 1;
    repeated  SCCPCharmDescriptionVariable  variablesArray  = 2;
}

message SCCPCharmDescriptionVariable {
    optional  int32  value  = 1;
    optional  SCCPUUID  groupParticipantId  = 2;
    optional  int64  streakValue  = 3;
}

message SCCPCharmGraphic {
    optional  string  previewStickerImageId  = 1;
    optional  SCCPCharmGraphic_Solomoji  detailSolomoji  = 2;
    optional  SCCPCharmGraphic_Friendmoji  detailFriendmoji  = 3;
    optional  SCCPCharmGraphic_BitmojiSelfie  previewBitmojiSelfie  = 4;
}

message SCCPCharmGraphic_BitmojiSelfie {
    optional  SCCPUUID  userId  = 1;
}

message SCCPCharmGraphic_Friendmoji {
    optional  string  templateId  = 1;
    optional  SCCPUUID  user1Id  = 2;
    optional  SCCPUUID  user2Id  = 3;
}

message SCCPCharmGraphic_Solomoji {
    optional  string  templateId  = 1;
    optional  SCCPUUID  userId  = 2;
}

message SCCPCharmIdentifier {
}

message SCCPCharms {
    optional  SCCPCharmsOwner  owner  = 1;
    repeated  SCCPCharm  charmsArray  = 2;
    repeated  SCCPHiddenCharm  hiddenCharmsArray  = 3;
}

message SCCPCharmsHideRequest {
    optional  SCCPCharmsOwner  owner  = 1;
    repeated  int32  charmIdsArray  = 2[packed=true];
    optional  int32  requestOrigin  = 13;
    optional  SCCPUUID  requestId  = 14;
    optional  int64  requestTsMs  = 15;
}

message SCCPCharmsHideResponse {
    repeated  int32  hiddenCharmIdsArray  = 1[packed=true];
    optional  SCCPUUID  requestId  = 14;
    optional  int64  requestTsMs  = 15;
}

message SCCPCharmsOwner {
    optional  SCCPUUID  friendUserId  = 1;
    optional  SCCPUUID  groupMischiefId  = 2;
}

message SCCPCharmsRequestOrigin {
}

message SCCPCharmsRestoreRequest {
    optional  SCCPCharmsOwner  owner  = 1;
    repeated  int32  charmIdsArray  = 2[packed=true];
    optional  int32  requestOrigin  = 3;
    optional  SCCPUUID  requestId  = 4;
    optional  int64  requestTsMs  = 5;
}

message SCCPCharmsRestoreResponse {
    repeated  int32  restoredCharmIdsArray  = 1[packed=true];
    optional  SCCPUUID  requestId  = 2;
    optional  int64  requestTsMs  = 3;
}

message SCCPCharmsSyncRequest {
    optional  SCCPCharmsOwner  owner  = 1;
    optional  bytes  syncToken  = 2;
    optional  int32  requestOrigin  = 3;
    optional  SCCPUUID  requestId  = 4;
    optional  int64  requestTsMs  = 5;
    optional  int32  apiVersion  = 6;
}

message SCCPCharmsSyncResponse {
    optional  SCCPCharms  charms  = 1;
    repeated  int32  unviewedCharmIdsArray  = 2[packed=true];
    repeated  int32  removedCharmIdsArray  = 3[packed=true];
    optional  bool  isFullSync  = 4;
    optional  bytes  nextSyncToken  = 5;
    optional  SCCPUUID  requestId  = 6;
    optional  int64  requestTsMs  = 7;
}

message SCCPCharmsViewRequest {
    optional  SCCPCharmsOwner  owner  = 1;
    repeated  int32  charmIdsArray  = 2[packed=true];
    optional  int32  requestOrigin  = 13;
    optional  SCCPUUID  requestId  = 14;
    optional  int64  requestTsMs  = 15;
}

message SCCPCharmsViewResponse {
    repeated  int32  viewedCharmIdsArray  = 2[packed=true];
    optional  SCCPUUID  requestId  = 14;
    optional  int64  requestTsMs  = 15;
}

message SCCPHiddenCharm {
    optional  int32  identifier  = 1;
    optional  string  displayName  = 2;
    optional  int64  hiddenTsMs  = 3;
}

message SCCPUUID {
    optional  fixed64  highBits  = 1;
    optional  fixed64  lowBits  = 2;
}

message SCCTPAcceptLanguagesEntry {
    optional  string  langTag  = 1;
    optional  int32  weight  = 2;
}

message SCCTPAltitudeStickerMetadata {
    optional  int32  type  = 1;
    optional  int32  measurementUnit  = 2;
    optional  sint32  altitude  = 3;
}

message SCCTPAttachmentStickerMetadata {
    optional  string  attachmentURL  = 1;
    optional  string  shortenedURL  = 2;
    optional  string  title  = 3;
}

message SCCTPAutoCaptions {
}

message SCCTPAutoCaptionsMetadata {
    repeated  string  phrasesArray  = 1;
    repeated  uint32  timestampsArray  = 2[packed=true];
}

message SCCTPBatteryStickerMetadata {
    optional  int32  level  = 1;
}

message SCCTPBitmojiSticker {
    optional  string  comicId  = 1;
    optional  int32  type  = 2;
    optional  bool  isAnimated  = 3;
    optional  string  altText  = 4;
    optional  bool  isCustomoji  = 5;
}

message SCCTPBitmojiStickerMetadata {
    optional  string  avatarId  = 1;
    optional  string  friendAvatarId  = 2;
    optional  string  customText  = 3;
}

message SCCTPBrush {
    optional  SCCTPStyleBrush  style  = 1;
    optional  SCCTPCharBrush  char_p  = 2;
    optional  uint32  width  = 3;
    optional  uint32  brushIndex  = 4;
}

message SCCTPCTBidiFeedRequest {
    optional  SCCTPCTRequestParams  params  = 1;
    repeated  SCCTPCTBidiFeedRequest_FeedTreeRequest  feedTreeRequestsArray  = 2;
    repeated  SCCTPCTBidiFeedRequest_ComputeRequest  computeRequestsArray  = 3;
    optional  SCAdsAdRequest  adRequest  = 4;
}

message SCCTPCTBidiFeedRequest_ComputeRequest {
    optional  int32  requestContext  = 1;
    repeated  int32  requestedFeedsArray  = 2[packed=true];
    repeated  SCCTPClientCachedCTItem  cachedItemsArray  = 3;
}

message SCCTPCTBidiFeedRequest_FeedTreeRequest {
    optional  int32  requestContext  = 1;
    repeated  int32  supportedFeedsArray  = 2[packed=true];
}

message SCCTPCTBidiFeedResponse {
    optional  SCCTPCTBidiFeedResponse_FeedTreeResponse  feedTreeResponse  = 1;
    optional  SCCTPCTBidiFeedResponse_ComputeResponse  computeResponse  = 2;
}

message SCCTPCTBidiFeedResponse_ComputeResponse {
    optional  int32  requestContext  = 1;
    optional  int32  feedType  = 2;
    optional  SCCTPComputeFeedResponse  computeFeed  = 3;
}

message SCCTPCTBidiFeedResponse_FeedTreeResponse {
    optional  int32  requestContext  = 1;
    optional  SCCTPCTFeedNode  rootNode  = 2;
}

message SCCTPCTComputeBackendData {
    optional  SCCTPCTComputeBackendData_RequestedFeed  requestedFeed  = 1;
}

message SCCTPCTComputeBackendData_RequestedFeed {
    optional  uint64  requestId  = 1;
    optional  int32  requestContext  = 2;
    optional  SCCTPCTComputeBackendData_RequestedFeed_ClientFeatures  clientFeatures  = 3;
    optional  SCCTPCTRequestParams  common  = 4;
    optional  int32  ctContext  = 5;
}

message SCCTPCTComputeBackendData_RequestedFeed_ClientFeatures {
    optional  int32  feed  = 1;
}

message SCCTPCTConfig {
    repeated  int32  targetsArray  = 1[packed=true];
    repeated  string  languagesArray  = 2;
}

message SCCTPCTFeedNode {
    optional  int32  type  = 1;
    optional  string  name  = 2;
    optional  SCCTPMediaContent  media  = 3;
    repeated  SCCTPCTFeedNode  nodesArray  = 4;
    optional  SCCTPCTFeedNode_CTFeedSource  source  = 5;
    optional  uint64  id_p  = 6;
    optional  uint32  spanCount  = 7;
    optional  bool  isContextIndependent  = 8;
}

message SCCTPCTFeedNode_CTFeedSource {
    optional  SCCTPCTFeedNode_CTFeedSource_DeltaForce  deltaForce  = 1;
    optional  SCCTPCTFeedNode_CTFeedSource_Compute  compute  = 2;
    optional  SCCTPCTFeedNode_CTFeedSource_Client  client  = 3;
    optional  SCCTPCTFeedNode_CTFeedSource_NoSource  noSource  = 4;
    optional  SCCTPCTFeedNode_CTFeedSource_Stream  stream  = 5;
}

message SCCTPCTFeedNode_CTFeedSource_Client {
}

message SCCTPCTFeedNode_CTFeedSource_Compute {
    optional  string  path  = 1;
    repeated  bytes  backendPrivateDataArray  = 2;
    optional  string  cofKeyForTtl  = 3;
}

message SCCTPCTFeedNode_CTFeedSource_DeltaForce {
    optional  SCCTPDeltaForceGroupKey  groupKey  = 1;
}

message SCCTPCTFeedNode_CTFeedSource_NoSource {
}

message SCCTPCTFeedNode_CTFeedSource_Stream {
    optional  string  cofKeyForTtl  = 1;
}

message SCCTPCTFeedRequest {
    optional  int32  requestContext  = 1;
    optional  SCCTPCTFeedRequest_ClientFeatures  clientFeatures  = 2;
    optional  SCCTPCTRequestParams  requestParams  = 3;
    repeated  int32  feedTypesArray  = 4[packed=true];
}

message SCCTPCTFeedRequest_ClientFeatures {
    repeated  int32  feedsArray  = 1[packed=true];
}

message SCCTPCTFeedResponse {
    optional  SCCTPCTFeedNode  root  = 1;
}

message SCCTPCTIntentToReaction {
    repeated  SCCTPCTIntentToReaction_IntentReaction  reactionsArray  = 1;
}

message SCCTPCTIntentToReaction_IntentReaction {
    optional  int32  intentType  = 1;
    optional  bytes  chatReactionId  = 2;
}

message SCCTPCTItem {
    optional  SCCTPCompositeId  legacyCompositeId  = 1;
    optional  SCCTPCTItem_Entity  entity  = 2;
    optional  SCCTPCTConfig  config  = 3;
    optional  uint64  ctId  = 4;
    repeated  SCCTPCTItem_AssociatedId  associatedIdsArray  = 5;
    optional  bytes  id_p  = 6;
    optional  int32  syncSensitivity  = 7;
}

message SCCTPCTItemExternalID {
    optional  string  bitmojiComicId  = 1;
    optional  string  stickerName  = 2;
    optional  string  customStickerId  = 3;
    optional  string  emojiUnicode  = 4;
    optional  string  giphyId  = 5;
    optional  int64  cameoId  = 6;
    optional  string  stickerPackName  = 7;
    optional  string  cameoExternalId  = 8;
    optional  string  emojiHex  = 9;
    optional  string  infoStickerId  = 10;
    optional  string  targetedItemId  = 11;
    optional  int64  captionStyleId  = 12;
    optional  uint64  musicTrackId  = 13;
    optional  string  emojiEscapedId  = 14;
    optional  string  chatCameoExternalId  = 15;
    optional  int64  chatCameoId  = 16;
    optional  string  gfycatId  = 17;
    optional  int64  serverCameoId  = 18;
    optional  string  chatReactionId  = 19;
    optional  uint64  filterId  = 20;
    optional  string  proxyId  = 21;
    optional  string  cameraRollStickerId  = 22;
}

message SCCTPCTItemInstance {
    optional  bytes  ctpId  = 1;
    optional  SCCTPCTItem  item  = 2;
    optional  SCCTPCTItemInstance_Metadata  metadata  = 3;
}

message SCCTPCTItemInstance_Metadata {
    optional  SCCTPBitmojiStickerMetadata  bitmojiStickerMetadata  = 1;
    optional  SCCTPCaptionStyleMetadata  captionStyleMetadata  = 2;
    optional  SCCTPInfoStickerMetadata  infoStickerMetadata  = 3;
    optional  SCCTPMusicTrackMetadata  musicTrackMetadata  = 4;
    optional  SDMMediaMetadata  legacyEditsBlob  = 5;
    optional  bytes  legacyEditsJson  = 6;
    optional  SCCTPFilterMetadata  filterMetadata  = 7;
    optional  SCCTPDrawingMetadata  drawingMetadata  = 8;
    optional  SCCTPAutoCaptionsMetadata  autoCaptionsMetadata  = 9;
    optional  SCCTPCameoStickerMetadata  cameoStickerMetadata  = 10;
    optional  SCCTPAttachmentStickerMetadata  attachmentStickerMetadata  = 11;
    optional  SCCTPEmojiStickerMetadata  emojiStickerMetadata  = 12;
}

message SCCTPCTItem_AssociatedId {
    optional  int32  corpus  = 1;
    optional  string  id_p  = 2;
}

message SCCTPCTItem_Entity {
    optional  SCCTPSnapSticker  snapSticker  = 1;
    optional  SCCTPBitmojiSticker  bitmojiSticker  = 2;
    optional  SCCTPCustomSticker  customSticker  = 3;
    optional  SCCTPEmoji  emoji  = 4;
    optional  SCCTPGiphy  giphy  = 5;
    optional  SCCTPCameo  cameo  = 6;
    optional  SCCTPMusicTrack  musicTrack  = 7;
    optional  SCCTPStickerPack  stickerPack  = 8;
    optional  SCCTPInfoSticker  infoSticker  = 9;
    optional  SCCTPCaptionStyles  captionStyles  = 11;
    optional  SCCTPChatCameo  chatCameo  = 12;
    optional  SCCTPGfycat  gfycat  = 13;
    optional  SCCTPServerCameo  serverCameo  = 14;
    optional  SCCTPChatReactionIntent  chatReaction  = 15;
    optional  SCCTPFilter  filter  = 16;
    optional  SCCTPCustomStickerPack  customStickerPack  = 17;
    optional  SCCTPShoppingSticker  shoppingSticker  = 18;
    optional  SCCTPMusicArtist  musicArtist  = 19;
    optional  SCCTPDrawing  drawing  = 20;
    optional  SCCTPLottie  lottie  = 21;
    optional  SCCTPAutoCaptions  autoCaptions  = 22;
    optional  SCCTPProxyItem  proxyItem  = 23;
    optional  SCCTPCameraRollSticker  cameraRollSticker  = 24;
}

message SCCTPCTItemsRequest {
}

message SCCTPCTItemsResponse {
    repeated  SCCTPCTItem  itemsArray  = 1;
}

message SCCTPCTRequestOptions {
    optional  SCCTPCTRequestOptions_Cameos  cameos  = 1;
    optional  SCCTPCTRequestOptions_Bitmoji  bitmoji  = 2;
}

message SCCTPCTRequestOptions_Bitmoji {
    optional  string  timezoneId  = 2;
}

message SCCTPCTRequestOptions_Cameos {
    repeated  int32  gendersArray  = 1[packed=true];
    optional  SCCameosApiVersion  apiVersion  = 2;
    optional  int32  maxCustomCameos  = 3;
    optional  int32  maxInfoCameos  = 4;
    optional  bool  onePersonFriendCameoContext  = 5;
}

message SCCTPCTRequestParams {
    repeated  SCCTPAcceptLanguagesEntry  acceptLanguagesArray  = 1;
    repeated  SCCTPCTRequestOptions  optionsArray  = 4;
    optional  SCCTPUserInfo  userInfo  = 5;
    optional  SCCTPCTRequestOptions_Cameos  cameosOptions  = 8;
    repeated  int32  syncSensitivitiesArray  = 9[packed=true];
    optional  int64  lastLowSensitivityTimestampMs  = 10;
    optional  SCCTPFilterRequest  filterRequest  = 11;
    optional  int64  numItems  = 12;
}

message SCCTPCTTargetedItem {
    optional  string  legacyGeofilterId  = 2;
    optional  SCCTPCTTargetedItem_TargetedEntity  targetedEntity  = 3;
    optional  string  name  = 4;
    optional  int64  createdTime  = 5;
    optional  SCCTPCTTargetedItem_Visibility  visibility  = 6;
    optional  SCCTPCTTargetedItem_Schedule  schedule  = 7;
    optional  SCCTPCTTargetedItem_TargetingRules  targetingRules  = 8;
    optional  uint64  priority  = 9;
    repeated  string  tagsArray  = 10;
    optional  SCCTPCTTargetedItem_UnlockMechanism  unlockMechanism  = 11;
    optional  bool  useLocalTimezone  = 12;
    optional  bool  isSponsored  = 14;
    optional  int32  adProduct  = 15;
    optional  SCCTPCTTargetedItem_FilterInfo  filterInfo  = 16;
    optional  int32  syncSensitivity  = 17;
    optional  bool  isArchived  = 18;
    optional  bool  disableAutoTargeting  = 19;
    optional  uint64  checksum  = 20;
}

message SCCTPCTTargetedItem_FilterInfo {
    optional  float  aspectRatio  = 1;
    optional  bool  isCentered  = 2;
    optional  bool  isBitmoji  = 3;
}

message SCCTPCTTargetedItem_Schedule {
    optional  SCCTPCTTargetedItem_Schedule_ScheduleOnce  once  = 1;
    optional  SCCTPCTTargetedItem_Schedule_Repeat  repeat  = 2;
    optional  SCCTPCTTargetedItem_Schedule_Intervals  intervals  = 3;
    optional  SCCTPCTTargetedItem_Schedule_Always  always  = 4;
}

message SCCTPCTTargetedItem_Schedule_Always {
}

message SCCTPCTTargetedItem_Schedule_Intervals {
    repeated  SCCTPCTTargetedItem_Schedule_TimeInterval  intervalsArray  = 1;
}

message SCCTPCTTargetedItem_Schedule_Repeat {
    optional  int64  startDateTime  = 1;
    optional  int64  endDateTime  = 2;
    optional  int64  scheduleEndDateTime  = 3;
    optional  int32  frequency  = 4;
    repeated  uint32  daysToRepeatArray  = 5[packed=true];
    optional  string  timeZone  = 6;
}

message SCCTPCTTargetedItem_Schedule_ScheduleOnce {
    optional  SCCTPCTTargetedItem_Schedule_TimeInterval  interval  = 1;
}

message SCCTPCTTargetedItem_Schedule_TimeInterval {
    optional  int64  startDateTime  = 1;
    optional  int64  endDateTime  = 2;
}

message SCCTPCTTargetedItem_TargetedEntity {
    optional  uint64  ctId  = 1;
    optional  bytes  ctpId  = 2;
}

message SCCTPCTTargetedItem_TargetingRules {
    repeated  string  geofencesArray  = 3;
    optional  SCCTPTargetingExpression  targetingExpression  = 7;
    repeated  int32  countriesArray  = 9[packed=true];
    repeated  int32  localesArray  = 10[packed=true];
    optional  bool  includeUnknownAge  = 12;
    optional  bool  useDeclaredAge  = 13;
    optional  string  abStudyId  = 14;
    optional  SCCOREAppVersion_VersionNumber  minAndroidVersion  = 15;
    optional  SCCOREAppVersion_VersionNumber  maxAndroidVersion  = 16;
    optional  SCCOREAppVersion_VersionNumber  minIosVersion  = 17;
    optional  SCCOREAppVersion_VersionNumber  maxIosVersion  = 18;
    repeated  SCCOREUUID  userIdsArray  = 19;
    repeated  string  geofenceTagsArray  = 20;
    repeated  SCCOREUUID  userSnapadsIdsArray  = 21;
    repeated  string  userTargetingGroupIdsArray  = 22;
    repeated  SCCTPUIntRange  ageRangesArray  = 23;
    repeated  string  blackoutCriteriaIdsArray  = 24;
    optional  SCCOMMONVersionNumberRange  androidAppVersionRange  = 25;
    optional  SCCOMMONVersionNumberRange  iosAppVersionRange  = 26;
    optional  SCCOMMONVersionNumberRange  androidMushroomVersionRange  = 27;
    optional  SCCOMMONVersionNumberRange  iosOsVersionRange  = 28;
    optional  SCCTPUIntRange  appleDeviceGenerationRange  = 29;
    optional  SCCOMMONVersionNumberRange  androidOsVersionRange  = 31;
    repeated  string  allowlistedEligibleUserSaidsArray  = 32;
    repeated  int32  excludedCountriesArray  = 33[packed=true];
    repeated  string  targetedCofIdsArray  = 34;
    repeated  string  filteringCofIdsArray  = 35;
}

message SCCTPCTTargetedItem_UnlockMechanism {
    optional  bool  snapcode  = 1;
    optional  bool  snapcodeWithinFence  = 2;
    optional  bool  manual  = 3;
    optional  bool  pinned  = 4;
    optional  bool  social  = 5;
}

message SCCTPCTTargetedItem_Visibility {
    optional  SCCTPCTTargetedItem_Visibility_Off  off  = 2;
    optional  SCCTPCTTargetedItem_Visibility_Public  public_p  = 3;
    optional  SCCTPCTTargetedItem_Visibility_AllowList  allowlist  = 4;
}

message SCCTPCTTargetedItem_Visibility_AllowList {
    optional  bool  allowAllEmployees  = 2;
    optional  bool  allowAllTesters  = 3;
}

message SCCTPCTTargetedItem_Visibility_Off {
}

message SCCTPCTTargetedItem_Visibility_Public {
}

message SCCTPCTTargetedItems {
    repeated  SCCTPCTTargetedItem  itemsArray  = 1;
}

message SCCTPCameo {
    optional  int64  cameoId  = 1;
    repeated  int32  gendersArray  = 2[packed=true];
    optional  SCCTPMediaContent  mediaContent  = 3;
    optional  SCCameosApiVersion  minimumApiVersion  = 4;
    optional  int64  cloneGroupId  = 5;
    optional  SCCameosCustomTextParameters  customTextParameters  = 6;
    optional  string  cameoExternalId  = 7;
    optional  int32  stickerType  = 8;
    repeated  SCCameosListOfLenses  targetLenses  = 9;
}

message SCCTPCameoCTItemsOptions {
    repeated  int32  gendersArray  = 1[packed=true];
    optional  SCCameosApiVersion  apiVersion  = 2;
    repeated  SCCTPAcceptLanguagesEntry  acceptLanguagesArray  = 3;
    optional  int32  maxCustomCameos  = 4;
    optional  int32  maxInfoCameos  = 5;
}

message SCCTPCameoCTItemsRequest {
    optional  SCCTPCameoCTItemsOptions  cameoOptions  = 1;
}

message SCCTPCameoStickerMetadata {
    optional  string  customText  = 1;
}

message SCCTPCameraRollSticker {
    optional  string  encKey  = 1;
    optional  string  encIv  = 2;
    optional  int64  creationTimeSeconds  = 3;
    optional  SCCTPMediaContent  mediaContent  = 4;
    optional  SCCOREUUID  creatorId  = 5;
    optional  uint32  width  = 6;
    optional  uint32  height  = 7;
}

message SCCTPCaptionStyle {
    optional  string  styleName  = 1;
    optional  string  displayName  = 2;
    optional  SCCTPCaptionStyle_FontStyle  fontStyle  = 3;
    optional  SCCTPCaptionStyle_BackgroundStyle  backgroundStyle  = 4;
    optional  bool  colorChangeable  = 5;
    optional  string  baseColor  = 6;
    optional  bool  isWifiOnly  = 7;
    optional  int32  styleType  = 8;
}

message SCCTPCaptionStyleMetadata {
    optional  string  text  = 1;
    optional  int32  editingFontSize  = 2;
    repeated  SCCOREUUID  placeIdsArray  = 3;
}

message SCCTPCaptionStyle_BackgroundStyle {
    optional  SCCTPCaptionStyle_Color  color  = 1;
    optional  SCCTPCaptionStyle_Shadow  boxShadow  = 2;
    optional  GPBFloatValue  borderRadius  = 3;
    optional  string  backgroundImageURL  = 4;
    optional  bool  isStretchable  = 5;
}

message SCCTPCaptionStyle_Color {
    repeated  string  colorArray  = 1;
    repeated  GPBFloatValue  colorStopArray  = 2;
    optional  int32  colorTransform  = 3;
    optional  GPBFloatValue  colorGradientAngleDegree  = 4;
    repeated  GPBFloatValue  colorTransformParamsArray  = 5;
}

message SCCTPCaptionStyle_FontStyle {
    optional  string  fontName  = 1;
    optional  string  fontURL  = 2;
    optional  SCCTPCaptionStyle_Color  fontColor  = 3;
    optional  SCCTPCaptionStyle_Color  borderColor  = 4;
    optional  GPBFloatValue  letterSpacing  = 5;
    optional  GPBFloatValue  lineHeight  = 6;
    optional  GPBFloatValue  fontSize  = 7;
    optional  GPBFloatValue  fontBorderWidth  = 8;
    optional  int32  textTransform  = 9;
    repeated  SCCTPCaptionStyle_Shadow  textShadowArray  = 10;
    optional  int32  textDecoration  = 11;
    optional  int32  textAlign  = 12;
    optional  SCCTPCaptionStyle_TextPadding  padding  = 13;
    optional  GPBFloatValue  minFontSize  = 14;
    optional  GPBFloatValue  maxFontSize  = 15;
    optional  SCCTPMediaContent  mediaContent  = 16;
}

message SCCTPCaptionStyle_Shadow {
    optional  SCCTPCaptionStyle_Color  color  = 1;
    optional  GPBFloatValue  x  = 2;
    optional  GPBFloatValue  y  = 3;
    optional  GPBFloatValue  radius  = 4;
}

message SCCTPCaptionStyle_TextPadding {
    optional  GPBFloatValue  top  = 1;
    optional  GPBFloatValue  left  = 2;
    optional  GPBFloatValue  right  = 3;
    optional  GPBFloatValue  bottom  = 4;
}

message SCCTPCaptionStyles {
    repeated  SCCTPCaptionStyle  captionStylesArray  = 1;
    optional  int64  captionStyleId  = 2;
}

message SCCTPCharBrush {
    optional  string  char_p  = 1;
}

message SCCTPChatCameo {
    optional  int64  cameoId  = 1;
    optional  string  cameoExternalId  = 2;
    optional  SCCameosApiVersion  minimumApiVersion  = 3;
    repeated  int32  gendersArray  = 4[packed=true];
    optional  SCCameosChatCameoResourceCollection  resources  = 5;
    repeated  SCCameosChatCameoResourceCollection  testResources  = 6;
    optional  SPCPStringListValue  globalCategories  = 7;
    repeated  SPCPStringListValue  localizedCategories  = 8;
    repeated  SCCameosListOfLenses  targetLenses  = 9;
}

message SCCTPChatReactionIntent {
    repeated  SCCTPChatReactionIntent_ReactionSticker  reactionsArray  = 1;
    optional  int32  intentType  = 2;
}

message SCCTPChatReactionIntent_ReactionSticker {
    optional  SCCTPBitmojiSticker  bitmoji  = 1;
    optional  SCCTPEmoji  emoji  = 2;
    optional  SCCTPSnapSticker  snapSticker  = 3;
    optional  SCCTPCameo  cameo  = 4;
    optional  SCCTPCustomSticker  customSticker  = 5;
}

message SCCTPCheckItemsRequest {
    repeated  SCCTPCheckItemsRequest_Item  itemsArray  = 1;
    repeated  SCCTPUserDataItem  userdataItemsArray  = 2;
}

message SCCTPCheckItemsRequest_Item {
    optional  int32  category  = 1;
    optional  SCCTPCTItemExternalID  externalId  = 2;
    optional  SCCTPExternalKey  externalKey  = 3;
}

message SCCTPCheckItemsResponse {
    repeated  SCCTPCheckItemsResponse_Item  itemsArray  = 1;
}

message SCCTPCheckItemsResponse_Item {
    optional  bool  exists  = 1;
}

message SCCTPClientCachedCTItem {
    optional  bytes  id_p  = 1;
    optional  uint32  version  = 2;
}

message SCCTPClientSearchTags {
    repeated  SCCTPClientSearchTags_ItemInfo  itemsMap  = 1;
}

message SCCTPClientSearchTagsInverted {
    repeated  SCCTPClientSearchTagsInverted_CTIdList  ctIdMap  = 1;
    repeated  SCCTPCTItem_Entity  entityMap  = 2;
}

message SCCTPClientSearchTagsInverted_CTIdList {
    repeated  SCCTPClientSearchTagsInverted_CTResult  resultsArray  = 1;
}

message SCCTPClientSearchTagsInverted_CTMetadata {
    optional  bool  isExact  = 1;
}

message SCCTPClientSearchTagsInverted_CTResult {
    optional  bytes  ctpId  = 1;
    optional  SCCTPClientSearchTagsInverted_CTMetadata  metadata  = 2;
}

message SCCTPClientSearchTagsOpt {
    repeated  SCCTPClientSearchTagsOpt_MapEntry  itemsMapArray  = 1;
}

message SCCTPClientSearchTagsOpt_MapEntry {
    optional  uint64  key  = 1;
    optional  SCCTPClientSearchTags_ItemInfo  value  = 2;
}

message SCCTPClientSearchTags_ItemInfo {
    repeated  string  tagsArray  = 1;
    optional  SCCTPCTItem_Entity  entity  = 2;
}

message SCCTPCompositeId {
    optional  uint64  id_p  = 1;
    optional  int32  type  = 2;
}

message SCCTPComputeFeedRequest {
    repeated  bytes  backendPrivateDataArray  = 1;
    optional  SCCTPCameoCTItemsOptions  cameoOptions  = 2;
    optional  SCCTPPagination  pagination  = 3;
    repeated  SCCTPClientCachedCTItem  cachedItemsArray  = 4;
    optional  SCCTPQueryInterval  liveWindow  = 5;
    optional  int32  requestContext  = 6;
    optional  int32  feedType  = 7;
    optional  SCCTPCTRequestParams  requestParams  = 8;
}

message SCCTPComputeFeedResponse {
    repeated  SCCTPCTItem  itemsArray  = 1;
    optional  SCCTPSectionedResults  sectionedResults  = 2;
    optional  SCCTPComputeFeedResponse_FlatResults  flatResults  = 3;
    optional  bytes  requestId  = 4;
    optional  SCCTPFlags  flags  = 5;
}

message SCCTPComputeFeedResponse_FlatResults {
    repeated  SCCTPCTItem  itemsArray  = 1;
    optional  SCCTPPageToken  pageToken  = 2;
    repeated  SCCTPResultEntry  entriesArray  = 3;
}

message SCCTPContentRestrictions {
    optional  SCCTPContentRestrictions_CountryList  countryBlocklist  = 1;
    optional  SCCTPContentRestrictions_CountryList  countryAllowlist  = 2;
}

message SCCTPContentRestrictions_CountryList {
    repeated  uint32  countryCodesArray  = 1[packed=true];
}

message SCCTPCustomSticker {
    optional  string  encKey  = 1;
    optional  string  encIv  = 2;
    optional  int64  creationTimeSeconds  = 3;
    optional  SCCTPMediaContent  mediaContent  = 4;
    optional  SCCOREUUID  creatorId  = 5;
    optional  uint32  width  = 6;
    optional  uint32  height  = 7;
}

message SCCTPCustomStickerAddRefRequest {
    optional  bytes  id_p  = 1;
    optional  string  externalId  = 2;
}

message SCCTPCustomStickerAddRefResponse {
    optional  SCCTPCustomStickerStatus  status  = 1;
}

message SCCTPCustomStickerBatchOpsRequest {
    repeated  SCCTPCustomStickerCreateRequest  createRequestsArray  = 1;
    repeated  SCCTPCustomStickerDeleteRequest  deleteRequestsArray  = 2;
}

message SCCTPCustomStickerBatchOpsResponse {
    repeated  SCCTPCustomStickerCreateResponse  createResponsesArray  = 1;
    repeated  SCCTPCustomStickerDeleteResponse  deleteResponsesArray  = 2;
    optional  SCCTPCustomStickerStatus  status  = 3;
}

message SCCTPCustomStickerCreateRequest {
    optional  SCCTPCTItem  customSticker  = 1;
}

message SCCTPCustomStickerCreateResponse {
    optional  SCCTPCustomStickerResult  result  = 1;
}

message SCCTPCustomStickerDeleteRequest {
    optional  bytes  id_p  = 1;
    optional  bool  shouldDeletePack  = 2;
}

message SCCTPCustomStickerDeleteResponse {
    optional  SCCTPCustomStickerStatus  status  = 1;
}

message SCCTPCustomStickerGetRequest {
    repeated  bytes  idsArray  = 1;
}

message SCCTPCustomStickerGetResponse {
    repeated  SCCTPCustomStickerResult  resultsArray  = 1;
}

message SCCTPCustomStickerListPackRequest {
    optional  bytes  packId  = 1;
    optional  bool  includeItems  = 2;
}

message SCCTPCustomStickerListPackResponse {
    optional  SCCTPCustomStickerStatus  status  = 1;
    optional  SCCTPCTItem  customStickerPack  = 2;
}

message SCCTPCustomStickerOrderWeightSpec {
    optional  bytes  stickerId  = 1;
    optional  int64  orderWeight  = 2;
}

message SCCTPCustomStickerPack {
    repeated  SCCTPCustomStickerPackEntry  entriesArray  = 1;
}

message SCCTPCustomStickerPackEntry {
    optional  bytes  stickerId  = 1;
    optional  int64  orderWeight  = 2;
    optional  SCCTPCustomSticker  customSticker  = 3;
}

message SCCTPCustomStickerRemoveRefRequest {
    optional  bytes  id_p  = 1;
    optional  string  externalId  = 2;
}

message SCCTPCustomStickerRemoveRefResponse {
    optional  SCCTPCustomStickerStatus  status  = 1;
}

message SCCTPCustomStickerResult {
    optional  SCCTPCustomStickerStatus  status  = 1;
    optional  SCCTPCTItem  customSticker  = 2;
}

message SCCTPCustomStickerStatus {
    optional  bytes  id_p  = 1;
    optional  bool  isSuccess  = 2;
    optional  string  errorMessage  = 3;
}

message SCCTPCustomStickerUpdateOrderWeightRequest {
    optional  bytes  packId  = 1;
    repeated  SCCTPCustomStickerOrderWeightSpec  orderWeightSpecsArray  = 2;
}

message SCCTPCustomStickerUpdateOrderWeightResponse {
    optional  SCCTPCustomStickerStatus  status  = 1;
}

message SCCTPDateTimeStickerMetadata {
    optional  int32  type  = 1;
    optional  int64  time  = 2;
}

message SCCTPDeltaForceGroupKey {
    optional  string  kind  = 1;
    optional  string  name  = 2;
    optional  uint64  id_p  = 3;
}

message SCCTPDrawing {
}

message SCCTPDrawingMetadata {
    optional  uint32  brush  = 1;
    optional  SDMPaths  paths  = 2;
}

message SCCTPDrawings {
    repeated  SCCTPBrush  brushesArray  = 1;
}

message SCCTPEmoji {
    optional  string  unicode  = 1;
    optional  string  hex  = 2;
    optional  string  escapedString  = 3;
}

message SCCTPEmojiQueriesDeltaForceGroupKey {
    optional  string  groupKind  = 1;
    optional  string  groupName  = 2;
}

message SCCTPEmojiStickerMetadata {
    optional  int32  skinTone  = 1;
}

message SCCTPEmojiToDraw {
    repeated  string  emojisArray  = 1;
}

message SCCTPEncryptedMedia {
    optional  string  contentURL  = 1;
    optional  bytes  encKey  = 2;
    optional  bytes  encIv  = 3;
    optional  bool  isPermanentContentURL  = 4;
    optional  int32  encType  = 5;
}

message SCCTPExternalKey {
    optional  int32  itemType  = 1;
    optional  string  id_p  = 2;
}

message SCCTPFilter {
    optional  uint64  filterId  = 1;
    optional  SCCTPFilter_Media  media  = 2;
    optional  SCCTPFilter_ClientTargetingInfo  clientTargetingInfo  = 3;
    optional  SCCTPFilter_FriendFilterInfo  friendFilterInfo  = 4;
    optional  SCCTPFilter_FrameFilterInfo  frameFilterInfo  = 5;
    optional  SCCTPFilter_BitmojiFilterInfo  bitmojiFilterInfo  = 6;
    optional  SCCTPFilter_DynamicFilterInfo  dynamicFilterInfo  = 7;
    optional  SCCTPFilter_SponsoredFilterInfo  sponsoredFilterInfo  = 8;
    optional  SCCTPFilter_Audio  audio  = 9;
    optional  SCCTPFilter_Attachment  attachment  = 10;
    optional  SCCTPFilter_ClientOrderingInfo  clientOrderingInfo  = 11;
    optional  SCCTPFilter_ClientRenderingInfo  clientRenderingInfo  = 12;
    optional  int64  clientCacheTtlMinutes  = 13;
    optional  int32  autoStackFilterType  = 14;
    optional  SCCTPFilter_ArSegmentationInfo  arSegmentationInfo  = 15;
    optional  SCCTPFilter_Tooltip  tooltip  = 16;
    optional  SCCTPFilter_ToastMessage  toastMessage  = 17;
    optional  bool  isSponsored  = 18;
    optional  SCCTPFilter_SponsoredSlug  sponsoredSlug  = 19;
    optional  SCCTPFilter_SponsoredTrackInfo  sponsoredTrackInfo  = 20;
    optional  bytes  encGeoData  = 21;
    optional  SCCTPFilter_ClientGeneratedFilter  clientGenFilter  = 22;
}

message SCCTPFilterCarouselOrderingConfig {
    repeated  string  filterGroupsOrderingArray  = 1;
    optional  string  cameraType  = 2;
}

message SCCTPFilterCarouselOrderingItem {
    optional  string  filterGroup  = 1;
    optional  int32  size  = 2;
}

message SCCTPFilterMetadata {
    optional  SCCOREUUID  placeId  = 1;
}

message SCCTPFilterRequest {
    optional  SCAdsAdRequest  adRequest  = 1;
    repeated  uint64  debugFilterIdsArray  = 2[packed=true];
}

message SCCTPFilter_ArSegmentationInfo {
    optional  bool  shouldDisplayWithoutSegmentationMatch  = 1;
    optional  bool  isBasic  = 2;
    optional  SCCTPFilter_ArSegmentationInfo_SkyFilter  skyFilter  = 3;
    optional  SCCTPFilter_ArSegmentationInfo_PortraitFilter  portraitFilter  = 4;
}

message SCCTPFilter_ArSegmentationInfo_PortraitFilter {
    optional  string  URL  = 1;
    optional  bool  bokeh  = 2;
}

message SCCTPFilter_ArSegmentationInfo_SkyFilter {
    optional  int32  skyType  = 1;
    optional  int32  style  = 2;
    optional  string  replacementSkyURL  = 3;
    optional  string  blimpURL  = 4;
}

message SCCTPFilter_Attachment {
    optional  string  ctaText  = 1;
    optional  SCCTPFilter_Attachment_LongFormVideo  longFormVideo  = 2;
    optional  SCAdsWebViewAttachment  webView  = 3;
    optional  SCAdsAppInstall  appInstall  = 4;
    optional  SCAdsDeeplink  deepLink  = 5;
}

message SCCTPFilter_Attachment_LongFormVideo {
    optional  string  videoId  = 1;
    optional  int32  platform  = 2;
}

message SCCTPFilter_Audio {
    optional  string  URL  = 1;
    optional  bool  isLooping  = 2;
}

message SCCTPFilter_BitmojiFilterInfo {
    optional  string  comicId  = 1;
}

message SCCTPFilter_ClientGeneratedFilter {
    optional  SCCTPFilter_ClientGeneratedFilter_ColorFilter  colorFilter  = 1;
    optional  SCCTPFilter_ClientGeneratedFilter_MotionFilter  motionFilter  = 2;
}

message SCCTPFilter_ClientGeneratedFilter_ColorFilter {
    optional  int32  type  = 1;
}

message SCCTPFilter_ClientGeneratedFilter_MotionFilter {
    optional  int32  type  = 1;
}

message SCCTPFilter_ClientOrderingInfo {
    optional  SCCTPFilter_ClientOrderingInfo_CarouselGroupInfo  carouselGroupInfo  = 1;
    optional  bool  guaranteeDelivery  = 2;
    optional  int32  priority  = 3;
}

message SCCTPFilter_ClientOrderingInfo_CarouselGroupInfo {
    optional  string  groupName  = 1;
    optional  float  carouselScore  = 2;
}

message SCCTPFilter_ClientRenderingInfo {
    optional  int32  scale  = 1;
    optional  int32  position  = 2;
    optional  bool  belowDrawingLayer  = 3;
}

message SCCTPFilter_ClientTargetingInfo {
    repeated  int32  cameraContextsArray  = 1[packed=true];
    repeated  int32  mediaTypeContextsArray  = 2[packed=true];
    repeated  int64  actionmojiContextsArray  = 3[packed=true];
    repeated  string  visualContextsArray  = 4;
    optional  SCCTPFilter_ClientTargetingInfo_Geofence  geofence  = 5;
}

message SCCTPFilter_ClientTargetingInfo_Geofence {
    optional  string  id_p  = 1;
    repeated  SPCGGeometry  geometryArray  = 2;
}

message SCCTPFilter_DynamicFilterInfo {
    repeated  SCCTPFilter_DynamicFilterInfo_Content  contentArray  = 1;
    optional  SCCTPFilter_DynamicFilterInfo_ContentSettings  contentSettings  = 2;
    optional  SCCTPFilter_DynamicFilterInfo_Context  context  = 3;
}

message SCCTPFilter_DynamicFilterInfo_Content {
    optional  int32  type  = 1;
    optional  string  source  = 2;
    optional  uint32  refreshIntervalSec  = 3;
    optional  SCCTPFilter_DynamicFilterInfo_Content_LayoutParameters  layoutParameters  = 4;
    optional  SCCTPFilter_DynamicFilterInfo_Content_DisplayParameters  displayParameters  = 5;
    optional  SCCTPFilter_DynamicFilterInfo_Content_CompanionCreativeInfo  companionCreativeInfo  = 6;
}

message SCCTPFilter_DynamicFilterInfo_ContentSettings {
    optional  bool  refreshable  = 1;
    optional  float  refreshMessageXPortrait  = 2;
    optional  float  refreshMessageYPortrait  = 3;
    optional  float  refreshMessageXLandscape  = 4;
    optional  float  refreshMessageYLandscape  = 5;
    optional  string  refreshHint  = 6;
    optional  string  updatingMessage  = 7;
}

message SCCTPFilter_DynamicFilterInfo_Content_CompanionCreativeInfo {
    optional  bool  movable  = 1;
    optional  bool  modifiable  = 2;
    optional  SCCTPFilter_DynamicFilterInfo_Content_CompanionCreativeInfo_RatingSticker  ratingSticker  = 3;
}

message SCCTPFilter_DynamicFilterInfo_Content_CompanionCreativeInfo_RatingSticker {
    optional  string  unselectedStateAssetURL  = 1;
    optional  string  selectedStateAssetURL  = 2;
    optional  int32  initialRating  = 3;
    optional  int32  maxRating  = 4;
}

message SCCTPFilter_DynamicFilterInfo_Content_DisplayParameters {
    optional  string  font  = 1;
    optional  int32  fontSize  = 2;
    optional  int32  maxResizableFontSize  = 3;
    optional  string  textColor  = 4;
    optional  float  textAlpha  = 5;
    optional  int32  textAlignment  = 6;
    optional  SCCTPFilter_DynamicFilterInfo_Content_DisplayParameters_TextShadow  textShadow  = 7;
    optional  string  staticText  = 8;
    optional  SCCTPFilter_DynamicFilterInfo_Content_DisplayParameters_DynamicText  dynamicText  = 9;
    optional  string  fallbackText  = 10;
    optional  SCCTPFilter_DynamicFilterInfo_Content_DisplayParameters_DynamicCountdown  dynamicCountdown  = 11;
    optional  int32  fallbackMethod  = 12;
}

message SCCTPFilter_DynamicFilterInfo_Content_DisplayParameters_DynamicCountdown {
    optional  string  targetDatetime  = 1;
    optional  int32  targetDatetimeDirection  = 2;
}

message SCCTPFilter_DynamicFilterInfo_Content_DisplayParameters_DynamicText {
    optional  string  text  = 1;
    optional  int32  capitalization  = 2;
}

message SCCTPFilter_DynamicFilterInfo_Content_DisplayParameters_TextShadow {
    optional  string  color  = 1;
    optional  int32  shadowOffsetX  = 2;
    optional  int32  shadowOffsetY  = 3;
    optional  float  blurRadius  = 4;
}

message SCCTPFilter_DynamicFilterInfo_Content_LayoutParameters {
    optional  float  xOffset  = 1;
    optional  float  yOffset  = 2;
    optional  float  width  = 3;
    optional  float  height  = 4;
    optional  float  rotation  = 5;
    optional  int32  zIndex  = 6;
}

message SCCTPFilter_DynamicFilterInfo_Context {
    repeated  string  deeplinkProperties  = 1;
    repeated  SCCTPFilter_DynamicFilterInfo_Context_TimeComponent  relativeTimeComponentsArray  = 2;
}

message SCCTPFilter_DynamicFilterInfo_Context_TimeComponent {
    optional  int32  timeUnit  = 1;
    optional  string  singularName  = 2;
    optional  string  pluralName  = 3;
}

message SCCTPFilter_FrameFilterInfo {
}

message SCCTPFilter_FriendFilterInfo {
    repeated  int32  friendContextsArray  = 1[packed=true];
    repeated  int32  triggerContextsArray  = 2[packed=true];
    optional  bool  usesFriendmoji  = 3;
}

message SCCTPFilter_Media {
    optional  SCCTPMediaContent  mediaContent  = 1;
    optional  SCMEDIAImageSize  size  = 2;
    repeated  string  URLParams  = 3;
    optional  bool  isAnimated  = 4;
}

message SCCTPFilter_SponsoredFilterInfo {
    optional  SCCTPFilter_SponsoredSlug  sponsoredSlug  = 1;
    optional  SCCTPFilter_SponsoredFilterInfo_TrackInfo  trackInfo  = 2;
}

message SCCTPFilter_SponsoredFilterInfo_TrackInfo {
    optional  string  adServeRequestId  = 1;
    optional  bytes  rawAdData  = 2;
    optional  bool  skipTracking  = 3;
    optional  bytes  encryptedSponsoredUnlockableTargetingInfoData  = 4;
    optional  string  rankingId  = 5;
    optional  bytes  rankingData  = 6;
    optional  bytes  encryptedUserTrackData  = 7;
    optional  bytes  skAdNetworkAttribution  = 8;
    optional  bytes  adId  = 9;
}

message SCCTPFilter_SponsoredSlug {
    optional  string  text  = 1;
    optional  uint32  timeBeforeFadeoutMs  = 2;
    optional  int32  position  = 3;
}

message SCCTPFilter_SponsoredTrackInfo {
    optional  string  adServeRequestId  = 1;
    optional  bytes  rawAdData  = 2;
    optional  bool  skipTracking  = 3;
    optional  bytes  encryptedSponsoredUnlockableTargetingInfoData  = 4;
    optional  string  rankingId  = 5;
    optional  bytes  rankingData  = 6;
    optional  bytes  encryptedUserTrackData  = 7;
    optional  bytes  skAdNetworkAttribution  = 8;
    optional  bytes  adId  = 9;
}

message SCCTPFilter_ToastMessage {
    optional  string  message  = 1;
    optional  int32  position  = 2;
    optional  int32  fadeInTimeMs  = 3;
    optional  int32  onScreenTimeMs  = 4;
    optional  int32  fadeOutTimeMs  = 5;
}

message SCCTPFilter_Tooltip {
    optional  string  localizedMessage  = 1;
    optional  int32  coolDownPeriodMinutes  = 2;
}

message SCCTPFlags {
    optional  bool  useClientOrdering  = 1;
}

message SCCTPFlattenedRules {
    repeated  SCCTPFlattenedRules_AndOperation  orOperationArray  = 1;
}

message SCCTPFlattenedRules_AndOperation {
    repeated  SCCTPFlattenedRules_CategoryRule  rulesArray  = 1;
}

message SCCTPFlattenedRules_CategoryRule {
    optional  SCCTPFlattenedRules_CategoryRule_UIntRule  uintRule  = 1;
    optional  SCCTPFlattenedRules_CategoryRule_StringRule  stringRule  = 2;
    optional  int32  category  = 3;
}

message SCCTPFlattenedRules_CategoryRule_StringRule {
    optional  bool  isAllowList  = 1;
    repeated  bool  values  = 2;
}

message SCCTPFlattenedRules_CategoryRule_UIntRule {
    repeated  bool  allowed  = 1;
    repeated  bool  blocked  = 2;
    repeated  SCCTPUIntRange  rangesArray  = 3;
}

message SCCTPGTQComparisonRequest {
    repeated  string  geofilterIdsArray  = 2;
    optional  SCCTPCTComputeBackendData  commonReqParams  = 3;
}

message SCCTPGTQComparisonResponse {
    optional  bool  geofiltersMatch  = 1;
}

message SCCTPGeoLocation {
    optional  double  latitude  = 1;
    optional  double  longitude  = 2;
    optional  double  horizontalAccuracyMeters  = 3;
    optional  uint64  timestampMsecs  = 4;
}

message SCCTPGetItemsByCTPIDsRequest {
    repeated  bytes  ctpIdsArray  = 1;
}

message SCCTPGetItemsByCTPIDsResponse {
    repeated  SCCTPGetItemsByCTPIDsResponse_ItemResponse  itemResponsesArray  = 1;
}

message SCCTPGetItemsByCTPIDsResponse_ItemResponse {
    optional  SCCTPCTItem  item  = 2;
}

message SCCTPGetItemsByExternalIDsRequest {
    repeated  SCCTPCTItemExternalID  externalIdsArray  = 1;
    repeated  SCCTPExternalKey  externalKeysArray  = 2;
}

message SCCTPGetItemsByExternalIDsResponse {
    repeated  SCCTPGetItemsByExternalIDsResponse_Item  itemsArray  = 1;
}

message SCCTPGetItemsByExternalIDsResponse_Item {
    optional  SCCTPCTItemExternalID  externalId  = 1;
    optional  SCCTPCTItem  item  = 2;
    optional  SCCTPExternalKey  externalKey  = 3;
}

message SCCTPGfycat {
    optional  string  gfycatId  = 1;
    optional  string  title  = 2;
    optional  string  description_p  = 3;
    repeated  SCCTPGfycat_MediaAsset  mediaAssetsArray  = 4;
    repeated  string  tagsArray  = 5;
    optional  int32  contentType  = 6;
    optional  bool  hasAudio  = 7;
    optional  uint64  viewCount  = 8;
    optional  uint64  likes  = 9;
    optional  bool  published  = 10;
    optional  bool  userNsfw  = 11;
    repeated  string  categoriesArray  = 12;
    optional  uint64  frameCount  = 13;
    optional  float  frameRate  = 14;
    optional  string  avgColor  = 15;
    optional  string  slugs  = 16;
    optional  string  creatorGfycatUsername  = 17;
}

message SCCTPGfycat_MediaAsset {
    optional  int32  format  = 1;
    optional  SCCTPMediaContent  mediaContent  = 2;
    optional  uint32  width  = 3;
    optional  uint32  height  = 4;
    optional  uint64  size  = 5;
}

message SCCTPGiphy {
    optional  string  giphyId  = 1;
    optional  SCCTPMediaContent  mediaContent  = 2;
}

message SCCTPGiphySearchRequest {
    optional  string  query  = 1;
}

message SCCTPGiphySearchResponse {
    repeated  SCCTPCTItem  giphysArray  = 1;
}

message SCCTPGiphyTrendingRequest {
}

message SCCTPGiphyTrendingResponse {
    repeated  SCCTPCTItem  giphysArray  = 1;
}

message SCCTPHometabRequest {
    optional  int32  origin  = 1;
    optional  SCCTPCTRequestParams  common  = 2;
    optional  int32  context  = 3;
    repeated  SCCTPClientCachedCTItem  cachedItemsArray  = 4;
}

message SCCTPHometabResponse {
    optional  SCCTPSectionedResults  results  = 1;
}

message SCCTPInfoSticker {
    optional  int32  type  = 1;
}

message SCCTPInfoStickerMetadata {
    optional  SCCTPPlaceStickerMetadata  placeStickerMetadata  = 1;
    optional  SCCTPQuestionStickerMetadata  questionStickerMetadata  = 2;
    optional  SCCTPWeatherStickerMetadata  weatherStickerMetadata  = 3;
    optional  SCCTPDateTimeStickerMetadata  dateTimeStickerMetadata  = 4;
    optional  SCCTPAltitudeStickerMetadata  altitudeStickerMetadata  = 5;
    optional  SCCTPMentionStickerMetadata  mentionStickerMetadata  = 6;
    optional  SCCTPSnapcodeStickerMetadata  snapcodeStickerMetadata  = 7;
    optional  SCCTPStoryInviteStickerMetadata  storyInviteStickerMetadata  = 8;
    optional  SCCTPPollStickerMetadata  pollStickerMetadata  = 9;
    optional  SCCTPBatteryStickerMetadata  batteryStickerMetadata  = 10;
}

message SCCTPInternalPageToken {
    optional  GPBInt64Value  unixSeconds  = 1;
}

message SCCTPListItemsRequest {
    optional  int32  category  = 1;
    optional  SCCTPPagination  pagination  = 3;
    repeated  int32  typesArray  = 4[packed=true];
    optional  bool  includeBackfill  = 5;
    optional  SCCTPCTRequestParams  requestParams  = 6;
    optional  GPBTimestamp  minTimestampFilter  = 7;
}

message SCCTPListItemsResponse {
    repeated  SCCTPListItemsResponse_Item  itemsArray  = 1;
    optional  SCCTPPageToken  pageToken  = 3;
}

message SCCTPListItemsResponse_Item {
    optional  SCCTPCTItem  ctitem  = 1;
    optional  GPBTimestamp  lastUpdated  = 2;
}

message SCCTPLottie {
    optional  SCCTPMediaContent  mediaContent  = 1;
}

message SCCTPMediaContent {
    optional  string  thumbnailURL  = 1;
    optional  string  contentURL  = 2;
    optional  bytes  thumbnailBoltObject  = 3;
    optional  bytes  contentBoltObject  = 4;
}

message SCCTPMentionStickerMetadata {
    optional  int32  type  = 1;
    optional  string  username  = 2;
    optional  string  displayName  = 3;
}

message SCCTPMiniAppMetadata {
    optional  string  miniAppId  = 1;
    optional  string  miniAppShareInfo  = 2;
}

message SCCTPMusicArtist {
    optional  uint64  artistId  = 1;
    optional  string  name  = 2;
    optional  SCCTPEncryptedMedia  encryptedArtistArt  = 3;
}

message SCCTPMusicAsset {
    optional  uint64  trackId  = 1;
    optional  bytes  audioData  = 2;
    optional  SCCTPContentRestrictions  contentRestrictions  = 3;
    optional  double  startOffsetSeconds  = 4;
    optional  SCCTPMusicAsset_RemoteMedia  remoteAudioData  = 5;
}

message SCCTPMusicAsset_RemoteMedia {
    optional  string  URL  = 1;
    optional  bytes  encryptionKey  = 2;
    optional  bytes  encryptionIv  = 3;
}

message SCCTPMusicTrack {
    optional  uint64  trackId  = 1;
    optional  string  title  = 2;
    optional  string  albumName  = 3;
    optional  string  artistName  = 4;
    optional  uint64  durationSec  = 7;
    optional  SCCTPContentRestrictions  contentRestrictions  = 8;
    optional  string  externalServiceURL  = 9;
    optional  SCCTPEncryptedMedia  encryptedAlbumArt  = 10;
    optional  SCCTPEncryptedMedia  encryptedAudioTrack  = 11;
    optional  bool  isExplicit  = 12;
    optional  uint32  startOffsetMs  = 13;
    optional  int32  trackType  = 14;
    optional  string  releaseDate  = 16;
}

message SCCTPMusicTrackCTItemsRequest {
}

message SCCTPMusicTrackMetadata {
    optional  uint32  startOffsetMs  = 1;
}

message SCCTPPageToken {
    optional  bytes  pageToken  = 1;
}

message SCCTPPagination {
    optional  uint32  pageSize  = 1;
    optional  SCCTPPageToken  pageToken  = 2;
}

message SCCTPPlaceStickerMetadata {
    optional  SCCOREUUID  placeId  = 1;
}

message SCCTPPollStickerMetadata {
    optional  bool  isDynamic  = 1;
    optional  SCPPollInfo  pollInfo  = 2;
}

message SCCTPProxyItem {
    optional  SCCTPProxySource  source  = 1;
}

message SCCTPProxySource {
    optional  int32  enum_p  = 1;
}

message SCCTPPutItemsByExternalIDRequest {
    repeated  SCCTPPutItemsByExternalIDRequest_Item  itemsArray  = 1;
    optional  bool  includeCtitems  = 2;
}

message SCCTPPutItemsByExternalIDRequest_Item {
    optional  SCCTPCTItemExternalID  externalId  = 1;
    optional  int32  category  = 2;
    optional  SCCTPExternalKey  externalKey  = 3;
    optional  GPBTimestamp  lastUpdatedOverwrite  = 4;
    optional  uint32  useCountOverwrite  = 5;
}

message SCCTPPutItemsByExternalIDResponse {
    repeated  SCCTPPutItemsByExternalIDResponse_Result  resultsArray  = 1;
}

message SCCTPPutItemsByExternalIDResponse_Result {
    optional  bool  success  = 1;
    optional  SCCTPCTItem  item  = 2;
    optional  int32  errorCode  = 3;
}

message SCCTPPutItemsRequest {
    repeated  SCCTPUserDataItem  itemsArray  = 1;
    optional  bool  includeCtitems  = 2;
}

message SCCTPPutItemsResponse {
    repeated  SCCTPUserDataCTItemResult  resultsArray  = 1;
}

message SCCTPQueryInterval {
    optional  uint32  startTimeSec  = 1;
    optional  uint32  durationSec  = 2;
}

message SCCTPQueryString {
    repeated  string  queryStrArray  = 1;
}

message SCCTPQuestionStickerMetadata {
    optional  string  questionText  = 1;
    optional  string  answerText  = 2;
}

message SCCTPRecommendationsCTContext {
    optional  SCCTPRecommendationsCTContext_LensContext  lensContext  = 1;
    optional  SCCTPRecommendationsCTContext_FilterContext  filterContext  = 2;
}

message SCCTPRecommendationsCTContext_FilterContext {
    optional  string  filterId  = 1;
}

message SCCTPRecommendationsCTContext_LensContext {
    optional  string  lensId  = 1;
}

message SCCTPRecommendationsCTRecommendation {
    optional  SCCTPRecommendationsCTContext  context  = 1;
    repeated  SCCTPMusicTrack  tracksArray  = 2;
}

message SCCTPRecommendationsGetCTRecommendationsRequest {
    repeated  SCCTPRecommendationsCTContext  contextsArray  = 1;
}

message SCCTPRecommendationsGetCTRecommendationsResponse {
    optional  string  requestId  = 1;
    repeated  SCCTPRecommendationsCTRecommendation  recommendationsArray  = 2;
}

message SCCTPRemoveAllItemsRequest {
    optional  int32  category  = 1;
}

message SCCTPRemoveAllItemsResponse {
    optional  bool  success  = 1;
}

message SCCTPRemoveItemsByExternalIDRequest {
    repeated  SCCTPRemoveItemsByExternalIDRequest_Item  itemsArray  = 1;
}

message SCCTPRemoveItemsByExternalIDRequest_Item {
    optional  SCCTPCTItemExternalID  externalId  = 1;
    optional  int32  category  = 2;
    optional  SCCTPExternalKey  externalKey  = 3;
}

message SCCTPRemoveItemsByExternalIDResponse {
    repeated  SCCTPRemoveItemsByExternalIDResponse_Result  resultsArray  = 1;
}

message SCCTPRemoveItemsByExternalIDResponse_Result {
    optional  bool  success  = 1;
    optional  uint64  ctId  = 2;
    optional  bytes  ctpId  = 3;
    optional  int32  errorCode  = 4;
}

message SCCTPRemoveItemsRequest {
    repeated  SCCTPUserDataItem  itemsArray  = 1;
}

message SCCTPRemoveItemsResponse {
    repeated  SCCTPUserDataCTPIDResult  resultsArray  = 1;
}

message SCCTPResult {
    optional  SCS2CompositeId  compId  = 1;
    optional  int32  resultType  = 2;
    optional  SCCTPCTItem  item  = 3;
}

message SCCTPResultEntry {
    optional  SCCTPCTItem  ctItem  = 2;
    optional  bytes  cachedId  = 3;
    optional  uint32  version  = 4;
    optional  int64  clientCacheTtlMinutes  = 5;
    optional  string  sectionName  = 6;
}

message SCCTPResultSection {
    optional  int32  sectionType  = 1;
    repeated  SCCTPResultEntry  resultsArray  = 3;
    optional  int32  layoutDirection  = 4;
    optional  int32  displayCount  = 5;
}

message SCCTPSearchRequest {
    optional  string  superSessionId  = 1;
    optional  string  searchSessionId  = 2;
    optional  int64  sessionQueryId  = 3;
    optional  string  query  = 4;
    optional  int32  origin  = 5;
    optional  SCS2UserInfo  userInfo  = 6;
    repeated  SCS2StudyInfo  studyInfoArray  = 7;
    repeated  SCS2Tweak  tweaksArray  = 8;
    repeated  int32  sectionsToReturnArray  = 9[packed=true];
    repeated  SCCTPAcceptLanguagesEntry  acceptLanguagesArray  = 10;
    repeated  SCS2StickerResultTypeOption  resultTypeOptionsArray  = 11;
    optional  int32  timezoneOffsetMinutes  = 12;
}

message SCCTPSearchResponse {
    repeated  SCCTPSection  sectionsArray  = 1;
    optional  string  debugHtml  = 2;
}

message SCCTPSearchTags {
    optional  uint64  ctId  = 1;
    repeated  SCCTPSearchTags_TagsList  localeTags  = 2;
}

message SCCTPSearchTagsByStickerId {
    repeated  SCCTPSearchTagsByStickerId_StickerInfo  stickerInfosArray  = 1;
}

message SCCTPSearchTagsByStickerId_StickerInfo {
    optional  string  stickerId  = 1;
    repeated  string  tagsArray  = 2;
}

message SCCTPSearchTagsIndex {
    repeated  bytes  itemsArray  = 1;
    repeated  SCCTPSearchTagsIndex_IndexEntry  indexArray  = 2;
}

message SCCTPSearchTagsIndex_CTMetadata {
    optional  bool  isExact  = 1;
}

message SCCTPSearchTagsIndex_CTResult {
    optional  uint32  id_p  = 1;
    optional  SCCTPSearchTagsIndex_CTMetadata  metadata  = 2;
}

message SCCTPSearchTagsIndex_IndexEntry {
    optional  string  tag  = 1;
    repeated  SCCTPSearchTagsIndex_CTResult  resultsArray  = 2;
}

message SCCTPSearchTags_TagsList {
    repeated  string  tagsArray  = 1;
}

message SCCTPSection {
    optional  int32  sectionType  = 1;
    repeated  SCCTPResult  resultsArray  = 2;
}

message SCCTPSectionedResults {
    optional  string  debugHtml  = 2;
    repeated  SCCTPResultSection  sectionsArray  = 3;
}

message SCCTPServerCameo {
    optional  int64  cameoId  = 1;
    repeated  int32  gendersArray  = 2[packed=true];
    optional  SCCTPMediaContent  mediaContent  = 3;
    optional  SCCameosApiVersion  minimumApiVersion  = 4;
    optional  int64  cloneGroupId  = 5;
    repeated  SCCameosCustomTextParameters  customTextParametersCollection  = 6;
    optional  int32  stickerType  = 7;
    repeated  SCCameosListOfLenses  targetLenses  = 8;
}

message SCCTPShoppingSticker {
    optional  uint64  snapItemId  = 1;
    optional  SCCOREUUID  storeId  = 2;
    optional  string  stickerTitle  = 3;
    optional  SCCTPMediaContent  mediaContent  = 4;
}

message SCCTPSnapSticker {
    optional  string  name  = 2;
    optional  bool  isAnimated  = 3;
    optional  SCCTPMediaContent  mediaContent  = 4;
    optional  SCCTPMiniAppMetadata  miniAppMetadata  = 5;
    repeated  string  displayNameByLocale  = 6;
}

message SCCTPSnapcodeStickerMetadata {
    optional  bool  withUserTag  = 1;
}

message SCCTPStickerPack {
    optional  string  name  = 1;
    optional  int64  version  = 2;
    optional  int64  priority  = 3;
    optional  bool  isTestPack  = 4;
    repeated  uint64  ctIdsArray  = 5[packed=true];
    repeated  SCCTPStickerPack_StickerEntity  stickersArray  = 6;
    optional  bool  isSearchable  = 7;
    optional  bool  isActive  = 8;
    optional  int32  type  = 9;
    repeated  bytes  ctpIdsArray  = 10;
    optional  uint64  displayCount  = 11;
    optional  string  localizedName  = 12;
    optional  int64  color  = 13;
}

message SCCTPStickerPack_StickerEntity {
    optional  SCCTPSnapSticker  snapStickerEntity  = 1;
}

message SCCTPStoryInviteStickerMetadata {
    optional  int32  type  = 1;
    optional  string  inviteId  = 2;
    optional  string  storyName  = 3;
}

message SCCTPStyleBrush {
    optional  uint32  color  = 1;
}

message SCCTPTargetingExpression {
    optional  SCCTPTargetingExpression_ParentNode  parentNode  = 1;
    optional  SCCTPTargetingExpression_LeafNode  leafNode  = 2;
}

message SCCTPTargetingExpression_LeafNode {
    optional  int32  category  = 1;
    optional  int32  operator_p  = 2;
    optional  string  value  = 3;
}

message SCCTPTargetingExpression_ParentNode {
    optional  int32  booleanOperator  = 1;
    repeated  SCCTPTargetingExpression  childrenArray  = 2;
}

message SCCTPTimeZone {
    optional  int32  offsetMinutes  = 1;
}

message SCCTPUCORankingSupportUpdatesConfig {
    optional  bool  ucoStackingLimitationsRemoved  = 1;
    repeated  string  filterGroupsOrderingArray  = 2;
}

message SCCTPUCORankingSupportUpdatesConfigV2 {
    repeated  SCCTPFilterCarouselOrderingConfig  filterCarouselOrderingConfigsArray  = 1;
}

message SCCTPUIntRange {
    optional  uint32  minValue  = 1;
    optional  uint32  maxValue  = 2;
}

message SCCTPUserDataCTItemResult {
    optional  SCCTPCTItem  item  = 1;
    optional  int32  errorCode  = 2;
}

message SCCTPUserDataCTPIDResult {
    optional  bytes  id_p  = 1;
    optional  int32  errorCode  = 2;
}

message SCCTPUserDataItem {
    optional  bytes  id_p  = 1;
    optional  int32  category  = 2;
    optional  GPBTimestamp  lastUpdatedOverwrite  = 3;
    optional  uint32  useCountOverwrite  = 4;
}

message SCCTPUserInfo {
    optional  int32  age  = 1;
    optional  string  countryCode  = 2;
    optional  SCCTPGeoLocation  location  = 3;
    optional  string  bitmojiAvatarId  = 4;
    optional  int32  gender  = 5;
    optional  bool  hasBitmoji  = 7;
    optional  bool  hasCameo  = 8;
    optional  string  birthdate  = 9;
    optional  SCCTPTimeZone  timeZone  = 10;
    optional  int64  accountCreationTimestampMs  = 11;
    optional  int32  snapScore  = 12;
    optional  SCCOREUUID  snapAdsId  = 13;
    optional  float  aspectRatio  = 14;
    optional  bool  isTestUser  = 15;
    optional  string  username  = 16;
}

message SCCTPVoiceoverAsset {
    optional  bytes  fullAudio  = 1;
    repeated  bytes  audioSegmentsArray  = 2;
}

message SCCTPWeatherStickerMetadata {
    optional  int32  type  = 1;
    optional  sint32  celsius  = 3;
    optional  int32  measurementSystem  = 4;
    optional  string  locationName  = 5;
    repeated  SCCTPWeatherStickerMetadata_HourlyForecast  hourlyForecastArray  = 6;
    repeated  SCCTPWeatherStickerMetadata_DailyForecast  dailyForecastArray  = 7;
}

message SCCTPWeatherStickerMetadata_DailyForecast {
    optional  sint32  minTemperatureInCelsius  = 3;
    optional  sint32  maxTemperatureInCelsius  = 4;
    optional  string  weatherCondition  = 5;
    optional  string  displayTime  = 6;
}

message SCCTPWeatherStickerMetadata_HourlyForecast {
    optional  sint32  celsius  = 2;
    optional  string  weatherCondition  = 3;
    optional  string  displayTime  = 4;
}

message SCCTTopicSticker {
    optional  SCCOREUUID  topicId  = 1;
    optional  string  stickerText  = 2;
}

message SCCTTopicStickerMemoriesModel {
    optional  SCCOREUUID  topicId  = 1;
    optional  string  stickerText  = 2;
}

message SCCTTopicStory {
}

message SCCTXAction {
    optional  SCCTXActionMetric  metric  = 1;
    optional  SCCTXUrlAction  URLAction  = 2;
    optional  SCCTXChatAction  chatAction  = 3;
    optional  SCCTXCameraAction  cameraAction  = 4;
    optional  SCCTXCardsAction  cardsAction  = 5;
    optional  SCCTXGroupInviteAction  groupInviteAction  = 6;
    optional  SCCTXStoryReplyAction  storyReplyAction  = 8;
    optional  SCCTXStoryInviteAction  storyInviteAction  = 9;
    optional  SCCTXGameAction  gameAction  = 10;
    optional  SCCTXUserProfileAction  userProfileAction  = 11;
    optional  SCCTXPublicProfileAction  publicProfileAction  = 12;
    optional  SCCTXSnappableAction  snappableAction  = 13;
    optional  SCCTXLensAction  lensAction  = 14;
    optional  SCCTXCameoOnboardingAction  cameoOnboardingAction  = 15;
    optional  SCCTXBoostAction  boostAction  = 16;
    optional  SCCTXPlaceProfileAction  placeProfileAction  = 17;
    optional  SCCTXShareAction  shareAction  = 18;
    optional  SCCTXEditAction  editAction  = 19;
    optional  SCCTXCameraV2Action  cameraV2Action  = 20;
    optional  SCCTXDiscoverPremiumAction  discoverPremiumAction  = 21;
    optional  SCCTXReadAction  readAction  = 22;
    optional  SCCTXCreativeToolsStickerAction  creativetoolsStickerAction  = 23;
    optional  SCCTXAstrologyProfileAction  astrologyProfileAction  = 24;
    optional  SCCTXTopicAction  topicAction  = 25;
    optional  SCCTXWatchSpotlightAction  watchSpotlightAction  = 26;
    optional  SCCTXShowInfoAction  showInfoAction  = 27;
    optional  SCCTXSoundProfileAction  soundProfileAction  = 28;
    optional  SCCTXAdCollectionItemAction  adCollectionItemAction  = 29;
    optional  SCCTXMemoriesFavoriteAction  memoriesFavoriteAction  = 30;
    optional  SCCTXSnapProSelfServeAction  snapProSelfServeAction  = 31;
    optional  SCCTXPostStoryAction  postStoryAction  = 32;
    optional  SCCTXLensProfileAction  lensProfileAction  = 33;
    optional  SCCTXAppProfileAction  appProfileAction  = 34;
    optional  SCCTXCreateAvatarAction  createAvatarAction  = 35;
    optional  SCCTXBitmojiStickerUnlockAction  bitmojiStickerAction  = 36;
    optional  SCCTXCommerceAction  commerceAction  = 37;
    optional  SCCTXPollAction  pollAction  = 38;
    optional  SCCTXRemixAction  remixAction  = 39;
    optional  SCCTXTrendingTopicsAction  trendingTopicsAction  = 40;
    optional  SCCTXCommentsAction  commentsAction  = 41;
    optional  SCCTXUnifiedPublicProfileAction  unifiedPublicProfileAction  = 42;
    optional  SCCTXCheeriosAction  cheeriosAction  = 43;
    optional  SCCTXCameraShortcutAction  cameraShortcutAction  = 44;
    optional  SCCTXSnapKitIdentityWebViewAction  snapKitIdentityWebViewAction  = 45;
    optional  SCCTXDiscoverSubscriptionAction  discoverSubscriptionAction  = 46;
    optional  SCCTXManualFriendSelectionAction  manualFriendSelectionAction  = 47;
    optional  SCCTXSnapKitInviteOpenAction  snapKitInviteOpenAction  = 48;
    optional  SCCTXQuestionStickerAction  questionStickerAction  = 49;
    optional  SCCTXScreenshopAction  screenshopAction  = 50;
    optional  SCCTXSaveAction  saveAction  = 51;
    optional  SCCTXContextQSIAction  contextQsiAction  = 52;
    optional  SCCTXOpenSearchChatTab  openSearchTab  = 53;
    optional  SCCTXCommerceMultiMerchantAction  commerceMultiMerchantAction  = 54;
    optional  SCCTXOpenCameraRoll  openCameraRoll  = 55;
    optional  SCCTXDwebUpsellAction  dwebUpsellAction  = 56;
}

message SCCTXActionMetric {
    optional  string  actionType  = 1;
    optional  string  actionId  = 2;
    optional  int32  cardDataType  = 3;
}

message SCCTXAdCollectionItemAction {
    optional  int64  itemIndex  = 1;
    optional  SCCTXAdCollectionItemAction_Point  tapLocation  = 2;
}

message SCCTXAdCollectionItemAction_Point {
    optional  double  x  = 1;
    optional  double  y  = 2;
}

message SCCTXAnimation {
    optional  string  boltURL  = 1;
}

message SCCTXAppProfileAction {
    optional  string  appId  = 1;
    optional  string  oauthClientId  = 2;
    optional  string  name  = 3;
    optional  string  iconURL  = 4;
    optional  string  androidPackageName  = 5;
    optional  string  itunesAppId  = 6;
}

message SCCTXAstrologyProfileAction {
    optional  SCCTXAstrologyProfileAction_MyPersonalityProfile  myPersonalityProfile  = 1;
    optional  SCCTXAstrologyProfileAction_FriendPersonalityProfile  friendPersonalityProfile  = 2;
    optional  SCCTXAstrologyProfileAction_FriendCompatibilityProfile  friendCompatibilityProfile  = 3;
}

message SCCTXAstrologyProfileAction_FriendCompatibilityProfile {
    optional  SCCOREUUID  friendUserId  = 1;
}

message SCCTXAstrologyProfileAction_FriendPersonalityProfile {
    optional  SCCOREUUID  friendUserId  = 1;
}

message SCCTXAstrologyProfileAction_MyPersonalityProfile {
}

message SCCTXBatchCTARequest {
    repeated  SCCTXCTARequest  requestsArray  = 1;
    optional  SnapContextUserInfo  userInfo  = 2;
}

message SCCTXBatchCTAResponse {
    repeated  SCCTXCTAResponse  responsesArray  = 1;
}

message SCCTXBatchSpotlightWebRequest {
    repeated  SCCTXSpotlightWebRequest  requestsArray  = 1;
    optional  SnapContextUserInfo  userInfo  = 2;
}

message SCCTXBatchSpotlightWebResponse {
    repeated  SCCTXSpotlightWebResponse  responsesArray  = 1;
}

message SCCTXBitmoji {
    optional  string  avatarId  = 1;
    optional  string  selfieId  = 2;
}

message SCCTXBitmojiStickerUnlockAction {
    optional  string  comicId  = 1;
    optional  string  avatarId  = 2;
    optional  bool  isAnimated  = 3;
}

message SCCTXBoostAction {
}

message SCCTXCTA {
    optional  SCCTXCTA_Zones  zones  = 1;
    optional  SCCTXCTA_Gradient  gradient  = 2;
    optional  SCCTXCTA_Arrow  arrow  = 3;
    optional  SCCTXUserIdentity  user  = 4;
}

message SCCTXCTAElement {
    optional  SCCTXAction  action  = 1;
    optional  SCCTXImage  icon  = 2;
    optional  string  text  = 3;
    optional  SCCTXCssStyle  style  = 4;
    optional  SCCTXSendChatString  sendChat  = 5;
    optional  SCCTXReplyToRecipientString  replyToRecipient  = 6;
    optional  SCCTXReplyToGroupString  replyToGroup  = 7;
    optional  bool  waveform  = 8;
    optional  SCCTXAction  accessoryAction  = 9;
}

message SCCTXCTARequest {
    optional  string  snapId  = 1;
    optional  bool  canReplyViaChat  = 2;
    optional  SnapContextInfo  contextInfo  = 3;
    optional  SnapContextSnapIdentity  snapIdentity  = 4;
    optional  SnapContextViewerContentInfo  viewerContentInfo  = 5;
    optional  SnapContextViewerCreatorInfo  viewerCreatorInfo  = 6;
    optional  bool  withPostSnapActions  = 7;
    repeated  int32  excludedCardTypesArray  = 8[packed=true];
    optional  int32  navigationMode  = 9;
    optional  bool  withPostSnapFeedAction  = 10;
    optional  bool  isShareable  = 11;
}

message SCCTXCTAResponse {
    optional  SCCTXCTA  cta  = 1;
    optional  SCCTXAction  swipeUpAction  = 2;
    optional  string  contentsSummary  = 3;
    optional  string  error  = 4;
    optional  SnapContextPlaceholderCards  placeholderCards  = 5;
    optional  SCCTXPostSnapActions  postSnapActions  = 7;
    optional  SCCTXPostSnapFeedAction  postSnapFeedAction  = 8;
    optional  string  availableContextCards  = 9;
    repeated  SCCTXUserIdentity  userInfoArray  = 10;
    optional  string  debugHtml  = 11;
}

message SCCTXCTAZone {
    optional  int32  presentation  = 1;
    optional  bool  flexible  = 2;
    repeated  SCCTXCTAElement  elementsArray  = 3;
}

message SCCTXCTA_Arrow {
    optional  SCCTXCssStyle  style  = 1;
}

message SCCTXCTA_Gradient {
    optional  SCCTXCssStyle  style  = 1;
}

message SCCTXCTA_Zones {
    optional  SCCTXCTAZone  leading  = 1;
    optional  SCCTXCTAZone  center  = 2;
    optional  SCCTXCTAZone  trailing  = 3;
}

message SCCTXCameoOnboardingAction {
    repeated  string  cameoIdsArray  = 1;
}

message SCCTXCameraAction {
}

message SCCTXCameraShortcutAction {
    optional  uint64  trackId  = 1;
    repeated  string  lensIdsArray  = 2;
    optional  SCCTXDualCamera  dualCamera  = 3;
    optional  SCCTXGreenScreen  greenScreen  = 4;
    optional  SCCTXSpeedMode  speedMode  = 5;
}

message SCCTXCameraV2Action {
    optional  SCCTXCameraV2Action_Music  music  = 1;
    optional  SCCTXTimeline  timeline  = 2;
    optional  SCCTXDirectorMode  directorMode  = 3;
    optional  SCCTXDualCamera  dualCamera  = 4;
    optional  SCCTXGreenScreen  greenScreen  = 5;
    optional  SCCTXSpeedMode  speedMode  = 6;
}

message SCCTXCameraV2Action_Music {
    optional  uint64  trackId  = 1;
}

message SCCTXCardsAction {
}

message SCCTXChatAction {
}

message SCCTXCheeriosAction {
}

message SCCTXCommentsAction {
    optional  int32  intent  = 1;
}

message SCCTXCommerceAction {
    optional  SCCTXCommerceAction_CommerceItemDetailPageAction  commerceItemDetailPageAction  = 1;
    optional  SCCTXCommerceAction_CommerceStoreAction  commerceStoreAction  = 2;
}

message SCCTXCommerceAction_CommerceItemDetailPageAction {
    optional  int64  snapItemId  = 1;
    optional  string  storeId  = 2;
}

message SCCTXCommerceAction_CommerceStoreAction {
    optional  string  storeId  = 1;
    optional  string  categoryId  = 2;
}

message SCCTXCommerceMultiMerchantAction {
    optional  string  topicName  = 1;
    optional  bytes  viewingContextInternal  = 2;
}

message SCCTXCompositeId {
    optional  int32  corpus  = 1;
    optional  string  id_p  = 2;
}

message SCCTXContextClientInfo {
    repeated  string  mentionedUsernamesArray  = 1;
    repeated  SCCOREUUID  mentionedUserIdsArray  = 2;
    repeated  SCCTXContextClientInfo_GroupInviteInfo  groupInvitesArray  = 3;
    repeated  SCCTXContextClientInfo_SnapReplyRequestInfo  snapReplyRequestsArray  = 4;
    repeated  SCCOREUUID  gameIdsArray  = 5;
    repeated  SCCTXContextClientInfo_PrivateStoryInviteInfo  storyInvitesArray  = 6;
    optional  int64  publisherId  = 7;
    repeated  SCCTXContextClientInfo_TopicStickerInfo  attachedTopicStickersArray  = 8;
    repeated  int32  mentionSourcesArray  = 9[packed=true];
    repeated  SCCTXContextClientInfo_TappableElement  legacyTappableElementsArray  = 10;
    optional  SCCTXContextClientInfo_SnapProStoryReplyFeature  snapProStoryReplyFeature  = 11;
    repeated  SCCTXContextClientInfo_AppInfo  appsArray  = 12;
    optional  SCCTXContextClientInfo_TappableElementsInfo  tappableElements  = 13;
    repeated  SCCTXContextClientInfo_CameoInfo  cameosArray  = 14;
    optional  SCCTXContextClientInfo_MusicTrackInfo  musicTrack  = 15;
    repeated  SCCTXContextClientInfo_CreativeToolsStickerInfo  creativetoolsStickersArray  = 16;
    repeated  SCCTXContextClientInfo_Hashtag  hashtagsArray  = 17;
    optional  SCCTXContextClientInfo_AstrologyProfileInfo  astrologyProfileInfo  = 18;
    optional  SCCTXContextClientInfo_RemixInfo  remixInfo  = 19;
    optional  SCCTXContextClientInfo_SnapKitInfo  snapKitInfo  = 20;
    optional  SCCTXContextClientInfo_RemixSettingsInfo  remixSettingsInfo  = 21;
    optional  SCCTXTimeline  timeline  = 22;
    optional  SCCTXContextClientInfo_CommerceInfo  commerceInfo  = 23;
    repeated  SCCTXContextClientInfo_PollContextInfo  pollInfoArray  = 24;
    optional  bool  isCheeriosVideo  = 25;
    optional  SCCTXContextClientInfo_QuestionStickerInfo  questionInfo  = 26;
    optional  SCCTXContextClientInfo_CameraContextInfo  cameraContextInfo  = 27;
    optional  SCCTXContextClientInfo_ShoppingLensInfo  shoppingLensInfo  = 31;
}

message SCCTXContextClientInfo_AppInfo {
    optional  SCCOREUUID  id_p  = 1;
    optional  string  shareInfo  = 2;
}

message SCCTXContextClientInfo_AstrologyProfileInfo {
    optional  SCCTXContextClientInfo_AstrologyProfileInfo_PersonalityProfile  personalityProfile  = 1;
    optional  SCCTXContextClientInfo_AstrologyProfileInfo_CompatibilityProfile  compatibilityProfile  = 2;
}

message SCCTXContextClientInfo_AstrologyProfileInfo_CompatibilityProfile {
    optional  SCCOREUUID  sharingUserId  = 1;
}

message SCCTXContextClientInfo_AstrologyProfileInfo_PersonalityProfile {
    optional  SCCOREUUID  ownerUserId  = 1;
}

message SCCTXContextClientInfo_CameoInfo {
    optional  string  id_p  = 1;
}

message SCCTXContextClientInfo_CameraContextInfo {
    optional  SCCTXDirectorMode  directorMode  = 1;
    optional  SCCTXDualCamera  dualCamera  = 2;
    optional  SCCTXGreenScreen  greenScreen  = 3;
    optional  SCCTXSpeedMode  speedMode  = 4;
}

message SCCTXContextClientInfo_CommerceInfo {
    repeated  SCCTXContextClientInfo_CommerceInfo_CommerceItemInfo  commerceItemInfoArray  = 1;
    repeated  SCCTXContextClientInfo_CommerceInfo_CommerceStoreInfo  commerceStoreInfoArray  = 2;
    optional  SCCTXContextClientInfo_CommerceInfo_ScreenShopSnapEligibility  screenshopSnapEligibility  = 3;
}

message SCCTXContextClientInfo_CommerceInfo_CommerceItemInfo {
    optional  string  key  = 1;
    optional  int64  snapItemId  = 2;
    optional  string  storeId  = 3;
    optional  int32  itemType  = 4;
}

message SCCTXContextClientInfo_CommerceInfo_CommerceStoreInfo {
    optional  string  key  = 1;
    optional  string  storeId  = 2;
    optional  string  categoryId  = 3;
}

message SCCTXContextClientInfo_CommerceInfo_ScreenShopSnapEligibility {
    optional  int32  processingStatus  = 1;
    optional  SCPSSShoppabilityIndicator  shoppabilityIndicator  = 2;
}

message SCCTXContextClientInfo_CreativeToolsStickerInfo {
    optional  string  packId  = 1;
    optional  string  stickerId  = 2;
    optional  string  stickerType  = 3;
    optional  SCCTXContextClientInfo_CreativeToolsStickerInfo_StickerAttribution  stickerAttribution  = 4;
}

message SCCTXContextClientInfo_CreativeToolsStickerInfo_StickerAttribution {
    optional  SCCTXContextClientInfo_AppInfo  appInfo  = 1;
    optional  SCCTPShoppingSticker  shoppingSticker  = 2;
}

message SCCTXContextClientInfo_GroupInviteInfo {
    optional  SCCOREUUID  groupId  = 1;
    optional  SCCOREUUID  groupInviteId  = 2;
    optional  string  encryptedGroupInviteId  = 3;
}

message SCCTXContextClientInfo_Hashtag {
    optional  string  title  = 1;
    optional  int32  source  = 2;
    optional  bool  isServerSuggested  = 3;
}

message SCCTXContextClientInfo_MusicTrackInfo {
    optional  SCCTPContentRestrictions  contentRestrictions  = 1;
    optional  uint64  trackId  = 2;
    optional  int32  type  = 3;
    optional  double  startOffsetSeconds  = 4;
}

message SCCTXContextClientInfo_PollContextInfo {
    optional  string  pollId  = 1;
    optional  string  title  = 2;
    optional  SCPPollInfo  pollInfo  = 3;
    optional  int32  pollType  = 4;
}

message SCCTXContextClientInfo_PrivateStoryInviteInfo {
    optional  SCCOREUUID  storyId  = 1;
    optional  string  storyName  = 2;
    optional  SCCOREUUID  inviteId  = 3;
    optional  int32  storyType  = 4;
}

message SCCTXContextClientInfo_QuestionStickerInfo {
    optional  string  question  = 1;
    optional  uint64  questionCreationTimestamp  = 2;
}

message SCCTXContextClientInfo_RemixInfo {
    optional  string  sourceSnapId  = 1;
    optional  SCCOREUUID  sourceUserId  = 2;
    optional  bool  userDisabledMentionRemixing  = 3;
    optional  SCCTXContextClientInfo_RemixInfo_UserStorySource  userStorySource  = 4;
    optional  SCCTXContextClientInfo_RemixInfo_SpotlightSource  spotlightSource  = 5;
    optional  SCCTXContextClientInfo_RemixInfo_MemoriesSource  memoriesSource  = 6;
}

message SCCTXContextClientInfo_RemixInfo_MemoriesSource {
}

message SCCTXContextClientInfo_RemixInfo_SpotlightSource {
    optional  SCCOREUUID  userId  = 1;
    optional  string  snapId  = 2;
}

message SCCTXContextClientInfo_RemixInfo_UserStorySource {
    optional  SCCOREUUID  userId  = 1;
    optional  string  snapId  = 2;
}

message SCCTXContextClientInfo_RemixSettingsInfo {
    optional  bool  userDisabledMentionRemixing  = 1;
}

message SCCTXContextClientInfo_ShoppingLensInfo {
    repeated  string  productIdsArray  = 1;
}

message SCCTXContextClientInfo_SnapKitInfo {
    optional  string  oauthClientId  = 1;
    optional  string  providedAppName  = 2;
    optional  string  attachmentURL  = 3;
}

message SCCTXContextClientInfo_SnapProStoryReplyFeature {
    optional  bool  storyReplyEnabled  = 1;
    optional  bool  giftingEnabled  = 2;
}

message SCCTXContextClientInfo_SnapReplyRequestInfo {
    optional  string  requestText  = 1;
    optional  SCCOREUUID  requestId  = 2;
    optional  SCCOREUUID  storyId  = 3;
}

message SCCTXContextClientInfo_TappableElement {
    optional  SCCTXContextClientInfo_TappableElement_Appearance  appearance  = 1;
    optional  SCCTXContextClientInfo_TappableElement_Action  action  = 2;
    optional  int32  type  = 3;
}

message SCCTXContextClientInfo_TappableElement_Action {
    optional  string  key  = 1;
    optional  int32  cardDataType  = 2;
}

message SCCTXContextClientInfo_TappableElement_Appearance {
    optional  SCCTXContextClientInfo_TappableElement_Point  center  = 1;
    optional  SCCTXContextClientInfo_TappableElement_Size  size  = 2;
    optional  double  rotation  = 3;
    optional  double  cornerRadius  = 4;
}

message SCCTXContextClientInfo_TappableElement_Point {
    optional  double  x  = 1;
    optional  double  y  = 2;
}

message SCCTXContextClientInfo_TappableElement_Size {
    optional  double  width  = 1;
    optional  double  height  = 2;
}

message SCCTXContextClientInfo_TappableElementsInfo {
    repeated  SCCTXContextClientInfo_TappableElement  elementsArray  = 1;
    optional  SCCTXContextClientInfo_TappableElementsInfo_SourceClient  sourceClient  = 2;
}

message SCCTXContextClientInfo_TappableElementsInfo_SourceClient {
    optional  int32  os  = 1;
    optional  SCCOREAppVersion  appVersion  = 2;
}

message SCCTXContextClientInfo_TopicStickerInfo {
    optional  SCCTTopicSticker  topicSticker  = 1;
}

message SCCTXContextQSIAction {
    optional  int32  contextQsiActionType  = 1;
}

message SCCTXCreateAvatarAction {
}

message SCCTXCreativeToolsStickerAction {
    optional  SCCTXContextClientInfo_CreativeToolsStickerInfo  stickerInfo  = 1;
}

message SCCTXCssStyle {
    optional  SCCTXCssStyle_CssColor  backgroundColor  = 1;
    optional  SCCTXCssStyle_CssColor  foregroundColor  = 2;
    optional  string  border  = 3;
    optional  string  borderRadius  = 4;
    optional  string  shadow  = 5;
    optional  GPBDoubleValue  opacity  = 6;
    optional  bool  outlined  = 7;
    optional  int32  borderStyle  = 8;
    optional  bool  hasShadow  = 9;
}

message SCCTXCssStyle_CssColor {
    optional  int32  red  = 1;
    optional  int32  green  = 2;
    optional  int32  blue  = 3;
    optional  float  alpha  = 4;
}

message SCCTXDirectorMode {
}

message SCCTXDiscoverPremiumAction {
}

message SCCTXDiscoverSubscriptionAction {
    optional  int64  publisherId  = 1;
    optional  SCCOREUUID  userId  = 2;
}

message SCCTXDualCamera {
    optional  int32  layoutType  = 1;
}

message SCCTXDwebUpsellAction {
}

message SCCTXEditAction {
}

message SCCTXEncryptedMedia {
    optional  string  contentURL  = 1;
    optional  bytes  encKey  = 2;
    optional  bytes  encIv  = 3;
}

message SCCTXGameAction {
    optional  string  gameId  = 1;
    optional  string  thumbnail  = 2;
    optional  string  title  = 3;
    optional  string  loadingImage  = 4;
    optional  string  content  = 5;
    optional  string  shareInfo  = 6;
}

message SCCTXGreenScreen {
}

message SCCTXGroupInviteAction {
    optional  string  deeplink  = 1;
    optional  string  groupId  = 2;
    optional  string  inviteId  = 3;
}

message SCCTXHashtag {
    optional  string  title  = 1;
}

message SCCTXImage {
    optional  SCCTXImageSource  asset  = 1;
    optional  SCCTXImageSource  placeholder  = 2;
    optional  int32  placeholderTtlMs  = 3;
    optional  int32  transition  = 4;
}

message SCCTXImageSource {
    optional  string  local  = 1;
    optional  string  remote  = 2;
    optional  SCCTXEncryptedMedia  encryptedMedia  = 3;
    optional  SCCTXCssStyle  style  = 4;
    optional  int32  tint  = 5;
}

message SCCTXLensAction {
    optional  string  lensId  = 1;
    optional  string  deeplink  = 2;
    repeated  string  shoppingLensProductIdsArray  = 3;
    optional  int32  cameraMode  = 4;
}

message SCCTXLensProfileAction {
    optional  string  lensId  = 1;
    optional  string  title  = 2;
    optional  string  iconURL  = 3;
    optional  string  creatorId  = 4;
    optional  string  creatorName  = 5;
    optional  bool  isOfficialCreator  = 6;
    optional  bool  isBusinessProfile  = 8;
}

message SCCTXLocalizedString {
    optional  SCCTXSendChatString  sendChat  = 1;
    optional  SCCTXReplyToGroupString  replyToGroup  = 2;
    optional  SCCTXPlaySnappableString  playSnappable  = 3;
    optional  SCCTXReplyToRecipientString  replyToRecipient  = 4;
    optional  string  fallbackText  = 5;
    optional  SCCTXReplyWithSnapString  replyWithSnap  = 6;
}

message SCCTXManualFriendSelectionAction {
}

message SCCTXMemoriesFavoriteAction {
}

message SCCTXOpenCameraRoll {
}

message SCCTXOpenSearchChatTab {
}

message SCCTXPlaceProfileAction {
    optional  string  placeId  = 1;
}

message SCCTXPlaySnappableString {
    optional  string  snappableName  = 1;
}

message SCCTXPollAction {
    optional  string  pollId  = 1;
    optional  SCPPollInfo  pollInfo  = 2;
}

message SCCTXPostSnapAction {
    optional  SCCTXAction  action  = 1;
    optional  SCCTXImage  icon  = 2;
    optional  string  text  = 3;
    optional  SCCTXLocalizedString  localizedText  = 4;
    optional  int32  actionType  = 6;
    optional  SCCTXCompositeId  compositeId  = 7;
}

message SCCTXPostSnapActions {
    repeated  SCCTXPostSnapAction  actionsArray  = 1;
}

message SCCTXPostSnapFeedAction {
    optional  SCCTXPostSnapAction  action  = 1;
}

message SCCTXPostStoryAction {
}

message SCCTXPublicProfileAction {
    optional  string  profileId  = 1;
    optional  string  hostAccountUserId  = 2;
}

message SCCTXQuestionStickerAction {
}

message SCCTXReadAction {
    optional  int32  readType  = 1;
}

message SCCTXRemixAction {
    optional  bool  selectMyStory  = 1;
}

message SCCTXReplyToGroupString {
    optional  string  name  = 1;
}

message SCCTXReplyToRecipientString {
    optional  string  name  = 1;
}

message SCCTXReplyWithSnapString {
}

message SCCTXSaveAction {
}

message SCCTXScreenshopAction {
    optional  string  snapId  = 1;
    optional  string  heroImageBoltContentURL  = 2;
    optional  string  key  = 3;
    optional  string  iv  = 4;
}

message SCCTXSendChatString {
}

message SCCTXShareAction {
}

message SCCTXShowInfoAction {
}

message SCCTXSnapKitActionInfo {
    optional  string  snapKitApplicationId  = 1;
    optional  string  oauthClientId  = 2;
    optional  string  attachmentURL  = 3;
    optional  string  appName  = 4;
    optional  string  iconURL  = 5;
}

message SCCTXSnapKitIdentityWebViewAction {
    optional  string  snapKitApplicationId  = 1;
    optional  string  oauthClientId  = 2;
    optional  string  attachmentURL  = 3;
    optional  string  appName  = 4;
    optional  string  iconURL  = 5;
    optional  string  privacyPolicyURL  = 6;
}

message SCCTXSnapKitInviteOpenAction {
    optional  SCCTXSnapKitActionInfo  snapKitActionInfo  = 1;
    optional  string  androidPackageName  = 2;
    optional  string  appStoreListingURL  = 3;
}

message SCCTXSnapProIdentity {
    optional  string  id_p  = 1;
    optional  SCCTXSnapProIdentity_Logo  logo  = 2;
}

message SCCTXSnapProIdentity_Logo {
    optional  string  logoURL  = 1;
    optional  bool  isDefault  = 2;
}

message SCCTXSnapProSelfServeAction {
}

message SCCTXSnappableAction {
    optional  string  lensId  = 1;
    optional  string  lensMetadata  = 2;
}

message SCCTXSoundProfileAction {
    optional  uint64  soundId  = 1;
    optional  string  title  = 2;
    optional  string  artistName  = 3;
    optional  SCCTXEncryptedMedia  albumArtMedia  = 4;
    optional  int32  trackType  = 5;
    optional  string  publicProfileId  = 6;
}

message SCCTXSpeedMode {
    optional  int32  speedType  = 1;
}

message SCCTXSpotlightAttributionInfo {
    optional  SCCTXUserIdentity  user  = 1;
    optional  SCCTXSpotlightAttributionInfo_UserAttributionInfo  userAttributionInfo  = 2;
    optional  string  title  = 3;
    optional  SCCTXAction  action  = 4;
}

message SCCTXSpotlightAttributionInfoV2 {
    optional  string  title  = 1;
    optional  SCCTXSpotlightAttributionInfoV2_Thumbnail  thumbnail  = 2;
    optional  int32  badgeType  = 3;
    optional  SCCTXAction  action  = 4;
}

message SCCTXSpotlightAttributionInfoV2_Thumbnail {
    optional  SCCTXSpotlightAttributionInfoV2_Thumbnail_RemoteImage  remoteImage  = 1;
    optional  SCCTXBitmoji  bitmoji  = 2;
}

message SCCTXSpotlightAttributionInfoV2_Thumbnail_RemoteImage {
    optional  string  URL  = 1;
}

message SCCTXSpotlightAttributionInfo_UserAttributionInfo {
    optional  SCCTXUserIdentity  user  = 1;
    optional  bool  hasStory  = 2;
}

message SCCTXSpotlightCard {
    optional  string  id_p  = 1;
    optional  string  title  = 2;
    optional  string  subtitle  = 3;
    optional  SCCTXSpotlightCard_Thumbnail  thumbnail  = 4;
    optional  SCCTXAction  action  = 5;
}

message SCCTXSpotlightCard_Thumbnail {
    optional  SCCTXImage  image  = 1;
    optional  SCCTXBitmoji  bitmoji  = 2;
    optional  SCCTXEncryptedMedia  albumArt  = 3;
    optional  SCCTXSpotlightWaveform  waveform  = 4;
}

message SCCTXSpotlightPrimaryAction {
    optional  string  title  = 1;
    optional  SCCTXAction  action  = 2;
}

message SCCTXSpotlightRequest {
    optional  string  snapId  = 1;
    optional  SnapContextViewerContentInfo  viewerContentInfo  = 2;
    optional  SnapContextUserInfo  userInfo  = 3;
    optional  SnapContextInfo  contextInfo  = 4;
    repeated  int32  excludedCardTypesArray  = 5[packed=true];
    optional  SnapContextSnapIdentity  snapIdentity  = 6;
    optional  bool  isUcc  = 7;
}

message SCCTXSpotlightResponse {
    repeated  SCCTXSpotlightCard  spotlightCardsArray  = 1;
    repeated  SCCTXHashtag  hashtagsArray  = 2;
    optional  SCCTXSpotlightPrimaryAction  primaryAction  = 3;
    optional  SCCTXSpotlightAttributionInfo  attributionInfo  = 4;
    optional  SCCTXSpotlightSubscribeInfo  subscribeInfo  = 5;
    optional  SCCTXSpotlightAttributionInfoV2  attributionInfoV2  = 6;
    optional  SCCTXAction  action  = 7;
    optional  string  debugHtml  = 8;
}

message SCCTXSpotlightSubscribeInfo {
    optional  SCCTXSpotlightSubscribeInfo_SubscribeInfo  info  = 1;
}

message SCCTXSpotlightSubscribeInfo_SubscribeInfo {
    optional  SCCTXSpotlightSubscribeInfo_SubscribeInfo_UserInfo  userInfo  = 1;
    optional  SCCTXSpotlightSubscribeInfo_SubscribeInfo_PublisherInfo  publisherInfo  = 2;
}

message SCCTXSpotlightSubscribeInfo_SubscribeInfo_PublisherInfo {
    optional  int64  publisherId  = 2;
}

message SCCTXSpotlightSubscribeInfo_SubscribeInfo_UserInfo {
    optional  SCCOREUUID  uuid  = 1;
}

message SCCTXSpotlightWaveform {
    optional  SCCTXAnimation  animation  = 1;
}

message SCCTXSpotlightWebRequest {
    optional  string  snapId  = 1;
    optional  SnapContextInfo  contextInfo  = 2;
}

message SCCTXSpotlightWebResponse {
    repeated  SCCTXSpotlightCard  spotlightCardsArray  = 1;
    repeated  SCCTXHashtag  hashtagsArray  = 2;
    optional  SCCTXSpotlightPrimaryAction  primaryAction  = 3;
    optional  SCCTXSpotlightAttributionInfo  attributionInfo  = 4;
    optional  string  snapId  = 5;
}

message SCCTXStoryInviteAction {
    optional  SCCTXContextClientInfo_PrivateStoryInviteInfo  invite  = 1;
}

message SCCTXStoryReplyAction {
    optional  SCCTXContextClientInfo_SnapReplyRequestInfo  request  = 1;
}

message SCCTXTimeline {
}

message SCCTXTopicAction {
    optional  string  topic  = 1;
    optional  string  displayName  = 2;
    optional  int32  topicStoryType  = 3;
}

message SCCTXTrendingTopicsAction {
    optional  int32  badgeType  = 1;
}

message SCCTXUnifiedPublicProfileAction {
    optional  SCCTXUnifiedPublicProfileAction_PublisherRoute  publisherRoute  = 1;
    optional  SCCTXUnifiedPublicProfileAction_UnifiedPublicProfileRoute  unifiedPublicProfileRoute  = 2;
}

message SCCTXUnifiedPublicProfileAction_PublisherRoute {
    optional  SCCOREUUID  profileId  = 1;
    optional  SCCOREUUID  hostAccountUserId  = 2;
    optional  SCCOREUUID  showId  = 3;
}

message SCCTXUnifiedPublicProfileAction_UnifiedPublicProfileRoute {
    optional  SCCOREUUID  profileId  = 1;
    optional  SCCOREUUID  hostAccountUserId  = 2;
}

message SCCTXUrlAction {
    repeated  string  urlsArray  = 1;
    optional  bool  prefersOsHandler  = 2;
}

message SCCTXUserIdentity {
    optional  string  id_p  = 1;
    optional  string  username  = 2;
    optional  string  displayName  = 3;
    optional  string  businessProfileId  = 4;
    optional  bool  isOfficial  = 5;
    optional  SCCTXBitmoji  bitmoji  = 6;
    optional  SCCTXSnapProIdentity  snapProIdentity  = 7;
}

message SCCTXUserProfileAction {
    optional  string  userId  = 1;
    optional  string  username  = 2;
    optional  string  defaultDisplayName  = 3;
    optional  string  bitmojiAvatarId  = 4;
    optional  string  bitmojiSelfieId  = 5;
}

message SCCTXWatchSpotlightAction {
}

message SCCacheInvalidationRequest {
    optional  string  userId  = 1;
    optional  int32  unlocksNamespace  = 2;
}

message SCCameosApiVersion {
    optional  int32  major  = 1;
    optional  int32  minor  = 2;
    optional  int32  patch  = 3;
}

message SCCameosBloopsBeautificationConfig {
    repeated  SCCameosBloopsLensMeta  lensMetadata  = 1;
    repeated  string  lensForScenarios  = 2;
}

message SCCameosBloopsConfig {
    repeated  string  configForGender  = 1;
    optional  string  modelsPrefix  = 2;
    repeated  string  onboardingConfig  = 3;
    optional  string  commonSearchResources  = 4;
    optional  string  sdkConfig  = 5;
}

message SCCameosBloopsLensMeta {
    optional  string  id_p  = 1;
    optional  string  path  = 2;
    optional  string  checksum  = 3;
}

message SCCameosBloopsMetaConfig {
    optional  SCCameosBloopsMetaConfigKey  key  = 1;
    optional  SCCameosBloopsConfig  config  = 2;
}

message SCCameosBloopsMetaConfigKey {
    optional  string  sdk  = 1;
    optional  string  locale  = 2;
    optional  int32  platform  = 3;
    optional  int32  type  = 4;
}

message SCCameosBloopsStickerAsset {
    optional  string  id_p  = 1;
    optional  bytes  webp  = 2;
}

message SCCameosBloopsStickerAssetPack {
    repeated  SCCameosBloopsStickerAsset  stickersArray  = 1;
}

message SCCameosCameoBoltContentObject {
    optional  bytes  contentObject  = 1;
}

message SCCameosCameoSearchMetadata {
    optional  int64  cameoId  = 1;
    repeated  string  termsArray  = 2;
    optional  int32  stickerType  = 3;
    optional  float  searchRating  = 4;
    optional  float  userRating  = 5;
    optional  SCCameosCustomTextSearchParameters  customTextSearchParameters  = 6;
}

message SCCameosCameoSnap {
    optional  bytes  cameoAssetsContentObject  = 1;
    repeated  int32  gendersArray  = 2[packed=true];
    repeated  SCCameosListOfLenses  targetLenses  = 3;
}

message SCCameosCameoSnapCreationModel {
    optional  SCCameosCameoSnap  cameoSnap  = 1;
    optional  string  generatedCameoPreviewURL  = 2;
}

message SCCameosCameoSnapStaging {
    optional  SCCameosCameoStagingAsset  assetModel  = 1;
}

message SCCameosCameoStagingAsset {
    repeated  SCCameosCameoStagingAsset_CameoStagingAssetItem  bundleItemsArray  = 1;
    repeated  int32  gendersArray  = 2[packed=true];
    optional  string  s3GeneratedAssetPreviewPath  = 3;
    optional  string  generatedAssetPreviewContentURL  = 4;
    repeated  SCCameosListOfLenses  targetLenses  = 5;
}

message SCCameosCameoStagingAsset_CameoStagingAssetItem {
    optional  int32  contentType  = 1;
    optional  string  s3FilePath  = 2;
    optional  string  contentURL  = 3;
}

message SCCameosCameoStoriesContentKey {
    optional  int64  id_p  = 1;
    optional  int32  revision  = 2;
}

message SCCameosCameoTile {
    optional  bytes  cameoAssetsContentObject  = 1;
    repeated  int32  gendersArray  = 2[packed=true];
    optional  string  onboardingImage  = 3;
    optional  string  staticImage  = 4;
    repeated  SCCameosListOfLenses  targetLenses  = 5;
}

message SCCameosCameoTileCreationModel {
    optional  SCCameosCameoTile  cameoTile  = 1;
    optional  string  generatedCameoPreviewURL  = 2;
}

message SCCameosCameoTileStaging {
    optional  SCCameosCameoStagingAsset  assetModel  = 1;
    optional  string  s3OnboardingImagePath  = 2;
    optional  string  s3StaticImagePath  = 3;
    optional  string  onboardingImageContentURL  = 4;
    optional  string  staticImageContentURL  = 5;
}

message SCCameosCameosAdsPolicyRequest {
    optional  int32  cameosAdsPolicy  = 1;
}

message SCCameosCameosAdsPolicyResponse {
    optional  SCCameosServiceStatusResponse  status  = 1;
}

message SCCameosChatCameoResource {
    optional  string  URL  = 1;
    optional  float  duration  = 2;
    optional  SCCameosResolution  resolution  = 3;
}

message SCCameosChatCameoResourceCollection {
    repeated  SCCameosCustomTextParameters  customTextParameters  = 1;
    repeated  SCCameosChatCameoResource  items  = 2;
    optional  SCCameosQuickIconResource  quickIconResource  = 3;
}

message SCCameosCustomTextParameters {
    repeated  SCCameosCustomTextParameters_FontResource  fontResourcesArray  = 1;
    optional  bool  capitalize  = 2;
    optional  string  defaultText  = 3;
    optional  bool  defaultTextOnly  = 4;
    optional  bool  isUniversal  = 5;
    repeated  SCCameosCustomTextParameters_TextArea  textAreasArray  = 6;
}

message SCCameosCustomTextParameters_FontResource {
    optional  string  name  = 1;
    optional  string  URL  = 2;
}

message SCCameosCustomTextParameters_TextArea {
    optional  int32  maximumHeight  = 1;
    optional  int32  maximumLineLength  = 2;
    optional  int32  maximumLines  = 3;
    optional  int32  maximumWidth  = 4;
    optional  int32  splitVersion  = 5;
}

message SCCameosCustomTextSearchParameters {
    optional  bool  isUniversal  = 1;
    repeated  string  sceneDescriptionsArray  = 2;
}

message SCCameosDeleteFriendBloopsDataRequest {
}

message SCCameosDeleteFriendBloopsDataResponse {
    optional  SCCameosServiceStatusResponse  status  = 1;
}

message SCCameosDiscoverManualFriendSelectionConfig {
    optional  bool  isEnabled  = 1;
    optional  uint32  poolSize  = 2;
    optional  int32  buttonType  = 3;
    optional  string  silhouetteURL  = 4;
}

message SCCameosDiscoverOnePersonStoriesConfig {
    optional  string  processedSelfieURL  = 1;
    optional  string  processedSelfieFormatVersion  = 2;
}

message SCCameosEncryptedData {
    optional  string  URL  = 1;
    optional  string  key  = 2;
    optional  string  iv  = 3;
}

message SCCameosError {
    optional  int32  status  = 1;
    optional  string  message  = 2;
}

message SCCameosFramesPredictorConfig {
    optional  SCCameosFramesPredictorSettings  defaultSettings  = 1;
    optional  SCCameosFramesPredictorSettings  lowPowerModeSettings  = 2;
}

message SCCameosFramesPredictorSettings {
    optional  int32  waitFirstFramesCount  = 1;
    optional  bool  isPredictorDisabled  = 2;
}

message SCCameosFriendBloopsData {
    optional  string  userId  = 1;
    optional  int32  gender  = 2;
    optional  int32  policy  = 3;
    optional  SCCameosEncryptedData  processedImage  = 4;
    optional  SCCameosEncryptedData  rawImage  = 5;
    optional  string  formatVersion  = 6;
    optional  string  sdkVersion  = 7;
    optional  string  hairStyle  = 8;
    optional  int64  lastDataUpdateTime  = 9;
    optional  int32  adsPolicy  = 10;
}

message SCCameosFriendBloopsPolicyRequest {
    optional  int32  friendBloopsPolicy  = 1;
}

message SCCameosFriendBloopsPolicyResponse {
    optional  SCCameosServiceStatusResponse  status  = 1;
}

message SCCameosGetFriendBloopsDataRequest {
    repeated  string  userIdsArray  = 1;
    optional  bool  firstMatchReturnOnly  = 2;
    optional  int32  friendBloopsOrigin  = 3;
}

message SCCameosGetFriendBloopsDataResponse {
    optional  SCCameosServiceStatusResponse  status  = 1;
    repeated  SCCameosFriendBloopsData  bloopsDataArray  = 2;
}

message SCCameosGetMyBloopsDataRequest {
    optional  string  sdkVersion  = 1;
    optional  int32  useCase  = 2;
}

message SCCameosGetMyBloopsDataResponse {
    optional  SCCameosServiceStatusResponse  status  = 1;
    optional  SCCameosBloopsConfig  config  = 2;
    optional  SCCameosFriendBloopsData  bloopsData  = 3;
}

message SCCameosInitTestUserRequest {
    optional  string  userId  = 1;
}

message SCCameosInitTestUserResponse {
    optional  SCCameosServiceStatusResponse  status  = 1;
    optional  SCCameosFriendBloopsData  bloopsData  = 2;
}

message SCCameosLens {
    optional  string  id_p  = 1;
    optional  bytes  contentObject  = 2;
}

message SCCameosLensMetadataConfig {
    repeated  SCCameosSingleCameoLensMetadata  cameosLensMetadata  = 1;
}

message SCCameosListOfLenses {
    repeated  SCCameosLens  lensesArray  = 1;
}

message SCCameosNetworkCacheSettings {
    optional  uint32  ttlInSeconds  = 1;
}

message SCCameosNetworkResponseCacheConfig {
    optional  SCCameosNetworkCacheSettings  defaultSettings  = 1;
    repeated  SCCameosNetworkCacheSettings  statusCodesSettings  = 2;
}

message SCCameosPublisherConfig {
    optional  string  deeplink  = 1;
    optional  string  profileId  = 2;
    repeated  string  profileIdsArray  = 3;
    repeated  string  publisherIdsArray  = 4;
    optional  string  promoPublisherURL  = 5;
    optional  string  promoPublisherImage  = 6;
    optional  bool  promoPublisherEnabled  = 7;
    repeated  string  ctaBarTitles  = 8;
}

message SCCameosQuickIconResource {
    optional  string  URL  = 1;
    optional  SCCameosResolution  resolution  = 2;
}

message SCCameosResolution {
    optional  int32  height  = 1;
    optional  int32  width  = 2;
}

message SCCameosServiceStatusResponse {
    optional  int32  status  = 1;
    optional  SCCameosError  error  = 2;
}

message SCCameosSetGenderRequest {
    optional  int32  gender  = 1;
}

message SCCameosSetGenderResponse {
    optional  SCCameosServiceStatusResponse  status  = 1;
}

message SCCameosSetHairStyleRequest {
    optional  string  hairStyle  = 1;
}

message SCCameosSetHairStyleResponse {
    optional  SCCameosServiceStatusResponse  status  = 1;
}

message SCCameosSingleCameoLensMetadata {
    repeated  string  lensIdsArray  = 1;
}

message SCCameosSnapsAttachmentsConfig {
    repeated  SDMAttachments  snapsAttachments  = 1;
}

message SCCameosSnapsContentObjectsConfig {
    repeated  SCCameosCameoBoltContentObject  snapsContentObjects  = 1;
}

message SCCameosUpdateFriendBloopsDataRequest {
    optional  SCCameosFriendBloopsData  bloopsData  = 1;
}

message SCCameosUpdateFriendBloopsDataResponse {
    optional  SCCameosServiceStatusResponse  status  = 1;
    optional  SCCameosBloopsConfig  config  = 2;
    optional  SCCameosFriendBloopsData  bloopsData  = 3;
}

message SCCanvasAppAndTokenCategory {
    optional  string  appId  = 1;
    repeated  int32  tokenCategoryArray  = 2[packed=true];
}

message SCCanvasCheckoutMapEntry {
    repeated  SCCanvasTokenResponseAndCategory  tokenAndCategoryArray  = 1;
}

message SCCanvasCheckoutTokenRequest {
    repeated  string  appIdArray  = 1;
}

message SCCanvasCheckoutTokenRequestV2 {
    optional  SCCanvasAppAndTokenCategory  appAndTokenCategory  = 1;
}

message SCCanvasCheckoutTokenResponse {
    repeated  SCCanvasTokenResponse  tokens  = 1;
}

message SCCanvasCheckoutTokenResponseV2 {
    repeated  SCCanvasCheckoutMapEntry  tokens  = 1;
}

message SCCanvasToken {
    optional  string  accessToken  = 1;
    optional  string  tokenType  = 2;
    optional  uint32  expiresIn  = 3;
    optional  string  refreshToken  = 4;
    optional  string  scope  = 5;
}

message SCCanvasTokenResponse {
    optional  int32  code  = 1;
    optional  SCCanvasToken  token  = 2;
}

message SCCanvasTokenResponseAndCategory {
    optional  SCCanvasTokenResponse  token  = 1;
    optional  int32  category  = 2;
}

message SCChangeUsernamePbChangeUsernameRequest {
    optional  string  newUsername  = 1;
    optional  string  persistentDeviceId  = 2;
}

message SCChangeUsernamePbChangeUsernameResponse {
    optional  int32  statusCode  = 1;
    optional  string  humanReadableErrorMessage  = 2;
}

message SCChangeUsernamePbGetLatestUsernameChangeDateRequest {
}

message SCChangeUsernamePbGetLatestUsernameChangeDateResponse {
    optional  GPBTimestamp  latestChangeDate  = 1;
    optional  GPBTimestamp  earliestAllowedChangeDate  = 2;
}

message SCChatBackArrowRevampConfig {
    optional  bool  isEnabled  = 1;
    optional  int32  chatExitSwipeDirection  = 2;
    optional  uint32  chatPeekAllowedPercentage  = 3;
}

message SCChatTextReportingConfig {
    optional  bool  isEnabled  = 1;
    optional  int32  maxAge  = 2;
}

message SCClientUsernameSuggestionConfigPbClientUsernameSuggestionAlgorithm {
    optional  SCClientUsernameSuggestionConfigPbNoClientUsernameSuggestion  noClientUsernameSuggestion  = 1;
    optional  SCClientUsernameSuggestionConfigPbPrefixWithRandomChars  prefixWithRandomChars  = 2;
    optional  SCClientUsernameSuggestionConfigPbInitialsWithRandomChars  initialsWithRandomChars  = 3;
    optional  SCClientUsernameSuggestionConfigPbInitialsWithBirthMonthWithRandomChars  initialsWithBirthMonthWithRandomChars  = 4;
    optional  SCClientUsernameSuggestionConfigPbInitialsWithBirthMonthWithRandomCharsWithEmoji  initialsWithBirthMonthWithRandomCharsWithEmoji  = 5;
}

message SCClientUsernameSuggestionConfigPbClientUsernameSuggestionConfig {
    optional  int32  uiBlockingTimeInMillisecond  = 1;
    optional  SCClientUsernameSuggestionConfigPbClientUsernameSuggestionAlgorithm  clientUsernameSuggestionAlgorithm  = 2;
}

message SCClientUsernameSuggestionConfigPbInitialsWithBirthMonthWithRandomChars {
    optional  SCClientUsernameSuggestionConfigPbRandomChars  randomChars  = 1;
}

message SCClientUsernameSuggestionConfigPbInitialsWithBirthMonthWithRandomCharsWithEmoji {
    optional  SCClientUsernameSuggestionConfigPbRandomChars  randomChars  = 1;
    optional  string  emoji  = 2;
}

message SCClientUsernameSuggestionConfigPbInitialsWithRandomChars {
    optional  SCClientUsernameSuggestionConfigPbRandomChars  randomChars  = 1;
}

message SCClientUsernameSuggestionConfigPbNoClientUsernameSuggestion {
}

message SCClientUsernameSuggestionConfigPbPrefixWithRandomChars {
    optional  string  prefix  = 1;
    optional  SCClientUsernameSuggestionConfigPbRandomChars  randomChars  = 2;
}

message SCClientUsernameSuggestionConfigPbRandomChars {
    optional  int32  numberOfRandomChar  = 1;
    optional  int32  randomCharStrategy  = 2;
}

message SCCofConfigResultWithSequenceId {
    optional  int32  sequenceId  = 1;
    optional  ConfigResult  configResult  = 2;
}

message SCCofConfigSetGenerationRequest {
    optional  SCCofConfigTargetingRequest  targetingParameters  = 1;
    repeated  ConfigResult  overridesArray  = 2;
}

message SCCofConfigSetGenerationResponse {
    optional  SCCofConfigTargetingResponse  targetingResponse  = 1;
}

message SCCofConfigTargetingRequest {
    optional  string  configResultsEtag  = 1;
    repeated  int32  namespacesArray  = 2[packed=true];
    optional  string  ghostId  = 3;
    optional  string  countryCode  = 4;
    optional  int32  screenWidth  = 5;
    optional  int32  screenHeight  = 6;
    optional  SCCofConnectivity  connectivity  = 7;
    optional  int32  maxVideoWidthPx  = 8;
    optional  int32  maxVideoHeightPx  = 9;
    repeated  BenchmarkResult  benchmarkResultsArray  = 10;
    optional  bool  deltaSync  = 11;
    optional  string  userAgent  = 12;
    optional  int32  triggerEventType  = 13;
    optional  int32  appState  = 14;
    optional  string  locale  = 15;
    optional  string  deviceId  = 16;
    optional  string  userId  = 17;
    optional  string  clientIp  = 18;
    optional  bool  isUnAuthorized  = 19;
    optional  string  appLocale  = 20;
    optional  int32  instrumentation  = 21;
    optional  int64  lastSuccessfulSync  = 22;
    optional  bool  isLogout  = 23;
    optional  string  packageInstaller  = 24;
    optional  string  syncTriggerBlizzardSessionId  = 25;
    optional  string  syncExecutionBlizzardSessionId  = 26;
    optional  int32  cofSyncTriggerDelayFromStartupMs  = 27;
    optional  int32  cofSyncExecutionDelayFromStartupMs  = 28;
    optional  int64  syncTriggerTime  = 29;
    optional  SCCofDecoderEncoderAvailablity  decoderEncoderAvailability  = 30;
    optional  string  snapkitAppId  = 31;
    optional  int32  lenscoreVersion  = 32;
    optional  SCCOMMONRuid  ruid  = 33;
    repeated  string  configNamesArray  = 34;
    optional  bool  includeTestUserTreatments  = 36;
    optional  bool  disableExposureLogging  = 37;
    optional  int32  lensClusterOrig4  = 38;
    optional  string  clientId  = 39;
}

message SCCofConfigTargetingResponse {
    repeated  ConfigResult  configResultsArray  = 1;
    optional  string  configResultsEtag  = 2;
    optional  BenchmarkRequest  benchmarkRequest  = 3;
    optional  bool  fullResults  = 4;
    optional  int32  abResultChecksum  = 5;
    optional  string  iso3166Alpha2CountryCodeFromRequestIp  = 6;
    optional  SCCofConfigTargetingResponseDebugData  debugData  = 7;
}

message SCCofConfigTargetingResponseDebugData {
    optional  string  abResultChecksumInput  = 1;
}

message SCCofConfigWithNamespace {
    optional  string  configName  = 1;
    optional  int32  namespace_p  = 2;
}

message SCCofConnectivity {
    optional  int32  networkType  = 1;
    optional  GPBBoolValue  isMetered  = 2;
    optional  GPBBoolValue  isRoaming  = 3;
    optional  string  carrier  = 4;
}

message SCCofDecoderEncoderAvailablity {
    optional  bool  isSnapVp9DecoderAvailable  = 1;
    optional  bool  isSnapAv1DecoderAvailable  = 2;
}

message SCCofGetAbConfigValuesRequest {
    repeated  string  configNamesArray  = 1;
    repeated  int32  namespacesArray  = 2[packed=true];
    repeated  string  cofConfigNamesArray  = 3;
    optional  bool  includeAllConfigs  = 4;
    optional  bool  disableExposureLogging  = 5;
    optional  bool  enableDebug  = 13;
}

message SCCofGetAbConfigValuesResponse {
    repeated  ConfigResult  configResultsArray  = 1;
    optional  DebugTrace  debugTrace  = 2;
}

message SCCofGetBitmapByTokenRequest {
    optional  string  token  = 1;
}

message SCCofGetBitmapByTokenResponse {
    optional  bytes  idBitmap  = 1;
}

message SCCofGetCachedConfigResultSequenceIdsRequest {
}

message SCCofGetCachedConfigResultSequenceIdsResponse {
    optional  bytes  serializedBitmap  = 1;
}

message SCCofGetConfigResultsBySequenceIdsRequest {
    repeated  int32  sequenceIdsArray  = 1[packed=true];
}

message SCCofGetConfigResultsBySequenceIdsResponse {
    repeated  SCCofConfigResultWithSequenceId  configResultWithSequenceIdsArray  = 1;
}

message SCCofGetConfigValuesByTokenRequest {
    optional  string  token  = 1;
    repeated  SCCofConfigWithNamespace  configNamesArray  = 2;
    repeated  int32  namespacesArray  = 3[packed=true];
    optional  bool  disableExposureLogging  = 4;
    optional  bool  getAllConfigs  = 5;
}

message SCCofGetConfigValuesByTokenResponse {
    repeated  ConfigResult  configResultsArray  = 1;
}

message SCCofGetConfigValuesRegionalRequest {
    optional  string  token  = 1;
    optional  string  userId  = 2;
    optional  int32  userCacheTtlInSeconds  = 3;
    optional  string  userAgent  = 4;
    optional  string  clientIp  = 5;
    optional  string  deviceLocale  = 6;
    repeated  SCCofConfigWithNamespace  configNamesArray  = 7;
    repeated  int32  namespacesArray  = 8[packed=true];
    optional  bool  disableExposureLogging  = 9;
}

message SCCofGetConfigValuesRegionalResponse {
    repeated  ConfigResult  configResultsArray  = 1;
}

message SCCofGetUnevaluatedConfigResultsWithAbTargetingRequest {
    repeated  int32  namespacesArray  = 1[packed=true];
    optional  string  edgeConfigClientVersion  = 2;
}

message SCCofGetUnevaluatedConfigResultsWithAbTargetingResponse {
    repeated  ConfigResult  configResultsArray  = 1;
}

message SCCofPinConfigRequest {
    optional  string  configSetToken  = 1;
    optional  string  userId  = 2;
    optional  int32  ttlSeconds  = 3;
}

message SCCofPinConfigResponse {
    optional  string  debug  = 1;
}

message SCCofUnpinConfigRequest {
    optional  string  configSetToken  = 1;
    optional  string  userId  = 2;
}

message SCCofUnpinConfigResponse {
    optional  string  debug  = 1;
}

message SCCognacAppInstancesAppInstance {
    optional  string  id_p  = 1;
    optional  SCCognacAppInstancesAppInstanceScope  scope  = 2;
    optional  string  appId  = 3;
    optional  int32  privacy  = 4;
    optional  string  creatorId  = 5;
}

message SCCognacAppInstancesAppInstanceScope {
    optional  string  userId  = 1;
    optional  string  conversationId  = 2;
    optional  string  sharedId  = 3;
}

message SCCognacAppInstancesBatchGetAppInstanceRequest {
    repeated  string  appInstanceIdsArray  = 1;
}

message SCCognacAppInstancesBatchGetAppInstanceResponse {
    repeated  SCCognacAppInstancesAppInstance  appInstancesArray  = 1;
}

message SCCognacAppInstancesBatchGetChatDockRequest {
    repeated  SCCognacAppInstancesAppInstanceScope  appInstanceScopesArray  = 1;
    optional  int64  chatDockDurationSeconds  = 2;
}

message SCCognacAppInstancesBatchGetChatDockResponse {
    repeated  SCCognacAppInstancesChatDock  chatDocksArray  = 1;
}

message SCCognacAppInstancesChatDock {
    optional  SCCognacAppInstancesAppInstanceScope  appInstanceScope  = 1;
    repeated  SCCognacAppInstancesChatDockEntry  chatDockEntriesArray  = 2;
    optional  int64  version  = 3;
}

message SCCognacAppInstancesChatDockEntry {
    optional  SCCognacAppInstancesAppInstance  appInstance  = 1;
    optional  GPBTimestamp  expirationTimestamp  = 2;
    optional  int64  expirationDurationSeconds  = 3;
    optional  bool  terminated  = 4;
    optional  int64  version  = 5;
}

message SCCognacAppInstancesGetAppInstanceAuthTokenRequest {
    optional  string  appInstanceId  = 1;
}

message SCCognacAppInstancesGetAppInstanceAuthTokenResponse {
    optional  string  authToken  = 1;
    optional  int64  expirationTimestampMsecs  = 2;
}

message SCCognacAppInstancesGetAppInstanceRequest {
    optional  string  appInstanceId  = 1;
}

message SCCognacAppInstancesGetAppInstanceResponse {
    optional  SCCognacAppInstancesAppInstance  appInstance  = 1;
}

message SCCognacAppInstancesGetChatDockRequest {
    optional  SCCognacAppInstancesAppInstanceScope  appInstanceScope  = 1;
    optional  int64  chatDockDurationSeconds  = 2;
}

message SCCognacAppInstancesGetChatDockResponse {
    optional  SCCognacAppInstancesChatDock  chatDock  = 1;
}

message SCCognacAppInstancesLaunchAppInstanceRequest {
    optional  SCCognacAppInstancesAppInstanceScope  appInstanceScope  = 1;
    optional  string  appId  = 2;
    optional  int32  privacy  = 3;
}

message SCCognacAppInstancesLaunchAppInstanceResponse {
    optional  SCCognacAppInstancesChatDockEntry  launchedChatDockEntry  = 1;
    optional  SCCognacAppInstancesChatDock  chatDock  = 2;
}

message SCCognacAppInstancesNotificationPayload {
    optional  SCCognacAppInstancesChatDockEntry  chatDockEntry  = 1;
    optional  string  appDisplayName  = 2;
    optional  string  appIconURL  = 3;
    optional  SCCognacAppInstancesChatDock  chatDock  = 4;
    optional  int32  appType  = 5;
}

message SCCognacAppInstancesTerminateAppInstanceRequest {
    optional  string  appInstanceId  = 1;
}

message SCCognacAppInstancesTerminateAppInstanceResponse {
    optional  SCCognacAppInstancesChatDockEntry  terminatedChatDockEntry  = 1;
    optional  SCCognacAppInstancesChatDock  chatDock  = 2;
}

message SCCognacAppInstancesUpdateAppInstancePrivacyRequest {
    optional  string  appInstanceId  = 1;
    optional  int32  newPrivacy  = 2;
}

message SCCognacAppInstancesUpdateAppInstancePrivacyResponse {
    optional  SCCognacAppInstancesAppInstance  appInstance  = 1;
}

message SCCognacAppsAddToShortcutAppsRequest {
    repeated  string  appIdsArray  = 1;
}

message SCCognacAppsAddToShortcutAppsResponse {
}

message SCCognacAppsApp {
    optional  string  id_p  = 1;
    optional  GPBTimestamp  creationTimestamp  = 2;
    optional  GPBTimestamp  lastUpdateTimestamp  = 3;
    optional  string  title  = 4;
    optional  string  description_p  = 5;
    optional  SCCognacAppsPublisher  publisher  = 6;
    optional  string  buildId  = 7;
    optional  string  contentURL  = 8;
    optional  string  preloadConfig  = 9;
    optional  SCCognacAppsImageResources  imageResources  = 10;
    optional  SCCognacAppsPlayerLimits  playerLimits  = 11;
    optional  SCCognacAppsRankingSignal  rankingSignal  = 13;
    optional  SCCognacAppsDeviceCompatibility  deviceCompatibility  = 14;
    optional  string  privacyPolicyURL  = 15;
    optional  string  termsOfServiceURL  = 16;
    optional  SCCognacAppsContentUpdateAlert  contentUpdateAlert  = 17;
    optional  string  buildVersion  = 18;
    optional  SCCognacAppsLeaderboardInfo  leaderboardInfo  = 19;
    optional  int32  type  = 20;
    optional  SCCognacAppsSnapCanvasSDKInfo  snapCanvasSdkInfo  = 21;
    optional  SCCognacAuthClientAuthClient  authClient  = 22;
    optional  SCCognacAppsLensMetadata  lensMetadata  = 23;
    optional  string  englishTitle  = 24;
    optional  int32  privacyModel  = 25;
    optional  int32  category  = 26;
    optional  int32  clientRuntimeType  = 27;
    optional  SCCognacClientRuntimeClientRuntimeInfo  clientRuntimeInfo  = 28;
    optional  int32  genre  = 29;
    optional  int32  buildType  = 30;
    optional  SCCognacAppsDevMetadata  devMetadata  = 31;
}

message SCCognacAppsAppScope {
    optional  string  userId  = 1;
    optional  string  conversationId  = 2;
}

message SCCognacAppsBatchGetAppRequest {
    repeated  string  appIdsArray  = 1;
}

message SCCognacAppsBatchGetAppResponse {
    repeated  SCCognacAppsApp  appsArray  = 1;
}

message SCCognacAppsBuild {
    optional  string  id_p  = 1;
    optional  GPBTimestamp  creationTimestamp  = 2;
    optional  GPBTimestamp  lastUpdateTimestamp  = 3;
    optional  string  title  = 4;
    optional  string  description_p  = 5;
    optional  string  contentURL  = 6;
    optional  string  preloadURL  = 7;
    optional  SCCognacAppsImageResources  imageResources  = 8;
    optional  SCCognacAppsBuildLocalization  localization  = 9;
    optional  SCCognacAppsPlayerLimits  playerLimits  = 10;
    optional  string  privacyPolicyURL  = 11;
    optional  string  termsOfServiceURL  = 12;
    optional  string  buildVersion  = 13;
    optional  SCCognacAppsMajorUpdateVersion  majorUpdateVersion  = 14;
    optional  SCCognacAuthClientAuthClient  authClient  = 15;
    optional  SCCognacAppsLensMetadata  lensMetadata  = 16;
    optional  int32  clientRuntimeType  = 17;
    optional  SCCognacClientRuntimeClientRuntimeInfo  clientRuntimeInfo  = 18;
    optional  int32  buildType  = 19;
    optional  SCCognacAppsDevMetadata  devMetadata  = 20;
}

message SCCognacAppsBuildLocalization {
    repeated  SCCognacAppsBuildLocalizationContent  localizationContents  = 1;
}

message SCCognacAppsBuildLocalizationContent {
    optional  int32  locale  = 1;
    optional  string  title  = 2;
    optional  string  description_p  = 3;
    optional  SCCognacAppsImageResources  imageResources  = 4;
}

message SCCognacAppsContentUpdateAlert {
    optional  bool  newApp  = 1;
    optional  bool  majorUpdate  = 2;
    optional  string  majorUpdateDescription  = 3;
    optional  SCCognacAppsMajorUpdateVersion  majorUpdateVersion  = 4;
}

message SCCognacAppsDevMetadata {
    optional  SCCognacAppsDevMetadata_PlayCanvasMetadata  playcanvasMetadata  = 1;
}

message SCCognacAppsDevMetadata_PlayCanvasMetadata {
    optional  string  loginURL  = 1;
}

message SCCognacAppsDeviceCompatibility {
    optional  bool  compatible  = 1;
    optional  int32  incompatibilityReason  = 2;
}

message SCCognacAppsDiscoverApp {
    optional  SCCognacAppsApp  app  = 1;
    optional  SCCognacDiscoverRankingFeaturesDiscoverRankingFeatures  rankingFeatures  = 2;
}

message SCCognacAppsFilterEligibleAppDetailsRequest {
    repeated  string  appIdsArray  = 1;
}

message SCCognacAppsFilterEligibleAppDetailsResponse {
    repeated  SCCognacAppsFilteredAppDetails  appsArray  = 2;
}

message SCCognacAppsFilteredAppDetails {
    optional  string  appId  = 1;
    optional  string  title  = 2;
    optional  string  iconImageURL  = 3;
}

message SCCognacAppsGetAppDeeplinkMetadataRequest {
    optional  string  appTitle  = 1;
}

message SCCognacAppsGetAppDeeplinkMetadataResponse {
    optional  string  appId  = 1;
    optional  string  appTitle  = 2;
    optional  string  logoImageURL  = 3;
    optional  string  verticalImageURL  = 4;
    optional  string  snapcodeImageURL  = 5;
    optional  string  iconImageURL  = 6;
    optional  string  loadingImageURL  = 7;
    optional  string  horizontalImageURL  = 8;
    optional  string  squareImageURL  = 9;
    optional  int32  type  = 10;
}

message SCCognacAppsGetAppRequest {
    optional  string  appId  = 1;
    optional  int32  source  = 2;
}

message SCCognacAppsImageResources {
    optional  string  iconImageURL  = 1;
    optional  string  loadingImageURL  = 2;
    optional  string  logoImageURL  = 3;
    optional  string  verticalImageURL  = 4;
    optional  string  horizontalImageURL  = 5;
    optional  string  squareImageURL  = 6;
}

message SCCognacAppsIsAppUrlWhitelistedRequest {
    optional  string  appId  = 1;
    optional  string  URL  = 2;
}

message SCCognacAppsIsAppUrlWhitelistedResponse {
    optional  bool  whitelisted  = 1;
}

message SCCognacAppsLeaderboardInfo {
    optional  bool  leaderboardsEnabled  = 1;
}

message SCCognacAppsLensMetadata {
    optional  string  lensId  = 1;
}

message SCCognacAppsListAppsRequest {
}

message SCCognacAppsListAppsResponse {
    repeated  SCCognacAppsApp  appsArray  = 1;
    optional  int32  landingTreatment  = 2;
}

message SCCognacAppsListDestinationAppsRequest {
}

message SCCognacAppsListDestinationAppsResponse {
    repeated  SCCognacAppsApp  appsArray  = 1;
}

message SCCognacAppsListDiscoverAppsResponse {
    repeated  SCCognacAppsDiscoverApp  discoverAppsArray  = 1;
}

message SCCognacAppsListRecentAppsRequest {
    optional  int32  maxApps  = 1;
    optional  SCCognacAppsAppScope  scope  = 2;
}

message SCCognacAppsListRecentAppsResponse {
    repeated  SCCognacAppsRecentApp  recentAppsArray  = 1;
    repeated  SCCognacAppsApp  prepopulatedAppsArray  = 2;
}

message SCCognacAppsListSearchAppsRequest {
}

message SCCognacAppsListSearchAppsResponse {
    repeated  SCCognacAppsApp  appsArray  = 1;
}

message SCCognacAppsListShortcutAppsRequest {
    optional  int32  maxApps  = 1;
}

message SCCognacAppsListShortcutAppsResponse {
    repeated  SCCognacAppsApp  appsArray  = 1;
}

message SCCognacAppsListUpdatedAppsRequest {
}

message SCCognacAppsListUpdatedAppsResponse {
    repeated  SCCognacAppsUpdatedApp  updatedAppsArray  = 1;
}

message SCCognacAppsLocalizedMajorUpdateDescription {
    optional  int32  locale  = 1;
    optional  string  description_p  = 2;
}

message SCCognacAppsMajorUpdate {
    optional  SCCognacAppsMajorUpdateVersion  version  = 1;
    optional  string  description_p  = 2;
    repeated  SCCognacAppsLocalizedMajorUpdateDescription  localizedDescriptionsArray  = 3;
}

message SCCognacAppsMajorUpdateVersion {
    optional  int32  major  = 1;
    optional  int32  minor  = 2;
}

message SCCognacAppsPlayerLimits {
    optional  int64  maxPlayersNumber  = 1;
    optional  int64  minPlayersNumber  = 2;
}

message SCCognacAppsPublisher {
    optional  string  id_p  = 1;
    optional  string  name  = 2;
    optional  int32  publisherType  = 3;
}

message SCCognacAppsRankingSignal {
    optional  double  score  = 1;
}

message SCCognacAppsRecentApp {
    optional  SCCognacAppsApp  app  = 1;
    optional  GPBTimestamp  timestamp  = 2;
}

message SCCognacAppsRemoveFromRecentAppsRequest {
    repeated  string  appIdsArray  = 1;
    optional  SCCognacAppsAppScope  scope  = 2;
}

message SCCognacAppsRemoveFromRecentAppsResponse {
}

message SCCognacAppsRemoveFromShortcutAppsRequest {
    repeated  string  appIdsArray  = 1;
}

message SCCognacAppsRemoveFromShortcutAppsResponse {
}

message SCCognacAppsSnapCanvasSDKInfo {
    optional  bool  localServerBridgeSupported  = 1;
}

message SCCognacAppsUpdateShortcutAppsRequest {
    repeated  string  appIdsArray  = 1;
}

message SCCognacAppsUpdateShortcutAppsResponse {
}

message SCCognacAppsUpdatedApp {
    optional  string  id_p  = 1;
    optional  SCCognacAppsContentUpdateAlert  contentUpdateAlert  = 2;
}

message SCCognacAuthClientAuthClient {
    optional  string  id_p  = 1;
    repeated  SCCognacAuthClientAuthScope  scopesArray  = 2;
    repeated  string  redirectUrisArray  = 3;
}

message SCCognacAuthClientAuthScope {
    optional  string  name  = 1;
    repeated  string  descriptionsArray  = 2;
    optional  bool  optional  = 3;
}

message SCCognacAutosuggestKeywordConfiguration {
    repeated  string  keywordSet  = 1;
}

message SCCognacCanvasStickerAsset {
    optional  bytes  imageData  = 1;
    optional  bool  isAnimated  = 2;
    optional  bytes  cognacAppId  = 3;
    optional  bytes  cognacAppShareInfo  = 4;
    optional  bytes  cognacAppName  = 5;
    optional  int32  cognacAppType  = 6;
    optional  bytes  cognacIconImageURL  = 7;
}

message SCCognacClientContextDevice {
    optional  int32  platform  = 1;
    optional  string  model  = 2;
    optional  SCCognacClientContextGpuInfo  gpuInfo  = 3;
    optional  bool  noGyroscope  = 4;
}

message SCCognacClientContextDeviceBlacklist {
    repeated  SCCognacClientContextDevice  deviceBlacklistArray  = 1;
}

message SCCognacClientContextGpuInfo {
    optional  string  rendererName  = 1;
    optional  string  venderName  = 2;
    optional  string  version  = 3;
}

message SCCognacClientContextUserContext {
    optional  string  userId  = 1;
    optional  string  countryCode  = 2;
    optional  string  localeCode  = 3;
    optional  SCCognacClientContextDevice  device  = 4;
    optional  int32  xtmlLocaleCode  = 5;
    optional  int32  appBuildFlavor  = 6;
}

message SCCognacClientRuntimeClientRuntimeInfo {
    optional  string  privateContentURL  = 1;
}

message SCCognacCloseMessage {
    repeated  string  participantsArray  = 1;
}

message SCCognacConnectionApiGetAllParticipantsRequest {
    repeated  string  sessionIdsArray  = 1;
    optional  string  userId  = 2;
}

message SCCognacConnectionApiGetAllParticipantsResponse {
    repeated  SCCognacConnectionApiParticipants  participantsMap  = 1;
}

message SCCognacConnectionApiGetRecentSessionsRequest {
    optional  string  appId  = 1;
}

message SCCognacConnectionApiGetRecentSessionsResponse {
    repeated  SCCognacConnectionApiSessionInfo  sessionInfosArray  = 1;
}

message SCCognacConnectionApiGetValidSessionsRequest {
    optional  string  userId  = 1;
    optional  string  appId  = 2;
}

message SCCognacConnectionApiGetValidSessionsResponse {
    repeated  SCCognacConnectionApiSessionInfo  sessionInfosArray  = 1;
}

message SCCognacConnectionApiParticipants {
    repeated  string  userIdArray  = 1;
}

message SCCognacConnectionApiSessionInfo {
    optional  string  sessionId  = 1;
    optional  int32  participantCount  = 2;
    optional  string  oneOnOneConversationId  = 3;
    optional  string  groupConversationId  = 4;
    optional  string  sharedId  = 5;
    optional  string  soloId  = 6;
}

message SCCognacContextSwitchingSwitchAppInstanceRequest {
    optional  string  appInstanceId  = 1;
}

message SCCognacContextSwitchingSwitchAppInstanceResponse {
    optional  SCCognacAppInstancesChatDock  chatDock  = 1;
}

message SCCognacConversationContext {
    optional  string  oneOnOneConversationId  = 1;
    optional  string  groupConversationId  = 2;
}

message SCCognacDeviceClassGetDeviceClassRequest {
}

message SCCognacDeviceClassGetDeviceClassResponse {
    optional  int32  deviceClass  = 1;
}

message SCCognacDiscoverRankingFeaturesDiscoverRankingFeatures {
    optional  SCCognacDiscoverRankingFeaturesDiscoverRankingFeatures_InteractionFeatures  interactionFeatures  = 1;
}

message SCCognacDiscoverRankingFeaturesDiscoverRankingFeatures_InteractionFeatures {
    optional  int64  lastInteractionMsecs  = 1;
}

message SCCognacDiscoverableApiGetDiscoverableFriendsRequest {
    optional  string  userId  = 1;
    optional  string  appId  = 2;
}

message SCCognacDiscoverableApiGetDiscoverableFriendsResponse {
    repeated  string  userIdsArray  = 1;
}

message SCCognacDiscoverableApiPreloadingPermissionCheckRequest {
    optional  string  externalUserId  = 1;
    optional  string  appId  = 2;
}

message SCCognacDiscoverableApiPreloadingPermissionCheckResponse {
    optional  string  internalUserId  = 1;
}

message SCCognacExternalUserProfilesBatchGetExternalUserProfileRequest {
    optional  string  appId  = 1;
    repeated  SCCognacExternalUserProfilesUserInfo  userInfosArray  = 2;
}

message SCCognacExternalUserProfilesBatchGetExternalUserProfileResponse {
    repeated  SCCognacExternalUserProfilesFullUserProfile  userProfilesArray  = 1;
}

message SCCognacExternalUserProfilesExternalUserProfile {
    optional  string  externalUserId  = 1;
    optional  string  obfuscatedAvatarId  = 2;
}

message SCCognacExternalUserProfilesFullUserProfile {
    optional  SCCognacExternalUserProfilesUserInfo  userInfo  = 1;
    optional  SCCognacExternalUserProfilesExternalUserProfile  externalUserProfile  = 2;
}

message SCCognacExternalUserProfilesGetExternalUserProfileRequest {
    optional  string  appId  = 1;
    optional  string  avatarId  = 2;
}

message SCCognacExternalUserProfilesUserInfo {
    optional  string  userId  = 1;
    optional  string  avatarId  = 2;
}

message SCCognacInvitesAbandonInvitesRequest {
    optional  string  appInstanceId  = 1;
    repeated  string  invitedUserIdsArray  = 2;
}

message SCCognacInvitesInvitation {
    optional  string  id_p  = 1;
    optional  string  appInstanceId  = 2;
    optional  string  creatorUserId  = 3;
    optional  int64  invitationTimestampMillis  = 4;
}

message SCCognacInvitesInviteError {
    optional  int32  code  = 1;
    optional  string  message  = 2;
}

message SCCognacInvitesInviteFriendsRequest {
    optional  string  appInstanceId  = 1;
    repeated  string  invitedUserIdsArray  = 2;
}

message SCCognacInvitesInviteFriendsResponse {
    optional  SCCognacInvitesInviteError  senderError  = 1;
    repeated  SCCognacInvitesInviteError  recipientErrors  = 2;
}

message SCCognacInvitesListInvitationsRequest {
}

message SCCognacInvitesListInvitationsResponse {
    repeated  SCCognacInvitesInvitation  invitationsArray  = 1;
}

message SCCognacInvitesRemoveInvitationRequest {
    optional  string  invitationId  = 1;
}

message SCCognacInvitesRemoveInvitationResponse {
}

message SCCognacLaunchMessage {
    optional  SCCognacAppInstancesChatDockEntry  launchedChatDockEntry  = 1;
    optional  SCCognacAppInstancesChatDock  chatDock  = 2;
}

message SCCognacLeaderboardsBatchGetLeaderboardEntriesRequest {
    optional  string  leaderboardId  = 1;
    repeated  string  userIdsArray  = 2;
    optional  string  appId  = 3;
}

message SCCognacLeaderboardsBatchGetLeaderboardEntriesResponse {
    repeated  SCCognacLeaderboardsLeaderboardEntry  leaderboardEntriesArray  = 1;
}

message SCCognacLeaderboardsBatchSubmitScoreRequest {
    repeated  SCCognacLeaderboardsSubmitScoreRequest  submitScoreRequestsArray  = 1;
}

message SCCognacLeaderboardsBatchSubmitScoreResponse {
    repeated  SCCognacLeaderboardsSubmitScoreResponse  submitScoreResponsesArray  = 1;
}

message SCCognacLeaderboardsGetLeaderboardRequest {
    optional  string  leaderboardId  = 1;
}

message SCCognacLeaderboardsGetLeaderboardResponse {
    optional  SCCognacLeaderboardsLeaderboard  leaderboard  = 1;
}

message SCCognacLeaderboardsGetScoreVisibilitiesRequest {
    optional  string  appId  = 1;
}

message SCCognacLeaderboardsGetScoreVisibilitiesResponse {
    optional  string  appId  = 1;
    repeated  SCCognacLeaderboardsScoreVisibility  scoreVisibilitiesArray  = 2;
}

message SCCognacLeaderboardsLeaderboard {
    optional  string  id_p  = 1;
    optional  string  name  = 2;
    optional  string  logoURL  = 3;
    optional  int32  scoreType  = 4;
    optional  int64  scoreDecimalOffset  = 5;
    optional  int32  orderingType  = 6;
    optional  GPBTimestamp  lastUpdateTimestamp  = 7;
    optional  string  appId  = 8;
    optional  string  scoreIconURL  = 9;
    optional  SCCognacLeaderboardsLeaderboardMetadata  metadata  = 10;
}

message SCCognacLeaderboardsLeaderboardEntry {
    optional  SCCognacLeaderboardsUserScore  userScore  = 1;
    optional  int64  globalExactRank  = 2;
    optional  int32  globalPercentileRank  = 3;
    optional  int64  score  = 4;
    optional  string  userId  = 5;
    optional  string  displayScore  = 6;
}

message SCCognacLeaderboardsLeaderboardMetadata {
    optional  bytes  nakamaLeaderboardMetadata  = 1;
}

message SCCognacLeaderboardsListFriendLeaderboardEntriesRequest {
    optional  string  leaderboardId  = 1;
    optional  int32  maxEntries  = 2;
}

message SCCognacLeaderboardsListFriendLeaderboardEntriesResponse {
    optional  SCCognacLeaderboardsLeaderboardEntry  myEntry  = 1;
    repeated  SCCognacLeaderboardsLeaderboardEntry  leaderboardEntriesArray  = 2;
    optional  int32  myEntryPosition  = 3;
}

message SCCognacLeaderboardsListGlobalLeaderboardEntriesRequest {
    optional  string  leaderboardId  = 1;
    optional  int32  maxEntries  = 2;
}

message SCCognacLeaderboardsListGlobalLeaderboardEntriesResponse {
    optional  SCCognacLeaderboardsLeaderboardEntry  myEntry  = 1;
    repeated  SCCognacLeaderboardsLeaderboardEntry  leaderboardEntriesArray  = 2;
    optional  int64  totalEntries  = 3;
}

message SCCognacLeaderboardsListLeaderboardsRequest {
    optional  string  appId  = 1;
}

message SCCognacLeaderboardsListLeaderboardsResponse {
    repeated  SCCognacLeaderboardsLeaderboard  leaderboardsArray  = 1;
}

message SCCognacLeaderboardsScoreMetadata {
    optional  bytes  nakamaScoreMetadata  = 1;
}

message SCCognacLeaderboardsScoreVisibility {
    optional  string  appId  = 1;
    optional  string  leaderboardId  = 2;
    optional  int32  scoreVisibilityType  = 3;
}

message SCCognacLeaderboardsSetScoreVisibilityRequest {
    optional  SCCognacLeaderboardsScoreVisibility  scoreVisibility  = 1;
}

message SCCognacLeaderboardsSetScoreVisibilityResponse {
    optional  SCCognacLeaderboardsScoreVisibility  scoreVisibility  = 1;
}

message SCCognacLeaderboardsSubmitScoreRequest {
    optional  string  leaderboardId  = 1;
    optional  int64  score  = 2;
    optional  string  appId  = 3;
}

message SCCognacLeaderboardsSubmitScoreResponse {
    optional  SCCognacLeaderboardsUserScore  userScore  = 1;
    optional  int64  score  = 2;
}

message SCCognacLeaderboardsUserScore {
    optional  string  userId  = 1;
    optional  int64  score  = 2;
    optional  GPBTimestamp  lastUpdateTimestamp  = 3;
}

message SCCognacLocalhostPolicy {
    repeated  string  allowedAppIdsArray  = 1;
    repeated  string  disallowedAppIdsArray  = 2;
}

message SCCognacRocketIconConfiguration {
    optional  SCCognacRocketIconResources  lightMode  = 1;
    optional  SCCognacRocketIconResources  darkMode  = 2;
}

message SCCognacRocketIconResources {
    optional  string  normalStateURL  = 1;
    optional  string  selectedStateURL  = 2;
    optional  string  badgedStateURL  = 3;
}

message SCCognacScoreShareMessage {
    optional  string  id_p  = 1;
    optional  string  appId  = 2;
    optional  string  appName  = 3;
    optional  string  appIconURL  = 4;
    optional  string  appDynamicMediaURL  = 5;
    optional  int64  numericScore  = 6;
    optional  string  leaderboardName  = 7;
    optional  string  scoreIconURL  = 8;
}

message SCCognacSendChatStatusInfo {
    optional  string  path  = 1;
    optional  string  payload  = 2;
}

message SCCognacSendChatStatusMessageRequest {
    optional  string  appId  = 1;
    optional  string  conversationId  = 2;
    optional  string  updateId  = 3;
    repeated  string  inputs  = 4;
    repeated  string  renderUserIdsArray  = 5;
    optional  string  senderLocale  = 6;
    optional  SCCognacSendChatStatusInfo  sendInfo  = 7;
}

message SCCognacSendChatStatusMessageResponse {
}

message SCCognacSendNotificationRequest {
    optional  string  appId  = 1;
    optional  SCCognacConversationContext  conversationContext  = 2;
    optional  string  appInstanceId  = 3;
    optional  string  updateId  = 4;
    repeated  string  inputs  = 5;
    repeated  string  activeUserIdsArray  = 6;
    optional  string  appIconURL  = 7;
    optional  string  sessionId  = 8;
}

message SCCognacSendNotificationResponse {
}

message SCCognacStatusStreamMessage {
    optional  string  data_p  = 1;
}

message SCCognacTalkSessionMessage {
    optional  string  id_p  = 1;
    optional  string  userId  = 2;
    optional  SCCognacTalkSessionTextMessage  textMessage  = 3;
    optional  SCCognacStatusStreamMessage  statusStreamMessage  = 4;
}

message SCCognacTalkSessionTextMessage {
    optional  string  content  = 1;
}

message SCCognacTargetRegistrationBatchChunk {
    optional  bytes  chunk  = 1;
}

message SCCognacTargetRegistrationBatchStats {
    optional  int64  processed  = 1;
    optional  int64  errors  = 2;
    optional  int64  requested  = 3;
}

message SCCognacTargetRegistrationCommonShareInfo {
    optional  string  path  = 1;
    optional  GPBStringValue  payload  = 2;
}

message SCCognacTargetRegistrationGetBatchReportLinkRequest {
    optional  string  appId  = 1;
    optional  string  batchId  = 2;
}

message SCCognacTargetRegistrationGetBatchReportLinkResponse {
    optional  string  appId  = 1;
    optional  string  batchReportLink  = 2;
}

message SCCognacTargetRegistrationGetBatchStatsRequest {
    optional  string  appId  = 1;
    optional  string  batchId  = 2;
}

message SCCognacTargetRegistrationGetBatchStatsResponse {
    optional  string  appId  = 1;
    optional  string  batchId  = 2;
    optional  int32  batchStatus  = 3;
    optional  SCCognacTargetRegistrationBatchStats  registerShareInfoStats  = 4;
    optional  SCCognacTargetRegistrationBatchStats  registerExternalLinkStats  = 5;
    optional  SCCognacTargetRegistrationBatchStats  invalidateShareInfoStats  = 6;
    optional  SCCognacTargetRegistrationBatchStats  invalidateExternalLinkStats  = 7;
}

message SCCognacTargetRegistrationInvalidateExternalDomainRequest {
    optional  string  appId  = 1;
    optional  string  externalDomain  = 2;
}

message SCCognacTargetRegistrationInvalidateExternalDomainResponse {
}

message SCCognacTargetRegistrationInvalidateExternalLinkRequest {
    optional  string  appId  = 1;
    optional  string  externalLink  = 2;
}

message SCCognacTargetRegistrationInvalidateExternalLinkResponse {
}

message SCCognacTargetRegistrationInvalidateShareInfoRequest {
    optional  string  appId  = 1;
    optional  SCCognacTargetRegistrationCommonShareInfo  shareInfo  = 2;
}

message SCCognacTargetRegistrationInvalidateShareInfoResponse {
}

message SCCognacTargetRegistrationManagementAppConfiguration {
    optional  string  appId  = 1;
    optional  int64  maxShareInfos  = 2;
    optional  int64  maxExternalLinks  = 3;
    optional  bool  domainWhitelistingEnabled  = 4;
}

message SCCognacTargetRegistrationManagementAppConfigurationFull {
    optional  SCCognacTargetRegistrationManagementAppConfiguration  base  = 1;
    optional  int64  usedShareInfos  = 2;
    optional  int64  usedExternalLinks  = 3;
}

message SCCognacTargetRegistrationManagementCreateAppConfigurationRequest {
    optional  SCCognacTargetRegistrationManagementAppConfiguration  config  = 1;
}

message SCCognacTargetRegistrationManagementCreateAppConfigurationResponse {
}

message SCCognacTargetRegistrationManagementGetAppConfigurationRequest {
    optional  string  appId  = 1;
}

message SCCognacTargetRegistrationManagementGetAppConfigurationResponse {
    optional  SCCognacTargetRegistrationManagementAppConfigurationFull  config  = 1;
}

message SCCognacTargetRegistrationManagementUpdateAppConfigurationRequest {
    optional  string  appId  = 1;
    optional  GPBInt64Value  maxShareInfos  = 2;
    optional  GPBInt64Value  maxExternalLinks  = 3;
    optional  GPBBoolValue  domainWhitelistingEnabled  = 4;
}

message SCCognacTargetRegistrationManagementUpdateAppConfigurationResponse {
}

message SCCognacTargetRegistrationProcessBatchResponse {
    optional  string  appId  = 1;
    optional  string  batchId  = 2;
}

message SCCognacTargetRegistrationRegisterExternalDomainRequest {
    optional  string  appId  = 1;
    optional  string  externalDomain  = 2;
}

message SCCognacTargetRegistrationRegisterExternalDomainResponse {
}

message SCCognacTargetRegistrationRegisterExternalLinkRequest {
    optional  string  appId  = 1;
    optional  string  externalLink  = 2;
}

message SCCognacTargetRegistrationRegisterExternalLinkResponse {
}

message SCCognacTargetRegistrationRegisterShareInfoRequest {
    optional  string  appId  = 1;
    optional  SCCognacTargetRegistrationCommonShareInfo  shareInfo  = 2;
}

message SCCognacTargetRegistrationRegisterShareInfoResponse {
}

message SCCognacTargetRegistrationValidationValidateExternalLinkRequest {
    optional  string  appId  = 1;
    optional  string  link  = 2;
}

message SCCognacTargetRegistrationValidationValidateExternalLinkResponse {
    optional  bool  valid  = 1;
}

message SCCognacTargetRegistrationValidationValidateShareInfoRequest {
    optional  string  appId  = 1;
    optional  SCCognacTargetRegistrationCommonShareInfo  shareInfo  = 2;
}

message SCCognacTargetRegistrationValidationValidateShareInfoResponse {
    optional  bool  valid  = 1;
}

message SCCognacTerminateMessage {
    optional  SCCognacAppInstancesChatDockEntry  terminatedChatDockEntry  = 1;
    optional  SCCognacAppInstancesChatDock  chatDock  = 2;
}

message SCCognacTrayExitButtonConfiguration {
    optional  int32  treatment  = 1;
}

message SCCognacUpdateMessage {
    optional  string  id_p  = 1;
    optional  string  appId  = 2;
    optional  string  appName  = 3;
    optional  SCCognacLaunchMessage  launchMessage  = 4;
    optional  SCCognacTerminateMessage  terminateMessage  = 5;
    optional  SCCognacCloseMessage  closeMessage  = 6;
    optional  string  appInstanceId  = 7;
    optional  string  appIconURL  = 8;
}

message SCCognacUpdateNotificationPayload {
    optional  string  appInstanceId  = 1;
    optional  string  conversationId  = 2;
    optional  string  appId  = 3;
    optional  string  appIconURL  = 4;
}

message SCCognacUserAppPreferencesBatchGetUserAppPreferencesRequest {
    repeated  string  appIdsArray  = 1;
}

message SCCognacUserAppPreferencesBatchGetUserAppPreferencesResponse {
    repeated  SCCognacUserAppPreferencesUserAppPreferences  userAppPreferencesArray  = 1;
}

message SCCognacUserAppPreferencesGetUserAppPreferencesRequest {
    optional  string  appId  = 1;
}

message SCCognacUserAppPreferencesGetUserAppPreferencesResponse {
    optional  SCCognacUserAppPreferencesUserAppPreferences  userAppPreferences  = 1;
}

message SCCognacUserAppPreferencesSetUserAppPreferencesRequest {
    optional  SCCognacUserAppPreferencesUserAppPreferences  userAppPreferences  = 1;
}

message SCCognacUserAppPreferencesSetUserAppPreferencesResponse {
    optional  SCCognacUserAppPreferencesUserAppPreferences  userAppPreferences  = 1;
}

message SCCognacUserAppPreferencesUserAppPreferences {
    optional  string  appId  = 1;
    optional  int64  updateTimestampMillis  = 2;
    optional  GPBBoolValue  acceptedContentAlert  = 3;
    optional  GPBBoolValue  acceptedLeaderboardAlert  = 4;
    optional  GPBBoolValue  acceptedLeaderboardGameAlert  = 5;
    optional  GPBBoolValue  isShortcutApp  = 6;
}

message SCCognacUserAppSessionsCreateUserAppSessionRequest {
    optional  string  appInstanceId  = 1;
    optional  string  buildId  = 2;
    optional  SCCognacAppsMajorUpdateVersion  majorUpdateVersion  = 3;
    optional  bool  suppressNotification  = 4;
}

message SCCognacUserAppSessionsCreateUserAppSessionResponse {
    optional  SCCognacUserAppSessionsUserAppSession  userAppSession  = 1;
}

message SCCognacUserAppSessionsTerminateUserAppSessionRequest {
    optional  string  userAppSessionId  = 1;
}

message SCCognacUserAppSessionsUserAppSession {
    optional  string  id_p  = 1;
    optional  string  appInstanceId  = 2;
    optional  string  externalUserId  = 3;
    optional  string  obfuscatedAvatarId  = 4;
}

message SCCommunityOrgPbCohort {
    optional  string  cohortId  = 1;
    optional  string  cohortName  = 2;
    optional  SCCommunityOrgPbCohortDataGraduationYear  cohortTypeYear  = 3;
}

message SCCommunityOrgPbCohortDataGraduationYear {
    optional  uint32  year  = 1;
}

message SCCommunityOrgPbCommunity {
    optional  SCSCOREUUID  groupId  = 1;
    optional  SCCommunityOrgPbCohort  cohort  = 2;
    optional  SCCommunityOrgPbCommunityWaitlist  communityWaitlist  = 3;
}

message SCCommunityOrgPbCommunityWaitlist {
}

message SCCommunityOrgPbJoinWaitlistRequest {
    optional  string  emailAddress  = 1;
    optional  SCCommunityOrgPbCohort  cohort  = 2;
    optional  string  communityLongName  = 3;
    optional  string  communityShortName  = 4;
}

message SCCommunityOrgPbJoinWaitlistResponse {
    optional  int32  status  = 1;
}

message SCCommunityOrgPbLeaveWaitlistRequest {
    optional  string  emailAddress  = 1;
}

message SCCommunityOrgPbLeaveWaitlistResponse {
    optional  int32  status  = 1;
}

message SCCommunityOrgPbLookupCommunitiesByEmailDomain {
    optional  string  emailDomain  = 1;
}

message SCCommunityOrgPbLookupCommunitiesByOrgID {
    optional  SCSCOREUUID  orgId  = 1;
}

message SCCommunityOrgPbLookupCommunitiesRequest {
    optional  SCCommunityOrgPbLookupCommunitiesByEmailDomain  emailDomain  = 1;
    optional  SCCommunityOrgPbLookupCommunitiesByOrgID  orgId  = 2;
    optional  bool  isWaitlistEnabled  = 3;
}

message SCCommunityOrgPbLookupCommunitiesResponse {
    repeated  SCCommunityOrgPbCommunity  communitiesArray  = 1;
}

message SCCommunityOrgPbLookupOrganizationByEmailDomain {
    optional  string  emailDomain  = 1;
}

message SCCommunityOrgPbLookupOrganizationByOrgID {
    optional  SCSCOREUUID  orgId  = 1;
}

message SCCommunityOrgPbLookupOrganizationRequest {
    optional  SCCommunityOrgPbLookupOrganizationByOrgID  orgId  = 1;
    optional  SCCommunityOrgPbLookupOrganizationByEmailDomain  emailDomain  = 2;
}

message SCCommunityOrgPbLookupOrganizationResponse {
    optional  SCCommunityOrgPbOrganization  organization  = 1;
}

message SCCommunityOrgPbOrganization {
    optional  SCSCOREUUID  orgId  = 1;
    optional  int32  releaseStatus  = 2;
    repeated  string  allowedEmailDomainsArray  = 3;
}

message SCCommunityOrgPbSyncWaitlistRequest {
    optional  bytes  syncToken  = 1;
}

message SCCommunityOrgPbSyncWaitlistResponse {
    repeated  SCCommunityOrgPbWaitlist  updatedWaitlistArray  = 1;
    repeated  string  deletedWaitlistEmailArray  = 2;
    optional  bool  isFullSync  = 3;
    optional  bytes  syncToken  = 4;
}

message SCCommunityOrgPbUpdateWaitlistToVerifiedRequest {
    optional  SCSCOREUUID  userId  = 1;
    optional  string  emailAddress  = 2;
}

message SCCommunityOrgPbUpdateWaitlistToVerifiedResponse {
    optional  int32  status  = 1;
}

message SCCommunityOrgPbWaitlist {
    optional  string  emailAddress  = 1;
    optional  bool  isVerified  = 2;
}

message SCConnectSnapConnectAttributes {
    optional  string  sourceAppDisplayName  = 1;
    optional  string  sourceAppOauthClientId  = 2;
}

message SCConnectedLensesInviteFriendsRequest {
    optional  string  conversationId  = 1;
    optional  string  sessionId  = 2;
    optional  string  appId  = 3;
    optional  string  lensName  = 4;
    optional  string  lensIconURL  = 5;
}

message SCConnectedLensesInviteFriendsResponse {
}

message SCConnectedLensesRingFriendsRequest {
    optional  string  conversationId  = 1;
    optional  string  sessionId  = 2;
    optional  string  appId  = 3;
    optional  string  lensName  = 4;
    optional  string  lensIconURL  = 5;
    repeated  string  invitedUserIdsArray  = 6;
}

message SCConnectedLensesRingFriendsResponse {
}

message SCContactSyncDevicePermissionTypePair {
    optional  string  deviceId  = 1;
    optional  int32  permissionType  = 2;
}

message SCContactSyncUserLevelPermissionGrantedDevices {
    repeated  SCContactSyncDevicePermissionTypePair  permissionsArray  = 1;
}

message SCContextAffordance {
    optional  sint32  textKey  = 11;
}

message SCContextContentMetadata {
    repeated  string  taggedUserIdsArray  = 21;
    repeated  string  taggedNamesArray  = 22;
}

message SCContextContextHint {
    optional  int32  hint  = 1;
    optional  int64  timestamp  = 2;
    optional  SCContextAffordance  affordance  = 3;
    optional  SCContextContentMetadata  contentMetadata  = 4;
    repeated  SCContextV1ContextField  moreContextArray  = 10;
    optional  SCCTXContextClientInfo  contextClientInfo  = 11;
    optional  SCCTXContextClientInfo  unencryptedClientInfo  = 12;
    optional  bytes  encryptedClientInfo  = 13;
}

message SCContextCtaStyleConfig {
    optional  int32  contextCtaStyle  = 1;
    optional  int32  actionBarHeight  = 2;
    optional  int32  extraTouchTargetHeight  = 3;
}

message SCContextV1Address {
    optional  string  street  = 1;
    optional  string  postalCode  = 2;
    optional  string  countryCode  = 3;
    optional  string  city  = 4;
    optional  string  state  = 5;
    optional  string  country  = 6;
    optional  string  timeZone  = 7;
}

message SCContextV1ContextField {
    optional  string  name  = 1;
    optional  string  value  = 2;
}

message SCContextV1GeoLocation {
    optional  float  lat  = 1;
    optional  float  lng  = 2;
    optional  float  altitude  = 3;
    optional  float  radius  = 4;
}

message SCContextV1GroupMessageIdentifier {
    optional  string  messageId  = 1;
    optional  string  groupId  = 2;
    optional  string  senderUsername  = 3;
    optional  string  senderUserId  = 4;
}

message SCContextV1Hours {
    repeated  SCContextV1TimeRange  rangesArray  = 1;
}

message SCContextV1Html {
    optional  string  URL  = 1;
    optional  SCContextV1Html_InlineHtml  localHtml  = 2;
}

message SCContextV1Html_InlineHtml {
    optional  string  html  = 1;
    optional  string  baseURL  = 2;
}

message SCContextV1Image {
    optional  string  imageURL  = 1;
    optional  SCContextV1Image_InlineImage  inlineImage  = 2;
    optional  SCContextV1Image_ImageReference  imageReference  = 3;
    optional  SCContextV1Image_EncryptedImage  encryptedImage  = 4;
    optional  float  scaleFactor  = 5;
}

message SCContextV1Image_EncryptedImage {
    optional  string  key  = 2;
    optional  string  iv  = 3;
    optional  string  imageURL  = 4;
    optional  SCContextV1Image_InlineImage  inlineImage  = 5;
}

message SCContextV1Image_ImageReference {
    optional  string  resourceId  = 1;
}

message SCContextV1Image_InlineImage {
    optional  bytes  imageData  = 1;
    optional  int32  imageType  = 2;
}

message SCContextV1Point2f {
    optional  float  x  = 1;
    optional  float  y  = 2;
}

message SCContextV1Size2i {
    optional  uint32  height  = 1;
    optional  uint32  width  = 2;
}

message SCContextV1TimeRange {
    optional  uint32  startTime  = 1;
    optional  uint32  endTime  = 2;
}

message SCContextV1VenueOverrides {
    optional  string  name  = 1;
    optional  string  websiteURL  = 2;
    optional  string  phoneNumber  = 3;
    optional  SCContextV1GeoLocation  location  = 4;
    repeated  string  categoriesArray  = 5;
    optional  string  categoryDisplayName  = 6;
    optional  SCContextV1Address  address  = 7;
    repeated  SCContextV1Hours  hours  = 8;
}

message SCCrystalHubActivity {
    optional  SCCrystalHubCashout  cashout  = 1;
    optional  SCCrystalHubPayoutActivity  payout  = 2;
    optional  int32  activityType  = 3;
}

message SCCrystalHubCashout {
    optional  int64  value  = 1;
    optional  int64  crystals  = 2;
    optional  int32  state  = 3;
    optional  string  cashoutDate  = 4;
    optional  int32  type  = 5;
}

message SCCrystalHubForfeitInfo {
    optional  string  forfeitDate  = 1;
}

message SCCrystalHubGetActivityRequest {
    optional  string  payoutEndDate  = 1;
    optional  string  cashoutEndDate  = 2;
    optional  int64  pageSize  = 3;
}

message SCCrystalHubGetActivityResponse {
    repeated  SCCrystalHubActivity  activitiesArray  = 1;
    optional  string  nextPayoutEndDate  = 2;
    optional  string  nextCashoutEndDate  = 3;
}

message SCCrystalHubGetCrystalActivitySummaryRequest {
}

message SCCrystalHubGetCrystalActivitySummaryResponse {
    optional  SCCrystalHubOnboardingInfo  onboardingInfo  = 1;
    optional  int32  payoutState  = 2;
    optional  int64  availableCrystals  = 3;
    optional  int64  availableEarningsCents  = 4;
    optional  int64  pendingCrystals  = 5;
    optional  bool  canCashout  = 6;
    optional  int64  cashoutThreshold  = 7;
}

message SCCrystalHubGetTotalCrystalsBySourceRequest {
    optional  int32  payoutType  = 1;
}

message SCCrystalHubGetTotalCrystalsBySourceResponse {
    optional  int64  crystals  = 1;
    optional  int64  dollarCents  = 2;
}

message SCCrystalHubOnboardingInfo {
    optional  int32  onboardingState  = 1;
    optional  int32  reasonCode  = 2;
    optional  string  onboardingEmail  = 3;
    optional  string  accessCode  = 4;
    optional  bool  securityCheckPasses  = 5;
}

message SCCrystalHubPayoutActivity {
    optional  int32  payoutType  = 1;
    optional  int64  earnedTimestamp  = 2;
    optional  int64  crystalValue  = 3;
    repeated  SCCrystalHubPayoutSource  payoutSourcesArray  = 4;
    optional  int32  status  = 5;
    optional  string  payoutDate  = 6;
    optional  SCCrystalHubForfeitInfo  forfeitInfo  = 7;
}

message SCCrystalHubPayoutSource {
    optional  int64  value  = 1;
    optional  int32  payoutType  = 2;
    optional  int64  valueCents  = 3;
    optional  string  earnedDate  = 4;
    optional  string  description_p  = 5;
}

message SCCrystalHubStartCashoutRequest {
    optional  int64  cashOutAmount  = 1;
    optional  int64  cashOutTimestamp  = 2;
}

message SCCrystalHubStartCashoutResponse {
}

message SCDeeplinkCreateShortLinkRequest {
    optional  SCDeeplinkShortLinkPayload  shortLinkPayload  = 1;
}

message SCDeeplinkCreateShortLinkResponse {
    optional  string  shortLink  = 1;
}

message SCDeeplinkDecodeShortLinkRequest {
    optional  string  shortLink  = 1;
    optional  int32  feature  = 2;
    optional  int32  team  = 3;
}

message SCDeeplinkDecodeShortLinkResponse {
    optional  SCDeeplinkShortLinkPayload  shortLinkPayload  = 1;
}

message SCDeeplinkShortLinkPayload {
    optional  string  rawURL  = 1;
    optional  string  desktopFallback  = 2;
    optional  string  mobileFallback  = 3;
    optional  int32  ttl  = 4;
    optional  string  destination  = 5;
    optional  int32  feature  = 6;
    optional  int32  team  = 7;
    optional  int32  linkType  = 8;
    optional  int32  channelType  = 9;
}

message SCDeltaforceAlwaysCondition {
}

message SCDeltaforceBetweenKeyCondition {
    optional  SCDeltaforceItemKey  rangeStart  = 1;
    optional  SCDeltaforceItemKey  rangeEnd  = 2;
}

message SCDeltaforceChange {
    optional  SCDeltaforceItemPayload  write  = 1;
    optional  SCDeltaforceTombstone  deletedRow  = 2;
}

message SCDeltaforceCompositeCondition {
    optional  int32  operator_p  = 2;
    repeated  SCDeltaforceCondition  conditionArray  = 3;
}

message SCDeltaforceCondition {
    optional  SCDeltaforceBetweenKeyCondition  keyBetween  = 1;
    optional  SCDeltaforceItemKey  keyGreaterThan  = 2;
    optional  SCDeltaforceItemKey  keyGreaterThanOrEq  = 3;
    optional  SCDeltaforceItemKey  keyLessThan  = 4;
    optional  SCDeltaforceItemKey  keyLessThanOrEq  = 5;
    optional  SCDeltaforcePropertyCondition  propertyCondition  = 6;
    optional  SCDeltaforceAlwaysCondition  alwaysCondition  = 7;
    optional  SCDeltaforceItemAbsentCondition  itemAbsentCondition  = 8;
    optional  SCDeltaforceCompositeCondition  compositeCondition  = 9;
    optional  SCDeltaforceIfLastModifiedOutsideWindowCondition  ifLastModifiedOutsideWindowCondition  = 10;
}

message SCDeltaforceGroupKey {
    optional  string  kind  = 1;
    optional  string  name  = 2;
    optional  uint64  id_p  = 3;
}

message SCDeltaforceGroupState {
    optional  uint64  groupVersion  = 1;
    optional  SCDeltaforceGroupKey  group  = 2;
    optional  uint64  operationTimestamp  = 3;
}

message SCDeltaforceIfLastModifiedOutsideWindowCondition {
}

message SCDeltaforceItem {
    optional  SCDeltaforceItemKey  key  = 1;
    repeated  SCDeltaforceValue  property  = 2;
    optional  uint64  lastModified  = 3;
    optional  uint64  lastModifiedVersion  = 4;
    optional  uint64  lastModifiedTime  = 5;
}

message SCDeltaforceItemAbsentCondition {
}

message SCDeltaforceItemKey {
    optional  SCDeltaforceGroupKey  group  = 1;
    repeated  SCDeltaforcePathComponent  pathComponentsArray  = 3;
}

message SCDeltaforceItemPayload {
    repeated  string  keysArray  = 1;
    repeated  SCDeltaforceValue  valuesArray  = 2;
    optional  uint64  lastModifiedVersion  = 3;
    optional  uint64  lastModifiedTime  = 4;
}

message SCDeltaforceKeysById {
    optional  string  stringId  = 1;
    optional  uint64  longId  = 2;
    optional  SCDeltaforceKeysById_NodeData  data_p  = 3;
    repeated  SCDeltaforceKeysByKind  childKeysArray  = 4;
}

message SCDeltaforceKeysById_NodeData {
    optional  SCDeltaforceChange  change  = 1;
}

message SCDeltaforceKeysByKind {
    optional  string  kind  = 1;
    repeated  SCDeltaforceKeysById  keysArray  = 2;
}

message SCDeltaforcePathComponent {
    optional  string  kind  = 1;
    optional  string  name  = 2;
    optional  uint64  id_p  = 3;
}

message SCDeltaforceProjectedItem {
    optional  SCDeltaforceItemKey  key  = 1;
    repeated  SCDeltaforceValue  property  = 2;
    optional  uint64  lastModified  = 3;
}

message SCDeltaforceProperty {
    optional  string  propName  = 1;
    optional  SCDeltaforceValue  value  = 2;
}

message SCDeltaforcePropertyCondition {
    optional  SCDeltaforceProperty  eq  = 1;
    optional  SCDeltaforceProperty  notEq  = 2;
    optional  SCDeltaforceProperty  lessThan  = 3;
    optional  SCDeltaforceProperty  lessThanOrEq  = 4;
    optional  SCDeltaforceProperty  greaterThan  = 5;
    optional  SCDeltaforceProperty  greaterThanOrEq  = 6;
    optional  SCDeltaforceProperty  notSet  = 7;
}

message SCDeltaforcePropertyMutation {
    optional  SCDeltaforcePropertyPath  propPath  = 1;
    optional  SCDeltaforceValue  replaceWith  = 2;
    optional  bool  deleteProperty  = 3;
}

message SCDeltaforcePropertyPath {
    optional  string  propertyName  = 1;
    repeated  SCDeltaforcePropertyPath_PathComponent  pathComponentsArray  = 2;
}

message SCDeltaforcePropertyPath_PathComponent {
    optional  string  mapIndex  = 1;
    optional  uint64  listIndex  = 2;
}

message SCDeltaforceQueryItemData {
    optional  SCDeltaforceProjectedItem  projectedItem  = 1;
    optional  SCDeltaforceItem  item  = 2;
}

message SCDeltaforceTombstone {
    optional  uint64  lastModifiedVersion  = 1;
    optional  uint64  lastModifiedTime  = 2;
}

message SCDeltaforceValue {
    optional  string  string  = 1;
    optional  sint64  long_p  = 2;
    optional  bytes  bytes  = 3;
    optional  bool  bool_p  = 4;
    optional  double  double_p  = 5;
    optional  SCDeltaforceValueMap  map  = 6;
    optional  SCDeltaforceValueList  list  = 7;
    optional  SCDeltaforceItemKey  key  = 9;
    optional  bool  nullVal  = 10;
    optional  uint64  epochTimeMillis  = 11;
}

message SCDeltaforceValueList {
    repeated  SCDeltaforceValue  valuesArray  = 1;
}

message SCDeltaforceValueMap {
    repeated  SCDeltaforceValue  valueMap  = 1;
}

message SCDiscoverFavoriteAction {
    optional  bool  enableForPublisherStory  = 1;
    optional  bool  enableForPublicUserStory  = 2;
    optional  bool  enableForSavedStory  = 3;
    optional  bool  enableForSharedStory  = 4;
    optional  bool  enableForPromotedStory  = 5;
}

message SCDiscoverInlineSuggestionsConfig {
    optional  bool  enabled  = 1;
    optional  int32  maxSuggestions  = 2;
    optional  bool  suggestionsWithBitmojiOnly  = 3;
    optional  bool  removeQuickAddOnDiscover  = 4;
}

message SCFEEDCompositeStoryId {
    optional  int32  corpus  = 1;
    optional  string  id_p  = 2;
    optional  int64  version  = 3;
}

message SCFEEDStoryCorpus {
}

message SCFeedHeaderPromptV2ProtoSetting {
    optional  string  title  = 1;
    optional  string  subTitle  = 2;
    optional  string  icon  = 3;
    optional  int32  type  = 4;
    optional  int32  maxCap  = 5;
    optional  int32  displayDurationInDays  = 6;
    optional  int32  order  = 7;
    optional  int32  coolDownInDays  = 8;
}

message SCFeedHeaderPromptV2ProtoSettingsEntity {
    optional  int32  cooldownInDays  = 1;
    repeated  SCFeedHeaderPromptV2ProtoSetting  typesArray  = 2;
}

message SCFeedHeaderPromptV2ProtoSyncState {
    optional  int32  type  = 1;
    optional  int32  interactedCount  = 2;
    optional  int64  lastTimeShownTs  = 3;
    optional  bool  lastTimeShownExpired  = 4;
}

message SCFeedHeaderPromptV2ProtoSyncStatesEntity {
    optional  int64  lastInteractedTs  = 1;
    repeated  SCFeedHeaderPromptV2ProtoSyncState  typesArray  = 2;
}

message SCFetchSuggestionsConfig {
    optional  int32  fetchType  = 1;
    optional  int64  onDemandTtlDurationMs  = 2;
    optional  int64  prefetchTtlDurationMs  = 3;
    optional  int64  onDemandTimeoutMs  = 4;
}

message SCFideliusAcknowledgeRecryptPackage {
    optional  int32  retrySource  = 1;
    optional  int32  retryType  = 2;
    optional  SCFideliusMessageIdentifier  messageId  = 3;
    repeated  SCFideliusRecipientDeviceInfo  deviceInfosArray  = 4;
}

message SCFideliusAcknowledgeRecryptRequest {
    optional  uint64  fideliusVersion  = 1;
    optional  bytes  publicKey  = 2;
    repeated  SCFideliusAcknowledgeRecryptPackage  ackRecryptPackagesArray  = 3;
}

message SCFideliusAcknowledgeRecryptResponse {
}

message SCFideliusArroyoAssistedRetryInfo {
    optional  SCFideliusMessageIdentifier  messageId  = 1;
    optional  bytes  publicKey  = 2;
    optional  uint64  keyVersion  = 3;
    optional  bytes  salt  = 4;
    optional  bytes  phi  = 5;
    optional  bytes  validationTag  = 6;
}

message SCFideliusFideliusDeviceKey {
    optional  bytes  publicKey  = 1;
    optional  bytes  hashedPublicKey  = 2;
    optional  bytes  iwek  = 3;
    optional  uint64  version  = 4;
    optional  uint64  createdTimestamp  = 5;
    optional  uint64  lastUpdatedTimestamp  = 6;
}

message SCFideliusFideliusTentativeDeviceKey {
    optional  bytes  publicKey  = 1;
    optional  bytes  hashedPublicKey  = 2;
    optional  bytes  iwek  = 3;
    optional  uint64  version  = 4;
}

message SCFideliusFideliusTentativeWebKey {
    optional  bytes  publicKey  = 1;
    optional  bytes  keyPairId  = 2;
    optional  bytes  rwk  = 3;
    optional  uint64  version  = 4;
}

message SCFideliusFideliusUserKey {
    repeated  SCFideliusFideliusDeviceKey  deviceKeysArray  = 1;
}

message SCFideliusFideliusWebRecord {
    repeated  SCFideliusWebAppInfo  webAppInfosArray  = 1;
}

message SCFideliusFriendDeviceKey {
    optional  bytes  publicKey  = 1;
    optional  uint64  version  = 2;
}

message SCFideliusFriendKeys {
    optional  SCCOREUUID  userId  = 1;
    repeated  SCFideliusFriendDeviceKey  friendDeviceKeysArray  = 2;
}

message SCFideliusGetFriendKeysRequest {
    repeated  SCCOREUUID  friendUserIdsArray  = 1;
}

message SCFideliusGetFriendKeysResponse {
    repeated  SCFideliusFriendKeys  friendKeysArray  = 1;
}

message SCFideliusGetUserKeyRequest {
    optional  SCCOREUUID  userId  = 1;
}

message SCFideliusGetUserKeyResponse {
    optional  SCFideliusFideliusUserKey  userKey  = 1;
}

message SCFideliusInitializeDeviceKeyRequest {
    optional  SCCOREUUID  userId  = 1;
    repeated  bytes  hashedPublicKeysArray  = 2;
    optional  SCFideliusFideliusTentativeDeviceKey  tentativeDeviceKey  = 3;
}

message SCFideliusInitializeDeviceKeyResponse {
    optional  bytes  iwek  = 1;
    optional  bytes  hashedPublicKey  = 2;
}

message SCFideliusInitializeWebKeyRequest {
    repeated  bytes  onDeviceKeyPairIdsArray  = 1;
    optional  SCFideliusFideliusTentativeWebKey  tentativeWebKey  = 2;
}

message SCFideliusInitializeWebKeyResponse {
    optional  bytes  rwk  = 1;
    optional  bytes  keyPairId  = 2;
}

message SCFideliusInitiateRecryptPackage {
    optional  SCFideliusMessageIdentifier  messageId  = 1;
    optional  bool  recomputeSharedSecret  = 2;
}

message SCFideliusInitiateRecryptRequest {
    repeated  SCFideliusInitiateRecryptPackage  initRecryptPackagesArray  = 1;
}

message SCFideliusInitiateRecryptResponse {
    optional  bytes  publicKey  = 1;
}

message SCFideliusMessageIdentifier {
    optional  SCCOREUUID  conversationId  = 1;
    optional  int64  messageId  = 2;
}

message SCFideliusNotifyRecryptPackage {
    optional  SCFideliusFriendKeys  initiator  = 1;
    optional  bool  recomputeSharedSecret  = 2;
    repeated  SCFideliusMessageIdentifier  messageIdArray  = 3;
    repeated  SCFideliusArroyoAssistedRetryInfo  assistedRetryInfosArray  = 4;
}

message SCFideliusPollRecryptRequest {
    optional  bytes  publicKey  = 1;
}

message SCFideliusPollRecryptResponse {
    repeated  SCFideliusNotifyRecryptPackage  notifyRecryptPackagesArray  = 1;
}

message SCFideliusRecipientDeviceInfo {
    optional  bytes  publicKey  = 1;
    optional  uint64  keyVersion  = 2;
    optional  bytes  wrappedMediaKey  = 3;
    optional  bytes  salt  = 4;
    optional  bytes  validationTag  = 5;
}

message SCFideliusRecryptAssistanceRequest {
    repeated  SCFideliusMessageIdentifier  messageIdsArray  = 1;
}

message SCFideliusRecryptAssistanceResponse {
}

message SCFideliusWebAppInfo {
    optional  bytes  publicKey  = 1;
    optional  bytes  keyPairId  = 2;
    optional  bytes  rwk  = 3;
    optional  uint64  version  = 4;
    optional  uint64  createdTimestamp  = 5;
    optional  uint64  lastUpdatedTimestamp  = 6;
}

message SCFormaCreatePollRequest {
    optional  bytes  srcPollId  = 1;
    optional  bytes  tgtPollId  = 2;
    optional  SCFormaEncryptedMedia  tgtTryonMedia  = 3;
    optional  SCFormaFormaItemLens  formaItemLens  = 4;
    optional  SCFormaPCSItemLens  pcsItemLens  = 5;
    optional  bool  isChallengable  = 6;
}

message SCFormaCreatePollResponse {
}

message SCFormaEncryptedMedia {
    optional  string  mediaURL  = 1;
    optional  bytes  key  = 2;
    optional  bytes  iv  = 3;
}

message SCFormaFormaItemLens {
    optional  string  lensId  = 1;
    optional  bytes  itemUuid  = 2;
}

message SCFormaGetLeaderboardRequest {
    optional  string  leaderboardId  = 1;
    optional  int64  noUser  = 2;
    optional  SCFormaFormaItemLens  formaItemLens  = 3;
    optional  SCFormaPCSItemLens  pcsItemLens  = 4;
}

message SCFormaGetLeaderboardResponse {
    optional  SCFormaFormaItemLens  formaItemLens  = 1;
    optional  SCFormaPCSItemLens  pcsItemLens  = 2;
    repeated  SCFormaTopUser  topUsersArray  = 3;
}

message SCFormaGetPollMetadataRequest {
    optional  bytes  pollId  = 1;
}

message SCFormaGetPollMetadataResponse {
    optional  bytes  pollId  = 1;
    optional  SCFormaPublicTryon  sourceTryon  = 2;
    optional  SCFormaPublicTryon  challengerTryon  = 3;
    optional  string  leaderboardId  = 4;
    optional  SCFormaFormaItemLens  formaItemLens  = 5;
    optional  SCFormaPCSItemLens  pcsItemLens  = 6;
    optional  bool  isChallengable  = 7;
}

message SCFormaPCSItemLens {
    optional  string  lensId  = 1;
    optional  int64  pcsId  = 2;
}

message SCFormaPublicTryon {
    optional  bytes  publicTryonId  = 1;
    optional  bytes  userId  = 2;
    optional  SCFormaEncryptedMedia  media  = 3;
}

message SCFormaTopUser {
    optional  bytes  userId  = 1;
    optional  int64  vote  = 2;
    optional  bytes  topPollId  = 3;
    optional  SCFormaPublicTryon  topModel  = 4;
}

message SCFourthTabRedesign {
    optional  bool  enableVoperaInDfFriends  = 1;
    optional  bool  enableVoperaInDfSubsAndForYou  = 2;
    optional  bool  enableVoperaInFf  = 3;
    optional  bool  enableSwipeLeftToShowAttachment  = 4;
    optional  bool  enableListViewInDfFriends  = 5;
    optional  bool  enableCaptionInListView  = 6;
}

message SCFriendSuggestionPushNotification {
    optional  string  userId  = 1;
    optional  string  mutableUsername  = 2;
    optional  string  displayName  = 3;
    optional  string  bitmojiAvatarId  = 4;
    optional  string  bitmojiSelfieId  = 5;
    optional  string  bitmojiSceneId  = 6;
    optional  string  bitmojiBackgroundId  = 7;
    optional  string  suggestionSubtext  = 8;
    optional  string  suggestionSubtextLowercase  = 9;
    optional  string  suggestionToken  = 10;
    optional  uint32  isViewed  = 11;
    optional  uint32  isFromImc  = 12;
}

message SCFriendingContactBookUploadRequest {
    optional  string  countryCode  = 1;
    repeated  SCFriendingContactFromClient  contactsArray  = 2;
    optional  SCFriendingLegacyContactBookUploadRequestParams  legacyParams  = 3;
    optional  int32  rawContactCount  = 4;
}

message SCFriendingContactBookUploadResponse {
    repeated  SCFriendingContactSnapchatter  snapchattersArray  = 1;
    optional  SCFriendingContactsNotProcessed  contactsNotProcessed  = 2;
    repeated  SCFriendingContactNonSnapchatter  nonSnapchattersArray  = 3;
}

message SCFriendingContactFromClient {
    optional  string  contactId  = 1;
    optional  string  displayName  = 2;
    optional  string  countryCode  = 3;
    repeated  SCFriendingContactMethod  contactMethodsArray  = 4;
    optional  bool  isStarred  = 20;
    optional  bool  hasPhoto  = 21;
    optional  bool  hasSavedDate  = 22;
    optional  uint64  lastUpdateTs  = 23;
}

message SCFriendingContactIdInfo {
    optional  string  contactId  = 1;
    repeated  string  contactMethodIdArray  = 2;
}

message SCFriendingContactMethod {
    optional  string  contactMethodId  = 1;
    optional  string  phoneNumber  = 10;
    optional  string  emailAddress  = 11;
}

message SCFriendingContactNonSnapchatter {
    optional  string  contactId  = 1;
    optional  string  contactMethodId  = 2;
    optional  float  score  = 3;
}

message SCFriendingContactSnapchatter {
    optional  string  userId  = 1;
    optional  string  username  = 2;
    optional  string  displayName  = 3;
    optional  string  contactId  = 4;
    optional  string  contactMethodId  = 5;
    optional  string  bitmojiAvatarId  = 10;
    optional  string  bitmojiSelfieId  = 11;
    optional  string  bitmojiSceneId  = 12;
    optional  string  bitmojiBackgroundId  = 13;
    optional  bool  isNewContact  = 14;
    optional  bytes  snapshotMetadata  = 21;
    optional  float  score  = 22;
}

message SCFriendingContactsNotProcessed {
    optional  int64  retryAfter  = 1;
    repeated  SCFriendingContactIdInfo  contactIdInfosArray  = 2;
}

message SCFriendingEarlyContactBookUploadResponse {
    optional  SCFriendingContactsNotProcessed  contactsNotProcessed  = 1;
}

message SCFriendingFriendActionFailure {
    optional  SCCOREUUID  friendId  = 1;
    optional  int32  reason  = 2;
}

message SCFriendingFriendAddParam {
    optional  SCCOREUUID  friendId  = 1;
    optional  int32  source  = 2;
    optional  string  suggestionToken  = 3;
    optional  string  displayName  = 4;
    optional  string  snapId  = 5;
    optional  string  compositeStoryId  = 6;
}

message SCFriendingFriendBlockParam {
    optional  SCCOREUUID  friendId  = 1;
}

message SCFriendingFriendDisplayNameParam {
    optional  SCCOREUUID  friendId  = 1;
    optional  string  displayName  = 2;
}

message SCFriendingFriendIgnoreParam {
    optional  SCCOREUUID  friendId  = 1;
}

message SCFriendingFriendInviteOrAddByPhoneParam {
    repeated  string  countryCodeArray  = 1;
    optional  string  rawPhoneNumber  = 2;
    optional  string  displayName  = 3;
}

message SCFriendingFriendInviteParam {
    optional  SCCOREUUID  friendId  = 1;
    optional  string  displayName  = 2;
}

message SCFriendingFriendRemoveParam {
    optional  SCCOREUUID  friendId  = 1;
    optional  string  snapId  = 2;
    optional  string  compositeStoryId  = 3;
}

message SCFriendingFriendUnblockParam {
    optional  SCCOREUUID  friendId  = 1;
}

message SCFriendingFriendsActionResponse {
    repeated  SCAtlasOutgoingFriend  successesArray  = 1;
    repeated  SCFriendingFriendActionFailure  failuresArray  = 2;
    optional  string  message  = 3;
}

message SCFriendingFriendsAddRequest {
    optional  string  page  = 1;
    repeated  SCFriendingFriendAddParam  paramsArray  = 2;
}

message SCFriendingFriendsBlockRequest {
    repeated  SCFriendingFriendBlockParam  paramsArray  = 1;
}

message SCFriendingFriendsDisplayNameChangeRequest {
    repeated  SCFriendingFriendDisplayNameParam  paramsArray  = 1;
}

message SCFriendingFriendsIgnoreRequest {
    repeated  SCFriendingFriendIgnoreParam  paramsArray  = 1;
}

message SCFriendingFriendsInviteOrAddByPhoneRequest {
    optional  string  page  = 1;
    repeated  SCFriendingFriendInviteOrAddByPhoneParam  paramsArray  = 2;
    optional  int32  source  = 3;
}

message SCFriendingFriendsInviteRequest {
    repeated  SCFriendingFriendInviteParam  paramsArray  = 1;
}

message SCFriendingFriendsMuteStoryParam {
    optional  SCCOREUUID  friendId  = 1;
}

message SCFriendingFriendsMuteStoryRequest {
    repeated  SCFriendingFriendsMuteStoryParam  paramsArray  = 1;
}

message SCFriendingFriendsRemoveRequest {
    repeated  SCFriendingFriendRemoveParam  paramsArray  = 1;
}

message SCFriendingFriendsTransferInvitesRequest {
    optional  SCCOREUUID  fromTemporaryUserId  = 1;
    optional  SCCOREUUID  toUserId  = 2;
}

message SCFriendingFriendsTransferInvitesResponse {
}

message SCFriendingFriendsUnblockRequest {
    repeated  SCFriendingFriendUnblockParam  paramsArray  = 1;
}

message SCFriendingFriendsUnmuteStoryParam {
    optional  SCCOREUUID  friendId  = 1;
}

message SCFriendingFriendsUnmuteStoryRequest {
    repeated  SCFriendingFriendsUnmuteStoryParam  paramsArray  = 1;
}

message SCFriendingLegacyContactBookUploadRequestParams {
    optional  string  userId  = 1;
    optional  string  userAgent  = 2;
    optional  string  osType  = 3;
    repeated  int32  droppedContacts  = 4;
}

message SCFriendingReliablePinningConfig {
    optional  bool  enabled  = 1;
    optional  SCSuggestionNotificationConfig  topSuggestionsConfig  = 2;
    optional  SCSuggestionNotificationConfig  recentlyJoinersConfig  = 3;
    optional  int32  rankingMode  = 4;
    optional  bool  deprecateCallSuggestFriendNotification  = 5;
}

message SCFriendingSuggestionsInPushNotification {
    repeated  SCFriendSuggestionPushNotification  suggestedFriendsArray  = 1;
}

message SCGIGroupInvite {
    optional  string  id_p  = 1;
    optional  string  groupId  = 2;
    optional  string  joinGroupDeeplink  = 3;
    optional  string  mischiefInviteId  = 4;
    optional  int32  type  = 5;
    optional  int32  reshareMode  = 6;
    optional  SCGIGroupInvitePersonInfo  creatorInfo  = 7;
    optional  SCGIGroupInviteBasicInfo  basicInfo  = 8;
    optional  SCGIGroupInviteEventInfo  eventInfo  = 9;
    optional  int64  createdEpoch  = 10;
}

message SCGIGroupInviteBasicInfo {
    optional  string  text  = 1;
}

message SCGIGroupInviteEventInfo {
    optional  string  eventTitle  = 1;
    optional  string  eventDescription  = 2;
    optional  string  locationDisplayString  = 3;
    optional  string  locationVenueId  = 4;
    optional  SPCGPoint  locationLatLng  = 5;
    optional  string  locationAddressInfo  = 6;
    optional  int64  startEpoch  = 7;
    optional  int64  endEpoch  = 8;
    repeated  SCGIGroupInviteEventInfo_JoinedPerson  joinedPeopleArray  = 9;
}

message SCGIGroupInviteEventInfo_JoinedPerson {
    optional  SCGIGroupInvitePersonInfo  person  = 1;
    optional  int32  status  = 2;
}

message SCGIGroupInvitePersonInfo {
    optional  string  userId  = 1;
    optional  string  username  = 2;
    optional  string  displayName  = 3;
    optional  string  bitmojiAvatarId  = 4;
    optional  string  bitmojiSelfieId  = 5;
    optional  string  mutableUsername  = 6;
}

message SCGIGroupMetadata {
    optional  string  groupDescription  = 1;
    optional  string  locationDisplayString  = 2;
    optional  string  locationVenueId  = 3;
    optional  SPCGPoint  locationLatLng  = 4;
    optional  string  locationAddressInfo  = 5;
    optional  int64  startEpoch  = 6;
    optional  int64  endEpoch  = 7;
}

message SCGIGroupStickerMemoriesModel {
    optional  string  title  = 1;
    optional  SCGIGroupMetadata  metadata  = 2;
    optional  string  groupId  = 3;
}

message SCGamesAuthGetCanvasTokenRequest {
    optional  string  externalUserId  = 1;
    optional  string  appId  = 2;
    optional  string  appinstanceId  = 3;
    optional  string  scopeId  = 4;
    optional  bool  isDev  = 5;
}

message SCGamesAuthGetCanvasTokenResponse {
    optional  string  token  = 1;
    optional  int64  ttl  = 2;
    optional  string  externalUserId  = 3;
    optional  string  sessionId  = 4;
}

message SCGamesAuthGetOIDCTokenRequest {
    optional  string  externalUserId  = 1;
    optional  string  oauth2ClientId  = 2;
    optional  string  sessionId  = 3;
    optional  string  appId  = 4;
    optional  string  displayName  = 5;
}

message SCGamesAuthGetOIDCTokenResponse {
    optional  string  token  = 1;
    optional  int64  expirationTimestampMsecs  = 2;
}

message SCGamesLeaderboardsBatchGetLeaderboardEntriesRequest {
    optional  string  leaderboardId  = 1;
    repeated  string  userIdsArray  = 2;
}

message SCGamesLeaderboardsBatchGetLeaderboardEntriesResponse {
    repeated  SCGamesLeaderboardsClientLeaderboardRecord  leaderboardEntriesArray  = 1;
}

message SCGamesLeaderboardsClientLeaderboard {
    optional  string  id_p  = 1;
    optional  string  name  = 2;
    optional  string  logoURL  = 3;
    optional  int32  orderingType  = 4;
    optional  GPBTimestamp  lastUpdateTimestamp  = 5;
    optional  string  appId  = 6;
    optional  string  scoreIconURL  = 7;
}

message SCGamesLeaderboardsClientLeaderboardRecord {
    optional  string  userId  = 1;
    optional  int64  globalExactRank  = 2;
    optional  int32  globalPercentileRank  = 3;
    optional  int64  score  = 4;
    optional  string  displayScore  = 5;
}

message SCGamesLeaderboardsClientSubmitScoreRequest {
    optional  string  leaderboardId  = 1;
    optional  int64  score  = 2;
    optional  string  appId  = 3;
}

message SCGamesLeaderboardsClientSubmitScoreResponse {
    optional  int64  score  = 1;
}

message SCGamesLeaderboardsGetClientLeaderboardRequest {
    optional  string  leaderboardId  = 1;
}

message SCGamesLeaderboardsGetClientLeaderboardResponse {
    optional  SCGamesLeaderboardsClientLeaderboard  leaderboard  = 1;
}

message SCGamesLeaderboardsGetScoreVisibilitiesRequest {
    optional  string  appId  = 1;
}

message SCGamesLeaderboardsGetScoreVisibilitiesResponse {
    repeated  SCGamesLeaderboardsScoreVisibility  scoreVisibilityArray  = 1;
}

message SCGamesLeaderboardsListFriendLeaderboardEntriesRequest {
    optional  string  leaderboardId  = 1;
    optional  int32  limit  = 2;
}

message SCGamesLeaderboardsListFriendLeaderboardEntriesResponse {
    repeated  SCGamesLeaderboardsClientLeaderboardRecord  leaderboardEntriesArray  = 1;
    optional  int32  myFriendRank  = 2;
}

message SCGamesLeaderboardsScoreVisibility {
    optional  string  appId  = 1;
    optional  string  leaderboardId  = 2;
    optional  int32  scoreVisibilityType  = 3;
}

message SCGamesLeaderboardsSetScoreVisibilityRequest {
    optional  SCGamesLeaderboardsScoreVisibility  scoreVisibility  = 1;
}

message SCGamesLeaderboardsSetScoreVisibilityResponse {
    optional  SCGamesLeaderboardsScoreVisibility  scoreVisibility  = 1;
}

message SCGamesLensManagementDeleteAllLensesDataRequest {
}

message SCGamesLensManagementDeleteAllLensesDataResponse {
}

message SCGamesLensManagementDeleteLensesDataRequest {
    repeated  string  lensIdsArray  = 1;
}

message SCGamesLensManagementDeleteLensesDataResponse {
}

message SCGamesLensManagementGetLensUsageRequest {
    optional  string  lensId  = 1;
}

message SCGamesLensManagementGetLensUsageResponse {
    optional  bool  isUsed  = 1;
}

message SCGamesLensManagementListLensesUsedRequest {
    optional  int32  limit  = 1;
    optional  string  cursor  = 2;
}

message SCGamesLensManagementListLensesUsedResponse {
    optional  string  cursor  = 1;
    repeated  string  lensIdsArray  = 2;
}

message SCGamesLensManagementRecordLensUsageRequest {
    optional  string  lensId  = 1;
    optional  string  appId  = 2;
}

message SCGamesLensManagementRecordLensUsageResponse {
}

message SCGamesUserSettingsGetUserGlobalSettingsRequest {
}

message SCGamesUserSettingsGetUserGlobalSettingsResponse {
    optional  SCGamesUserSettingsUserGlobalSetting  setting  = 1;
}

message SCGamesUserSettingsSetUserGlobalSettingRequest {
    optional  int32  globalActivityVisibility  = 1;
    optional  int32  globalScoreVisibility  = 2;
}

message SCGamesUserSettingsSetUserGlobalSettingResponse {
}

message SCGamesUserSettingsSetUserGlobalSettingsRequest {
    optional  SCGamesUserSettingsUserGlobalSetting  setting  = 1;
}

message SCGamesUserSettingsSetUserGlobalSettingsResponse {
}

message SCGamesUserSettingsUserGlobalSetting {
    optional  int32  globalScoreVisibility  = 1;
    optional  int32  globalActivityVisibility  = 2;
    optional  bool  privacyPolicyAccepted  = 3;
}

message SCGetUnlocksRequest {
    optional  SCULRequestInfo  requestInfo  = 1;
    repeated  bytes  checksums  = 2;
    repeated  SCUnlockGroup  requiredGroupsArray  = 3;
    optional  int32  unlocksNamespace  = 4;
    repeated  SCUnlockGroupRequest  requestedGroupsArray  = 5;
}

message SCGetUnlocksResponse {
    repeated  SCGetUnlocksResponse_GroupedUnlocks  groupedUnlocksArray  = 1;
    repeated  SCLPLensSnapchat  lensesArray  = 2;
    repeated  SCLGGeofilterResponse  geofiltersArray  = 3;
}

message SCGetUnlocksResponse_GroupedUnlocks {
    optional  SCUnlockGroup  group  = 1;
    repeated  SCLPChecksumEntry  unlocksArray  = 2;
}

message SCHGBitmojiQuickReplyConfig {
    repeated  string  predefinedPackIdsArray  = 1;
    optional  int32  type  = 2;
}

message SCIAPTokenPbAcceptPromotionRequest {
    optional  string  promotionId  = 1;
}

message SCIAPTokenPbAcceptPromotionResponse {
    optional  SCIAPTokenPbShopBalance  balance  = 1;
}

message SCIAPTokenPbGetBalanceRequest {
}

message SCIAPTokenPbGetBalanceResponse {
    optional  SCIAPTokenPbShopBalance  balance  = 1;
}

message SCIAPTokenPbGetPromotionsRequest {
    optional  string  locale  = 1;
    optional  int32  shopContext  = 2;
}

message SCIAPTokenPbGetPromotionsResponse {
    repeated  SCIAPTokenPbShopPromotion  promotionsArray  = 1;
}

message SCIAPTokenPbGetTokenPacksRequest {
    optional  int32  shopContext  = 1;
}

message SCIAPTokenPbGetTokenPacksResponse {
    repeated  SCIAPTokenPbShopTokenPack  tokenPacksArray  = 1;
}

message SCIAPTokenPbOrderBalance {
    optional  int64  total  = 1;
}

message SCIAPTokenPbOrderConsumeOrderRequest {
    optional  string  orderId  = 1;
}

message SCIAPTokenPbOrderConsumeOrderResponse {
}

message SCIAPTokenPbOrderGetUnconsumedOrdersRequest {
    optional  string  appId  = 1;
}

message SCIAPTokenPbOrderGetUnconsumedOrdersResponse {
    repeated  SCIAPTokenPbOrderOrderRecord  ordersArray  = 1;
}

message SCIAPTokenPbOrderItem {
    optional  string  id_p  = 1;
    optional  string  sku  = 2;
    optional  uint32  tokens  = 3;
    optional  string  title  = 4;
    optional  string  description_p  = 5;
    optional  string  assetURL  = 6;
    optional  string  vendorName  = 7;
    optional  string  appName  = 8;
}

message SCIAPTokenPbOrderListItemsRequest {
    optional  string  appId  = 1;
    optional  string  locale  = 2;
}

message SCIAPTokenPbOrderListItemsResponse {
    repeated  SCIAPTokenPbOrderItem  itemsArray  = 1;
}

message SCIAPTokenPbOrderOrderRecord {
    optional  string  id_p  = 1;
    optional  string  sku  = 2;
    optional  uint32  tokens  = 3;
    optional  GPBTimestamp  orderTime  = 4;
    optional  string  receipt  = 5;
}

message SCIAPTokenPbOrderOrderRequest {
    optional  string  id_p  = 1;
    optional  string  itemId  = 2;
    optional  bool  syncEntitlement  = 3;
}

message SCIAPTokenPbOrderOrderResponse {
    optional  SCIAPTokenPbOrderOrderRecord  order  = 1;
    optional  SCIAPTokenPbOrderBalance  balance  = 2;
}

message SCIAPTokenPbPurchaseRequest {
    optional  SCIAPTokenPbShopInAppReceipt  receipt  = 2;
    optional  SCIAPTokenPbShopPrice  price  = 3;
    optional  SCIAPTokenPbShopCountry  country  = 4;
}

message SCIAPTokenPbPurchaseResponse {
    optional  SCIAPTokenPbShopBalance  balance  = 1;
    optional  SCIAPTokenPbShopTokenPack  tokenPack  = 2;
}

message SCIAPTokenPbShopBalance {
    optional  int64  total  = 1;
}

message SCIAPTokenPbShopCountry {
    optional  string  code  = 1;
}

message SCIAPTokenPbShopInAppReceipt {
    optional  int32  provider  = 1;
    optional  string  sku  = 2;
    optional  string  transactionId  = 3;
    optional  string  receipt  = 4;
}

message SCIAPTokenPbShopPrice {
    optional  int64  millis  = 1;
    optional  string  currency  = 2;
}

message SCIAPTokenPbShopPromotion {
    optional  string  id_p  = 1;
    optional  uint32  tokenQuantity  = 2;
    optional  string  title  = 3;
    optional  string  description_p  = 4;
    optional  string  bitmojiTemplateId  = 5;
    optional  int32  shopContext  = 6;
}

message SCIAPTokenPbShopTokenPack {
    optional  string  sku  = 1;
    optional  uint32  quantity  = 2;
    optional  string  assetURL  = 3;
}

message SCIDAndroidNotificationPermissionsRequest {
    repeated  SCIDNotificationChannelGroup  notificationChannelGroupsArray  = 1;
    repeated  SCIDNotificationChannel  notificationChannelsArray  = 2;
}

message SCIDDeletePermissionSettingsRequest {
    optional  string  userId  = 1;
}

message SCIDDeletePermissionSettingsResponse {
    optional  bool  success  = 1;
}

message SCIDIosNotificationPermissionsRequest {
    optional  int32  lockScreen  = 1;
    optional  int32  carPlay  = 2;
    optional  int32  alert  = 3;
    optional  int32  badge  = 4;
    optional  int32  sound  = 5;
    optional  int32  criticalAlert  = 6;
    optional  int32  authorizationStatus  = 7;
}

message SCIDNotificationChannel {
    optional  string  channelId  = 1;
    optional  int32  importance  = 2;
    optional  bool  bypassDnd  = 3;
    optional  int32  lockscreenVisibility  = 4;
    optional  string  soundUri  = 5;
    optional  bool  vibrationEnabled  = 6;
    optional  bool  showBadge  = 7;
    optional  bool  showLights  = 8;
}

message SCIDNotificationChannelGroup {
    optional  string  channelGroupId  = 1;
    optional  bool  blocked  = 2;
}

message SCIDPermissionSettingsRequest {
    optional  bool  contactAccessAppEnabled  = 1;
    optional  bool  notificationAppEnabled  = 2;
    optional  bool  locationAppEnabled  = 3;
    optional  bool  cameraRollAppEnabled  = 4;
    optional  bool  bluetoothAppEnabled  = 5;
    optional  bool  microphoneAppEnabled  = 6;
    optional  bool  cameraAppEnabled  = 7;
    optional  bool  locationDeviceEnabled  = 8;
    optional  bool  bluetoothDeviceEnabled  = 9;
    optional  bool  interactiveNotificationAppEnabled  = 10;
    optional  bool  userLocationAppEnabled  = 11;
    optional  bool  userContactAppEnabled  = 12;
    optional  SCIDAndroidNotificationPermissionsRequest  androidNotificationPermissionsRequest  = 13;
    optional  int32  reportSource  = 14;
    optional  SCIDIosNotificationPermissionsRequest  iosNotificationPermissionsRequest  = 15;
}

message SCIDPermissionSettingsResponse {
    optional  bool  success  = 1;
}

message SCIDReadPermissionSettingsRequest {
    optional  string  userId  = 1;
}

message SCIDReadPermissionSettingsResponse {
    optional  string  userId  = 1;
    optional  bool  contactAccessAppEnabled  = 2;
    optional  bool  notificationAppEnabled  = 3;
    optional  bool  locationAppEnabled  = 4;
    optional  bool  cameraRollAppEnabled  = 5;
    optional  bool  bluetoothAppEnabled  = 6;
    optional  bool  microphoneAppEnabled  = 7;
    optional  bool  cameraAppEnabled  = 8;
    optional  bool  locationDeviceEnabled  = 9;
    optional  bool  bluetoothDeviceEnabled  = 10;
    optional  bool  interactiveNotificationAppEnabled  = 11;
    optional  bool  userLocationAppEnabled  = 12;
    optional  bool  userContactAppEnabled  = 13;
}

message SCIDUpdatePermissionSettingsRequest {
    optional  bool  contactAccessAppEnabled  = 1;
    optional  bool  notificationAppEnabled  = 2;
    optional  bool  locationAppEnabled  = 3;
    optional  bool  cameraRollAppEnabled  = 4;
    optional  bool  bluetoothAppEnabled  = 5;
    optional  bool  microphoneAppEnabled  = 6;
    optional  bool  cameraAppEnabled  = 7;
    optional  bool  locationDeviceEnabled  = 8;
    optional  bool  bluetoothDeviceEnabled  = 9;
    optional  bool  interactiveNotificationAppEnabled  = 10;
    optional  bool  userLocationAppEnabled  = 11;
    optional  bool  userContactAppEnabled  = 12;
    optional  SCIDAndroidNotificationPermissionsRequest  androidNotificationPermissionsRequest  = 13;
    optional  int32  reportSource  = 14;
    optional  SCIDIosNotificationPermissionsRequest  iosNotificationPermissionsRequest  = 15;
    optional  string  userId  = 16;
    optional  string  deviceType  = 17;
    optional  string  appVersion  = 18;
}

message SCIDUpdatePermissionSettingsResponse {
    optional  bool  success  = 1;
}

message SCInfoCardCollectiblesConfig {
    optional  bool  collectiblesHeaderEnabled  = 1;
    optional  bool  loginToLensEnabled  = 2;
    optional  bool  viewCollectibleEnabled  = 3;
}

message SCJanusAccountDeactivationData {
    optional  int32  reactivationStatus  = 1;
    optional  string  humanReadableMessage  = 2;
    optional  string  reactivationToken  = 3;
}

message SCJanusAccountLockedData {
    optional  string  humanReadableMessage  = 2;
    optional  bool  isAppealable  = 3;
}

message SCJanusAndroidSafetynetData {
    optional  bytes  nonce  = 1;
}

message SCJanusBootstrapData {
    optional  SCJanusUserSession  userSession  = 1;
    optional  bytes  coreUserData  = 2;
    optional  bytes  sup  = 3;
    optional  bytes  cof  = 4;
    optional  SCJanusFideliusIdentity  fideliusIdentity  = 5;
    optional  SCJanusUserState  userState  = 6;
    optional  SCJanusSecurityData  securityData  = 7;
    optional  SCJanusFriendData  friendData  = 8;
}

message SCJanusClientChallengePayload {
    optional  int32  type  = 1;
    optional  string  payload  = 2;
}

message SCJanusClientChallengeRequested {
    optional  string  boltURL  = 1;
}

message SCJanusCofTags {
    optional  string  routeTag  = 1;
    optional  string  eTag  = 2;
}

message SCJanusDeviceToken {
    optional  string  id_p  = 1;
}

message SCJanusDeviceTokenResponse {
    optional  string  id_p  = 1;
    optional  string  value  = 2;
}

message SCJanusErrorData {
    optional  string  humanReadableErrorMessage  = 1;
}

message SCJanusFideliusClientInit {
    repeated  bytes  hashedPublicKeysArray  = 1;
    optional  SCJanusFideliusTentativeDeviceKey  tentativeDeviceKey  = 2;
}

message SCJanusFideliusIdentity {
    optional  bytes  iwek  = 1;
    optional  bytes  hashedPublicKey  = 2;
}

message SCJanusFideliusTentativeDeviceKey {
    optional  bytes  publicKey  = 1;
    optional  bytes  hashedPublicKey  = 2;
    optional  bytes  iwek  = 3;
    optional  uint64  version  = 4;
}

message SCJanusFriendData {
    repeated  SCJanusFriendLink  friendLinksArray  = 1;
    repeated  SCCOREUUID  bestFriendsArray  = 2;
}

message SCJanusFriendLink {
    optional  string  mutableUsername  = 1;
    optional  SCCOREUUID  userId  = 2;
    optional  int32  connectionType  = 3;
    optional  string  displayName  = 4;
    optional  uint64  addedTs  = 5;
    optional  uint64  reverseAddedTs  = 6;
    optional  bool  muted  = 7;
    optional  string  legacyUsername  = 8;
}

message SCJanusLoginCodeData {
    optional  uint32  numDigits  = 1;
    optional  bytes  sessionToken  = 2;
    optional  string  promptText  = 3;
    optional  int32  deliveryMechanism  = 4;
    optional  SCJanusErrorData  originalAttemptErrorData  = 5;
    optional  int32  optInType  = 6;
    optional  int32  supportedDeliveryMechanisms  = 7;
    optional  string  maskedPhoneNumber  = 8;
    optional  string  maskedEmail  = 9;
}

message SCJanusLoginHeader {
    optional  string  blizzardClientId  = 1;
    optional  string  loginFlowSessionId  = 2;
    optional  string  authenticationSessionId  = 3;
    optional  string  loginAttemptId  = 4;
    optional  string  networkRequestId  = 5;
    optional  string  cofDeviceId  = 6;
    optional  PartialToken  cofConfigData  = 7;
    optional  SCJanusDeviceToken  deviceToken  = 10;
    optional  bytes  clientAttestationPayload  = 11;
    optional  string  iosDeviceCheckToken  = 12;
    optional  string  androidSafetynetAttestation  = 13;
}

message SCJanusLoginWith1TLv1Request {
    optional  string  username  = 1;
    optional  string  oneTapLoginToken  = 2;
    optional  SCJanusFideliusClientInit  fideliusClientInit  = 4;
    optional  SCJanusCofTags  cofTags  = 5;
    optional  SCJanusLoginHeader  loginHeader  = 15;
}

message SCJanusLoginWith1TLv1Response {
    optional  int32  statusCode  = 1;
    optional  SCJanusBootstrapData  bootstrapData  = 2;
    optional  SCJanusTwoFAData  twoFaData  = 3;
    optional  SCJanusODLVData  odlvData  = 4;
    optional  SCJanusAccountDeactivationData  accountDeactivationData  = 5;
    optional  SCJanusAccountLockedData  accountLockedData  = 6;
    optional  SCJanusAndroidSafetynetData  androidSafetynetData  = 7;
    optional  SCJanusErrorData  errorData  = 10;
}

message SCJanusLoginWith1TLv3Request {
    optional  string  oneTapLoginToken  = 1;
    optional  SCJanusFideliusClientInit  fideliusClientInit  = 3;
    optional  SCJanusCofTags  cofTags  = 4;
    optional  SCJanusLoginHeader  loginHeader  = 15;
}

message SCJanusLoginWith1TLv3Response {
    optional  int32  statusCode  = 1;
    optional  SCJanusBootstrapData  bootstrapData  = 2;
    optional  SCJanusTwoFAData  twoFaData  = 3;
    optional  SCJanusODLVData  odlvData  = 4;
    optional  SCJanusAccountDeactivationData  accountDeactivationData  = 5;
    optional  SCJanusAccountLockedData  accountLockedData  = 6;
    optional  SCJanusAndroidSafetynetData  androidSafetynetData  = 7;
    optional  SCJanusErrorData  errorData  = 10;
}

message SCJanusLoginWithPasswordRequest {
    optional  string  username  = 1;
    optional  string  email  = 2;
    optional  string  phoneNumber  = 3;
    optional  string  password  = 4;
    optional  uint32  loginAttemptNumber  = 5;
    optional  SCJanusFideliusClientInit  fideliusClientInit  = 7;
    optional  SCJanusCofTags  cofTags  = 8;
    optional  SCJanusLoginHeader  loginHeader  = 15;
}

message SCJanusLoginWithPasswordResponse {
    optional  int32  statusCode  = 1;
    optional  SCJanusBootstrapData  bootstrapData  = 2;
    optional  SCJanusTwoFAData  twoFaData  = 3;
    optional  SCJanusODLVData  odlvData  = 4;
    optional  SCJanusLoginCodeData  loginCodeData  = 5;
    optional  SCJanusAccountDeactivationData  accountDeactivationData  = 6;
    optional  SCJanusAccountLockedData  accountLockedData  = 7;
    optional  SCJanusAndroidSafetynetData  androidSafetynetData  = 8;
    optional  SCJanusErrorData  errorData  = 11;
}

message SCJanusODLVData {
    optional  string  odlvToken  = 1;
    optional  bool  emailEnabled  = 2;
    optional  bool  smsEnabled  = 3;
    optional  string  obfuscatedPhone  = 4;
    optional  string  obfuscatedEmail  = 5;
}

message SCJanusReactivateAccountData {
    optional  string  humanReadableMessage  = 1;
}

message SCJanusReactivateAccountRequest {
    optional  string  reactivationToken  = 1;
    optional  SCJanusLoginHeader  loginHeader  = 15;
}

message SCJanusReactivateAccountResponse {
    optional  int32  statusCode  = 1;
    optional  SCJanusReactivateAccountData  reactivateAccountData  = 2;
    optional  SCJanusErrorData  errorData  = 10;
}

message SCJanusRegisterWithUsernamePasswordRequest {
    optional  string  firstName  = 1;
    optional  string  lastName  = 2;
    optional  string  username  = 3;
    optional  string  password  = 4;
    optional  GTPDate  birthdate  = 5;
    optional  string  predictedPhoneNumberCountryCode  = 6;
    optional  string  timeZone  = 7;
    optional  int32  autofillSource  = 8;
    optional  SCJanusRegistrationHeader  registrationHeader  = 15;
}

message SCJanusRegisterWithUsernamePasswordResponse {
    optional  int32  statusCode  = 1;
    optional  SCJanusBootstrapData  bootstrapData  = 2;
    optional  SCJanusAndroidSafetynetData  androidSafetynetData  = 3;
    optional  SCJanusClientChallengeRequested  clientChallengeRequested  = 4;
    optional  SCJanusErrorData  errorData  = 10;
}

message SCJanusRegistrationHeader {
    optional  string  blizzardClientId  = 1;
    optional  string  registrationFlowSessionId  = 2;
    optional  string  networkRequestId  = 3;
    optional  string  authenticationSessionId  = 4;
    optional  string  iosDeviceCheckToken  = 5;
    optional  string  androidSafetynetAttestation  = 6;
    optional  SCJanusCofTags  cofTags  = 7;
    optional  string  cofDeviceId  = 8;
    optional  PartialToken  cofConfigData  = 9;
    optional  SCJanusFideliusClientInit  fideliusClientInit  = 10;
    optional  SCJanusDeviceToken  deviceToken  = 11;
    optional  bytes  clientAttestationPayload  = 12;
    optional  string  clientChallengePayload  = 13;
    optional  bytes  vendorAttestationPayload  = 14;
}

message SCJanusSecurityData {
    optional  SCJanusDeviceTokenResponse  deviceToken  = 1;
    optional  bool  twoFaSmsEnabled  = 2;
    optional  bool  twoFaOtpEnabled  = 3;
    optional  int32  accountSafetyAction  = 4;
}

message SCJanusSendLoginCodeData {
}

message SCJanusSendLoginCodeRequest {
    optional  string  username  = 1;
    optional  string  email  = 2;
    optional  string  phoneNumber  = 3;
    optional  bytes  sessionToken  = 4;
    optional  int32  loginCodeType  = 5;
    optional  SCJanusLoginHeader  loginHeader  = 15;
}

message SCJanusSendLoginCodeResponse {
    optional  int32  statusCode  = 1;
    optional  SCJanusSendLoginCodeData  sendLoginCodeData  = 2;
    optional  SCJanusAndroidSafetynetData  androidSafetynetData  = 3;
    optional  SCJanusErrorData  errorData  = 10;
}

message SCJanusSendODLVCodeData {
}

message SCJanusSendODLVCodeRequest {
    optional  string  odlvToken  = 1;
    optional  int32  odlvType  = 2;
    optional  SCJanusLoginHeader  loginHeader  = 15;
}

message SCJanusSendODLVCodeResponse {
    optional  int32  statusCode  = 1;
    optional  SCJanusSendODLVCodeData  sendOdlvData  = 2;
    optional  SCJanusAndroidSafetynetData  androidSafetynetData  = 3;
    optional  SCJanusErrorData  errorData  = 10;
}

message SCJanusSendTwoFACodeData {
}

message SCJanusSendTwoFACodeRequest {
    optional  string  twoFaToken  = 1;
    optional  int32  twoFaType  = 2;
    optional  SCJanusLoginHeader  loginHeader  = 15;
}

message SCJanusSendTwoFACodeResponse {
    optional  int32  statusCode  = 1;
    optional  SCJanusSendTwoFACodeData  sendTwoFaData  = 2;
    optional  SCJanusAndroidSafetynetData  androidSafetynetData  = 3;
    optional  SCJanusErrorData  errorData  = 10;
}

message SCJanusTOSAcceptance {
    optional  bool  tos9  = 1;
    optional  bool  tos9And10  = 2;
    optional  bool  tos10  = 3;
    optional  bool  tos9And11  = 4;
    optional  bool  tos11  = 5;
    optional  bool  tos12  = 6;
}

message SCJanusTwoFAData {
    optional  string  twoFaToken  = 1;
    optional  bool  smsEnabled  = 2;
    optional  bool  otpEnabled  = 3;
    optional  string  obfuscatedPhone  = 4;
}

message SCJanusUserSession {
    optional  string  userId  = 1;
    optional  string  mutableUsername  = 2;
    optional  string  snapadsId  = 3;
    optional  string  lagunaId  = 4;
    optional  string  authToken  = 5;
    optional  SCPBSnaptokenSnapSessionResponse  snapSessionResponse  = 6;
}

message SCJanusUserState {
    optional  SCJanusVerificationStatus  verificationStatus  = 1;
    optional  SCJanusTOSAcceptance  tosAcceptance  = 2;
    optional  GPBTimestamp  previousActiveTimestamp  = 3;
}

message SCJanusVerificationStatus {
    optional  bool  registrationVerified  = 1;
    optional  int32  preferredVerificationMethod  = 2;
}

message SCJanusVerifyLoginCodeRequest {
    optional  string  username  = 1;
    optional  string  email  = 2;
    optional  string  phoneNumber  = 3;
    optional  bytes  sessionToken  = 4;
    optional  string  loginCode  = 5;
    optional  int32  loginCodeType  = 6;
    optional  SCJanusFideliusClientInit  fideliusClientInit  = 7;
    optional  SCJanusCofTags  cofTags  = 8;
    optional  SCJanusLoginHeader  loginHeader  = 15;
}

message SCJanusVerifyLoginCodeResponse {
    optional  int32  statusCode  = 1;
    optional  SCJanusBootstrapData  bootstrapData  = 2;
    optional  SCJanusAccountLockedData  accountLockedData  = 3;
    optional  SCJanusAndroidSafetynetData  androidSafetynetData  = 4;
    optional  SCJanusErrorData  errorData  = 10;
}

message SCJanusVerifyODLVRequest {
    optional  string  odlvToken  = 1;
    optional  string  odlvCode  = 2;
    optional  int32  odlvType  = 3;
    optional  SCJanusFideliusClientInit  fideliusClientInit  = 4;
    optional  SCJanusCofTags  cofTags  = 5;
    optional  SCJanusLoginHeader  loginHeader  = 15;
}

message SCJanusVerifyODLVResponse {
    optional  int32  statusCode  = 1;
    optional  SCJanusBootstrapData  bootstrapData  = 2;
    optional  SCJanusAndroidSafetynetData  androidSafetynetData  = 3;
    optional  SCJanusErrorData  errorData  = 10;
}

message SCJanusVerifyTwoFARequest {
    optional  string  twoFaToken  = 1;
    optional  int32  twoFaType  = 2;
    optional  string  twoFaCode  = 3;
    optional  bool  rememberDevice  = 4;
    optional  SCJanusFideliusClientInit  fideliusClientInit  = 5;
    optional  SCJanusCofTags  cofTags  = 6;
    optional  SCJanusLoginHeader  loginHeader  = 15;
}

message SCJanusVerifyTwoFAResponse {
    optional  int32  statusCode  = 1;
    optional  SCJanusBootstrapData  bootstrapData  = 2;
    optional  SCJanusAndroidSafetynetData  androidSafetynetData  = 3;
    optional  SCJanusErrorData  errorData  = 10;
    optional  bool  recoveryCodeUsed  = 11;
}

message SCLCLensCollectionRequest {
    optional  int64  lensCollectionId  = 1;
    optional  SCULRequestInfo  requestInfo  = 2;
    repeated  int64  lensIdsArray  = 3[packed=true];
    optional  int32  viewType  = 4;
}

message SCLECategoryFeed {
    optional  SCLEFeedItem  feedItem  = 1;
    repeated  SCLECategoryItem  itemsArray  = 2;
    optional  int32  renderStrategy  = 3;
    optional  bytes  streamToken  = 4;
    optional  bool  hasMore  = 5;
    optional  SCLELensExplorerItemRenderStrategy  categoryRenderStrategy  = 6;
    optional  int32  activationAction  = 7;
}

message SCLECategoryItem {
    optional  SCLELensExplorerLensTile  lensTile  = 1;
    optional  SCLELensExplorerCreatorTile  creatorTile  = 2;
    optional  SCLELensExplorerCollectionTile  collectionTile  = 3;
    optional  SCLELensExplorerContainerTile  containerTile  = 4;
    optional  SCLELensExplorerCategoryTile  categoryTile  = 5;
    optional  SCLELensExplorerHeroTile  heroTile  = 6;
}

message SCLECollectionLayout {
    optional  int32  size  = 1;
}

message SCLEContainerItem {
    optional  SCLELensExplorerLensTile  lensTile  = 1;
    optional  SCLELensExplorerCreatorTile  creatorTile  = 2;
    optional  SCLELensExplorerCollectionTile  collectionTile  = 3;
    optional  SCLELensExplorerLensTopicTile  topicTile  = 4;
    optional  SCLELensExplorerHeroTile  heroTile  = 5;
}

message SCLEFeedItem {
    optional  SCLELensExplorerCategory  category  = 1;
    optional  SCLELensExplorerSubCategory  subcategory  = 2;
}

message SCLELensExplorerCategory {
    optional  string  displayName  = 1;
    optional  string  categoryName  = 2;
    optional  int32  type  = 3;
    repeated  SCLELensExplorerSubCategory  subcategoriesArray  = 4;
    optional  string  feedId  = 5;
}

message SCLELensExplorerCategoryTile {
    optional  SCLELensExplorerCategoryTile_Category  categoryItem  = 1;
    optional  string  tileImageURL  = 2;
}

message SCLELensExplorerCategoryTile_Category {
    optional  SCLELensExplorerCategory  category  = 1;
    optional  SCLELensExplorerSubCategory  subcategory  = 2;
}

message SCLELensExplorerCollectionTile {
    optional  int64  collectionId  = 1;
    optional  string  name  = 2;
    optional  string  description_p  = 3;
    optional  string  tileImageURL  = 4;
    optional  SCLELensExplorerCreatorMetadata  creatorData  = 5;
    optional  string  attribution  = 6;
    optional  string  deeplinkURL  = 7;
    optional  SCLECollectionLayout  layoutRule  = 8;
}

message SCLELensExplorerContainerTile {
    optional  string  id_p  = 1;
    optional  string  name  = 2;
    repeated  SCLEContainerItem  itemsArray  = 3;
    optional  SCLELensExplorerItemRenderStrategy  renderStrategy  = 4;
    optional  string  description_p  = 5;
    optional  string  feedId  = 6;
    optional  bytes  streamToken  = 7;
    optional  bool  hasMore  = 8;
}

message SCLELensExplorerCreatorMetadata {
    optional  string  creatorId  = 1;
    optional  string  creatorName  = 2;
    optional  string  creatorUsername  = 3;
    optional  bool  isOfficialCreator  = 4;
    optional  string  snapProProfileId  = 5;
    optional  int32  snapProProfileCategory  = 6;
    optional  string  bitmojiAvatarId  = 7;
    optional  string  profilePicURL  = 8;
}

message SCLELensExplorerCreatorSnap {
    optional  string  rawSnapId  = 1;
}

message SCLELensExplorerCreatorSnapThumbnail {
    optional  string  thumbnailURL  = 1;
    optional  string  thumbnailIv  = 2;
    optional  string  largeThumbnailURL  = 3;
    optional  bytes  thumbnailContentObject  = 4;
    optional  string  thumbnailCoKey  = 5;
    optional  string  thumbnailCoIv  = 6;
    optional  string  mediaKey  = 7;
    optional  string  mediaId  = 8;
    optional  string  snapId  = 9;
}

message SCLELensExplorerCreatorTile {
    optional  SCLELensExplorerCreatorMetadata  creatorData  = 1;
    repeated  SCLELensPreviewTile  lensPreviewsArray  = 2;
    optional  SCLELensExplorerCreatorSnapThumbnail  defaultSnapThumbnail  = 3;
    repeated  SCLELensExplorerCreatorSnap  creatorSnapsArray  = 4;
}

message SCLELensExplorerHeroTile {
    optional  int64  id_p  = 1;
    optional  string  contentURL  = 2;
    optional  string  layoutId  = 3;
    repeated  SCLELensExplorerHeroTile_LayoutElement  elementsArray  = 4;
}

message SCLELensExplorerHeroTile_LayoutElement {
    optional  int32  elementId  = 1;
    optional  SCLELensExplorerHeroTile_LayoutElement_ImageElement  imageElement  = 2;
    optional  SCLELensExplorerHeroTile_LayoutElement_TextElement  textElement  = 3;
}

message SCLELensExplorerHeroTile_LayoutElement_ImageElement {
    optional  int32  predefinedIcon  = 1;
    optional  string  imageUri  = 2;
}

message SCLELensExplorerHeroTile_LayoutElement_TextElement {
    optional  string  text  = 1;
    optional  int32  iconTextEnd  = 2;
}

message SCLELensExplorerItemRenderStrategy {
    optional  int32  spanCount  = 1;
    optional  int32  orientation  = 2;
    optional  int32  type  = 3;
    optional  float  itemsSpacingMultiplier  = 4;
    optional  bool  useItemsCardBackground  = 5;
    optional  bool  useItemsDivider  = 6;
}

message SCLELensExplorerLensTile {
    optional  int64  lensId  = 1;
    optional  string  lensName  = 2;
    optional  SCLELensPreviewTile  lensPreview  = 3;
    optional  int32  activationCamera  = 4;
    optional  SCLELensExplorerCreatorMetadata  creatorData  = 5;
    optional  SCLERankingInfo  rankingInfo  = 6;
    optional  SCLELensLayout  layoutRules  = 7;
}

message SCLELensExplorerLensTopicTile {
    optional  string  id_p  = 1;
    optional  string  name  = 2;
    optional  string  preview  = 3;
    optional  int64  playCount  = 4;
    optional  string  lensIcon  = 5;
    optional  SCLELensExplorerCreatorMetadata  creatorData  = 6;
    optional  string  previewKey  = 7;
    optional  string  previewIv  = 8;
}

message SCLELensExplorerRankingPayload {
    repeated  int64  categoryExcludedLensIdsArray  = 6[packed=true];
    repeated  SCLensHistoricalInteraction  historicalInteractionsArray  = 7;
}

message SCLELensExplorerRequest {
    optional  SCULRequestInfo  requestInfo  = 1;
    repeated  int32  categoriesArray  = 2[packed=true];
    repeated  int32  subcategoriesArray  = 3[packed=true];
    optional  bytes  streamToken  = 4;
    optional  int32  context  = 5;
    optional  SCLELensExplorerRankingPayload  rankingPayload  = 6;
    repeated  string  feedIdsArray  = 7;
}

message SCLELensExplorerResponse {
    repeated  SCLECategoryFeed  feedsArray  = 1;
    optional  int32  defaultCategory  = 2;
    optional  string  defaultFeedId  = 3;
}

message SCLELensExplorerSubCategory {
    optional  string  displayName  = 1;
    optional  string  subcategoryName  = 2;
    optional  int32  type  = 3;
    optional  string  feedId  = 4;
}

message SCLELensLayout {
    optional  bool  showIcon  = 1;
    optional  int32  textAlignment  = 2;
    optional  double  previewAspectRatio  = 3;
    optional  int32  iconAlignment  = 4;
}

message SCLELensPreviewTile {
    optional  string  iconURL  = 1;
    optional  SCLELensTileThumbnail  thumbnail  = 2;
}

message SCLELensTileThumbnail {
    optional  SCLELensTileThumbnail_ImageSequence  imageSequence  = 1;
    optional  string  thumbnailMediaURL  = 2;
}

message SCLELensTileThumbnail_ImageSequence {
    optional  string  URLPattern  = 1;
    optional  int32  numImages  = 2;
    optional  int32  frameIntervalMs  = 3;
}

message SCLERankingInfo {
    optional  string  requestId  = 1;
    optional  string  trackingInfo  = 2;
}

message SCLEShapedBackground {
    optional  int32  shape  = 1;
    optional  int32  color  = 2;
}

message SCLESpaceMultipliers {
    optional  float  start  = 1;
    optional  float  end  = 2;
    optional  float  top  = 3;
    optional  float  bottom  = 4;
}

message SCLGArSegmentationFilter {
    optional  SCLGArSegmentationFilter_ContextFilterSkyItem  sky  = 1;
    optional  SCLGArSegmentationFilter_PurikuraPatternItem  portrait  = 2;
    optional  bool  shouldStillDisplayWithoutSegmentationMatch  = 3;
}

message SCLGArSegmentationFilter_ContextFilterSkyItem {
    optional  string  uuid  = 1;
    optional  string  URL  = 2;
    optional  string  skyType  = 3;
    optional  string  styleType  = 4;
    optional  float  colorBrightness  = 5;
    optional  string  replacementSkyURL  = 6;
    optional  string  blimpURL  = 7;
}

message SCLGArSegmentationFilter_PurikuraPatternItem {
    optional  string  uuid  = 1;
    optional  string  URL  = 2;
    optional  int32  thumbnailX  = 3;
    optional  int32  thumbnailY  = 4;
    optional  int32  thumbnailWidth  = 5;
    optional  int32  thumbnailHeight  = 6;
    optional  string  colorFilter  = 7;
    optional  bool  bokeh  = 8;
    optional  string  beauty  = 9;
}

message SCLGAttachment {
    optional  string  attachmentType  = 1;
    optional  SCLGAttachment_LongFormVideoAttachment  longFormVideo  = 2;
    optional  SCLGAttachment_WebViewAttachment  webView  = 3;
    optional  string  ctaText  = 4;
    optional  SCLGAttachment_AppInstallAttachment  appInstall  = 5;
    optional  SCLGAttachment_RichStoryDeepLinkAttachment  deepLink  = 6;
    optional  string  localizedCtaText  = 7;
}

message SCLGAttachment_AppInstallAttachment {
    optional  string  appName  = 1;
    optional  string  iosAppId  = 2;
    optional  string  androidAppURL  = 3;
    optional  string  appIconURL  = 4;
}

message SCLGAttachment_LongFormVideoAttachment {
    optional  string  videoId  = 1;
    optional  int32  videoPlatform  = 2;
    optional  string  videoURL  = 3;
}

message SCLGAttachment_RichStoryDeepLinkAttachment {
    optional  string  uri  = 1;
    optional  bool  inAppMode  = 2;
    optional  string  appTitle  = 3;
    optional  string  inAppBackground  = 4;
    optional  string  iosAppIcon  = 5;
    optional  int64  iosAppId  = 6;
    optional  string  androidAppIcon  = 7;
    optional  string  androidPackageId  = 8;
    optional  string  tapLinkActionText  = 9;
    optional  string  deepLinkWebFallbackURL  = 10;
    optional  string  deepLinkFallbackType  = 11;
}

message SCLGAttachment_WebViewAttachment {
    optional  string  webViewURL  = 1;
    optional  bool  shouldAutoFill  = 2;
}

message SCLGBackgroundStyle {
    optional  SCLGTextColor  color  = 1;
    optional  SCLGTextShadow  boxShadow  = 2;
    optional  double  borderRadius  = 3;
    optional  bool  isStretchable  = 4;
}

message SCLGCaptionStyle {
    optional  string  styleId  = 1;
    optional  string  displayName  = 2;
    optional  SCLGFontStyle  fontStyle  = 3;
    optional  SCLGBackgroundStyle  backgroundStyle  = 4;
    optional  bool  colorChangeable  = 5;
    optional  string  baseColor  = 6;
    optional  bool  isWifiOnly  = 7;
    optional  string  type  = 8;
}

message SCLGFontStyle {
    optional  string  fontName  = 1;
    optional  string  fontURL  = 2;
    optional  SCLGTextColor  fontColor  = 3;
    optional  string  backgroundImageURL  = 4;
    optional  double  letterSpacing  = 5;
    optional  double  lineHeight  = 6;
    optional  string  textTransform  = 7;
    repeated  SCLGTextShadow  textShadowArray  = 8;
    optional  string  textDecoration  = 9;
    optional  string  textAlign  = 10;
    optional  double  fontSize  = 11;
    optional  SCLGFontStyle_TextPadding  padding  = 12;
    optional  string  backgroundRepeat  = 13;
    optional  SCLGTextColor  borderColor  = 14;
    optional  double  fontBorderWidth  = 15;
    optional  double  minFontSize  = 16;
    optional  double  maxFontSize  = 17;
}

message SCLGFontStyle_TextPadding {
    optional  double  top  = 1;
    optional  double  left  = 2;
    optional  double  right  = 3;
    optional  double  bottom  = 4;
}

message SCLGGeofence {
    optional  string  id_p  = 1;
    repeated  SCLGGeofence_Coordinate  coordinatesArray  = 2;
}

message SCLGGeofence_Coordinate {
    optional  double  lat  = 1;
    optional  double  long_p  = 2;
}

message SCLGGeofilterDisplayParameters {
    optional  int32  size  = 1;
    optional  string  color  = 2;
    optional  string  font  = 3;
    optional  string  staticText  = 4;
    optional  string  align  = 5;
    optional  float  textAlpha  = 6;
    optional  SCLGGeofilterDisplayParameters_TextShadowParameters  textShadow  = 7;
    optional  bool  autoResizeEnabled  = 8;
    optional  string  fallbackText  = 9;
    optional  int32  maxFontSize  = 10;
    optional  string  dynamicText  = 11;
    optional  string  targetDatetime  = 12;
    optional  string  targetDatetimeDirection  = 13;
    optional  string  capitalization  = 14;
    optional  string  calculatedDynamicText  = 15;
    optional  string  fallbackMethod  = 16;
}

message SCLGGeofilterDisplayParameters_TextShadowParameters {
    optional  string  color  = 1;
    optional  SCLGIntegerPoint  shadowOffset  = 2;
    optional  float  blurRadius  = 3;
}

message SCLGGeofilterMarkup {
    optional  int64  refreshRate  = 1;
    optional  string  type  = 2;
    optional  string  source  = 3;
    optional  SCLGGeofilterMarkup_GeofilterLayoutParameters  layoutParameters  = 4;
    optional  SCLGGeofilterDisplayParameters  displayParameters  = 5;
    optional  SCLGGeofilterMarkup_LocalDateTimeInterval  displaySchedule  = 6;
    optional  SCLGGeofilterMarkup_CompanionCreativeProperties  companionCreativeProperties  = 7;
}

message SCLGGeofilterMarkup_CompanionCreativeProperties {
    optional  string  companionCreativeType  = 1;
    optional  bool  movable  = 2;
    optional  bool  modifiable  = 3;
    optional  SCLGGeofilterMarkup_CompanionCreativeProperties_RatingStickerProperties  ratingStickerProperties  = 4;
}

message SCLGGeofilterMarkup_CompanionCreativeProperties_RatingStickerProperties {
    optional  string  unselectedStateAsset  = 1;
    optional  string  selectedStateAsset  = 2;
    optional  int32  initialRating  = 3;
    optional  int32  maxRating  = 4;
}

message SCLGGeofilterMarkup_GeofilterLayoutParameters {
    optional  float  xOffset  = 1;
    optional  float  yOffset  = 2;
    optional  float  xSize  = 3;
    optional  float  ySize  = 4;
    optional  float  rotation  = 5;
    optional  int32  zIndex  = 6;
}

message SCLGGeofilterMarkup_LocalDateTimeInterval {
    optional  int64  start  = 1;
    optional  int64  end  = 2;
}

message SCLGGeofilterResponse {
    optional  string  filterId  = 1;
    optional  int64  expiresCountdown  = 2;
    optional  string  image  = 3;
    repeated  string  URLParams  = 4;
    optional  string  imageCroppedToVisible  = 5;
    optional  SCLGGeofilterResponse_GeofilterImageMetadata  extraImageMetadata  = 6;
    optional  SCLGGeofence  geofence  = 7;
    optional  string  unlockableContentType  = 8;
    optional  string  unlockableContentId  = 9;
    optional  int32  priority  = 10;
    repeated  string  positionArray  = 11;
    repeated  SCLGGeofilterMarkup  dynamicContentArray  = 12;
    optional  bool  isDynamicGeofilter  = 13;
    optional  int64  clientCacheExpirationDateTime  = 14;
    optional  int64  clientCacheTtlMinutes  = 15;
    optional  bool  isSponsored  = 16;
    optional  SCLGSponsoredSlugPosAndText  sponsoredSlug  = 17;
    optional  string  sponsoredSlugPosition  = 18;
    optional  string  sponsoredSlugImgLink  = 19;
    optional  SCLGGeofilterResponse_DynamicContentSetting  dynamicContentSetting  = 20;
    optional  bool  isLens  = 21;
    optional  string  section  = 24;
    optional  bool  isFeatured  = 25;
    optional  string  appstoreIapId  = 26;
    optional  string  gplayIapId  = 27;
    optional  string  targetingType  = 28;
    optional  bool  belowDrawingLayer  = 29;
    optional  string  encGeoData  = 30;
    optional  SCLGGeofilterResponse_GeofilterPrompt  geofilterPrompt  = 31;
    optional  SCLGUnlockablesSchedule  schedule  = 32;
    optional  string  unlockDurationMessage  = 33;
    optional  double  filterScore  = 34;
    optional  bool  shouldSubsampleImage  = 35;
    optional  int64  serverTimestamp  = 37;
    optional  bool  guaranteeDelivery  = 38;
    repeated  string  exclusionTagsArray  = 39;
    repeated  string  excludedByTagsArray  = 40;
    optional  int32  lensCarouselIndex  = 41;
    optional  bool  isFrameFilter  = 43;
    optional  SCLGUnlockableTrackInfo  unlockableTrackInfo  = 44;
    optional  string  unlockableCategory  = 45;
    optional  SCLGGeofilterResponse_UnlockableContext  unlockableContext  = 46;
    repeated  string  unlockableAttributesArray  = 47;
    optional  bool  eligibleForNotification  = 48;
    optional  SCLGGeofilterResponse_DynamicContextProperties  dynamicContextProperties  = 49;
    optional  SCLGStickerPack  stickerPackData  = 50;
    optional  SCLGGeofilterResponse_AutoStacking  autoStacking  = 51;
    optional  bool  isAnimated  = 52;
    optional  string  syncSensitivity  = 53;
    repeated  string  populatedUnlockableContextTypesArray  = 54;
    optional  SCLGGeofilterResponse_SponsoredSlugStyle  sponsoredSlugStyle  = 55;
    optional  bool  isMenuFilter  = 56;
    repeated  string  metaTagsArray  = 57;
    optional  bool  hasContextCard  = 58;
    optional  SCLGGeofilterResponse_CarouselGroup  carouselGroup  = 59;
    optional  SCLGArSegmentationFilter  arSegmentation  = 60;
    optional  SCLGAttachment  attachment  = 61;
    optional  SCLGGeofilterResponse_DebugInfo  debugInfo  = 62;
    optional  SCLGGeofilterResponse_ScannableData  scannableData  = 63;
    optional  SCLGGeofilterResponse_Tooltip  tooltip  = 64;
    optional  string  contextHint  = 65;
    optional  SCLGGeofilterResponse_Audio  audio  = 66;
    optional  SCLGCaptionStyle  captionStyle  = 68;
    optional  int64  filterIdLong  = 69;
    optional  bytes  checksum  = 70;
    optional  bool  eligibleForLensExplorer  = 71;
    optional  string  snapInfo  = 72;
    repeated  SCLGCaptionStyle  additionalCaptionStylesArray  = 73;
    repeated  SCLGGeofilterResponse_GeofilterMusicTrackMetadata  musicTrackMetadataArray  = 74;
}

message SCLGGeofilterResponse_Audio {
    optional  string  URL  = 1;
    optional  bool  isLooping  = 2;
}

message SCLGGeofilterResponse_AutoStacking {
    optional  string  autoStackType  = 1;
}

message SCLGGeofilterResponse_CarouselGroup {
    optional  string  groupName  = 1;
    optional  float  carouselScore  = 2;
}

message SCLGGeofilterResponse_DebugInfo {
    optional  SCLGGeofilterResponse_DebugInfo_ScheduledLensesDebugInfo  scheduledLensesInfo  = 1;
}

message SCLGGeofilterResponse_DebugInfo_ScheduledLensesDebugInfo {
    optional  bool  isRanked  = 1;
}

message SCLGGeofilterResponse_DynamicContentSetting {
    optional  int64  autoRefreshDelayInMilli  = 1;
    optional  float  autoRefreshMessageXPortrait  = 2;
    optional  float  autoRefreshMessageXLandscape  = 3;
    optional  float  autoRefreshMessageYPortrait  = 4;
    optional  float  autoRefreshMessageYLandscape  = 5;
    optional  string  dynamicFilterRefreshHint  = 6;
    optional  string  dynamicFilterUpdatingMessage  = 7;
}

message SCLGGeofilterResponse_DynamicContextProperties {
    repeated  string  deeplinkProperties  = 1;
    repeated  SCLGGeofilterResponse_DynamicContextProperties_TimeComponent  relativeTimeComponentsArray  = 2;
}

message SCLGGeofilterResponse_DynamicContextProperties_TimeComponent {
    optional  string  timeUnit  = 1;
    optional  string  singularName  = 2;
    optional  string  pluralName  = 3;
}

message SCLGGeofilterResponse_GeofilterImageMetadata {
    optional  SCLGGeofilterResponse_GeofilterImageMetadata_Size  imageSizePx  = 1;
    optional  SCLGGeofilterResponse_GeofilterImageMetadata_Size  croppedImageSizePx  = 2;
    optional  SCLGIntegerPoint  croppedImageOffset  = 3;
}

message SCLGGeofilterResponse_GeofilterImageMetadata_Size {
    optional  int32  width  = 1;
    optional  int32  height  = 2;
}

message SCLGGeofilterResponse_GeofilterMusicTrackMetadata {
    optional  string  trackId  = 1;
    optional  bytes  contentRestrictions  = 2;
}

message SCLGGeofilterResponse_GeofilterPrompt {
    optional  string  text  = 1;
    optional  string  position  = 2;
    optional  int64  fadeInTimeMs  = 3;
    optional  int64  onScreenTimeMs  = 4;
    optional  int64  fadeOutTimeMs  = 5;
}

message SCLGGeofilterResponse_ScannableData {
    optional  string  data_p  = 1;
}

message SCLGGeofilterResponse_SponsoredSlugStyle {
    optional  string  font  = 1;
    optional  string  textSize  = 2;
    optional  string  color  = 3;
    optional  string  dropshadowColor  = 4;
    optional  SCLGGeofilterResponse_SponsoredSlugStyle_StrPoint  dropshadowOffset  = 5;
}

message SCLGGeofilterResponse_SponsoredSlugStyle_StrPoint {
    optional  string  x  = 1;
    optional  string  y  = 2;
}

message SCLGGeofilterResponse_Tooltip {
    optional  string  message  = 1;
    optional  int32  coolDownPeriodMinutes  = 2;
}

message SCLGGeofilterResponse_UnlockableContext {
    repeated  string  triggerContextsArray  = 1;
    repeated  string  friendContextsArray  = 2;
    repeated  string  cameraContextsArray  = 3;
    repeated  string  mediaTypeContextsArray  = 4;
    repeated  int64  actionmojiContextsArray  = 5[packed=true];
    repeated  string  visualContextsArray  = 6;
    repeated  string  lensApplicableContextsArray  = 7;
}

message SCLGIntegerPoint {
    optional  int32  x  = 1;
    optional  int32  y  = 2;
}

message SCLGSponsoredSlugPosAndText {
    optional  SCLGSponsoredSlugPosAndText_StrRect  viewRect  = 1;
    optional  string  alignment  = 2;
    optional  string  position  = 3;
    optional  string  hmargin  = 4;
    optional  string  vmargin  = 5;
    optional  string  text  = 6;
    optional  string  sponsoredText  = 7;
    optional  string  sponsoredChannelText  = 8;
    optional  int32  timeBeforeFadeout  = 9;
    optional  string  longformText  = 10;
    optional  int32  longformTimeBeforeFadeout  = 11;
}

message SCLGSponsoredSlugPosAndText_StrRect {
    optional  string  x  = 1;
    optional  string  y  = 2;
    optional  string  width  = 3;
    optional  string  height  = 4;
}

message SCLGStickerPack {
    optional  string  packId  = 1;
    optional  string  categoryId  = 2;
    optional  string  iconURL  = 3;
    optional  int32  iconVersion  = 4;
    optional  string  URL  = 5;
    optional  int32  version  = 6;
    optional  bool  active  = 7;
    optional  string  type  = 8;
    repeated  string  capabilitiesArray  = 9;
    repeated  string  targetArray  = 10;
    optional  string  superCategory  = 11;
    optional  SCLGGeofence  geofence  = 12;
    optional  string  unlockablePreviewImgURL  = 13;
    optional  string  title  = 14;
    optional  int64  unlockExpirationTimeInSec  = 15;
    optional  SCLGStickerPack_StickerPackContextualMetadata  contextualPackMetadata  = 16;
    optional  string  unlockableId  = 17;
    optional  bool  isExpandable  = 18;
    optional  string  metadataURL  = 19;
    optional  int64  expirationTtlInSec  = 20;
}

message SCLGStickerPack_StickerPackContextualMetadata {
    optional  string  placement  = 1;
    optional  int32  priority  = 2;
    optional  int32  displayCount  = 3;
}

message SCLGTextColor {
    repeated  string  colorArray  = 1;
    repeated  double  colorStopArray  = 2[packed=true];
    optional  string  colorTransform  = 3;
    optional  double  colorGradientAngleDegree  = 4;
    repeated  double  colorTransformParamsArray  = 5[packed=true];
}

message SCLGTextShadow {
    optional  SCLGTextColor  color  = 1;
    optional  double  x  = 2;
    optional  double  y  = 3;
    optional  double  radius  = 4;
}

message SCLGUnlockableTrackInfo {
    optional  string  adServeRequestId  = 1;
    optional  string  rawAdData  = 2;
    optional  bool  skipTrack  = 3;
    optional  string  encryptedSponsoredUnlockableTargetingInfoData  = 4;
    optional  string  adTrackURL  = 5;
    optional  string  rankingId  = 6;
    optional  string  rankingData  = 7;
    optional  string  encryptedUserTrackData  = 8;
    optional  string  jsonTrackURL  = 9;
    optional  string  protoTrackURL  = 10;
    optional  string  batchTrackURL  = 11;
    optional  string  skAdNetworkAttribution  = 12;
    optional  bytes  adId  = 13;
    optional  int64  adServeTimestampMillis  = 14;
}

message SCLGUnlockablesSchedule {
    optional  string  schedulingType  = 1;
    optional  string  startDateTime  = 2;
    optional  string  endDateTime  = 3;
    optional  string  timezone  = 4;
    optional  bool  useLocalTimezone  = 5;
    optional  string  repetitionFrequency  = 6;
    optional  string  repetitionEndDateTime  = 7;
    optional  string  weeklyFrequency  = 8;
    repeated  SCLGUnlockablesSchedule_UnlockablesScheduleInterval  repeatIntervalsArray  = 9;
}

message SCLGUnlockablesSchedule_UnlockablesScheduleInterval {
    optional  string  startDateTime  = 1;
    optional  string  endDateTime  = 2;
    optional  int64  startMillisSinceEpoch  = 3;
    optional  int64  endMillisSinceEpoch  = 4;
}

message SCLPAppInstallAttachment {
    optional  string  appName  = 1;
    optional  string  iosAppId  = 2;
    optional  string  androidAppURL  = 3;
    optional  string  appIconURL  = 4;
}

message SCLPApplicableContext {
    repeated  int32  cameraContextArray  = 1[packed=true];
    repeated  int32  lensApplicableContextsArray  = 2[packed=true];
}

message SCLPAttachment {
    optional  int32  ctaText  = 2;
    optional  string  localizedCtaText  = 3;
    optional  SCLPLongFormVideoAttachment  longFormVideo  = 4;
    optional  SCLPWebViewAttachment  webView  = 5;
    optional  SCLPAppInstallAttachment  appInstall  = 6;
    optional  SCLPRichStoryDeepLinkAttachment  deepLink  = 7;
}

message SCLPCarouselPosition {
    optional  int32  side  = 1;
    optional  int32  priority  = 2;
    optional  int32  absolutePosition  = 4;
    optional  string  carouselGroupName  = 5;
    optional  float  carouselScore  = 6;
}

message SCLPChecksumEntry {
    optional  int64  id_p  = 1;
    optional  bytes  checksum  = 2;
    optional  int64  cacheTtlMillis  = 3;
    optional  SCLPTrackingInfo  trackingInfo  = 4;
}

message SCLPConnectedLensInfo {
    optional  SCCOREUUID  appId  = 1;
}

message SCLPCtaItem {
    optional  int64  lensId  = 1;
    optional  string  iconURL  = 2;
}

message SCLPDebugInfo {
    optional  string  debugCode  = 1;
}

message SCLPFeaturedLensNamespaceResponse {
    optional  string  namespace_p  = 1;
    optional  int64  cacheTtlMillis  = 2;
    optional  bytes  streamToken  = 3;
    repeated  SCLPChecksumEntry  activeListArray  = 4;
    repeated  SCLPChecksumEntry  precachedListArray  = 5;
    repeated  SCLPLensSnapchat  lensesArray  = 6;
    repeated  SCLPLensNoFillAdResponse  lensNoFillAdResponseListArray  = 7;
    optional  bool  hasMoreLenses  = 8;
    optional  bytes  encryptedUserTrackData  = 9;
    optional  string  mixerRequestId  = 10;
}

message SCLPFeaturedLensResponse {
    repeated  SCLPFeaturedLensNamespaceResponse  itemsArray  = 1;
}

message SCLPHint {
    optional  string  hintId  = 1;
    repeated  SCLPHint_HintData  additionalHintsArray  = 2;
}

message SCLPHint_HintData {
    optional  string  id_p  = 1;
    optional  string  translation  = 2;
}

message SCLPLens {
    optional  int64  id_p  = 1;
    optional  string  iconURL  = 5;
    optional  string  name  = 6;
    repeated  SCLPLensResource  resourcesArray  = 7;
    repeated  SCLPLensAsset  assetsArray  = 8;
    optional  SCLPApplicableContext  applicableContext  = 9;
    optional  int64  demoStartDate  = 11;
    optional  string  bitmojiComicId  = 12;
    optional  int32  activationCamera  = 13;
    repeated  int32  descriptorsArray  = 15[packed=true];
    optional  bool  studioPreview  = 16;
    optional  int32  apiLevel  = 17;
}

message SCLPLensAsset {
    optional  int32  type  = 1;
    optional  int64  intId  = 2;
    optional  string  stringId  = 3;
    optional  int32  requestTiming  = 4;
    repeated  SCLPLensAssetStorageOption  storageOptionsArray  = 5;
    repeated  int32  descriptorsArray  = 6[packed=true];
}

message SCLPLensAssetStorageOption {
    optional  int32  format  = 1;
    optional  string  fileURL  = 2;
    optional  SCLPSHA256  checksum  = 3;
}

message SCLPLensCollectionResponse {
    optional  int64  id_p  = 1;
    optional  string  name  = 2;
    optional  string  description_p  = 3;
    optional  string  tileImageURL  = 4;
    repeated  SCLPCtaItem  ctaItemsArray  = 5;
    repeated  SCLPLensSnapchat  lensesArray  = 6;
    repeated  SCLELensExplorerLensTile  lensTilesArray  = 7;
}

message SCLPLensCreator {
    optional  SCCOREUUID  id_p  = 1;
    optional  string  displayName  = 2;
    optional  SCCOREUUID  snapProProfileId  = 3;
    optional  bool  deactivated  = 4;
    optional  bool  officialLensCreator  = 5;
    optional  bool  community  = 6;
}

message SCLPLensNoFillAdResponse {
    optional  int64  carouselIndex  = 1;
    optional  bytes  serveItemId  = 2;
    optional  bytes  encryptedAdData  = 3;
}

message SCLPLensResource {
    optional  int32  format  = 1;
    optional  string  fileURL  = 2;
    optional  SCLPSHA256  checksum  = 3;
}

message SCLPLensSnapchat {
    optional  SCLPLens  lens  = 1;
    optional  SCLPHint  hint  = 2;
    optional  SCLPCarouselPosition  carouselPosition  = 3;
    optional  SCLPLensCreator  creator  = 4;
    optional  SCLPSponsoredInfo  sponsoredInfo  = 5;
    optional  SCLPAttachment  attachment  = 6;
    optional  int64  lensCollectionId  = 7;
    optional  SCLPConnectedLensInfo  connectedLensInfo  = 8;
    optional  bytes  shoppingLensMetadata  = 9;
    repeated  SCLPMusicTrackMetadata  musicTrackMetadataArray  = 10;
    optional  SCLPDebugInfo  debugInfo  = 11;
    optional  SCLPTrackingInfo  trackingInfo  = 12;
    optional  SCLPRemoteApiInfo  remoteApiInfo  = 13;
}

message SCLPLongFormVideoAttachment {
    optional  string  videoId  = 1;
    optional  int32  videoPlatform  = 2;
    optional  string  videoURL  = 3;
}

message SCLPMusicTrackMetadata {
    optional  uint64  trackId  = 1;
    optional  SCCTPContentRestrictions  contentRestrictions  = 2;
}

message SCLPRemoteApiInfo {
    repeated  string  remoteApiSpecIdsArray  = 1;
}

message SCLPRichStoryDeepLinkAttachment {
    optional  string  uri  = 1;
    optional  bool  inAppMode  = 2;
    optional  string  appTitle  = 3;
    optional  string  inAppBackground  = 4;
    optional  string  iosAppIcon  = 5;
    optional  int64  iosAppId  = 6;
    optional  string  androidAppIcon  = 7;
    optional  string  androidPackageId  = 8;
    optional  int32  tapLinkActionText  = 9;
    optional  string  deepLinkWebFallbackURL  = 10;
    optional  int32  deepLinkFallbackType  = 11;
}

message SCLPSHA256 {
    optional  bytes  data_p  = 1;
}

message SCLPSponsoredInfo {
    optional  bool  sponsored  = 1;
    optional  string  slugText  = 2;
    optional  int32  sponsoredType  = 3;
}

message SCLPTrackingInfo {
    optional  string  encGeoData  = 1;
    optional  SCULUnlockablesSnapInfo  snapInfo  = 2;
    optional  string  adServeRequestId  = 3;
    optional  string  rawAdData  = 4;
    optional  bool  skipTrack  = 5;
    optional  string  encryptedSponsoredUnlockableTargetingInfoData  = 6;
    optional  string  adTrackURL  = 7;
    optional  string  rankingId  = 8;
    optional  string  rankingData  = 9;
    optional  bool  ranked  = 10;
    optional  string  encryptedUserTrackData  = 11;
    optional  bytes  adId  = 12;
    optional  int64  adServeTimestampMillis  = 13;
    optional  bytes  adServeItemId  = 14;
}

message SCLPWebViewAttachment {
    optional  string  webViewURL  = 1;
    optional  bool  shouldAutoFill  = 2;
}

message SCLensAlwaysOnCarouselConfig {
    optional  bool  isFeatureEnabled  = 1;
    optional  int32  mainCameraMode  = 2;
    optional  bool  isEnabledOnReplyCamera  = 3;
    optional  bool  isMemoriesSwipeUpEnabled  = 4;
    optional  bool  isCarouselOpenedWithAnimation  = 5;
    optional  bool  isCarouselOpenedWhileCameraHidden  = 6;
    optional  bool  isLensCoreSuspendedWhenLensNotSelected  = 7;
    optional  bool  carouselOptimizedPresentation  = 8;
    optional  bool  carouselPostponedUntilG2S  = 9;
    optional  bool  locationUsageOptimized  = 10;
    optional  bool  triggerLensPrefetchOnUserStatusChange  = 11;
    optional  bool  geolensWarmupUntilG2S  = 12;
    optional  uint32  locationUpdateMinimalThresholdMs  = 13;
    optional  uint32  lensDataProviderUpdateMinimalThresholdMs  = 14;
    optional  bool  fixedCameraPageAttribution  = 15;
    optional  bool  fixedLensCarouselRestoreState  = 16;
    optional  bool  lensDataProviderOptimizedCaching  = 17;
    optional  bool  lensDataProviderOptimizedReloading  = 18;
    optional  bool  lensesDeactivationOnCameraSwipeoutOptimized  = 19;
}

message SCLensBitmojiUserInfo {
    optional  string  avatarId  = 1;
    optional  string  selfieId  = 2;
}

message SCLensBlobDeleteRequest {
    optional  string  mediaId  = 1;
}

message SCLensBlobDeleteResponse {
    optional  string  mediaId  = 1;
}

message SCLensBlobDownloadRequest {
    optional  string  mediaId  = 1;
    optional  int32  persistenceType  = 6;
}

message SCLensBlobDownloadResponse {
    optional  string  mediaId  = 1;
    optional  bytes  data_p  = 2;
    optional  bool  isClientEncrypted  = 3;
}

message SCLensBlobMedia {
    optional  string  id_p  = 1;
    optional  bytes  data_p  = 2;
    optional  int64  expirationTimeMs  = 3;
    optional  int32  version  = 4;
    optional  bool  isClientEncrypted  = 5;
}

message SCLensBlobMediaList {
    repeated  SCLensBlobMedia  mediasArray  = 2;
}

message SCLensBlobUploadRequest {
    optional  SCLensBlobMedia  media  = 1;
    optional  int32  persistenceType  = 6;
}

message SCLensBlobUploadResponse {
    optional  string  mediaId  = 1;
}

message SCLensCameosSelfieData {
    optional  bytes  image  = 1;
    repeated  float  landmarksArray  = 2[packed=true];
    optional  bytes  iconImage  = 3;
    optional  bytes  faceZones  = 4;
    optional  bytes  targetSegmentationResult  = 5;
}

message SCLensCarouselAutosuggestionConfig {
    optional  bool  backgroundPrefetchEnabled  = 1;
    optional  int64  foregroundPrefetchDelay  = 2;
}

message SCLensCarouselCreativeOnboardingConfig {
    optional  bool  displayBadge  = 1;
    optional  string  tooltipMessage  = 2;
}

message SCLensCarouselCreativeOnboardingUserData {
    optional  bool  newUserFlowEnabled  = 1;
    optional  bool  badgeAllowed  = 2;
    optional  bool  tooltipAllowed  = 3;
}

message SCLensCategoriesConfig {
    optional  bool  disableFilteringByCategoryIds  = 1;
    optional  bool  ignoreForceDownloadCategory  = 2;
}

message SCLensCentralCommonPbAdAccount {
    optional  string  id_p  = 1;
    optional  string  name  = 2;
}

message SCLensCentralCommonPbBusinessProfile {
    optional  string  id_p  = 1;
    optional  string  name  = 2;
}

message SCLensCentralCommonPbDistribution {
    optional  string  destinationId  = 1;
    optional  int32  destinationType  = 2;
}

message SCLensCentralCommonPbGcsLink {
    optional  string  bucket  = 1;
    optional  string  fileName  = 2;
}

message SCLensCentralCommonPbLens {
    optional  string  id_p  = 1;
    optional  string  name  = 2;
    optional  SCLensCentralCommonPbSnapcode  snapcode  = 3;
    optional  string  iconURL  = 4;
    repeated  string  tagsArray  = 5;
    repeated  string  scanTriggersArray  = 6;
    optional  int32  visibility  = 7;
    optional  string  organizationId  = 8;
    optional  string  adAccountId  = 9;
    optional  int32  status  = 10;
    optional  GPBTimestamp  updatedAt  = 11;
    optional  string  updatedBy  = 12;
    optional  bool  locked  = 13;
    optional  SCLensCentralCommonPbLensRejectionErrors  rejectionErrors  = 14;
    optional  string  previewURL  = 15;
    optional  int64  unlockableId  = 16;
    optional  string  ownerId  = 17;
    optional  SCLensCentralCommonPbPreviewMedia  previewMedia  = 18;
    optional  SCLensCentralCommonPbLensAccountID  lensAccountId  = 19;
    optional  SCLensCentralCommonPbLensCta  lensCta  = 20;
    optional  bool  isShopping  = 21;
    optional  string  primaryCategoryId  = 22;
    optional  string  secondaryCategoryId  = 23;
    repeated  DigitalGood  digitalGoodsArray  = 24;
    repeated  SCLensCentralCommonPbDistribution  distributionsArray  = 25;
}

message SCLensCentralCommonPbLensAccountID {
    optional  string  userId  = 1;
    optional  string  organizationId  = 2;
    optional  SCLensCentralCommonPbLensAccountID_OrganizationAndAdAccountID  organizationAndAdAccountId  = 3;
    optional  string  profileId  = 4;
    optional  string  lensSpaceId  = 5;
}

message SCLensCentralCommonPbLensAccountID_OrganizationAndAdAccountID {
    optional  string  organizationId  = 1;
    optional  string  adAccountId  = 2;
}

message SCLensCentralCommonPbLensCta {
    optional  int32  type  = 1;
    optional  int32  text  = 2;
    optional  string  link  = 3;
    optional  SCLensCentralCommonPbLensCta_Website  website  = 4;
    optional  SCLensCentralCommonPbLensCta_Deeplink  deeplink  = 5;
}

message SCLensCentralCommonPbLensCta_Deeplink {
    optional  string  appName  = 1;
    optional  string  uri  = 2;
    optional  int64  iosAppId  = 3;
    optional  string  androidAppURL  = 4;
}

message SCLensCentralCommonPbLensCta_Website {
    optional  string  URL  = 1;
}

message SCLensCentralCommonPbLensRejectionErrors {
    optional  string  heading  = 1;
    repeated  string  messagesArray  = 2;
    repeated  string  violatingComponentsArray  = 3;
    optional  bool  hasSubmissionErrors  = 4;
}

message SCLensCentralCommonPbLensSpace {
    optional  string  id_p  = 1;
    optional  string  name  = 2;
    optional  GPBTimestamp  createdAt  = 3;
    optional  GPBTimestamp  updatedAt  = 4;
}

message SCLensCentralCommonPbLensStudioAnalytics {
    optional  string  appSessionId  = 1;
    optional  string  installationId  = 2;
    optional  string  documentId  = 3;
    optional  string  originalDocumentId  = 4;
    optional  string  appVersion  = 5;
    optional  string  appBuild  = 6;
    optional  string  osType  = 7;
    optional  string  osVersion  = 8;
    optional  string  gpuOpenglVersion  = 9;
    optional  string  gpuFamily  = 10;
    optional  string  gpuVendor  = 11;
}

message SCLensCentralCommonPbOrganization {
    optional  string  id_p  = 1;
    optional  string  name  = 2;
    repeated  SCLensCentralCommonPbAdAccount  adAccountsArray  = 3;
    repeated  SCLensCentralCommonPbBusinessProfile  businessProfilesArray  = 4;
    repeated  SCLensCentralCommonPbLensSpace  lensSpacesArray  = 5;
    optional  bool  cameraKitEnabled  = 6;
}

message SCLensCentralCommonPbPreviewMedia {
    optional  string  thumbnailMediaURL  = 1;
    optional  string  thumbnailMediaPosterURL  = 2;
    optional  string  standardMediaURL  = 3;
    optional  string  standardMediaPosterURL  = 4;
}

message SCLensCentralCommonPbRole {
    optional  string  id_p  = 1;
    optional  string  containerId  = 2;
    optional  int32  containerKind  = 3;
    optional  int32  roleType  = 4;
}

message SCLensCentralCommonPbSnapcode {
    optional  string  imageURL  = 1;
    optional  string  deeplink  = 2;
    optional  GPBTimestamp  expiresAt  = 3;
    optional  bool  isTemporary  = 4;
}

message SCLensCentralCommonPbSubmissionError {
    optional  string  heading  = 1;
    optional  string  message  = 2;
}

message SCLensCurrentWeatherRequest {
    optional  SCLensLatLng  latlng  = 1;
}

message SCLensCurrentWeatherRequestResponse {
    optional  SCLensWeather  weather  = 1;
}

message SCLensDataFetcherConfig {
    optional  bool  skipRedundantCheckCache  = 1;
    optional  bool  respectContentManagerLoadSource  = 2;
}

message SCLensExplorerGetLensExplorerRequest {
    optional  int32  limit  = 1;
    optional  int32  offset  = 2;
}

message SCLensExplorerGetLensExplorerResponse {
    repeated  SCLensExplorerLensExplorerItem  lensesArray  = 1;
}

message SCLensExplorerImageSequence {
    optional  string  URLPattern  = 1;
    optional  int32  size  = 2;
    optional  int32  frameIntervalMs  = 3;
}

message SCLensExplorerLensExplorerItem {
    optional  string  snapcodeURL  = 1;
    optional  string  userDisplayName  = 2;
    optional  string  lensName  = 3;
    optional  string  deeplink  = 4;
    optional  string  iconURL  = 5;
    optional  string  thumbnailMediaURL  = 6;
    optional  string  thumbnailMediaPosterURL  = 7;
    optional  string  standardMediaURL  = 8;
    optional  string  standardMediaPosterURL  = 9;
    optional  int64  unlockableId  = 10;
    optional  SCLensExplorerImageSequence  imageSequence  = 11;
}

message SCLensExplorerOrderedScheduledLenses {
    repeated  int64  unlockableIdsArray  = 1[packed=true];
}

message SCLensExplorerScheduledRanking {
    repeated  SCLensExplorerOrderedScheduledLenses  scheduledLensesByCountry  = 1;
}

message SCLensFasterCarouselConfig {
    optional  bool  dragPreviewEnabled  = 1;
    optional  bool  deceleratePreviewEnabled  = 2;
    optional  uint32  previewInteractionThresholdMs  = 3;
    optional  int32  haptics  = 4;
    optional  bool  logSwipeOnPreviewEnabled  = 5;
    optional  bool  fastSelectionEnabled  = 6;
    optional  double  decelerationSpeedFactor  = 7;
    optional  bool  decelerationCenterOnItem  = 8;
}

message SCLensFavoritesInLeftCarouselConfig {
    optional  bool  isFeatureEnabled  = 1;
    optional  int32  treatmentType  = 2;
    optional  bool  isFavoriteButtonVisible  = 3;
    optional  int32  heartBadgeOnboardingSessionsLimit  = 4;
    optional  int32  emptySlotOnboardingSessionsLimit  = 5;
    optional  int64  favoriteLensesFetchLimit  = 6;
    optional  int32  collectionLensAbsolutePosition  = 7;
    optional  bool  isArGamesAvailable  = 8;
    optional  int32  carouselUpdateTreatment  = 9;
}

message SCLensFriendUserInfo {
    optional  GPBTimestamp  friendshipStart  = 1;
    optional  GPBTimestamp  lastInteraction  = 2;
    optional  uint32  streak  = 3;
}

message SCLensFriendsFeedContextConfig {
    optional  int32  simultaneouslyShownEventsCount  = 1;
    optional  int32  trackedConversationNumber  = 2;
    optional  int32  secondarySortingMode  = 3;
    optional  int32  impressionCap  = 4;
    repeated  SCLensFriendsFeedContextEvent  eventsArray  = 5;
    optional  string  lensIconBase  = 6;
}

message SCLensFriendsFeedContextEvent {
    optional  int32  priority  = 1;
    optional  int32  eventType  = 2;
    repeated  SCLensFriendsFeedContextLensInfo  lensesArray  = 3;
}

message SCLensFriendsFeedContextLensInfo {
    optional  string  lensId  = 1;
    optional  string  iconId  = 2;
}

message SCLensGeocircle {
    optional  double  radius  = 1;
    optional  SCLensGeopoint  center  = 2;
}

message SCLensGeopoint {
    optional  double  latitude  = 1;
    optional  double  longitude  = 2;
}

message SCLensGetDevicePerformanceModeResponse {
    optional  int32  cameosPerformanceMode  = 1;
}

message SCLensGetOAuth2InfoRequest {
    optional  string  apiSpecId  = 1;
}

message SCLensGetOAuth2InfoResponse {
    optional  string  clientId  = 1;
    optional  int32  grantType  = 2;
    optional  string  authorizationURL  = 3;
    optional  string  scope  = 4;
}

message SCLensGetTotalFriendCameoSelfiesResponse {
    optional  uint32  totalFriendCameoSelfies  = 1;
}

message SCLensHandleFriendPolicyPopupResultRequest {
    optional  bool  isFriendPolicyAccepted  = 1;
}

message SCLensHistoricalInteraction {
    optional  int64  timestampMs  = 1;
    optional  sint32  position  = 2;
    optional  bytes  itemId  = 3;
    optional  int32  interactionLengthMs  = 4;
    optional  SCLensLensExplorerInteraction  lensExplorerInteraction  = 5;
    optional  SCLensLensCarouselInteraction  carouselInteraction  = 6;
}

message SCLensIsCameosFeatureAvailableResponse {
    optional  bool  isCameosFeatureAvailable  = 1;
}

message SCLensIsCameosUserSelfieAvailableResponse {
    optional  bool  isCameosUserSelfieAvailable  = 1;
}

message SCLensLatLng {
    optional  double  lat  = 1;
    optional  double  lng  = 2;
}

message SCLensLaunchData {
    optional  SCLensSbSnappable  snappable  = 1;
    optional  SCLensLures  lures  = 2;
    optional  string  userId  = 3;
    optional  int32  entryPoint  = 4;
    optional  SCLensUserData  userData  = 5;
    optional  SCLensPersistentStore  persistentStore  = 6;
    optional  SCLensLaunchParams  launchParams  = 7;
    repeated  int32  apiDescriptorsArray  = 8[packed=true];
}

message SCLensLaunchParams {
    optional  bytes  data_p  = 1;
}

message SCLensLensCarouselInteraction {
    optional  int32  interactionType  = 1;
}

message SCLensLensExplorerInteraction {
    optional  int32  itemType  = 1;
    optional  bytes  pageName  = 2;
    optional  int32  pageType  = 3;
    optional  bytes  containerId  = 4;
    optional  bytes  sectionName  = 5;
    optional  int32  interactionType  = 6;
}

message SCLensLensHydrationContext {
    optional  string  sponsoredAdId  = 1;
}

message SCLensLensIdentifier {
    optional  string  lensId  = 1;
    optional  SCLensLensHydrationContext  hydrationContext  = 2;
}

message SCLensLensPreparationFinishedRequest {
    optional  bool  isLensPreparationFinished  = 1;
}

message SCLensLensesByIdsRequest {
    repeated  string  lensesIdsArray  = 1;
    optional  SCULRequestInfo  requestInfo  = 2;
    repeated  SCLensLensIdentifier  lensIdentifiersArray  = 3;
}

message SCLensLensesByIdsResponse {
    repeated  bytes  geofilterResponsesArray  = 1;
    repeated  SCLPLensSnapchat  lensesArray  = 2;
}

message SCLensLoadCameosFriendSelfieRequest {
    optional  uint32  friendIndex  = 1;
}

message SCLensLoadCameosFriendSelfieResponse {
    optional  SCLensCameosSelfieData  cameosSelfieData  = 1;
}

message SCLensLoadCameosUserSelfieResponse {
    optional  SCLensCameosSelfieData  cameosSelfieData  = 1;
}

message SCLensLures {
    repeated  SCLensGeocircle  locationsArray  = 1;
    optional  SCLensGeocircle  activeLure  = 2;
    optional  SCLensGeocircle  closestLure  = 3;
}

message SCLensPerformApiCallRequest {
    optional  string  apiSpecSetId  = 1;
    optional  string  endpointRefId  = 2;
    repeated  string  parameters  = 3;
    optional  bytes  body  = 4;
    optional  string  lensId  = 5;
    optional  bool  isStudioDev  = 6;
}

message SCLensPerformApiCallResponse {
    optional  int32  responseCode  = 1;
    repeated  string  metadata  = 2;
    optional  bytes  body  = 3;
    optional  bool  userLocationUsed  = 4;
}

message SCLensPerformHttpCallRequest {
    optional  string  URL  = 1;
    optional  int32  method  = 2;
    repeated  string  headers  = 3;
    optional  bytes  body  = 4;
    optional  string  apiSpecId  = 5;
    optional  bool  isStudioDev  = 6;
}

message SCLensPerformHttpCallResponse {
    optional  int32  code  = 1;
    repeated  string  headers  = 2;
    optional  bytes  body  = 3;
}

message SCLensPerformTokenExchangeRequest {
    optional  string  apiSpecId  = 1;
    optional  string  authorizationCode  = 2;
    optional  string  codeVerifier  = 3;
}

message SCLensPerformTokenExchangeResponse {
    optional  SCLensTokenDetails  tokenDetails  = 1;
    optional  SCLensTokenExchangeError  error  = 2;
}

message SCLensPersistentStore {
    optional  bytes  store  = 1;
}

message SCLensPrefetchSelectionConfig {
    optional  bool  enablePrefetchSelection  = 1;
    optional  bool  applyPrefetchSelectionForReplyNamespaces  = 2;
}

message SCLensRealTimeScanEvent {
    optional  string  className_p  = 1;
    optional  SCLensScanBoundingBox  boundingBox  = 2;
}

message SCLensRefreshTokenRequest {
    optional  string  apiSpecId  = 1;
    optional  string  refreshToken  = 2;
}

message SCLensRefreshTokenResponse {
    optional  SCLensTokenDetails  tokenDetails  = 1;
    optional  SCLensTokenExchangeError  error  = 2;
}

message SCLensRemoteApiDeleteOAuth2TokensRequest {
    optional  string  apiSpecId  = 1;
}

message SCLensRemoteApiGetOAuth2StatusRequest {
    optional  string  apiSpecId  = 1;
}

message SCLensRemoteApiGetOAuth2StatusResponse {
    optional  int32  oauth2Status  = 1;
    optional  string  errorMessage  = 2;
}

message SCLensRemoteApiStartOAuth2FlowRequest {
    optional  string  apiSpecId  = 1;
}

message SCLensRemoteApiStartOAuth2FlowResponse {
    optional  int32  oauth2Status  = 1;
    optional  string  errorMessage  = 2;
}

message SCLensReplyFullCarouselConfig {
    optional  int32  psaFullCarouselMode  = 1;
    optional  int32  smartLensCtaFullCarouselMode  = 2;
    optional  int32  contextFullCarouselMode  = 3;
}

message SCLensSbEncryptionData {
    optional  bytes  key  = 1;
    repeated  bytes  ivStore  = 2;
    optional  bool  isKeyServerEncrypted  = 3;
    optional  bool  isKeyE2EEncrypted  = 4;
    optional  int32  encryptionScheme  = 5;
}

message SCLensSbGetSnappableRequest {
    optional  string  id_p  = 1;
}

message SCLensSbGetSnappableResponse {
    optional  SCLensSbSnappable  data_p  = 1;
    repeated  SCLensSbSnappableMedia  mediaArray  = 2;
}

message SCLensSbPlayerData {
    repeated  string  store  = 1;
    optional  bytes  serializedStore  = 2;
}

message SCLensSbPutSnappableRequest {
    optional  SCLensSbSnappable  snappable  = 1;
    repeated  SCLensSbSnappableMedia  mediaArray  = 2;
}

message SCLensSbPutSnappableResponse {
    optional  string  id_p  = 1;
}

message SCLensSbSessionData {
    repeated  SCLensSbPlayerData  playerData  = 1;
}

message SCLensSbSnap3DData {
    optional  bool  allowZippedMedia  = 1;
}

message SCLensSbSnappable {
    optional  string  id_p  = 1;
    optional  string  sessionId  = 2;
    optional  string  playerId  = 3;
    optional  SCLensSbSessionData  sessionData  = 4;
    optional  int64  createdTime  = 5;
    optional  int64  expireTime  = 6;
    optional  int32  version  = 7;
    optional  SCLensSbEncryptionData  encryptionData  = 8;
    optional  int32  sessionDepth  = 9;
}

message SCLensSbSnappableEncryptedKey {
    optional  bytes  encryptedKey  = 1;
    optional  string  encryptionKeyId  = 2;
    optional  bytes  encryptionKeyIv  = 3;
}

message SCLensSbSnappableMedia {
    optional  string  sessionId  = 1;
    optional  string  playerId  = 2;
    optional  string  URL  = 3;
    optional  string  key  = 4;
    optional  int64  createdTime  = 5;
}

message SCLensSbSnappableMessage {
    optional  SCLensSbSnappable  snappable  = 1;
    repeated  SCLensSbSnappableMedia  mediaArray  = 2;
    optional  string  effectId  = 3;
    repeated  string  userIdsArray  = 4;
    optional  float  focusPointX  = 5;
    optional  float  focusPointY  = 6;
    optional  float  focusPointWidth  = 7;
    optional  int32  replyType  = 8;
    optional  SCLensSbSnap3DData  snap3DData  = 9;
    optional  SCLensSbUsesCameraRoll  usesCameraRollData  = 10;
    optional  string  assetBatchId  = 500;
}

message SCLensSbUsesCameraRoll {
    optional  bool  usesCameraRoll  = 1;
}

message SCLensScanBoundingBox {
    optional  float  left  = 1;
    optional  float  right  = 2;
    optional  float  bottom  = 3;
    optional  float  top  = 4;
}

message SCLensScanImage {
    optional  bytes  data_p  = 1;
}

message SCLensScanRequest {
    optional  SCLensScanImage  image  = 1;
    optional  string  lensId  = 2;
    optional  SCLensRealTimeScanEvent  realTimeScanEvent  = 3;
}

message SCLensSegmentationPatchData {
    optional  bytes  segmentationMask  = 1;
    optional  bytes  blendMask  = 2;
}

message SCLensSelection {
    repeated  SCLensSelection_Query  queriesArray  = 1;
}

message SCLensSelection_Criterion {
    optional  string  sourceName  = 1;
    optional  bool  sponsored  = 2;
    optional  bool  snappable  = 3;
    optional  bool  thirdParty  = 4;
    optional  string  applicableContext  = 5;
    optional  bool  inverted  = 6;
    optional  string  namespaceName  = 7;
    optional  bool  isShoppingLens  = 8;
    optional  bool  isPrecache  = 9;
}

message SCLensSelection_Query {
    repeated  SCLensSelection_Criterion  criteriaArray  = 1;
    optional  sint32  limit  = 2;
    repeated  int32  targetsArray  = 3[packed=true];
}

message SCLensSerializedState {
    optional  string  lensId  = 2;
    optional  bytes  checksum  = 3;
    optional  bytes  serializedData  = 4;
}

message SCLensShouldShowFriendPolicyPopupResponse {
    optional  bool  shouldShowFriendPolicyPopup  = 1;
}

message SCLensTokenDetails {
    optional  string  accessToken  = 1;
    optional  string  tokenType  = 2;
    optional  int64  expiresInSeconds  = 3;
    optional  string  refreshToken  = 4;
    optional  string  scope  = 5;
}

message SCLensTokenExchangeError {
    optional  int32  error  = 1;
    optional  string  errorDescription  = 2;
}

message SCLensUserData {
    optional  string  userId  = 1;
    optional  string  username  = 2;
    optional  string  birthdate  = 3;
    optional  string  displayName  = 4;
    optional  string  countrycode  = 5;
    optional  uint64  score  = 7;
    optional  SCLensBitmojiUserInfo  bitmojiInfo  = 8;
    optional  SCLensFriendUserInfo  friendInfo  = 9;
    optional  int32  zodiac  = 10;
}

message SCLensUserDataList {
    repeated  SCLensUserData  userDataArray  = 1;
}

message SCLensUserLocationInfo {
    optional  SCLensLatLng  latlng  = 1;
    optional  string  locality  = 2;
    optional  string  venueName  = 3;
    optional  GPBTimestamp  timestamp  = 4;
}

message SCLensUserLocationInfoRequest {
    optional  string  userId  = 1;
}

message SCLensWeather {
    optional  float  temperatureF  = 1;
    optional  string  weatherConditionEn  = 2;
    optional  string  weatherConditionLocalized  = 3;
    optional  GPBTimestamp  timestamp  = 4;
}

message SCLensesPbBusinessApiCloneRequest {
    optional  int64  sourceUnlockableId  = 1;
    optional  string  destinationUserId  = 2;
}

message SCLensesPbBusinessApiCloneResponse {
    optional  SCLensCentralCommonPbLens  lens  = 1;
}

message SCLensesPbBusinessApiDeleteRequest {
    optional  string  userId  = 1;
    optional  string  lensId  = 2;
}

message SCLensesPbBusinessApiDeleteResponse {
}

message SCLensesPbBusinessApiSetLensCategoryRequest {
    optional  string  userId  = 1;
    optional  string  lensId  = 2;
    optional  string  primaryCategoryId  = 3;
    optional  string  secondaryCategoryId  = 4;
}

message SCLensesPbBusinessApiSetLensCategoryResponse {
    optional  SCLensCentralCommonPbLens  lens  = 1;
}

message SCLensesPbBusinessApiSetVisibilityRequest {
    optional  string  userId  = 1;
    optional  string  lensId  = 2;
    optional  int32  visibility  = 3;
}

message SCLensesPbBusinessApiSetVisibilityResponse {
    optional  SCLensCentralCommonPbLens  lens  = 1;
}

message SCLensesPbBusinessApiUploadPreviewMediaRequest {
    optional  string  userId  = 1;
    optional  string  lensId  = 2;
    optional  string  mediaFileURL  = 3;
}

message SCLensesPbBusinessApiUploadPreviewMediaResponse {
}

message SCLensesPbCreateLensSpaceRequest {
    optional  string  organizationId  = 1;
    optional  string  lensSpaceName  = 2;
}

message SCLensesPbCreateLensSpaceResponse {
    optional  SCLensCentralCommonPbLensSpace  lensSpace  = 1;
}

message SCLensesPbCreateOrUpdateLensRequest {
    optional  SCLensesPbCreateOrUpdateLensRequest_Metadata  metadata  = 1;
    optional  bytes  previewMedia  = 2;
}

message SCLensesPbCreateOrUpdateLensRequest_Metadata {
    optional  string  submissionId  = 1;
    optional  string  lensId  = 2;
    optional  string  lensName  = 3;
    repeated  string  tagsArray  = 4;
    repeated  string  scanTriggersArray  = 5;
    optional  int32  visibility  = 6;
    optional  string  organizationId  = 7;
    optional  string  adAccountId  = 8;
    optional  string  previewMediaType  = 9;
    optional  SCLensCentralCommonPbLensAccountID  lensAccountId  = 10;
    optional  SCLensCentralCommonPbLensCta  lensCta  = 11;
    optional  string  primaryCategoryId  = 12;
    optional  string  secondaryCategoryId  = 13;
    repeated  DigitalGood  digitalGoodsArray  = 14;
}

message SCLensesPbCreateOrUpdateLensResponse {
    optional  SCLensCentralCommonPbLens  lens  = 1;
}

message SCLensesPbCreateOrganizationAndLensSpaceRequest {
    optional  string  organizationName  = 1;
    optional  string  lensSpaceName  = 2;
}

message SCLensesPbCreateOrganizationAndLensSpaceResponse {
    optional  SCLensCentralCommonPbOrganization  organization  = 1;
}

message SCLensesPbDeleteLensRequest {
    optional  string  lensId  = 1;
}

message SCLensesPbDeleteLensResponse {
}

message SCLensesPbFinalizeBusinessLensRequest {
    optional  SCLensesPbFinalizeBusinessLensRequest_Metadata  metadata  = 1;
    optional  bytes  previewMedia  = 2;
}

message SCLensesPbFinalizeBusinessLensRequest_Metadata {
    optional  string  lensId  = 1;
    optional  string  description_p  = 2;
    optional  string  previewMediaType  = 3;
}

message SCLensesPbFinalizeBusinessLensResponse {
    optional  SCLensCentralCommonPbLens  lens  = 1;
}

message SCLensesPbGetLegacyLensesRequest {
    optional  string  userId  = 1;
    optional  int32  limit  = 2;
    optional  int32  offset  = 3;
    optional  int32  sortBy  = 4;
    optional  int32  sortDirection  = 5;
    optional  FilterBy  filterBy  = 6;
}

message SCLensesPbGetLegacyLensesResponse {
    repeated  SCLensCentralCommonPbLens  lensesArray  = 1;
}

message SCLensesPbGetLensCategoryListRequest {
}

message SCLensesPbGetLensCategoryListResponse {
    optional  LensCategoryList  lensCategoryList  = 1;
}

message SCLensesPbGetLensMetadataByUnlockableIdRequest {
    optional  int64  unlockableId  = 1;
}

message SCLensesPbGetLensMetadataByUnlockableIdResponse {
    optional  int64  unlockableId  = 1;
    optional  string  lensId  = 2;
    optional  int32  status  = 3;
    optional  bool  isShopping  = 4;
}

message SCLensesPbGetLensRequest {
    optional  string  lensId  = 1;
}

message SCLensesPbGetLensResponse {
    optional  SCLensCentralCommonPbLens  lens  = 1;
}

message SCLensesPbGetLensSpaceLensesRequest {
    repeated  string  lensSpaceIdsArray  = 1;
    optional  int32  limit  = 2;
    optional  int32  offset  = 3;
    optional  int32  sortBy  = 4;
    optional  int32  sortDirection  = 5;
    optional  FilterBy  filterBy  = 6;
}

message SCLensesPbGetLensSpaceLensesResponse {
    repeated  SCLensCentralCommonPbLens  lensesArray  = 1;
}

message SCLensesPbGetLensSpacesMetadataRequest {
    repeated  string  lensSpaceIdsArray  = 1;
}

message SCLensesPbGetLensSpacesMetadataResponse {
    repeated  SCLensCentralCommonPbLensSpace  lensSpacesArray  = 1;
}

message SCLensesPbGetLensStudioUserProfileRequest {
}

message SCLensesPbGetLensStudioUserProfileResponse {
    optional  string  userDisplayName  = 1;
    optional  string  avatarURL  = 2;
    optional  string  userId  = 3;
    optional  string  ghostId  = 4;
}

message SCLensesPbGetLensesByLensIdsRequest {
    repeated  string  lensIdsArray  = 1;
}

message SCLensesPbGetLensesByLensIdsResponse {
    repeated  SCLensesPbSingleLensResponse  lensesArray  = 1;
}

message SCLensesPbGetLensesRequest {
    optional  int32  limit  = 1;
    optional  int32  offset  = 2;
    optional  string  organizationId  = 3;
    optional  int32  sortBy  = 4;
    optional  int32  sortDirection  = 5;
    optional  FilterBy  filterBy  = 6;
    optional  SCLensCentralCommonPbLensAccountID  lensAccountId  = 7;
}

message SCLensesPbGetLensesResponse {
    repeated  SCLensCentralCommonPbLens  lensesArray  = 1;
}

message SCLensesPbGetLensesWithDigitalGoodsRequest {
    optional  SCLensCentralCommonPbLensAccountID  owner  = 1;
}

message SCLensesPbGetLensesWithDigitalGoodsResponse {
    repeated  SCLensCentralCommonPbLens  lensesArray  = 1;
}

message SCLensesPbGetOrganizationsAvailableForLensSpaceCreationRequest {
}

message SCLensesPbGetOrganizationsAvailableForLensSpaceCreationResponse {
    repeated  SCLensCentralCommonPbOrganization  organizationsArray  = 1;
}

message SCLensesPbGetOrganizationsRequest {
    optional  bool  isLegacyBusinessLensSubmissionSource  = 1;
}

message SCLensesPbGetOrganizationsResponse {
    repeated  SCLensCentralCommonPbOrganization  organizationsArray  = 1;
    optional  bool  brandProfile  = 2;
}

message SCLensesPbGetPreSubmissionInfoRequest {
    optional  string  submissionId  = 1;
}

message SCLensesPbGetPreSubmissionInfoResponse {
    optional  string  name  = 1;
    optional  string  iconURL  = 2;
    optional  int64  size  = 3;
    optional  string  previewURL  = 4;
    optional  bool  isSameUser  = 5;
    optional  SCLensCentralCommonPbLensStudioAnalytics  analytics  = 6;
    optional  int32  lensSubmissionFlowType  = 7;
    repeated  DigitalGood  digitalGoodsArray  = 8;
}

message SCLensesPbGetPriceTiersRequest {
}

message SCLensesPbGetPriceTiersResponse {
    repeated  PriceTier  priceTiersArray  = 1;
}

message SCLensesPbGetProfileLensesRequest {
    optional  string  userId  = 1;
    optional  int32  limit  = 2;
    optional  int32  offset  = 3;
    optional  int32  sortBy  = 4;
    optional  int32  sortDirection  = 5;
    optional  FilterBy  filterBy  = 6;
}

message SCLensesPbGetProfileLensesResponse {
    repeated  SCLensCentralCommonPbLens  lensesArray  = 1;
}

message SCLensesPbGetRolesRequest {
}

message SCLensesPbGetRolesResponse {
    repeated  SCLensCentralCommonPbRole  rolesArray  = 1;
}

message SCLensesPbGetScanTriggersRequest {
}

message SCLensesPbGetScanTriggersResponse {
    repeated  string  pretypeScanTriggersArray  = 1;
    repeated  string  allScanTriggersArray  = 2;
}

message SCLensesPbGetSubmissionErrorsRequest {
    optional  string  lensId  = 1;
}

message SCLensesPbGetSubmissionErrorsResponse {
    repeated  SCLensCentralCommonPbSubmissionError  submissionErrorsArray  = 1;
}

message SCLensesPbGetUserProfileRequest {
}

message SCLensesPbGetUserProfileResponse {
    optional  string  userDisplayName  = 1;
    optional  string  avatarURL  = 2;
    optional  string  pageURL  = 3;
    optional  string  userId  = 4;
    optional  string  ghostId  = 5;
}

message SCLensesPbPreSubmitRequest {
    optional  bytes  lensPack  = 1;
    optional  string  lensName  = 2;
    optional  bytes  lensIcon  = 3;
    optional  bytes  lensPreview  = 4;
    optional  SCLensCentralCommonPbLensStudioAnalytics  analytics  = 5;
    optional  int64  lensSize  = 6;
    repeated  int32  lensDescriptorsArray  = 7[packed=true];
}

message SCLensesPbPreSubmitResponse {
    optional  string  submissionId  = 1;
}

message SCLensesPbPublishGenericShoppingLensRequest {
    optional  string  name  = 1;
    optional  string  attributionUserId  = 2;
    optional  SCLensesPbPublishGenericShoppingLensRequest_LensGcsLink  lensGcsLink  = 3;
    repeated  string  bbgInternalTagsArray  = 4;
}

message SCLensesPbPublishGenericShoppingLensRequest_LensGcsLink {
    optional  string  bucket  = 1;
    optional  string  fileName  = 2;
}

message SCLensesPbPublishGenericShoppingLensResponse {
    optional  int64  unlockableId  = 1;
}

message SCLensesPbPublishLensToAdAccountRequest {
    optional  string  name  = 1;
    optional  string  userId  = 2;
    optional  string  organizationId  = 3;
    optional  string  adAccountId  = 4;
    optional  string  description_p  = 5;
    optional  SCLensesPbPublishLensToAdAccountRequest_LensGcsLink  lensGcsLink  = 6;
    optional  string  previewURL  = 7;
    repeated  string  bbgInternalTagsArray  = 11;
    optional  string  lensId  = 12;
    repeated  string  bbgPublicSearchTagsArray  = 13;
}

message SCLensesPbPublishLensToAdAccountRequest_LensGcsLink {
    optional  string  bucket  = 1;
    optional  string  fileName  = 2;
}

message SCLensesPbPublishLensToAdAccountResponse {
    optional  string  id_p  = 1;
    optional  string  mediaId  = 2;
    optional  int64  unlockableId  = 3;
}

message SCLensesPbPublishLensToBusinessProfileRequest {
    optional  string  name  = 1;
    optional  string  userId  = 2;
    optional  string  businessProfileId  = 3;
    optional  string  description_p  = 5;
    optional  SCLensesPbPublishLensToBusinessProfileRequest_LensGcsLink  lensGcsLink  = 6;
    optional  string  previewURL  = 7;
    repeated  string  bbgInternalTagsArray  = 11;
    optional  string  lensId  = 12;
    repeated  string  bbgPublicSearchTagsArray  = 13;
}

message SCLensesPbPublishLensToBusinessProfileRequest_LensGcsLink {
    optional  string  bucket  = 1;
    optional  string  fileName  = 2;
}

message SCLensesPbPublishLensToBusinessProfileResponse {
    optional  string  id_p  = 1;
    optional  int64  unlockableId  = 3;
}

message SCLensesPbRefreshBusinessLensSnapcodeExpirationRequest {
    optional  string  lensId  = 1;
}

message SCLensesPbRefreshBusinessLensSnapcodeExpirationResponse {
    optional  SCLensCentralCommonPbLens  lens  = 1;
}

message SCLensesPbSetDigitalGoodsRequest {
    optional  string  lensId  = 1;
    repeated  DigitalGood  digitalGoodsArray  = 2;
}

message SCLensesPbSetDigitalGoodsResponse {
    optional  SCLensCentralCommonPbLens  lens  = 1;
}

message SCLensesPbSetLensCategoryRequest {
    optional  string  lensId  = 1;
    optional  string  primaryCategoryId  = 2;
    optional  string  secondaryCategoryId  = 3;
}

message SCLensesPbSetLensCategoryResponse {
    optional  SCLensCentralCommonPbLens  lens  = 1;
}

message SCLensesPbSetLensCtaRequest {
    optional  string  lensId  = 1;
    optional  SCLensCentralCommonPbLensCta  lensCta  = 2;
}

message SCLensesPbSetLensCtaResponse {
    optional  SCLensCentralCommonPbLens  lens  = 1;
}

message SCLensesPbSetLensPreviewRequest {
    optional  SCLensesPbSetLensPreviewRequest_Metadata  metadata  = 1;
    optional  bytes  previewMedia  = 2;
}

message SCLensesPbSetLensPreviewRequest_Metadata {
    optional  string  lensId  = 1;
    optional  string  previewMediaType  = 2;
}

message SCLensesPbSetLensPreviewResponse {
    optional  SCLensCentralCommonPbLens  lens  = 1;
}

message SCLensesPbSetScanTriggersRequest {
    optional  string  lensId  = 1;
    repeated  string  scanTriggersArray  = 2;
}

message SCLensesPbSetScanTriggersResponse {
    optional  SCLensCentralCommonPbLens  lens  = 1;
}

message SCLensesPbSetTagsRequest {
    optional  string  lensId  = 1;
    repeated  string  tagsArray  = 2;
}

message SCLensesPbSetTagsResponse {
    optional  SCLensCentralCommonPbLens  lens  = 1;
}

message SCLensesPbSetVisibilityRequest {
    optional  string  lensId  = 1;
    optional  int32  visibility  = 2;
}

message SCLensesPbSetVisibilityResponse {
    optional  SCLensCentralCommonPbLens  lens  = 1;
}

message SCLensesPbShoppingLensInboundMessage {
    optional  string  lensId  = 1;
    optional  int32  shoppingLensState  = 2;
    optional  int64  unlockableId  = 3;
    optional  int32  destinationType  = 4;
}

message SCLensesPbSingleLensResponse {
    optional  string  lensId  = 1;
    optional  int32  status  = 2;
    optional  string  errorMessage  = 3;
    optional  SCLensCentralCommonPbLens  lens  = 4;
}

message SCLensesPbVerifyAdAccountMembershipRequest {
    optional  string  userId  = 1;
    optional  string  accountId  = 2;
    optional  string  organizationId  = 3;
}

message SCLensesPbVerifyAdAccountMembershipResponse {
    optional  bool  isMember  = 1;
}

message SCLensesPbVerifyBusinessProfileMembershipRequest {
    optional  string  userId  = 1;
    optional  string  businessProfileId  = 2;
}

message SCLensesPbVerifyBusinessProfileMembershipResponse {
    optional  bool  isMember  = 1;
}

message SCListsListsCreateIngressGatewayRequest {
    repeated  SCListsRecipientList  listsArray  = 1;
    optional  bool  isPrepopulation  = 2;
    optional  SCCOREUUID  userId  = 3;
}

message SCListsListsCreateIngressGatewayResponse {
    repeated  SCListsRecipientList  listsArray  = 1;
    optional  int32  errorType  = 2;
}

message SCListsListsCreateRequest {
    repeated  SCListsRecipientList  listsArray  = 1;
    optional  bool  isPrepopulation  = 2;
}

message SCListsListsCreateResponse {
    repeated  SCListsRecipientList  listsArray  = 1;
    optional  int32  errorType  = 2;
}

message SCListsListsDeleteIngressGatewayRequest {
    repeated  SCCOREUUID  listIdsArray  = 1;
    optional  SCCOREUUID  userId  = 2;
}

message SCListsListsDeleteIngressGatewayResponse {
    repeated  SCCOREUUID  listIdsArray  = 1;
    optional  int32  errorType  = 2;
}

message SCListsListsDeleteRequest {
    repeated  SCCOREUUID  listIdsArray  = 1;
}

message SCListsListsDeleteResponse {
    repeated  SCCOREUUID  listIdsArray  = 1;
    optional  int32  errorType  = 2;
}

message SCListsListsFetchIngressGatewayRequest {
    repeated  SCCOREUUID  listIdsArray  = 1;
    optional  SCCOREUUID  userId  = 2;
}

message SCListsListsFetchIngressGatewayResponse {
    repeated  SCListsRecipientList  listsArray  = 1;
    optional  bool  hasPrepopulated  = 2;
    optional  int32  errorType  = 3;
}

message SCListsListsFetchRequest {
    repeated  SCCOREUUID  listIdsArray  = 1;
}

message SCListsListsFetchResponse {
    repeated  SCListsRecipientList  listsArray  = 1;
    optional  bool  hasPrepopulated  = 2;
    optional  int32  errorType  = 3;
}

message SCListsListsUpdateRequest {
    repeated  SCListsRecipientList  listsArray  = 1;
}

message SCListsListsUpdateResponse {
    repeated  SCListsRecipientList  listsArray  = 1;
    optional  int32  errorType  = 2;
}

message SCListsRecipientList {
    optional  SCCOREUUID  listId  = 1;
    repeated  SCListsRecipientListItem  listItemsArray  = 2;
    optional  string  name  = 3;
    optional  int64  creationTime  = 4;
    optional  int32  rank  = 5;
    optional  string  descriptiveTitle  = 6;
}

message SCListsRecipientListItem {
    optional  SCCOREUUID  recipientId  = 1;
    optional  int32  recipientType  = 2;
}

message SCLiveMirrorConfig {
    repeated  SCLiveMirrorConfig_LinkPageFlow  flowsArray  = 1;
}

message SCLiveMirrorConfig_LinkPageFlow {
    optional  int32  page  = 1;
    optional  int32  flow  = 2;
}

message SCLoadedLensFirstV2Config {
    optional  bool  isConfigActive  = 1;
    optional  bool  noConnectionTrigger  = 2;
    optional  int32  wwanAndConnectionTypeOperation  = 3;
    optional  bool  wwanConnectionTrigger  = 4;
    optional  int32  typeOfConnectionTrigger  = 5;
    optional  bool  sortLensesOnlyOnStart  = 6;
}

message SCLocalizedStringSet {
    optional  string  fallback  = 1;
    repeated  SCLocalizedStringSet_String  stringsArray  = 2;
}

message SCLocalizedStringSet_String {
    optional  string  locale  = 1;
    optional  string  text  = 2;
}

message SCMBFFriend {
    optional  string  userId  = 1;
}

message SCMBFGetMapBestFriendsRequest {
}

message SCMBFGetMapBestFriendsResponse {
    repeated  SCMBFFriend  bestFriendsArray  = 1;
    optional  int64  lifespanMinutes  = 2;
}

message SCMBasemapPersonalizationConfig {
    optional  bool  enableUntiledFavoritesRequest  = 1;
    optional  bool  enableClientDrivenFavoritesLayer  = 2;
    optional  bool  enableMapboxAnnotationReplacement  = 3;
    optional  bool  allowBasemapReactionToFavoritesChange  = 4;
    optional  string  customLightStyleName  = 5;
    optional  string  customDarkStyleName  = 6;
    optional  bool  enableTimeOfDayMapState  = 7;
    optional  bool  enableMapStatePlaceHiding  = 8;
    optional  bool  enableFastGlEventQueue  = 9;
    optional  bool  accessRenderThreadViaBgThread  = 10;
    optional  bool  usingNextgenIcons  = 11;
    optional  bool  enableEagerSymbolLayoutCulling  = 12;
    optional  bool  enableTiltAndRotate  = 13;
    optional  bool  enableAutomaticTilt  = 14;
    optional  uint32  maxZoom  = 15;
    optional  bool  enableSatelliteLayerSwitcher  = 16;
    optional  bool  enableHeatmapLayerSwitcher  = 17;
    optional  bool  addHeatmapLayerOnStart  = 18;
    optional  bool  enableHeatmapDepthFix  = 19;
    optional  bool  enableVisualPlacesTray  = 20;
    optional  bool  enableStyleDrivenAnnotationAnimations  = 21;
    optional  bool  enableDelayedTileDeletion  = 22;
    optional  bool  delayedTileDeletionOnBgThread  = 23;
    optional  uint32  cpuMonitoringTickIntervalMs  = 24;
    optional  bool  enableTileUpdateBucketsOptimization  = 25;
    optional  bool  enableCameraMapStateProperties  = 26;
}

message SCMCLocalizedStringSet {
    optional  string  fallback  = 1;
    repeated  SCMCLocalizedStringSet_String  stringsArray  = 2;
}

message SCMCLocalizedStringSet_String {
    optional  string  locale  = 1;
    optional  string  text  = 2;
}

message SCMCRGBA {
    optional  float  red  = 1;
    optional  float  green  = 2;
    optional  float  blue  = 3;
    optional  float  alpha  = 4;
}

message SCMCustomLayerConfig {
    optional  bool  enableSmartBitmojiDiffing  = 1;
    optional  float  bitmojiDistanceThreshold  = 2;
    optional  float  minSecondsBetweenLabelUpdates  = 3;
    optional  float  viewportVisibilityBuffer  = 4;
    optional  bool  enableSymbolPlacementCache  = 5;
}

message SCMEAchievementModel {
    optional  string  id_p  = 1;
    optional  int64  timestampMs  = 2;
    optional  SCACHAchievementInfo  achievement  = 3;
}

message SCMEAddCheckinRequest {
    optional  double  lat  = 1;
    optional  double  lng  = 2;
    optional  double  radiusMeters  = 3;
    optional  string  checkinLocationId  = 4;
    optional  string  checkinStickerId  = 5;
    optional  string  customText  = 6;
    optional  int32  optionType  = 7;
    optional  string  locationCreatorUserId  = 8;
    optional  bool  ghostMode  = 9;
    optional  double  altitudeMeters  = 10;
    optional  SCMECheckinOptionRankingSignals  rankingSignals  = 11;
    optional  int32  sourceType  = 12;
}

message SCMEAddCheckinResponse {
    optional  string  statusId  = 1;
    optional  string  speechText  = 2;
    optional  SCMT1StickerID  sticker  = 3;
    optional  bool  showPassportNotification  = 4;
    optional  SCMEMyExplorerStatus  myNewStatus  = 5;
}

message SCMEAddExplorerStatusRequest {
    optional  SCMEExplorerStatusModel  statusModel  = 1;
}

message SCMEAddExplorerStatusResponse {
}

message SCMEAddPassportRequest {
    optional  SCMEPassportModel  passportModel  = 1;
    optional  string  userId  = 2;
}

message SCMEAddPassportResponse {
}

message SCMEAudioTrackVolume {
    optional  double  volume  = 1;
}

message SCMEBatchExplorerViewsRequest {
    optional  string  viewerId  = 1;
    repeated  SCMEBatchExplorerViewsRequest_Identifier  viewedStatusIdsArray  = 2;
}

message SCMEBatchExplorerViewsRequest_Identifier {
    optional  string  statusId  = 1;
    optional  string  userId  = 2;
    optional  int64  timestamp  = 3;
}

message SCMEBatchExplorerViewsResponse {
}

message SCMEBeatSyncQueryArgs {
    optional  int64  trackId  = 1;
    optional  SCMESelectedMusicMetadata  musicSyncMetadata  = 2;
}

message SCMEBeatSyncRule {
    optional  SCMESelectedMusicMetadata  musicMetadata  = 1;
    optional  uint64  maxOverallDurationMs  = 4;
    repeated  float  allowedPlaybackSpeedsArray  = 5[packed=true];
    repeated  SCMEMediaSyncPointRule  mediaRulesArray  = 6;
}

message SCMEBounceRule {
    optional  bool  easeInOut  = 1;
}

message SCMECheckin {
    optional  string  id_p  = 1;
    optional  double  lat  = 2;
    optional  double  lng  = 3;
    optional  double  radiusMeters  = 4;
    optional  int64  timestampMs  = 5;
    optional  SCMT1StickerID  sticker  = 6;
    optional  string  venueName  = 7;
    optional  string  venueType  = 8;
    optional  string  cityName  = 9;
    optional  string  provinceName  = 10;
    optional  string  countryName  = 11;
}

message SCMECheckinActionmojiOption {
    optional  string  id_p  = 1;
    optional  string  title  = 2;
    optional  int32  rank  = 3;
    repeated  SCMECheckinStickerOption  checkinStickersArray  = 4;
}

message SCMECheckinContextualOption {
    optional  string  id_p  = 1;
    optional  string  name  = 2;
    optional  int32  rank  = 3;
    repeated  SCMECheckinStickerOption  checkinStickersArray  = 4;
    repeated  string  friendUserIdsArray  = 5;
    optional  string  creatorUserId  = 6;
}

message SCMECheckinCustomOption {
    optional  string  id_p  = 1;
    optional  string  placeholder  = 2;
    optional  int32  rank  = 3;
    repeated  SCMECheckinStickerOption  checkinStickersArray  = 4;
    optional  string  prefix  = 5;
}

message SCMECheckinLocationCategorization {
    optional  string  superCategory  = 1;
    optional  string  category  = 2;
    optional  string  subCategory  = 3;
    optional  string  place  = 4;
    optional  string  iconURL  = 5;
}

message SCMECheckinLocationOption {
    optional  string  id_p  = 1;
    optional  string  name  = 2;
    optional  int32  rank  = 4;
    repeated  SCMECheckinStickerOption  checkinStickersArray  = 5;
    optional  SCMECheckinLocationCategorization  categorization  = 6;
    optional  string  locality  = 7;
    optional  int32  placetype  = 8;
}

message SCMECheckinLocationsConstraint {
    optional  double  centerLat  = 1;
    optional  double  centerLng  = 2;
    optional  double  radiusMeters  = 3;
    optional  int64  expirationTimestampMs  = 4;
    optional  double  targetAccuracyMeters  = 5;
}

message SCMECheckinModel {
    optional  string  id_p  = 1;
    optional  double  lat  = 2;
    optional  double  lng  = 3;
    optional  double  radiusMeters  = 4;
    optional  int64  timestampMs  = 5;
    optional  SCMT1StickerID  sticker  = 6;
    optional  string  checkinLocationId  = 7;
    optional  string  checkinStickerId  = 8;
    optional  string  venueName  = 9;
    repeated  SCMTLocality  localitiesArray  = 10;
    repeated  string  clusteredFriendUserIdsArray  = 11;
    optional  string  categoryId  = 12;
    optional  string  cityId  = 13;
    optional  string  countryId  = 14;
}

message SCMECheckinMoodOption {
    optional  string  id_p  = 1;
    optional  string  name  = 2;
    optional  int32  rank  = 3;
    repeated  SCMECheckinStickerOption  checkinStickersArray  = 4;
}

message SCMECheckinOptionContext {
    optional  bool  locationStickers  = 1;
    optional  bool  venueFilters  = 2;
    optional  bool  mapStatus  = 3;
}

message SCMECheckinOptionRankingSignals {
    optional  string  wifiSsid  = 1;
    optional  bool  isConnectedToWifi  = 2;
    repeated  SCMECheckinOptionRankingSignals_AvailableOption  availableOptionsArray  = 3;
    optional  int32  chosenOptionIndex  = 4;
    optional  int32  optionTapCount  = 5;
    optional  double  speedMetersPerSecond  = 6;
    optional  double  altitudeMeters  = 7;
}

message SCMECheckinOptionRankingSignals_AvailableOption {
    optional  string  optionId  = 1;
    optional  int32  optionType  = 2;
}

message SCMECheckinStickerOption {
    optional  string  id_p  = 1;
    optional  SCMT1StickerID  sticker  = 2;
    optional  int32  rank  = 3;
}

message SCMECondition {
    repeated  SCMEMediaCondition  mediaConditionsArray  = 1;
}

message SCMEConditionalRuleGroup {
    repeated  SCMESmartEditConditionalRules  conditionalRulesArray  = 1;
}

message SCMECreateStatusViewCountsRequest {
    optional  string  statusId  = 1;
    optional  string  userId  = 2;
}

message SCMECreateStatusViewCountsResponse {
}

message SCMEDIAImageSize {
    optional  uint32  width  = 1;
    optional  uint32  height  = 2;
}

message SCMEDeleteAllExplorerStatusRequest {
    optional  string  userId  = 1;
    optional  int64  timestamp  = 2;
}

message SCMEDeleteAllExplorerStatusResponse {
}

message SCMEDeleteCheckinOptionRequest {
    optional  string  id_p  = 1;
    optional  int32  type  = 2;
}

message SCMEDeleteCheckinOptionResponse {
}

message SCMEDeleteExplorerStatusRequest {
    optional  string  userId  = 1;
    optional  string  statusId  = 2;
    optional  string  language  = 3;
    optional  string  countryCode  = 4;
    optional  bool  isEmployee  = 5;
}

message SCMEDeleteExplorerStatusResponse {
    repeated  SCMEMyExplorerStatus  statusesArray  = 1;
}

message SCMEDeleteExplorerStatusTypeRequest {
    optional  string  userId  = 1;
    optional  int32  statusType  = 2;
}

message SCMEDeleteExplorerStatusTypeResponse {
}

message SCMEDurationValue {
    optional  uint64  durationMs  = 1;
    optional  bool  isInclusive  = 2;
}

message SCMEEditRule {
    optional  SCMEPlaybackRateRule  playbackRateRule  = 1;
    optional  SCMEBounceRule  bounceRule  = 2;
}

message SCMEExplorerFriendStatus {
    optional  string  status  = 1;
    repeated  SCMEExplorerFriendStatus_StatusData  statusDataArray  = 2;
    optional  double  zoom  = 3;
    optional  int32  statusType  = 4;
}

message SCMEExplorerFriendStatus_StatusData {
    optional  string  statusId  = 1;
    optional  int64  statusTimestampMs  = 2;
    optional  string  userId  = 3;
    repeated  SPCGPoint  locationsArray  = 4;
    optional  string  stickerId  = 5;
    optional  int32  displayStyle  = 6;
    optional  int32  animationStyle  = 7;
    optional  string  localityName  = 8;
    optional  SCMT1StickerID  sticker  = 9;
    optional  SCMTWorldEffectSet  worldEffect  = 10;
    optional  string  speechText  = 11;
    optional  string  placeId  = 12;
    optional  bool  isLive  = 13;
    optional  SCMEExplorerFriendStatus_StatusData_LiveCancellationInfo  liveCancellationInfo  = 14;
    optional  bool  hideInExplore  = 15;
}

message SCMEExplorerFriendStatus_StatusData_LiveCancellationInfo {
    optional  SPCGPoint  centerLocation  = 1;
    optional  double  radiusMeters  = 2;
    optional  int64  lifetimeMs  = 3;
}

message SCMEExplorerLastViewed {
    optional  string  viewerId  = 1;
    repeated  int64  lastViewed  = 2;
}

message SCMEExplorerMapStatus {
    optional  string  statusId  = 1;
    optional  int64  statusTimestampMs  = 2;
    optional  SPCGPoint  location  = 3;
    optional  double  zoom  = 4;
    optional  string  category  = 5;
    optional  string  title  = 6;
    optional  string  status  = 7;
    optional  string  emoji  = 8;
    optional  string  poiId  = 9;
    optional  SCMTThumbnail  poiThumbnail  = 10;
    optional  bool  isOnboarding  = 11;
    optional  SCMCRGBA  categoryColor  = 12;
    optional  SCMTWorldEffectSet  worldEffect  = 13;
    optional  string  deeplinkURL  = 14;
    optional  string  deeplinkDisplayText  = 15;
    optional  SCMCRGBA  deeplinkColor  = 16;
    optional  string  headline  = 17;
    optional  string  localityName  = 18;
    optional  string  placeId  = 19;
    optional  bool  isMapActivityCard  = 20;
    optional  string  miniId  = 21;
    optional  string  bitmojiStickerId  = 22;
}

message SCMEExplorerStatus {
    optional  SCMEExplorerFriendStatus  friendStatus  = 1;
    optional  SCMEExplorerMapStatus  mapStatus  = 2;
    optional  double  score  = 4;
    optional  int32  version  = 5;
}

message SCMEExplorerStatusModel {
    optional  string  statusId  = 1;
    optional  string  clusteringId  = 2;
    optional  string  userId  = 4;
    optional  int32  statusType  = 5;
    repeated  SCMEExplorerStatusModel_Location  locationsArray  = 6;
    repeated  string  userIdBlacklistArray  = 7;
    optional  int64  score  = 8;
    optional  int64  timestampMs  = 9;
    optional  int64  lifetimeMs  = 10;
    optional  bool  isDeleted  = 11;
    optional  string  viewerDedupeId  = 12;
    optional  string  posterDedupeId  = 13;
    optional  SCMCLocalizedStringSet  text  = 14;
    optional  SCMT1StickerID  sticker  = 15;
    optional  bool  employeeOnly  = 16;
    optional  string  speechText  = 17;
    optional  string  placeId  = 18;
}

message SCMEExplorerStatusModel_Location {
    optional  double  lat  = 1;
    optional  double  lng  = 2;
    optional  int64  timestampMs  = 3;
    repeated  SCMTLocality  localityArray  = 4;
    optional  SCMCLocalizedStringSet  place  = 5;
    optional  SCMCLocalizedStringSet  event  = 6;
}

message SCMEExplorerStatusQueue {
    optional  string  userId  = 1;
    repeated  SCMEExplorerStatusModel  queueArray  = 2;
    repeated  string  recentLocalitiesArray  = 3;
    repeated  int64  recentlyViewedFriendLocalities  = 4;
    optional  bool  isOnboarded  = 5;
}

message SCMEExplorerViews {
    optional  string  statusId  = 1;
    optional  string  userId  = 2;
    optional  int64  viewCount  = 3;
    repeated  string  viewerIdsArray  = 4;
}

message SCMEFlagCheckinOptionRequest {
    optional  string  id_p  = 1;
    optional  int32  type  = 2;
    optional  string  creatorUserId  = 3;
    optional  int32  feedbackType  = 4;
    optional  double  lat  = 5;
    optional  double  lng  = 6;
    optional  double  accuracy  = 7;
    optional  int32  rank  = 8;
    optional  string  feedbackValue  = 9;
    optional  VRZPlaceModeration  placeModeration  = 10;
}

message SCMEFlagCheckinOptionResponse {
}

message SCMEGetCheckinOptionsRequest {
    optional  double  lat  = 1;
    optional  double  lng  = 2;
    optional  double  radiusMeters  = 3;
    optional  bool  ghostMode  = 4;
    optional  string  experimentValue  = 5;
    optional  SCMECheckinOptionRankingSignals  rankingSignals  = 6;
}

message SCMEGetCheckinOptionsResponse {
    repeated  SCMECheckinLocationOption  checkinLocationsArray  = 1;
    optional  SCMECheckinLocationsConstraint  constraint  = 2;
    repeated  SCMECheckinLocationOption  extraCheckinLocationsArray  = 3;
    repeated  SCMECheckinMoodOption  checkinMoodsArray  = 4;
    repeated  SCMECheckinContextualOption  checkinContextualArray  = 5;
    optional  SCMECheckinCustomOption  checkinCustom  = 6;
    repeated  SCMECheckinCustomOption  checkinCustomsArray  = 7;
    optional  string  suggestedCheckinOptionId  = 8;
    repeated  SCMECheckinActionmojiOption  checkinActionmojisArray  = 9;
    repeated  SCMECheckinLocationOption  nonVenueLocationsArray  = 10;
    optional  SCMECheckinOptionContext  allowedCheckinLocationsContext  = 11;
    optional  SCMECheckinOptionContext  allowedExtraCheckinLocationsContext  = 12;
    optional  SCMECheckinOptionContext  allowedNonVenueLocationsContext  = 13;
}

message SCMEGetCheckinsRequest {
}

message SCMEGetCheckinsResponse {
    repeated  SCMECheckin  checkinsArray  = 4;
}

message SCMEGetExploreBadgeTimestampRequest {
    optional  string  userId  = 1;
}

message SCMEGetExploreBadgeTimestampResponse {
    optional  int64  badgeTimestampMs  = 1;
}

message SCMEGetExploreWebStatusesRequest {
}

message SCMEGetExploreWebStatusesResponse {
    repeated  SCMEExplorerMapStatus  statusesArray  = 1;
}

message SCMEGetExplorerStatusesRequest {
    optional  string  userId  = 1;
    optional  string  calloutId  = 2;
    repeated  double  friendIdsAndScores  = 3;
    optional  string  language  = 4;
    optional  string  countryCode  = 5;
    optional  bool  isNewMapUser  = 6;
    repeated  string  treatmentsArray  = 7;
    optional  bool  isEmployee  = 8;
}

message SCMEGetExplorerStatusesResponse {
    repeated  SCMEExplorerStatus  statusesArray  = 1;
    optional  double  pollingIntervalSeconds  = 2;
}

message SCMEGetFriendExplorerStatusesRequest {
    optional  string  friendId  = 1;
    optional  string  language  = 2;
}

message SCMEGetFriendExplorerStatusesResponse {
    optional  SCMEExplorerStatus  statuses  = 1;
}

message SCMEGetMapStatusesRequest {
    optional  string  userId  = 1;
    repeated  string  friendIdsArray  = 2;
    optional  string  language  = 3;
    optional  string  countryCode  = 4;
    optional  bool  isEmployee  = 5;
}

message SCMEGetMapStatusesResponse {
    repeated  SCMEExplorerFriendStatus  statusesArray  = 1;
}

message SCMEGetMyExplorerStatusesRequest {
    optional  string  userId  = 1;
    optional  string  language  = 2;
    optional  string  countryCode  = 3;
    repeated  string  treatmentsArray  = 4;
    optional  bool  isEmployee  = 5;
}

message SCMEGetMyExplorerStatusesResponse {
    repeated  SCMEMyExplorerStatus  statusesArray  = 1;
    optional  double  pollingIntervalSeconds  = 2;
}

message SCMEListSmartTemplateRequest {
    optional  int32  platform  = 1;
    optional  int32  cheeriosPath  = 2;
    optional  SCMEBeatSyncQueryArgs  beatSyncArgs  = 3;
}

message SCMEMarkerModel {
    optional  string  id_p  = 1;
    optional  double  lat  = 2;
    optional  double  lng  = 3;
    optional  double  radiusMeters  = 4;
    optional  int64  timestampMs  = 5;
    optional  string  venueName  = 9;
    repeated  SCMTLocality  localitiesArray  = 10;
    repeated  string  friendUserIdsArray  = 11;
    optional  string  creatorUserId  = 12;
}

message SCMEMediaCondition {
    optional  int32  mediaType  = 1;
    optional  SCMEMediaDurationCondition  durationRange  = 2;
}

message SCMEMediaDurationCondition {
    optional  SCMEDurationValue  lowerBound  = 1;
    optional  SCMEDurationValue  upperBound  = 2;
}

message SCMEMediaSyncPointRule {
    optional  SCMECondition  condition  = 1;
    optional  uint64  minDurationMs  = 2;
    optional  uint64  maxDurationMs  = 3;
    optional  uint64  maxNewSyncPointsAllowed  = 4;
}

message SCMEMediaTimeRange {
    optional  uint64  durationMs  = 1;
    optional  uint64  startOffsetMs  = 2;
    optional  int32  position  = 3;
    optional  uint64  intervalMsFromPreviousEnd  = 4;
}

message SCMEMyExplorerStatus {
    optional  SCMEExplorerStatus  status  = 1;
    optional  int64  viewCount  = 2;
    repeated  string  viewerIdsArray  = 3;
}

message SCMEOnboardingCompleteRequest {
    optional  int32  age  = 1;
    optional  string  registrationCountry  = 2;
}

message SCMEOnboardingCompleteResponse {
}

message SCMEPassportModel {
    optional  string  id_p  = 1;
    optional  int64  timestampMs  = 2;
    optional  SCMECheckinModel  checkinModel  = 3;
    optional  SCMEExplorerStatusModel  statusModel  = 4;
    optional  SCMETripModel  tripModel  = 5;
    optional  SCMEAchievementModel  achievementModel  = 6;
    optional  string  entryId  = 7;
}

message SCMEPlaybackRateRule {
    optional  float  playbackRateMultiplier  = 1;
}

message SCMERenderEffect {
    optional  SCMEAudioTrackVolume  audioTrackVolume  = 1;
}

message SCMERuleCondition {
    optional  GPBEmpty  alwaysTrue  = 1;
    optional  uint64  minimalMediaLengthMs  = 2;
}

message SCMESelectedMusicMetadata {
    optional  uint64  trackId  = 1;
    optional  uint64  trackDurationSec  = 2;
    optional  uint32  startOffsetMs  = 3;
    optional  uint64  beatPeriodMs  = 4;
    repeated  uint64  syncPointTimestampsMsArray  = 5[packed=true];
    optional  uint64  firstBeatMs  = 6;
    repeated  uint64  downbeatsTimestampsMsArray  = 7[packed=true];
    optional  bool  syncWithUpbeats  = 8;
}

message SCMESmartEditConditionalRules {
    optional  SCMERuleCondition  ruleCondition  = 1;
    optional  SCMETimingRule  timingRule  = 2;
    repeated  SCMEEditRule  editRulesArray  = 3;
}

message SCMESmartTemplate {
    optional  SCMESmartTemplateMetadata  templateMetadata  = 1;
    optional  SCMETemplateRules  templateRules  = 2;
}

message SCMESmartTemplateMetadata {
    optional  uint32  templateId  = 1;
    optional  string  displayNameId  = 2;
    optional  string  thumbnailURL  = 3;
}

message SCMETemplateRule {
    optional  int32  executionOrderPriority  = 1;
    optional  SCMEConditionalRuleGroup  conditionalRuleGroup  = 2;
    optional  SCMEBeatSyncRule  beatSyncRule  = 3;
}

message SCMETemplateRules {
    repeated  SCMETemplateRule  rulesArray  = 1;
}

message SCMETimeRangeRule {
    repeated  SCMEMediaTimeRange  timeRangesArray  = 1;
    optional  GPBEmpty  onlyOnce  = 2;
    optional  GPBEmpty  repeatInfinitely  = 3;
}

message SCMETimingRule {
    optional  GPBEmpty  wholeDuration  = 1;
    optional  SCMETimeRangeRule  timeRangeRule  = 2;
}

message SCMETripModel {
    optional  string  id_p  = 1;
    repeated  SCMTLocality  primaryLocalityArray  = 2;
    repeated  SCMTLocality  secondaryLocalityArray  = 3;
    repeated  SCMTLocality  tertiaryLocalityArray  = 4;
    optional  int64  totalLocalities  = 5;
    optional  int64  startTimestamp  = 6;
    optional  int64  endTimestamp  = 7;
}

message SCMGHClearOwnGhostTrailRequest {
}

message SCMGHClearOwnGhostTrailResponse {
}

message SCMGHGetGhostTrailRequest {
    optional  SCCOREUUID  userId  = 1;
}

message SCMGHGetGhostTrailResponse {
    repeated  SCMGHLocation  locationsArray  = 1;
}

message SCMGHLocation {
    optional  float  lat  = 1;
    optional  float  lng  = 2;
}

message SCMGIImageReference {
    optional  string  fullURL  = 1;
    optional  string  boltFullURL  = 2;
}

message SCMGLFlavor {
    optional  string  name  = 1;
    optional  uint64  version  = 2;
}

message SCMGLGetLayersRequest {
}

message SCMGLGetLayersResponse {
    repeated  SCMGLLayerDetails  layersArray  = 1;
    optional  uint32  refreshInSecs  = 2;
}

message SCMGLLayerDetails {
    optional  uint64  id_p  = 1;
    optional  uint64  version  = 2;
    optional  uint32  extent  = 3;
    repeated  SCMGLFlavor  flavorsArray  = 4;
    optional  uint32  minZoom  = 5;
    optional  uint32  maxZoom  = 6;
}

message SCMGPGetPlaylistRequest {
    optional  uint64  layerId  = 1;
    optional  string  flavor  = 2;
    optional  string  idString  = 3;
    optional  int32  responseType  = 4;
}

message SCMGPGetPlaylistResponse {
    optional  bytes  playlist  = 1;
}

message SCMGTCoordinate {
    optional  uint32  x  = 1;
    optional  uint32  y  = 2;
    optional  uint32  z  = 3;
}

message SCMGTFeature {
    optional  GPBStruct  properties  = 2;
    optional  int32  type  = 3;
    repeated  uint32  geometryArray  = 4[packed=true];
    optional  string  stringId  = 5;
    optional  uint64  uintId  = 6;
    optional  float  minZoom  = 7;
    optional  bytes  extension  = 15;
}

message SCMGTFeaturesResponse {
    repeated  SCMGTFeature  featuresArray  = 1;
    optional  uint64  cacheChecksum  = 2;
}

message SCMGTGetTileRequest {
    optional  SCMGTCoordinate  coordinate  = 1;
    repeated  SCMGTLayerRequest  layersArray  = 2;
}

message SCMGTGetTileResponse {
    repeated  SCMGTLayerResponse  layersArray  = 1;
}

message SCMGTINFCuisineType {
}

message SCMGTINFGeoPivotsList {
    repeated  SCMGTINFGeoPivotsList_GeoPivots  geosArray  = 1;
}

message SCMGTINFGeoPivotsList_GeoPivots {
    optional  SPCGPolygon  polygon  = 1;
    repeated  SCMGTINFGeoPivotsList_GeoPivots_PerfectForCount  perfectForCountArray  = 2;
}

message SCMGTINFGeoPivotsList_GeoPivots_PerfectForCount {
    optional  int32  perfectFor  = 1;
    optional  uint32  count  = 2;
}

message SCMGTINFInfatuationProperties {
    optional  string  name  = 1;
    optional  SCCOREUUID  verrazanoId  = 2;
    optional  string  website  = 3;
    optional  uint32  price  = 4;
    optional  VRZOpeningHours  openingHours  = 5;
    optional  SCMGTINFReviewProperties  review  = 6;
    optional  SCMGIImageReference  mapPinImage  = 7;
}

message SCMGTINFPerfectForType {
}

message SCMGTINFReviewProperties {
    optional  string  intro  = 1;
    optional  SCMGIImageReference  image  = 2;
    repeated  int32  perfectForsArray  = 3[packed=true];
    repeated  int32  cuisinesArray  = 4[packed=true];
    optional  string  reviewURL  = 5;
    optional  float  rating  = 6;
}

message SCMGTLayerRequest {
    optional  uint64  id_p  = 1;
    optional  uint64  version  = 2;
    optional  uint64  cacheChecksum  = 3;
    optional  string  flavor  = 4;
}

message SCMGTLayerResponse {
    optional  bool  cached  = 1;
    optional  SCMGTFeaturesResponse  features  = 2;
    optional  uint64  id_p  = 3;
    optional  uint64  tilesetVersion  = 4;
}

message SCMGTTMEventProperties {
    optional  string  id_p  = 1;
    optional  string  name  = 2;
    optional  SCMGIImageReference  image  = 3;
    optional  uint64  startTimeSeconds  = 4;
    optional  int32  category  = 5;
    optional  bool  isPopular  = 6;
    optional  string  URL  = 7;
}

message SCMGTTMTicketmasterProperties {
    optional  string  name  = 1;
    optional  SCCOREUUID  verrazanoId  = 2;
    repeated  int32  categoriesArray  = 3[packed=true];
    repeated  SCMGTTMEventProperties  eventsArray  = 4;
    optional  SCMGIImageReference  mapPinImage  = 5;
    optional  uint64  numEvents  = 6;
    optional  bool  isPopular  = 7;
}

message SCMGTYGetItemsRequest {
    optional  SPCGRect  bbox  = 1;
    optional  double  zoom  = 2;
    optional  uint64  layerId  = 3;
    optional  uint64  version  = 4;
    optional  string  flavor  = 5;
    optional  uint32  paginationStartIndex  = 6;
    optional  uint32  paginationNumItems  = 7;
}

message SCMGTYGetItemsResponse {
    optional  SCMGTYTicketmasterItems  ticketmasterItems  = 1;
    optional  SCMGTYInfatuationItems  infatuationItems  = 2;
    optional  bool  paginationHasMoreItems  = 3;
}

message SCMGTYGetMarkerDataRequest {
    optional  string  poiId  = 1;
    optional  int32  markerDataType  = 2;
}

message SCMGTYGetMarkerDataResponse {
    optional  SCMGTYLensData  lensData  = 1;
}

message SCMGTYInfatuationItems {
    repeated  int32  pivotsArray  = 1[packed=true];
    repeated  SCMGTYInfatuationVenue  venuesArray  = 2;
}

message SCMGTYInfatuationReview {
    optional  string  intro  = 1;
    optional  SCMGIImageReference  image  = 2;
    repeated  int32  perfectForsArray  = 3[packed=true];
    repeated  int32  cuisinesArray  = 4[packed=true];
    optional  string  reviewURL  = 5;
    optional  float  rating  = 6;
}

message SCMGTYInfatuationVenue {
    optional  string  name  = 1;
    optional  SCCOREUUID  verrazanoId  = 2;
    optional  uint32  price  = 3;
    optional  VRZOpeningHours  openingHours  = 4;
    optional  SCMGTYInfatuationReview  review  = 5;
    optional  SPCGPoint  location  = 6;
}

message SCMGTYLensCreator {
    optional  string  lensCreatorName  = 1;
    optional  string  profileId  = 2;
    optional  bool  isPro  = 3;
}

message SCMGTYLensData {
    optional  string  lensId  = 1;
    optional  string  title  = 2;
    optional  string  artist  = 3;
    optional  string  address  = 4;
    optional  string  description_p  = 5;
    optional  string  URL  = 6;
    optional  SCMGTYLensCreator  lensCreator  = 7;
    optional  string  secondaryLensId  = 8;
    optional  SCMGTYLensCreator  secondaryLensCreator  = 9;
    optional  string  thumbnailURL  = 10;
}

message SCMGTYMapMarkerCardInfo {
    optional  string  locale  = 1;
    optional  string  title  = 2;
    optional  string  description_p  = 3;
}

message SCMGTYMarkerDataStore {
    repeated  SCMGTYMapMarkerCardInfo  cardInfoArray  = 1;
    optional  SCMGTYLensData  lensData  = 2;
}

message SCMGTYTicketmasterEvent {
    optional  string  id_p  = 1;
    optional  string  venueId  = 2;
    optional  string  imageBoltURL  = 3;
    optional  string  name  = 4;
    optional  uint64  startTimeSeconds  = 5;
    optional  int32  category  = 6;
    optional  string  venueName  = 7;
    optional  bool  isPopular  = 8;
    optional  string  URL  = 9;
}

message SCMGTYTicketmasterItems {
    repeated  SCMGTYTicketmasterEvent  eventsArray  = 1;
    repeated  int32  pivotsArray  = 2[packed=true];
}

message SCMLCFriendLocationContext {
    optional  SCCOREUUID  friendId  = 1;
    repeated  SCMLCLocationContextCaption  locationContextCaptionsArray  = 2;
    optional  SCMLCLocationContextCaption  chatStatusCaption  = 3;
}

message SCMLCGetLocationContextRequest {
    repeated  SCCOREUUID  friendIdsArray  = 1;
}

message SCMLCGetLocationContextResponse {
    repeated  SCMLCFriendLocationContext  friendLocationContextsArray  = 1;
    optional  int32  nextRequestAfterSecs  = 3;
}

message SCMLCLocationContextCaption {
    optional  string  type  = 1;
    optional  string  text  = 2;
    optional  int32  effectiveSecsAgo  = 3;
    optional  int32  expireAfterSecs  = 4;
    optional  int32  priority  = 5;
    optional  SCMLCTimeZoneInfo  timeZoneInfo  = 6;
    optional  SCMLCNearbyFriendInfo  nearbyFriendInfo  = 7;
}

message SCMLCNearbyFriendInfo {
    optional  SCCOREUUID  nearbyFriendId  = 1;
}

message SCMLCTimeZoneInfo {
    optional  int32  utcOffsetSecs  = 1;
}

message SCMMapReadyConfig {
    optional  string  mapReadyTileCoverageSourceId  = 1;
    optional  uint32  mapReadyTileCoverageCountFactor  = 2;
    optional  bool  reportMapReadyRevamp  = 3;
    optional  bool  enableMapReadyRevamp  = 99;
}

message SCMPGetPinsRequest {
}

message SCMPGetPinsResponse {
    repeated  SCMPPin  pinsArray  = 1;
}

message SCMPPin {
    optional  SCCOREUUID  pinId  = 1;
    optional  SCCOREUUID  ownerId  = 2;
    optional  float  lat  = 3;
    optional  float  lng  = 4;
    optional  string  title  = 5;
}

message SCMPSavePinRequest {
    optional  SCMPPin  pin  = 1;
}

message SCMPSavePinResponse {
    optional  bool  isSaved  = 1;
}

message SCMParticleEffectsConfig {
    optional  bool  enableNativeParticleEffects  = 1;
    optional  bool  enableNativeParticleFetching  = 2;
    optional  uint32  particleEffectsDefaultFps  = 3;
}

message SCMSGetViewportInfoRequest {
    optional  SPCGRect  bbox  = 1;
    optional  double  zoom  = 2;
}

message SCMSGetViewportInfoResponse {
    optional  SCMSWeather  weather  = 1;
    optional  SCMTWorldEffectSet  worldEffect  = 2;
    optional  SCWTimeZone  timeZone  = 3;
    optional  SCMSLocality  locality  = 4;
    optional  int64  throttleMs  = 5;
}

message SCMSLocality {
    optional  string  localizedLocality  = 1;
    optional  SCCOREUUID  id_p  = 2;
}

message SCMSWeather {
    optional  int32  condition  = 1;
    optional  float  temperatureF  = 2;
}

message SCMT1Action {
    optional  int32  actionId  = 1;
    optional  string  subtype  = 2;
    optional  SCMT1ActionTiming  timing  = 3;
    optional  SCMT1StickerID  stickerId  = 4;
    optional  double  confidence  = 5;
    optional  bool  isReversed  = 6;
    optional  SCMT1Constrain  constrain  = 7;
    optional  int32  clusteringPolicy  = 8;
    optional  bool  shouldSelectForLogging  = 9;
    optional  string  clusterId  = 10;
    optional  string  place  = 11;
    optional  string  event  = 12;
    optional  SCMCLocalizedStringSet  placeName  = 13;
    optional  SCMCLocalizedStringSet  eventName  = 14;
    optional  SCMT1ActionTypeID  typeId  = 15;
    optional  int32  priority  = 16;
    optional  string  venueId  = 17;
    repeated  SCMT1StickerDynamicElement  dynamicElementsArray  = 18;
}

message SCMT1ActionDefinition {
    optional  int32  actionId  = 1;
    repeated  SCMT1NonClusterableStickerDefinition  nonClusterableStickerArray  = 2;
    repeated  SCMT1ClusterableStickerDefinition  clusterableStickerArray  = 3;
    optional  int64  duration  = 4;
    optional  int64  lockDuration  = 5;
    optional  int32  clusteringPolicy  = 6;
    optional  float  spaceConstrainRadius  = 7;
    optional  bool  employeeOnly  = 8;
    optional  bool  devOnly  = 9;
    optional  string  description_p  = 10;
    optional  string  subtype  = 11;
    optional  SCMT1ActionTiming  timing  = 12;
    optional  SCMT1ActionTypeID  typeId  = 15;
}

message SCMT1ActionTiming {
    optional  int64  effective  = 1;
    optional  int64  expiration  = 2;
    optional  int64  lock  = 3;
}

message SCMT1ActionTypeID {
    optional  int64  id_p  = 1;
    optional  string  name  = 2;
}

message SCMT1ActionsDefinition {
    repeated  SCMT1ActionDefinition  actionDefinitionArray  = 1;
}

message SCMT1Asset {
    optional  int32  id_p  = 1;
    optional  int32  type  = 2;
    optional  string  name  = 3;
    optional  int32  status  = 4;
    optional  string  leftId  = 5;
    optional  string  rightId  = 6;
    optional  bool  hasShadow  = 7;
    optional  string  URL  = 8;
    optional  bool  isMotion  = 9;
    optional  bool  isClusterable  = 10;
    optional  bool  isNonClusterable  = 11;
    optional  bool  isUnsafeToAutoAssign  = 12;
}

message SCMT1AssetIdWithProbability {
    optional  int32  assetId  = 1;
    optional  double  probability  = 2;
}

message SCMT1AssetWithProbability {
    optional  SCMT1Asset  asset  = 1;
    optional  double  probability  = 2;
}

message SCMT1ClusterableStickerDefinition {
    optional  string  leftId  = 1;
    optional  string  rightId  = 2;
    optional  string  description_p  = 3;
    optional  double  probability  = 4;
}

message SCMT1Constrain {
    optional  bool  isSpaceConstrained  = 1;
    optional  float  lat  = 2;
    optional  float  lng  = 3;
    optional  float  radius  = 4;
    optional  bool  employeeOnly  = 5;
    optional  bool  devOnly  = 6;
}

message SCMT1GameElement {
    optional  int32  score  = 1;
}

message SCMT1LocalTime {
    optional  int32  year  = 1;
    optional  int32  month  = 2;
    optional  int32  day  = 3;
    optional  int32  hour  = 4;
    optional  int32  minute  = 5;
    optional  int32  second  = 6;
    optional  int32  millisecond  = 7;
}

message SCMT1MotionActionDefinition {
    optional  int32  actionId  = 1;
    repeated  SCMT1StickerPair  stickerPairArray  = 2;
    repeated  SCMT1ClusterableStickerDefinition  clusterableStickerArray  = 3;
    optional  int64  duration  = 4;
    optional  int64  lockDuration  = 5;
    optional  int32  clusteringPolicy  = 6;
    optional  float  spaceConstrainRadius  = 7;
    optional  bool  employeeOnly  = 8;
    optional  bool  devOnly  = 9;
    optional  string  description_p  = 10;
    optional  string  subtype  = 11;
    optional  SCMT1ActionTiming  timing  = 12;
    optional  SCMT1ActionTypeID  typeId  = 15;
}

message SCMT1MotionActionsDefinition {
    repeated  SCMT1MotionActionDefinition  actionDefinitionArray  = 1;
}

message SCMT1NonClusterableStickerDefinition {
    optional  string  stickerId  = 1;
    optional  string  description_p  = 2;
    optional  bool  shadow  = 3;
    optional  double  probability  = 4;
}

message SCMT1Poi {
    optional  SCMCLocalizedStringSet  name  = 1;
    optional  double  lat  = 2;
    optional  double  lng  = 3;
    optional  string  type  = 4;
}

message SCMT1PoiCollection {
    repeated  SCMT1Poi  poisArray  = 1;
}

message SCMT1ResolvedTypeDef {
    optional  SCMT1TypeDef  typeDef  = 1;
    repeated  SCMT1AssetWithProbability  assetProbabilitiesArray  = 2;
}

message SCMT1Sticker {
    optional  SCMT1StickerID  stickerId  = 1;
    optional  SCMT1ActionTiming  timing  = 2;
    optional  SCMT1Constrain  constrain  = 3;
    optional  int32  clusteringPolicy  = 4;
    optional  int64  actionId  = 5;
    optional  string  clusterId  = 6;
    repeated  SCMT1StickerDynamicElement  dynamicElementsArray  = 7;
    optional  double  transparency  = 8;
    optional  SCCOREUUID  vzVenueId  = 9;
    repeated  SCMT1ActionTypeID  typeIdArray  = 15;
}

message SCMT1StickerDynamicElement {
    optional  int32  originX  = 1;
    optional  int32  originY  = 2;
    optional  SCMT1GameElement  gameContent  = 3;
    optional  int32  bottomRightX  = 4;
    optional  int32  bottomRightY  = 5;
    optional  bool  drawOnNonClusteredSticker  = 6;
}

message SCMT1StickerID {
    optional  string  nonClusterableId  = 1;
    optional  string  clusterableLeftId  = 2;
    optional  string  clusterableRightId  = 3;
    optional  bool  shadow  = 4;
}

message SCMT1StickerPair {
    optional  string  headingEastStickerId  = 1;
    optional  string  headingWestStickerId  = 2;
    optional  bool  shadow  = 3;
}

message SCMT1Type {
    optional  int64  id_p  = 1;
    optional  string  name  = 2;
    optional  SCMT1ActionTiming  timing  = 3;
    optional  SCMT1Constrain  constrain  = 4;
    optional  string  place  = 5;
    optional  string  event  = 6;
    optional  SCMCLocalizedStringSet  placeName  = 7;
    optional  SCMCLocalizedStringSet  eventName  = 8;
    optional  string  venueId  = 9;
}

message SCMT1TypeDef {
    optional  int32  id_p  = 1;
    optional  string  name  = 2;
    optional  string  description_p  = 3;
    optional  int32  status  = 4;
    optional  int32  permissions  = 5;
    optional  int64  validDuration  = 6;
    optional  int64  lockDuration  = 7;
    optional  int32  clusteringPolicy  = 8;
    optional  SCMT1LocalTime  startTime  = 9;
    optional  SCMT1LocalTime  endTime  = 10;
    optional  bool  isEnabled  = 11;
    optional  bool  isDarkTest  = 12;
    optional  int32  propPriority  = 13;
    optional  int32  propCondition  = 14;
    optional  string  effectId  = 15;
    optional  int32  effectPriority  = 16;
    optional  string  effectURL  = 17;
    repeated  string  tagsArray  = 18;
    repeated  string  categoryIdsArray  = 19;
    optional  bool  effectClusterOnly  = 20;
    repeated  int32  assetIdsArray  = 99[packed=true];
    repeated  SCMT1AssetIdWithProbability  assetIdProbabilitiesArray  = 100;
}

message SCMT1TypeDefinition {
    optional  int32  id_p  = 1;
    repeated  SCMT1NonClusterableStickerDefinition  nonClusterableStickerArray  = 2;
    repeated  SCMT1ClusterableStickerDefinition  clusterableStickerArray  = 3;
    optional  string  name  = 4;
    optional  string  description_p  = 5;
    optional  int64  duration  = 6;
    optional  int64  lockDuration  = 7;
    optional  float  spaceConstrainRadius  = 8;
    optional  int32  clusteringPolicy  = 9;
}

message SCMT1Weather {
    optional  int32  condition  = 1;
    optional  float  temperatureF  = 2;
}

message SCMTActionSticker {
    optional  string  actionStickerId  = 1;
    optional  string  actionId  = 2;
    optional  int64  actionStickerValidUntil  = 3;
    optional  int64  actionStickerLockedUntil  = 4;
    optional  double  actionConfidence  = 5;
    optional  int64  actionStickerEffectiveTime  = 6;
    optional  string  actionSubtype  = 7;
    optional  bool  allowedInCluster  = 8;
    optional  string  clusterableStickerId  = 9;
    optional  string  nonClusterableStickerId  = 10;
    optional  string  clusterableFacingLeftStickerId  = 11;
    optional  string  clusterableFacingRightStickerId  = 12;
    optional  bool  nonClusterableStickerIdSupportsShadow  = 15;
    optional  bool  devOnly  = 16;
    optional  bool  employeeOnly  = 17;
    optional  int32  clusteringPolicy  = 18;
    optional  float  actionLat  = 19;
    optional  float  actionLng  = 20;
    optional  float  actionRadiusMeters  = 21;
    optional  bool  isSpaceConstrained  = 22;
}

message SCMTAddGameMarkersRequest {
    repeated  SCMTGameMarkerEntry  markersArray  = 1;
}

message SCMTAddGameMarkersResponse {
    repeated  SCMTGameMarkerEntry  markersArray  = 1;
}

message SCMTArchivedImageMediaInfo {
    optional  string  mediaURL  = 1;
}

message SCMTArchivedMediaInfo {
    optional  SCMTStreamingMediaInfo  streamingInfo  = 1;
    optional  SCMTArchivedImageMediaInfo  imageInfo  = 2;
}

message SCMTBatchUserLocationRequest {
    repeated  SCMTLocationUpdate  locationUpdateArray  = 1;
    optional  SCMTDeviceData  deviceData  = 2;
    repeated  string  bleBeaconIdArray  = 3;
    optional  int64  sequenceNumber  = 4;
    optional  bool  ghostMode  = 5;
    optional  SCMTKalmanData  locationKalmanData  = 6;
    optional  bool  isEmployee  = 7;
    optional  bool  hasBirthday  = 8;
    optional  int64  birthday  = 9;
    optional  bool  isBirthday  = 10;
    optional  string  username  = 11;
    optional  SCMTSpectaclesInfo  spectaclesInfo  = 12;
    optional  int32  retention  = 15;
    optional  SCMTGDPRSettings  gdprSettings  = 16;
    optional  string  cognacAppId  = 17;
}

message SCMTBatchUserLocationResponse {
    optional  int32  errorCode  = 1;
    optional  int64  assignedSequenceNumber  = 4;
    optional  SCMTFriendLocation  currentLocation  = 5;
    optional  SCMT1Action  action  = 6;
    optional  double  nextRequestAfterSecs  = 10;
}

message SCMTCanRequestLocationRequest {
    optional  string  friendId  = 1;
}

message SCMTCanRequestLocationResponse {
    optional  bool  canRequestLocation  = 1;
    optional  bool  hideRequestButton  = 2;
}

message SCMTDeleteShareLocationPreferencesRequest {
}

message SCMTDeleteShareLocationPreferencesResponse {
    optional  int32  errorCode  = 1;
}

message SCMTDeviceData {
    optional  bool  isBackgrounded  = 1;
    optional  float  batteryLevel  = 2;
    optional  bool  devicePluggedIn  = 3;
    optional  bool  headphoneOutput  = 4;
    optional  string  wifiSsid  = 5;
    optional  bool  isOtherAudioPlaying  = 6;
}

message SCMTDirectRenderInfo {
    optional  SCMTPoint  anchorPoint  = 1;
    optional  double  heightToWidthRatio  = 2;
    optional  int32  friendCollisionBehavior  = 3;
}

message SCMTFeatureInfo {
    optional  int32  type  = 1;
    optional  string  name  = 2;
    optional  SCMTPointInfo  pointInfo  = 3;
    optional  SCMTLineInfo  lineInfo  = 4;
    optional  SCMTPolygonInfo  polygonInfo  = 5;
    repeated  string  customValue  = 6;
}

message SCMTFeatureRequest {
    optional  int32  featureType  = 1;
    optional  double  maxDistance  = 2;
    optional  bool  returnAll  = 3;
    optional  uint32  maxFeatures  = 4;
}

message SCMTFriendCluster {
    optional  SCMTImage  prop  = 1;
    optional  SCMTImage  floor  = 2;
    optional  float  centerLat  = 3;
    optional  float  centerLng  = 4;
    repeated  SCMTFriendLocation  friendLocationArray  = 5;
    optional  SCMTWorldEffectSet  worldEffect  = 6;
    optional  string  clusterId  = 7;
}

message SCMTFriendClusterIds {
    repeated  string  friendClusterIdsArray  = 1;
}

message SCMTFriendClustersRequest {
    optional  string  language  = 1;
    optional  float  lat  = 2;
    optional  float  lng  = 3;
    repeated  string  bleBeaconIdArray  = 4;
    optional  string  countryCode  = 5;
    optional  string  diffBaseId  = 6;
}

message SCMTFriendClustersResponse {
    repeated  SCMTFriendCluster  friendClusterArray  = 1;
    optional  int32  s2CellLevel  = 2;
    optional  int64  s2CellApproximateLength  = 3;
    optional  int32  errorCode  = 4;
    repeated  SCMTMapPoint  pointArray  = 5;
    optional  string  previousDiffBaseId  = 6;
    optional  string  diffBaseId  = 7;
    repeated  string  removedFriendClusterIdsArray  = 8;
    optional  double  nextRequestAfterSecs  = 10;
}

message SCMTFriendLocation {
    optional  string  userId  = 1;
    optional  float  lat  = 2;
    optional  float  lng  = 3;
    optional  int32  sharingMode  = 4;
    optional  int64  timestamp  = 5;
    optional  int64  s2CellId  = 6;
    optional  string  actionStickerId  = 7;
    optional  string  locality  = 8;
    optional  bool  tombstone  = 9;
    optional  string  nonClusterableStickerId  = 12;
    optional  string  clusterableFacingLeftStickerId  = 13;
    optional  string  clusterableFacingRightStickerId  = 14;
    optional  bool  nonClusterableStickerIdSupportsShadow  = 15;
    optional  SCMT1Action  action  = 17;
    repeated  SCMT1Type  actionTypeArray  = 18;
    optional  SCMT1Sticker  typeSticker  = 19;
    optional  float  horizontalAccuracyMeters  = 20;
    optional  SCMTFriendLocationVenue  venue  = 21;
    optional  SCMTFriendStatus  friendStatus  = 22;
    optional  string  subsubtitle  = 23;
    repeated  string  localityPiecesArray  = 24;
    optional  bool  isLiveLocation  = 25;
    optional  int64  liveSessionExpirationMs  = 26;
    optional  SCCOREUUID  liveSessionId  = 27;
    optional  bool  isLiveSessionIndefinite  = 28;
}

message SCMTFriendLocationVenue {
    optional  string  venueId  = 1;
    optional  string  name  = 2;
}

message SCMTFriendLocationsRequest {
    optional  float  lat  = 1;
    optional  float  lng  = 2;
    optional  string  continuationId  = 3;
    optional  int32  requestedChunkSize  = 4;
    optional  string  language  = 5;
    repeated  SCMTLastKnownLocation  lastKnownLocationArray  = 6;
}

message SCMTFriendLocationsResponse {
    repeated  SCMTFriendLocation  friendLocationArray  = 1;
    optional  int64  s2CellId  = 2;
    optional  string  continuationId  = 3;
}

message SCMTFriendStatus {
    optional  string  statusId  = 1;
    optional  string  speechText  = 2;
}

message SCMTGDPRSettings {
    optional  int32  age  = 1;
    optional  int32  ghostMode  = 2;
    optional  int32  onboardedMap  = 3;
    optional  string  registrationCountryCode  = 4;
    optional  string  currentCountryCode  = 5;
}

message SCMTGDPRSettings_GhostMode {
}

message SCMTGDPRSettings_OnboardedMap {
}

message SCMTGameMarkerEntry {
    optional  string  id_p  = 1;
    optional  float  lat  = 2;
    optional  float  lng  = 3;
    optional  float  unlockableRadius  = 4;
    optional  int32  typeId  = 5;
    optional  int32  status  = 6;
    optional  string  reasonForRemoval  = 7;
    optional  string  source  = 8;
    optional  string  category  = 9;
}

message SCMTGameMarkerInfo {
    optional  int32  pointValue  = 1;
    optional  float  unlockableRadiusMeters  = 2;
    optional  int32  eggColor  = 3;
}

message SCMTGameTile {
    repeated  SCMTPointOfInterest  poisArray  = 1;
    repeated  SCMTGameTile_GameTileInput  gameTileInputArray  = 2;
}

message SCMTGameTileSetInfo {
}

message SCMTGameTile_GameTileInput {
    optional  SCMTGameMarkerEntry  gameMarkerEntry  = 1;
    optional  float  minZoom  = 2;
}

message SCMTGeoBox {
    optional  SCMTGeoPoint  geoBottomLeft  = 1;
    optional  SCMTGeoPoint  geoTopRight  = 2;
}

message SCMTGeoPoint {
    optional  double  lat  = 1;
    optional  double  lon  = 2;
}

message SCMTGetAllGameMarkersRequest {
}

message SCMTGetAllGameMarkersResponse {
    repeated  SCMTGameMarkerEntry  markersArray  = 1;
}

message SCMTGetGameMarkersByBoundedBoxRequest {
    optional  SPCGRect  boundedBox  = 1;
}

message SCMTGetGameMarkersByBoundedBoxResponse {
    repeated  SCMTGameMarkerEntry  markersArray  = 1;
}

message SCMTGetGameMarkersRequest {
    repeated  string  idsArray  = 1;
}

message SCMTGetGameMarkersResponse {
    repeated  SCMTGameMarkerEntry  markersArray  = 1;
}

message SCMTGetLatestMapTilesRequest {
    repeated  SCMTTileId  tileIdsArray  = 1;
    optional  string  flavor  = 2;
}

message SCMTGetLatestMapTilesResponse {
    repeated  SCMTTileSetInfo  tileSetInfosArray  = 1;
    repeated  SCMTTile  tilesArray  = 2;
    optional  int32  lifetimeSec  = 3;
}

message SCMTGetLatestTileSetRequest {
    optional  string  flavor  = 1;
    optional  int64  epoch  = 3;
}

message SCMTGetLatestTileSetResponse {
    optional  SCMTRenderConfig  renderConfig  = 3;
    repeated  SCMTTileSetInfo  tileSetInfosArray  = 4;
    optional  int32  lifetimeSec  = 5;
}

message SCMTGetMapStoriesRequest {
    optional  SCMTTileSetId  tileSetId  = 1;
    optional  SCMTPoint  location  = 2;
    optional  string  experimentValue  = 100;
}

message SCMTGetMapStoriesResponse {
    repeated  SCMTGetMapStoriesResponse_Story  storiesArray  = 1;
}

message SCMTGetMapStoriesResponse_Story {
    optional  string  id_p  = 1;
    optional  SCMTPoint  latlng  = 2;
    optional  double  zoom  = 3;
    optional  double  timestampMs  = 4;
    optional  int32  storyType  = 5;
    optional  string  titleFmt  = 6;
    optional  string  subtitleFmt  = 7;
    optional  SCMTGeoBox  boundingBox  = 8;
    optional  SCMTThumbnail  thumbnail  = 9;
    optional  SCStoryManifest  manifest  = 10;
}

message SCMTGetMapSupplementaryInfoRequest {
    optional  SCMTPoint  userLocation  = 1;
    optional  string  locale  = 2;
}

message SCMTGetMapSupplementaryInfoResponse {
    repeated  SCMTMapAnnouncement  announcementsArray  = 1;
}

message SCMTGetMapTilesMetadataRequest {
    repeated  SCMTTileId  tileIdsArray  = 1;
}

message SCMTGetMapTilesMetadataResponse {
    repeated  SCMTTileMetadata  metadataArray  = 1;
}

message SCMTGetMapTilesRequest {
    repeated  SCMTGetMapTilesRequest_TileCollection  tileCollectionsArray  = 4;
}

message SCMTGetMapTilesRequest_TileCollection {
    optional  SCMTTileSetId  tileSetId  = 1;
    repeated  SCMTTileId  tileIdsArray  = 2;
}

message SCMTGetMapTilesResponse {
    repeated  SCMTTile  tilesArray  = 1;
}

message SCMTGetMarkerDataRequest {
    optional  string  poiId  = 1;
    optional  int32  markerDataType  = 2;
}

message SCMTGetMarkerDataResponse {
    optional  SCMTLensData  lensData  = 1;
}

message SCMTGetOnboardingViewStateRequest {
    optional  SCMTPoint  location  = 1;
    optional  double  zoom  = 2;
    optional  SCMTGeoBox  viewport  = 3;
    repeated  SCMTGeoBox  reservedBoundingBoxArray  = 4;
}

message SCMTGetOnboardingViewStateResponse {
    repeated  SCMTPointOfInterest  poisArray  = 1;
    optional  double  zoom  = 3;
    optional  SCMTPoint  center  = 4;
    optional  SCMTTileSetId  tileSetId  = 5;
}

message SCMTGetPlaylistRequest {
    optional  SCMTGeoPoint  requestGeoPoint  = 2;
    optional  double  zoomLevel  = 3;
    optional  SCMTTileSetId  tileSetId  = 11;
    optional  double  radiusMeters  = 13;
    optional  double  maximumFuzzRadius  = 14;
    optional  string  playlistStyle  = 15;
    optional  bool  wantThumbnail  = 17;
}

message SCMTGetPlaylistResponse {
    optional  SCStoryManifest  manifest  = 1;
    optional  SCMTThumbnail  thumbnail  = 2;
}

message SCMTGetPoiPlaylistRequest {
    optional  SCMTTileSetId  tileSetId  = 1;
    optional  string  id_p  = 2;
    optional  bool  wantThumbnail  = 7;
    optional  GPBBoolValue  allowLatestTilesetFallback  = 8;
}

message SCMTGetPoiPlaylistResponse {
    optional  SCStoryManifest  manifest  = 1;
    optional  SCMTThumbnail  thumbnail  = 2;
}

message SCMTGetPoiSharePlaylistRequest {
    optional  string  poiId  = 1;
}

message SCMTGetPoiSharePlaylistResponse {
    optional  int32  status  = 1;
    optional  SCStoryManifest  manifest  = 2;
    optional  SCMTThumbnail  thumbnail  = 3;
    optional  SCLocalizedStringSet  locality  = 4;
    optional  SCMTGeoPoint  coordinate  = 5;
    optional  double  zoom  = 6;
}

message SCMTGetSearchCardsRequest {
    optional  SCMTTileSetId  tileSetId  = 1;
    optional  SCMTPoint  userLocation  = 2;
    optional  SCMTPoint  mapLocation  = 3;
    optional  double  zoom  = 4;
    optional  string  query  = 6;
    optional  SCMTGeoBox  viewport  = 10;
    optional  string  experimentValue  = 11;
}

message SCMTGetSearchCardsResponse {
    optional  SCMTSearchCards  searchCards  = 1;
}

message SCMTGetShareLocationPreferencesRequest {
}

message SCMTGetShareLocationPreferencesResponse {
    optional  SCMTShareLocationPreferences  preferences  = 1;
    optional  bool  onboarded  = 2;
    optional  int32  errorCode  = 3;
    optional  int64  ghostModeRemainingDurationMillis  = 4;
    optional  bool  isBlacklistRolledBack  = 5;
}

message SCMTHeatTileSetInfo {
    optional  double  heatFromTime  = 1;
    optional  double  heatToTime  = 2;
    optional  double  lastSnapTime  = 3;
    optional  int32  totalHeatmapPoints  = 4;
    optional  SCMTHeatmapGradient  heatmapGradient  = 5;
    optional  float  heatNormalizationPeak  = 6;
    optional  float  fuzzNormalizationPeak  = 7;
    optional  float  heatPointBaseRadius  = 8;
}

message SCMTHeatmapConfig {
    optional  SCMTHeatmapGradient  heatmapGradient  = 1;
    optional  float  heatNormalizationPeak  = 2;
    optional  float  fuzzNormalizationPeak  = 3;
    optional  float  heatPointBaseRadius  = 4;
}

message SCMTHeatmapFuzzPoint {
    optional  SCMTPoint  point  = 1;
    optional  double  initialZoomLevel  = 2;
    optional  double  weight  = 4;
}

message SCMTHeatmapGradient {
    repeated  SCMCRGBA  colorsArray  = 1;
    repeated  float  transitionLocationsArray  = 2[packed=true];
}

message SCMTHeatmapPoint {
    optional  SCMTPoint  point  = 1;
    optional  double  weight  = 4;
}

message SCMTHeatmapStyleRequest {
    optional  int32  heatmapStyle  = 1;
    optional  string  styleEtag  = 2;
}

message SCMTHeatmapStyleResponse {
    optional  SCMTHeatmapConfig  heatmapConfig  = 1;
    optional  string  styleEtag  = 2;
    optional  bool  styleNotModified  = 3;
}

message SCMTHeatmapTile {
    repeated  SCMTHeatmapPoint  pointsArray  = 1;
    repeated  SCMTHeatmapFuzzPoint  fuzzedPointsArray  = 2;
    optional  double  maximumFuzzRadius  = 4;
}

message SCMTImage {
    optional  string  oldAndroidHash  = 1;
    optional  string  URL  = 2;
}

message SCMTInternalGetAllPoisRequest {
    optional  SCMTTileSetId  tileSetId  = 1;
}

message SCMTInternalGetAllPoisResponse {
    repeated  SCMTPointOfInterest  poisArray  = 1;
}

message SCMTInternalGetPassportPreferencesRequest {
    optional  string  userId  = 1;
}

message SCMTInternalGetPassportPreferencesResponse {
    optional  SCMTPassportPreferences  passportPreferences  = 1;
}

message SCMTInternalGetShareLocationPreferencesRequest {
    optional  string  userId  = 1;
}

message SCMTInternalGetShareLocationPreferencesResponse {
    optional  SCMTShareLocationPreferences  preferences  = 1;
}

message SCMTInternalGetSnapsRequest {
    optional  SCMTTileSetId  tileSetId  = 1;
    optional  SCMTGeoBox  viewport  = 2;
}

message SCMTInternalGetSnapsResponse {
    repeated  SCMTMapSnapLite  snapsArray  = 1;
}

message SCMTKalmanData {
    optional  float  lat  = 1;
    optional  float  lng  = 2;
    optional  float  speed  = 3;
    optional  float  heading  = 4;
    optional  float  horizontalAccuracy  = 5;
    optional  int32  numberOfPoints  = 6;
    optional  float  speedAccuracy  = 7;
    repeated  SCMTLocationUpdate  locationUpdatesArray  = 8;
    optional  int32  algorithmVersion  = 9;
}

message SCMTLastKnownLocation {
    optional  string  userId  = 1;
    optional  int64  timestamp  = 2;
}

message SCMTLensCreator {
    optional  string  lensCreatorName  = 1;
    optional  string  profileId  = 2;
    optional  bool  isPro  = 3;
}

message SCMTLensData {
    optional  string  lensId  = 1;
    optional  string  title  = 2;
    optional  string  artist  = 3;
    optional  string  address  = 4;
    optional  string  description_p  = 5;
    optional  string  URL  = 6;
    optional  SCMTLensCreator  lensCreator  = 7;
    optional  string  secondaryLensId  = 8;
    optional  SCMTLensCreator  secondaryLensCreator  = 9;
    optional  string  thumbnailURL  = 10;
}

message SCMTLineInfo {
    optional  double  distance  = 1;
    optional  double  bearing  = 2;
    optional  double  direction  = 3;
    optional  double  likelyDistance  = 4;
}

message SCMTLocality {
    optional  string  language  = 1;
    optional  string  locality  = 2;
    optional  SCMapsAddress  address  = 3;
}

message SCMTLocationFuzzingInfo {
    optional  int32  s2CellLevel  = 1;
    optional  int64  s2CellSnaps  = 2;
    optional  double  fuzzDistance  = 3;
    optional  double  initialZoom  = 4;
}

message SCMTLocationRequestFeedbackRequest {
    optional  string  friendId  = 1;
    optional  int32  feedback  = 2;
}

message SCMTLocationRequestFeedbackResponse {
}

message SCMTLocationUpdate {
    optional  float  lat  = 1;
    optional  float  lng  = 2;
    optional  float  altitude  = 3;
    optional  float  horizontalAccuracy  = 4;
    optional  float  verticalAccuracy  = 5;
    optional  SCMTMotionData  motionData  = 6;
    optional  int64  timestamp  = 7;
    optional  bool  gpsReset  = 8;
}

message SCMTMapAnnouncement {
    optional  string  id_p  = 1;
    optional  SPCGPoint  destinationLocation  = 2;
    optional  double  destinationZoom  = 3;
    optional  int64  displayDurationMs  = 4;
    optional  string  categoryDisplayString  = 5;
    optional  SCMCRGBA  categoryStringColor  = 6;
    optional  string  title  = 7;
    optional  string  emojiIcon  = 8;
}

message SCMTMapPoint {
    optional  float  lat  = 1;
    optional  float  lng  = 2;
    optional  string  name  = 3;
    optional  string  locality  = 4;
    optional  SCMT1Sticker  typeSticker  = 5;
}

message SCMTMapSnap {
    optional  string  id_p  = 1;
    optional  string  storyId  = 2;
    optional  double  timestamp  = 3;
    optional  double  lat  = 4;
    optional  double  lng  = 5;
    optional  bool  shouldFuzz  = 6;
    optional  double  fuzzDistance  = 7;
    optional  double  timeLength  = 8;
    optional  bool  isInfiniteDuration  = 9;
    optional  int32  mediaType  = 10;
    optional  SCMTMediaInfo  mediaInfo  = 11;
    optional  string  venueId  = 12;
    repeated  SCMapsAddress  localizedAddresses  = 13;
    optional  SCMTStreamingMediaInfo  streamingMediaInfo  = 14;
    optional  string  multisnapId  = 15;
    optional  SCAttributionInfo  attributionInfo  = 16;
    optional  SCContextContextHint  contextHint  = 17;
    optional  string  multiSnapBundleId  = 18;
    optional  int32  multiSnapSequenceId  = 19;
    optional  SASAudioStitch  audioStitch  = 20;
    optional  SCMTOneSnapInfo  streamingSnapInfo  = 21;
    optional  SCMTPublicMediaInfo  publicMediaInfo  = 22;
    optional  string  unlockablesSnapInfo  = 23;
}

message SCMTMapSnapLite {
    optional  string  id_p  = 1;
    optional  double  timestamp  = 3;
    optional  double  lat  = 4;
    optional  double  lng  = 5;
    optional  bool  shouldFuzz  = 6;
    optional  double  fuzzDistance  = 7;
    optional  string  multiSnapBundleId  = 18;
    optional  int32  multiSnapSequenceId  = 19;
}

message SCMTMapStyleData {
    optional  string  styleJson  = 1;
    optional  int32  colorScheme  = 2;
    optional  string  name  = 3;
    optional  string  id_p  = 4;
    optional  int32  source  = 5;
}

message SCMTMapStyleRequest {
    optional  int32  desiredStyle  = 1;
    optional  string  prototypeStyleId  = 3;
    optional  string  styleJsonEtag  = 4;
    optional  bool  serveNewMapStyles  = 5;
    optional  string  locale  = 6;
    optional  int32  colorScheme  = 7;
    optional  string  manualStyleName  = 8;
}

message SCMTMapStyleResponse {
    optional  string  accessToken  = 1;
    optional  string  styleJson  = 2;
    optional  bool  blockUse  = 10;
    optional  string  blockUseText  = 11;
    optional  string  styleJsonEtag  = 12;
    optional  bool  styleJsonNotModified  = 13;
    optional  SCMTWorldEffectSet  worldEffect  = 14;
    optional  string  staticMapAccessToken  = 15;
    optional  string  mapboxUsername  = 16;
    optional  string  mapboxStyleId  = 17;
    optional  int32  colorScheme  = 18;
}

message SCMTMarkerTile {
    repeated  SCMTPointOfInterest  poisArray  = 1;
}

message SCMTMarkerTileSetInfo {
    optional  SCMTPointOfInterestSizeEquation  poiSizeEquation  = 1;
}

message SCMTMediaInfo {
    optional  string  mediaKey  = 1;
    optional  string  mediaIv  = 2;
    optional  string  mediaURL  = 3;
    optional  string  mediaId  = 4;
    optional  string  thumbnailIv  = 6;
    optional  bool  zipped  = 8;
}

message SCMTMockMapMarkers {
    repeated  SCMTPointOfInterest  mapMarkersArray  = 1;
}

message SCMTMotionData {
    optional  int32  motion  = 1;
    optional  int64  motionStartTimestamp  = 2;
    optional  int32  motionTypeConfidence  = 3;
    optional  float  heading  = 4;
    optional  float  speed  = 5;
}

message SCMTOneMediaInfo {
    optional  int64  bitrateKpbs  = 1;
    optional  string  encryptionKey  = 2;
    optional  string  encryptionIv  = 3;
    optional  string  prefixURL  = 4;
    optional  string  overlayURL  = 5;
    optional  string  compositeURL  = 6;
    optional  string  mediaURL  = 7;
    optional  int64  mediaSize  = 8;
    optional  int64  mediaMetadataSize  = 9;
    repeated  int64  mediaSegmentSizeArray  = 10[packed=true];
    optional  string  mediaM3U8URL  = 11;
    optional  string  previewURL  = 12;
}

message SCMTOneSnapInfo {
    repeated  SCMTOneMediaInfo  mediaInfosArray  = 1;
}

message SCMTOneThumbnailInfo {
    optional  int32  thumbnailType  = 1;
    optional  string  thumbnailURL  = 2;
    optional  string  encryptionKey  = 3;
    optional  string  encryptionIv  = 4;
}

message SCMTPassportPreferences {
    optional  int32  onOffStatus  = 1;
}

message SCMTPerFriendSharingMode {
    optional  string  userId  = 1;
    optional  int32  sharingMode  = 2;
}

message SCMTPipelineCluster {
    optional  string  id_p  = 1;
    optional  string  source  = 2;
    optional  double  startTime  = 3;
    optional  double  endTime  = 4;
    optional  double  score  = 5;
    optional  int32  thumbSize  = 6;
    repeated  string  snapIdsArray  = 99;
}

message SCMTPipelineHeatmapSnap {
    optional  string  id_p  = 1;
    optional  string  userId  = 2;
    optional  double  lat  = 3;
    optional  double  lng  = 4;
    optional  bool  shouldFuzz  = 5;
    optional  SCMTLocationFuzzingInfo  locationFuzzInfo  = 6;
    optional  double  timestamp  = 7;
}

message SCMTPipelinePointOfInterest {
    optional  SCMTPointOfInterest  poi  = 1;
    optional  float  minAllowedZoom  = 2;
    optional  int32  leadSourceMask  = 3;
    optional  bool  hasTitle  = 4;
    optional  bool  isPopupStory  = 5;
}

message SCMTPipelineRunCompletionMessage {
    optional  SCMTTileSetId  tileSetId  = 1;
}

message SCMTPipelineSnap {
    optional  string  id_p  = 1;
    optional  double  lat  = 2;
    optional  double  lng  = 3;
    optional  int32  mediaType  = 6;
    optional  string  overlayText  = 7;
    optional  string  username  = 8;
    optional  bool  frontFacing  = 9;
    optional  int32  orientation  = 10;
    optional  double  timeLength  = 11;
    optional  string  storyId  = 12;
    optional  double  timestamp  = 13;
    optional  bool  shouldFuzz  = 14;
    optional  string  userId  = 15;
    optional  string  unlockablesSnapInfo  = 16;
    optional  double  openNsfwScore  = 31;
    optional  SCMTLocationFuzzingInfo  locationFuzzInfo  = 32;
    optional  bool  minor  = 33;
    optional  bool  chaperonedMinor  = 34;
    optional  bool  didPostToMyStory  = 37;
    repeated  string  tagsArray  = 38;
    optional  bool  isLowContrast  = 39;
    repeated  double  exposureHistogramArray  = 40[packed=true];
    optional  double  biggestHeadRatio  = 41;
    optional  double  aspectRatio  = 42;
    optional  int32  videoFramesPerSecond  = 43;
    optional  bool  noise  = 44;
    repeated  string  overlayTextSensitiveWordsArray  = 45;
    optional  int32  headCount  = 46;
    optional  float  deviceScore  = 47;
    optional  string  lensId  = 48;
    optional  bool  isOfficialUser  = 49;
    optional  bool  isPopularUser  = 50;
    optional  bool  isInfiniteDuration  = 51;
    optional  string  venueId  = 52;
    repeated  double  featureVectorArray  = 53[packed=true];
    repeated  string  categoriesArray  = 54;
    optional  string  rejectionReason  = 55;
    optional  double  qualityScore  = 56;
    optional  double  interestingnessScore  = 57;
    optional  bool  hasSponsoredUnlockables  = 58;
    optional  int32  abuseMitigationAction  = 59;
    optional  bool  isTakenDown  = 60;
    optional  bool  isLocationBlacklisted  = 61;
    optional  bool  shouldShowAttribution  = 62;
    optional  double  captureTimestamp  = 63;
    optional  string  multisnapId  = 64;
    optional  string  multiSnapBundleId  = 65;
    optional  int32  multiSnapSequenceId  = 66;
    optional  int32  multiSnapSequenceCount  = 67;
    optional  SASAudioStitch  audioStitch  = 68;
    optional  string  filterId  = 69;
    optional  SCMTMediaInfo  mediaInfo  = 99;
    repeated  SCMapsAddress  localizedAddresses  = 100;
    optional  SCMTStreamingMediaInfo  streamingMediaInfo  = 101;
    optional  SCContextContextHint  contextHint  = 102;
    optional  SCMTOneSnapInfo  streamingSnapInfo  = 103;
    optional  string  countryCode  = 104;
    optional  float  gradientScore  = 200;
    repeated  string  metadata  = 300;
}

message SCMTPlacePoi {
    optional  string  name  = 1;
    optional  SCMTPoint  markerPoint  = 2;
    optional  int32  numSnaps  = 3;
    repeated  SCMTPoint  geoFenceArray  = 4;
    optional  string  thumbnailURL  = 5;
    optional  bool  geofilterOnly  = 6;
    repeated  string  geofilterIdsArray  = 7;
}

message SCMTPoiTile {
    optional  bool  hasLocalizedPois  = 10;
    repeated  SCMTPointOfInterest  poisArray  = 11;
}

message SCMTPoiTileSetInfo {
    optional  SCMTPointOfInterestSizeEquation  poiSizeEquation  = 1;
}

message SCMTPoint {
    optional  double  lat  = 1;
    optional  double  lng  = 2;
}

message SCMTPointInfo {
    optional  double  bearing  = 1;
    optional  double  distance  = 2;
    optional  double  likelyDistance  = 3;
}

message SCMTPointOfInterest {
    optional  int32  type  = 1;
    optional  string  id_p  = 2;
    optional  SCMTPoint  point  = 3;
    optional  double  score  = 5;
    optional  double  renderWidthRatio  = 8;
    repeated  SCMTThumbnail  thumbnailsArray  = 10;
    optional  SCStoryManifest  previewManifest  = 11;
    optional  SCStoryManifest  fullManifest  = 12;
    optional  SCLocalizedStringSet  llabel  = 14;
    repeated  SCMapsAddress  localizedAddresses  = 15;
    optional  float  minDisplayZoom  = 16;
    optional  bool  isFeatured  = 17;
    optional  string  originalLeadId  = 18;
    optional  float  thumbnailMinDisplayZoom  = 19;
    optional  string  emojiLabel  = 20;
    repeated  string  localesArray  = 21;
    repeated  SCMTPointOfInterest  localizedVersionsArray  = 22;
    optional  int32  actionType  = 23;
    optional  string  unlockableId  = 24;
    optional  int32  audioStitchCount  = 25;
    optional  SCMTPointOfInterest_DiscoverInfo  discoverInfo  = 26;
    optional  float  maxDisplayZoom  = 27;
    optional  SCMTDirectRenderInfo  directRenderInfo  = 28;
    optional  SCMTGameMarkerInfo  gameMarkerInfo  = 29;
    optional  string  verrazanoId  = 30;
    optional  int32  markerDataType  = 31;
    optional  float  minTapRadius  = 32;
    optional  float  minReachableRadius  = 33;
}

message SCMTPointOfInterestSizeEquation {
    repeated  float  orderArray  = 1[packed=true];
    repeated  float  stretchArray  = 2[packed=true];
    repeated  float  coefficientArray  = 3[packed=true];
    optional  float  intercept  = 4;
}

message SCMTPointOfInterest_DiscoverInfo {
    optional  string  publisherName  = 1;
    optional  int64  editionId  = 2;
}

message SCMTPolygonInfo {
    optional  double  inPolygonProbability  = 1;
    optional  double  borderDistance  = 2;
    optional  double  borderBearing  = 3;
    optional  double  borderDirection  = 4;
}

message SCMTPositionRequest {
    optional  double  lat  = 1;
    optional  double  lng  = 2;
    optional  double  horizontalAccuracy  = 3;
    repeated  SCMTFeatureRequest  featureRequestArray  = 4;
    optional  bool  requestElevation  = 5;
}

message SCMTPositionResponse {
    optional  int32  returnStatus  = 1;
    optional  string  errorMessage  = 2;
    repeated  SCMTFeatureInfo  featureInfoArray  = 3;
    optional  double  elevation  = 4;
    optional  bool  elevationAvailable  = 5;
}

message SCMTPrivacySensitiveLocationData {
    optional  float  lat  = 1;
    optional  float  lng  = 2;
    optional  float  altitude  = 9;
    optional  float  horizontalAccuracy  = 10;
    optional  float  verticalAccuracy  = 11;
    optional  SCMTMotionData  motionData  = 12;
    repeated  SCMTLocality  localityArray  = 14;
    optional  bool  backgroundUpdate  = 20;
    optional  int64  lastForegroundUpdateTimestamp  = 22;
    repeated  SCMTLocationUpdate  locationUpdateArray  = 23;
    optional  bytes  kalmanState  = 24;
    optional  float  kalmanLat  = 25;
    optional  float  kalmanLng  = 26;
    optional  int64  kalmanTimestamp  = 27;
    repeated  SCMT1Type  actionTypeArray  = 28;
    optional  SCMT1Sticker  typeSticker  = 29;
    repeated  string  bleBeaconIdArray  = 30;
}

message SCMTPublicImageMediaInfo {
    optional  string  mediaURL  = 1;
}

message SCMTPublicMapStyleRequest {
    optional  int32  desiredStyle  = 1;
}

message SCMTPublicMapStyleResponse {
    optional  string  styleJson  = 1;
}

message SCMTPublicMediaInfo {
    optional  SCMTPublicImageMediaInfo  publicImageMediaInfo  = 1;
}

message SCMTRemoveGameMarkerWithReasonRequest {
    optional  string  id_p  = 1;
    optional  string  reason  = 2;
}

message SCMTRemoveGameMarkerWithReasonResponse {
    optional  SCMTGameMarkerEntry  marker  = 1;
}

message SCMTRemoveGameMarkersRequest {
    repeated  string  idsArray  = 1;
    optional  SPCGRect  boundedBox  = 2;
    optional  string  source  = 3;
    optional  string  category  = 4;
}

message SCMTRemoveGameMarkersResponse {
    repeated  SCMTGameMarkerEntry  markersArray  = 1;
}

message SCMTRenderConfig {
    optional  SCMTPointOfInterestSizeEquation  poiSizeEquation  = 1;
    optional  SCMTHeatmapGradient  heatmapGradient  = 2;
    optional  float  heatNormalizationPeak  = 3;
    optional  float  fuzzNormalizationPeak  = 4;
    optional  float  heatPointBaseRadius  = 5;
}

message SCMTReverseGeocodedPoint {
    optional  SCMTGeoPoint  point  = 1;
    optional  SCMapsAddress  address  = 2;
}

message SCMTScheduleMarkerPipelineRunRequest {
}

message SCMTScheduleMarkerPipelineRunResponse {
}

message SCMTSchedulePoiPipelineRunRequest {
}

message SCMTSchedulePoiPipelineRunResponse {
}

message SCMTSearchCards {
    repeated  SCMTSearchCards_Section  sectionsArray  = 1;
}

message SCMTSearchCards_PoiRow {
    optional  string  id_p  = 1;
    optional  SCMTPoint  latlng  = 2;
    optional  double  zoom  = 3;
    optional  double  timestamp  = 4;
    optional  string  titleFmt  = 5;
    optional  string  subtitleFmt  = 6;
    optional  SCMTGeoBox  boundingBox  = 7;
    optional  SCMTThumbnail  thumb  = 20;
    optional  SCStoryManifest  manifest  = 21;
    optional  SCMTPointOfInterest_DiscoverInfo  discoverInfo  = 22;
}

message SCMTSearchCards_Row {
    optional  SCMTSearchCards_PoiRow  poiRow  = 1;
}

message SCMTSearchCards_Section {
    optional  int32  type  = 1;
    optional  string  headline  = 2;
    optional  int32  numToShow  = 3;
    repeated  SCMTSearchCards_Row  rowsArray  = 10;
}

message SCMTSetShareLocationPreferencesRequest {
    optional  SCMTShareLocationPreferences  preferences  = 1;
    optional  int64  locationUpdateSequenceNumber  = 2;
    optional  int64  ghostModeDurationMillis  = 3;
    optional  bool  optOutMapOnboarding  = 4;
}

message SCMTSetShareLocationPreferencesResponse {
    optional  int32  errorCode  = 1;
}

message SCMTShareEligiblePointOfInterest {
    optional  SCMTPointOfInterest  poi  = 1;
    optional  int64  mostRecentGeneration  = 2;
}

message SCMTShareLocationPreferences {
    optional  bool  ghostMode  = 1;
    optional  int32  sharingMode  = 2;
    optional  int32  audience  = 3;
    repeated  SCMTPerFriendSharingMode  perFriendModeArray  = 4;
    optional  bool  backgroundSharingEnabled  = 5;
    optional  bool  shareUsageData  = 6;
    optional  int32  version  = 7;
    repeated  SCMTPerFriendSharingMode  blacklistPerFriendModeArray  = 8;
    optional  SCMTPassportPreferences  passportPreferences  = 9;
    optional  int64  lastModifiedTime  = 10;
}

message SCMTSnapInfo {
    optional  string  id_p  = 1;
    optional  double  timestamp  = 2;
}

message SCMTSpectaclesInfo {
    optional  int64  lastContentTakenTimestamp  = 1;
    optional  int32  lastContentDeviceColor  = 2;
    optional  bool  isDeviceConnected  = 3;
}

message SCMTStreamingMediaInfo {
    optional  string  prefixURL  = 1;
    optional  string  compositeURL  = 2;
    optional  string  segmentCompositeURL  = 3;
    optional  string  segmentPreviewCompositeURL  = 4;
    optional  string  overlayURL  = 5;
    optional  string  previewURL  = 6;
    optional  string  previewWithOverlayURL  = 7;
    optional  string  mediaURL  = 10;
    optional  int64  mediaSize  = 11;
    optional  int64  mediaEncSize  = 12;
    optional  string  mediaVideoURL  = 20;
    optional  int64  mediaVideoSize  = 21;
    optional  string  mediaAudioURL  = 22;
    optional  int64  mediaAudioSize  = 23;
    optional  int64  mediaVideoFirstSegmentSize  = 24;
    optional  int64  mediaAudioFirstSegmentSize  = 25;
    optional  int64  mediaVideoIndexSize  = 26;
    repeated  int64  mediaVideoSegmentSizeArray  = 27[packed=true];
    optional  int64  mediaAudioIndexSize  = 28;
    repeated  int64  mediaAudioSegmentSizeArray  = 29[packed=true];
    optional  string  mediaM3U8URL  = 30;
    optional  int64  mediaEncVideoSize  = 31;
    optional  int64  mediaEncAudioSize  = 32;
    optional  string  encryptionKey  = 33;
    optional  string  encryptionIv  = 34;
    optional  int32  mediaWidth  = 40;
    optional  int32  mediaHeight  = 41;
    optional  string  muxedCompositeURL  = 50;
    optional  string  mediaWithOverlayURL  = 61;
    optional  int64  mediaWithOverlaySize  = 62;
    optional  int64  mediaWithOverlayVideoSize  = 63;
    optional  int64  mediaWithOverlayEncVideoSize  = 64;
}

message SCMTSynchronizationCheckInRequest {
    repeated  SCMTTileSetId  loadingTileSetIdsArray  = 1;
    repeated  SCMTTileSetId  servingTileSetIdsArray  = 2;
    repeated  SCMTTileSetId  latestTileSetIdsArray  = 3;
}

message SCMTSynchronizationCheckInResponse {
    optional  int32  status  = 1;
    repeated  SCMTTileSetId  loadedTileSetIdsArray  = 2;
}

message SCMTThumbnail {
    optional  string  id_p  = 1;
    optional  string  key  = 2;
    optional  string  iv  = 3;
    optional  string  URL  = 4;
    optional  string  thumbnailData  = 5;
    optional  string  snapId  = 6;
    optional  string  publicFilename  = 10;
    optional  int32  displayType  = 11;
    optional  SCMTThumbnailInfo  streamingThumbnailInfo  = 12;
}

message SCMTThumbnailInfo {
    repeated  SCMTOneThumbnailInfo  infosArray  = 1;
}

message SCMTTile {
    optional  SCMTTileId  id_p  = 1;
    optional  SCMTTileSetId  tileSetId  = 3;
    optional  SCMTHeatmapTile  heatmapTile  = 20;
    optional  SCMTPoiTile  poiTile  = 21;
    optional  SCMTGameTile  gameTile  = 22;
    optional  SCMTMarkerTile  markerTile  = 23;
}

message SCMTTileId {
    optional  int32  x  = 3;
    optional  int32  y  = 4;
    optional  int32  zoom  = 5;
}

message SCMTTileMetadata {
    optional  SCMTTileId  tileId  = 1;
    optional  int32  timeZoneOffsetMs  = 2;
    optional  SCMTTileMetadata_Weather  currentWeather  = 3;
    optional  SCMTWorldEffectSet  worldEffect  = 4;
    repeated  SCMTReverseGeocodedPoint  geocodedPointsArray  = 5;
}

message SCMTTileMetadata_Weather {
    optional  int32  condition  = 1;
    optional  float  temperatureF  = 2;
}

message SCMTTileSetId {
    optional  string  flavor  = 1;
    optional  int64  epoch  = 2;
    optional  int32  type  = 3;
}

message SCMTTileSetInfo {
    optional  SCMTTileSetId  id_p  = 1;
    optional  int32  state  = 2;
    optional  double  startTime  = 3;
    optional  double  lastUpdateTime  = 4;
    optional  SCMTRenderConfig  renderConfig  = 5;
    optional  SCMTHeatTileSetInfo  heatTileSetInfo  = 20;
    optional  SCMTPoiTileSetInfo  poiTileSetInfo  = 21;
    optional  SCMTGameTileSetInfo  gameTileSetInfo  = 22;
    optional  SCMTMarkerTileSetInfo  markerTileSetInfo  = 23;
}

message SCMTUserLocationRequest {
    optional  float  lat  = 1;
    optional  float  lng  = 2;
    optional  float  altitude  = 9;
    optional  float  horizontalAccuracy  = 10;
    optional  float  verticalAccuracy  = 11;
    optional  SCMTMotionData  motionData  = 12;
    optional  int64  locationUpdatedTimestamp  = 16;
    repeated  string  logMessageArray  = 17;
    optional  SCMTDeviceData  deviceData  = 18;
}

message SCMTUserLocationResponse {
    optional  int64  timestamp  = 1;
    optional  double  nextRequestAfterSecs  = 10;
}

message SCMTValisGetShareLocationPreferencesRequest {
    optional  string  userId  = 1;
}

message SCMTValisSetShareLocationPreferencesRequest {
    optional  string  userId  = 1;
    optional  SCMTShareLocationPreferences  preferences  = 2;
    optional  int64  ghostModeDurationMillis  = 3;
}

message SCMTWorldEffectSet {
    repeated  SCMTWorldEffectSet_EffectVariant  variantsArray  = 1;
}

message SCMTWorldEffectSet_EffectVariant {
    optional  string  effectId  = 1;
    optional  int32  requiredClientVersion  = 2;
    optional  double  minZoomLevel  = 3;
    optional  double  maxZoomLevel  = 4;
    optional  bool  playsWhenClusterSelected  = 5;
    optional  bool  onlyPlayOncePerMapSession  = 6;
    optional  string  effectURL  = 7;
}

message SCMapsAddress {
    optional  string  adminArea1  = 1;
    optional  string  adminArea2  = 2;
    optional  string  adminArea3  = 3;
    optional  string  adminArea4  = 4;
    optional  string  adminArea5  = 5;
    optional  string  locality  = 6;
    optional  string  sublocality  = 7;
    optional  string  colloquialArea  = 8;
    optional  string  neighborhood  = 9;
    optional  string  premise  = 10;
    optional  string  subpremise  = 11;
    optional  string  pointOfInterest  = 12;
    optional  string  country  = 13;
    optional  string  countryCode  = 14;
    optional  string  postalCode  = 15;
    optional  string  mediaMarketId  = 16;
    optional  string  congressionalDistrictId  = 17;
    optional  string  macroArea  = 18;
}

message SCMapsAddressIds {
    optional  SCCOREUUID  adminArea1  = 1;
    optional  SCCOREUUID  adminArea2  = 2;
    optional  SCCOREUUID  adminArea3  = 3;
    optional  SCCOREUUID  adminArea4  = 4;
    optional  SCCOREUUID  adminArea5  = 5;
    optional  SCCOREUUID  locality  = 6;
    optional  SCCOREUUID  sublocality  = 7;
    optional  SCCOREUUID  neighborhood  = 9;
    optional  SCCOREUUID  country  = 13;
    optional  string  countryCode  = 14;
    optional  SCCOREUUID  postalCode  = 15;
    optional  SCCOREUUID  macroArea  = 18;
    optional  SCCOREUUID  premise  = 19;
}

message SCMapsAddressResult {
    optional  bool  addressFound  = 1;
    optional  SCMapsAddress  address  = 2;
    optional  SCMapsAddressIds  uuids  = 3;
}

message SCMapsLatLng {
    optional  double  lat  = 1;
    optional  double  lng  = 2;
}

message SCMapsLocationAddressRequest {
    repeated  SCMapsLatLng  locationsArray  = 1;
    optional  bool  idsOnly  = 2;
    optional  SCMapsRequestOptions  options  = 1000;
}

message SCMapsLocationAddressResponse {
    repeated  SCMapsAddress  addressesArray  = 1;
    repeated  SCMapsAddressResult  resultsArray  = 2;
}

message SCMapsLocationAddressWithLocalizationsBatchRequest {
    repeated  SCMapsLatLng  locationsArray  = 1;
    repeated  string  localesArray  = 2;
    optional  bool  includeIds  = 3;
    optional  SCMapsRequestOptions  options  = 1000;
}

message SCMapsLocationAddressWithLocalizationsBatchResponse {
    repeated  SCMapsLocationAddressWithLocalizationsResponse  responsesArray  = 1;
}

message SCMapsLocationAddressWithLocalizationsRequest {
    optional  SCMapsLatLng  location  = 1;
    repeated  string  localesArray  = 2;
    optional  bool  includeIds  = 3;
    optional  SCMapsRequestOptions  options  = 1000;
}

message SCMapsLocationAddressWithLocalizationsResponse {
    repeated  SCMapsAddress  addresses  = 1;
    optional  SCMapsAddress  ids  = 2;
    optional  SCMapsAddressIds  uuids  = 3;
}

message SCMapsRequestOptions {
    optional  uint32  snapZoom  = 2;
    optional  uint32  requestedFields  = 3;
    optional  bool  includeUuids  = 4;
}

message SCMapsSlippyActionConfig {
    optional  int32  locationShareUpsellStyle  = 1;
}

message SCMapsSlippyGetLocationPreferencesReminderRequest {
    optional  string  timezone  = 1;
    optional  int32  source  = 2;
}

message SCMapsSlippyGetLocationPreferencesReminderResponse {
    optional  bool  showReminder  = 1;
    optional  string  title  = 2;
    optional  string  subtitle  = 3;
    optional  int64  nextRequestsAfterSeconds  = 4;
}

message SCMapsSlippyGetShouldPerformActionRequest {
    optional  SCCOREUUID  userId  = 1;
    optional  int32  actionName  = 2;
    optional  string  actionConfigType  = 3;
    optional  SCMapsSlippyUserInfo  userInfo  = 4;
    optional  bool  isEmployee  = 5;
}

message SCMapsSlippyGetShouldPerformActionResponse {
    optional  bool  shouldPerformAction  = 1;
    optional  SCMapsSlippyActionConfig  actionConfig  = 2;
}

message SCMapsSlippyLocationPreferencesSnapshot {
    optional  int32  audience  = 1;
    optional  int64  locationSharingFriendCount  = 2;
    optional  int64  friendCount  = 3;
}

message SCMapsSlippyLocationShareUserInfo {
    optional  bool  ghostMode  = 1;
    optional  int64  updatedTimestamp  = 2;
    optional  int32  friendsWithBitmojiCount  = 3;
    optional  bool  hasBitmoji  = 4;
    optional  int32  mapFriendsCount  = 5;
    optional  string  timezone  = 6;
}

message SCMapsSlippyReaction {
    optional  bool  acceptLocationShare  = 1;
}

message SCMapsSlippyUpdateReactionRequest {
    optional  SCCOREUUID  userId  = 1;
    optional  int32  actionName  = 2;
    optional  SCMapsSlippyReaction  reaction  = 3;
}

message SCMapsSlippyUpdateReactionResponse {
}

message SCMapsSlippyUserInfo {
    optional  SCMapsSlippyLocationShareUserInfo  locationShareUserInfo  = 1;
}

message SCMessagingAcceptFamilyCenterInviteStatusMessage {
}

message SCMessagingAttachments {
    optional  string  remoteURL  = 1;
    optional  SCMessagingGameMetadata  gameMetadata  = 2;
}

message SCMessagingAudioNote {
    optional  SCMessagingMediaMetadata  note  = 1;
    optional  string  userLocale  = 3;
}

message SCMessagingAudioNoteMetadata {
    optional  bool  allowsTranscription  = 1;
    optional  SCMessagingTranscriptions  transcriptions  = 10;
}

message SCMessagingBitmojiOutfitShare {
    optional  SCMessagingUUID  costumeOverrideId  = 1;
    optional  BMCompactAvatarId  avatarId  = 2;
}

message SCMessagingBloopsStoryShare {
    optional  SCMessagingStoryShareInfo  story  = 1;
    optional  SCMessagingStoryShareMediaInfo  preview  = 2;
    optional  int32  recipientBloopsSelfiePosition  = 3;
}

message SCMessagingCallingStatusMessage {
    optional  int32  callStatus  = 1;
    optional  int32  callType  = 2;
    optional  SCMessagingUUID  userId  = 3;
    optional  uint32  callDuration  = 4;
    repeated  SCMessagingUUID  participantsArray  = 5;
}

message SCMessagingCanvasApp {
    optional  SCMessagingUUID  appId  = 1;
    optional  string  deeplinkPayload  = 2;
    optional  SCMessagingCanvasAppShareCard  defaultCard  = 3;
    optional  SCMessagingCanvasAppShareImageCard  imageCard  = 4;
}

message SCMessagingCanvasAppShareCard {
    optional  string  primaryImageURL  = 1;
    optional  string  headline  = 2;
    optional  string  description_p  = 3;
    optional  string  actionCta  = 4;
    optional  SCMessagingMediaMetadata  primaryImageMetadata  = 5;
}

message SCMessagingCanvasAppShareImageCard {
    optional  string  primaryImageURL  = 1;
    optional  SCMessagingMediaMetadata  primaryImageMetadata  = 2;
    optional  string  actionCta  = 3;
}

message SCMessagingCanvasCustomUpdateInfo {
    optional  string  path  = 1;
    optional  string  payload  = 2;
}

message SCMessagingCanvasCustomUpdateStatusMessage {
    optional  SCMessagingUUID  appId  = 1;
    repeated  SCMessagingUUID  mediaUserIdsArray  = 2;
    optional  string  textContent  = 3;
    optional  SCMessagingCanvasCustomUpdateInfo  updateInfo  = 4;
}

message SCMessagingCaptions {
    repeated  string  captionArray  = 1;
}

message SCMessagingChangeConversationRetentionPolicyStatusMessage {
    optional  SCMessagingUUID  initiatingUserId  = 1;
    optional  SCMessagingConversationRetentionPolicy  newRetentionPolicy  = 2;
    optional  int32  displayType  = 3;
}

message SCMessagingClearTextEelKeyEncryption {
    optional  bytes  cekIv  = 1;
    optional  bytes  cek  = 2;
}

message SCMessagingClearTextMediaKeyEncryption {
    optional  bytes  mediaKey  = 1;
    optional  bytes  mediaIv  = 2;
}

message SCMessagingContentEnvelope {
    repeated  SCMessagingContentEnvelope_RemoteMediaInfo  mediaInfoArray  = 1;
    optional  int32  contentType  = 2;
    optional  SCMessagingEnvelopeEncryption  encryption  = 3;
    optional  bytes  contents  = 4;
    repeated  SCMessagingContentEnvelope_MediaReferenceList  mediaReferenceListsArray  = 5;
    optional  SCMessagingContentEnvelope_DisplayInfo  displayInfo  = 6;
    optional  int32  savePolicy  = 7;
    optional  SCMessagingContentEnvelope_Thumbnails  thumbnails  = 8;
    optional  SCMessagingContentEnvelope_FeedDisplayInfo  feedDisplayInfo  = 9;
    optional  SCMessagingAudioNoteMetadata  audioNoteMetadata  = 11;
}

message SCMessagingContentEnvelope_DisplayInfo {
    optional  bool  hasAudio  = 1;
}

message SCMessagingContentEnvelope_FeedDisplayInfo {
    optional  SCMessagingSnapDisplayInfo  snapDisplayInfo  = 1;
    optional  SCMessagingStatusMessageDisplayInfo  statusMessageDisplayInfo  = 2;
    optional  SCMessagingExternalMediaDisplayInfo  externalMediaDisplayInfo  = 3;
}

message SCMessagingContentEnvelope_MediaReferenceList {
    repeated  MediaReference  mediaReferenceArray  = 1;
}

message SCMessagingContentEnvelope_RemoteMediaInfo {
    optional  bytes  contentObject  = 1;
    optional  string  legacyMediaId  = 2;
    optional  int32  mediaType  = 3;
    optional  bool  hasAudio  = 4;
    optional  string  contentURL  = 5;
}

message SCMessagingContentEnvelope_Thumbnails {
    repeated  SCMessagingThumbnailInfo  thumbnailsArray  = 1;
}

message SCMessagingContents {
    optional  SCMessagingSnap  snap  = 1;
    optional  SCMessagingText  text  = 2;
    optional  SCMessagingExternalMedia  externalMedia  = 3;
    optional  SCMessagingSticker  sticker  = 4;
    optional  SCMessagingShare  share  = 5;
    optional  SCMessagingNote  note  = 6;
    optional  SCMessagingSnapReply  snapReply  = 7;
    optional  SCMessagingStatusMessage  statusMessage  = 8;
    optional  SCMessagingLocation  location  = 9;
    optional  SCMessagingSnapdocWrapper  snapdocWrapper  = 10;
    optional  SDMSnapDoc  snapdoc  = 11;
    optional  SCMessagingCanvasApp  canvasApp  = 12;
    optional  SCMessagingLiveLocationShare  liveLocationShare  = 13;
    optional  SCCTPCTItemInstance  creativeToolItem  = 14;
    optional  SCMessagingFamilyCenterInvite  familyCenterInvite  = 15;
}

message SCMessagingContext {
    optional  string  venueId  = 1;
    optional  bytes  contextHint  = 2;
}

message SCMessagingConversationEnvelopeEncryptionV1 {
    optional  bytes  iv  = 1;
    optional  bytes  nonce  = 2;
}

message SCMessagingConversationRetentionPolicy {
    optional  SCMessagingDynamicConversationRetentionPolicy  dynamic  = 1;
}

message SCMessagingCreativeKitSourceApp {
    optional  string  oauthClientId  = 1;
    optional  string  displayName  = 2;
}

message SCMessagingCustomSticker {
    optional  SCMessagingMediaMetadata  sticker  = 1;
}

message SCMessagingDWebUpsellStatusMessage {
}

message SCMessagingDiscoverShare {
    optional  string  articleId  = 1;
    optional  string  editionId  = 2;
}

message SCMessagingDuration {
    optional  GPBEmpty  infinite  = 1;
    optional  GPBEmpty  playOnce  = 2;
    optional  uint32  durationSeconds  = 3;
}

message SCMessagingDynamicConversationRetentionPolicy {
    optional  bool  sendReadMessages  = 1;
    optional  bool  sendReleaseMessages  = 2;
    optional  int64  unreadRetentionTimeSeconds  = 3;
    optional  int64  readRetentionTimeSeconds  = 4;
}

message SCMessagingEelEncryption {
    optional  bytes  cekIv  = 1;
    optional  bytes  nonce  = 2;
    optional  bytes  senderPublicKey  = 3;
    optional  int32  senderVersion  = 4;
    optional  bytes  cek  = 16;
}

message SCMessagingEnvelopeEncryption {
    optional  GPBEmpty  none  = 1;
    optional  SCMessagingConversationEnvelopeEncryptionV1  conversationV1  = 2;
    optional  SCMessagingFideliusEncryption  fidelius  = 3;
    optional  SCMessagingClearTextMediaKeyEncryption  clearTextMediaKey  = 4;
    optional  SCMessagingEelEncryption  eel  = 5;
    optional  SCMessagingClearTextEelKeyEncryption  clearTextEelKey  = 6;
}

message SCMessagingExternalMedia {
    repeated  SCMessagingMediaMetadata  mediaArray  = 2;
    repeated  SDMSnapDoc  snapdocArray  = 3;
}

message SCMessagingExternalMediaDefaultDisplayInfo {
}

message SCMessagingExternalMediaDisplayInfo {
    optional  SCMessagingExternalMediaDefaultDisplayInfo  default_p  = 1;
    optional  SCMessagingExternalMediaGiftDisplayInfo  gift  = 2;
}

message SCMessagingExternalMediaGiftDisplayInfo {
}

message SCMessagingFSNEndpoint {
    optional  string  fsnEndpoint  = 1;
}

message SCMessagingFamilyCenterInvite {
}

message SCMessagingFeatureAttachment {
    optional  SCMessagingFSNEndpoint  fsnendpoint  = 1;
    optional  SCMessagingSnapStoryId  snapStoryContent  = 2;
    optional  SCMessagingStoryMentionInfo  shareInfo  = 3;
    optional  SCMessagingStoryPostInfo  storyPostInfo  = 4;
    optional  SCMessagingMentionInfo  mentionInfo  = 5;
    optional  SCMessagingReplyMessageInfo  replyMessageInfo  = 6;
    optional  SCMessagingGiftInfo  giftInfo  = 7;
}

message SCMessagingFideliusEncryption {
    optional  bytes  snapKey  = 1;
    optional  bytes  snapIv  = 2;
    optional  bool  retried  = 3;
    optional  uint32  version  = 4;
    optional  bytes  senderOutBeta  = 5;
    repeated  SCMessagingFideliusRecipientInfo  fideliusRecipientInfoArray  = 6;
}

message SCMessagingFideliusRecipientInfo {
    optional  bytes  recipientKey  = 1;
    optional  bytes  na  = 2;
    optional  bytes  phi  = 3;
    optional  bytes  tag  = 4;
    optional  SCMessagingUUID  senderUserId  = 5;
    optional  SCMessagingUUID  recipientUserId  = 6;
    optional  uint32  recipientVersion  = 7;
}

message SCMessagingGameClosedStatusMessage {
    optional  string  appId  = 1;
    repeated  SCMessagingUUID  participantsArray  = 2;
}

message SCMessagingGameMetadata {
    optional  SCMessagingUUID  appId  = 1;
    optional  string  appDisplayName  = 2;
    optional  string  appContentURL  = 3;
    optional  string  appIconImageURL  = 4;
    optional  string  appLoadingPageImageURL  = 5;
    optional  string  appLogoURL  = 6;
}

message SCMessagingGameScoreShare {
    optional  SCMessagingUUID  appId  = 1;
    optional  SCMessagingUUID  leaderboardId  = 2;
    optional  int64  numericScore  = 3;
}

message SCMessagingGiftInfo {
    optional  SCMessagingUUID  orderReferenceId  = 1;
    optional  SCMessagingUUID  giftId  = 2;
}

message SCMessagingGroupChatCreatedStatusMessage {
    optional  SCMessagingUUID  initiatingUser  = 1;
    repeated  SCMessagingUUID  participantsArray  = 2;
    optional  string  groupChatName  = 3;
}

message SCMessagingGroupInviteStickerJoinTextPromptStatusMessage {
    optional  SCMessagingUUID  inviteGroupId  = 1;
    optional  string  inviteGroupName  = 2;
    optional  SCMessagingUUID  inviteId  = 3;
}

message SCMessagingHighWatermark {
    optional  int32  highWatermarkType  = 1;
    optional  uint64  messageId  = 2;
    optional  uint64  conversationVersion  = 3;
}

message SCMessagingInMyContactsStatusMessage {
}

message SCMessagingIncludedSticker {
    optional  string  packId  = 1;
    optional  string  stickerId  = 2;
    optional  bool  animated  = 3;
    optional  string  giphySourceURL  = 4;
    optional  int32  stickerType  = 5;
    optional  string  highResUri  = 6;
}

message SCMessagingIntentDonationFromMainAppConfig {
    optional  bool  oneOnOneSnap  = 1;
    optional  bool  oneOnOneChat  = 2;
    optional  bool  oneOnOneChatAction  = 3;
    optional  bool  groupSnap  = 4;
    optional  bool  groupChat  = 5;
    optional  bool  groupChatAction  = 6;
    optional  bool  oneOnOneCall  = 7;
    optional  bool  groupCall  = 8;
    optional  bool  gateDirectSnapDonationToBestFriend  = 9;
    optional  bool  addGroupMemberToIntent  = 10;
}

message SCMessagingInviteLinkStatusMessage {
    optional  SCMessagingUUID  initiatingUserId  = 1;
    optional  int32  inviteLinkStatus  = 2;
}

message SCMessagingLeaveFamilyCenterStatusMessage {
}

message SCMessagingLegacyAdShare {
    optional  SCMessagingMediaMetadata  media  = 1;
}

message SCMessagingLegacyDiscoverShare {
    optional  SCMessagingMediaMetadata  media  = 1;
}

message SCMessagingLegacyMultisnap {
    optional  uint32  previewIndex  = 1;
    optional  uint32  previewCount  = 2;
    optional  uint32  outputIndex  = 3;
    optional  uint32  outputCount  = 4;
    optional  bool  isTrimmed  = 5;
    optional  SCMessagingUUID  bundleId  = 6;
}

message SCMessagingLegacyShazamShare {
    optional  string  attachedURL  = 1;
    optional  SCMessagingMediaMetadata  media  = 2;
}

message SCMessagingLiveLocationShare {
    optional  SCMessagingUUID  sessionId  = 1;
    optional  double  latitude  = 2;
    optional  double  longitude  = 3;
    optional  uint64  expireTimeMs  = 4;
    optional  uint64  initialDurationMs  = 5;
    optional  bool  isLiveSessionIndefinite  = 6;
}

message SCMessagingLiveLocationShareTerminatedStatusMessage {
    optional  SCMessagingUUID  initiatingUserId  = 1;
    optional  int32  terminateReason  = 2;
}

message SCMessagingLocation {
    optional  SCMessagingLocationRequest  request  = 1;
    optional  SCMessagingLocationCoordinates  coordinates  = 2;
}

message SCMessagingLocationCoordinates {
    optional  double  latitude  = 1;
    optional  double  longitude  = 2;
}

message SCMessagingLocationRequest {
}

message SCMessagingMapDrop {
    optional  double  latitude  = 1;
    optional  double  longitude  = 2;
    optional  uint64  createTimeMs  = 3;
    optional  SCMessagingUUID  pinCreatorId  = 4;
    optional  SCMessagingUUID  pinId  = 5;
    optional  string  pinTitle  = 6;
}

message SCMessagingMapShare {
    optional  string  storyId  = 1;
    optional  string  mediaType  = 2;
    optional  string  poiId  = 3;
}

message SCMessagingMapShareStory {
    optional  string  poiId  = 1;
}

message SCMessagingMediaMetadata {
    optional  int32  type  = 2;
    optional  int32  orientation  = 3;
    optional  SCMessagingMediaMetadata_MediaEncryptionInfo  encryptionInfo  = 4;
    optional  SCMessagingMediaMetadata_MediaDimensions  dimensions  = 5;
    optional  string  sourceMediaId  = 6;
    optional  uint32  contentObjectIndex  = 7;
    optional  bool  hasSound  = 8;
    optional  bool  zipped  = 9;
    optional  bool  frontFacing  = 10;
    optional  SCMessagingMediaMetadata_LegacyDirectDownloadUrl  legacyDirectDownloadURL  = 11;
    optional  SCMessagingDuration  duration  = 12;
    optional  uint32  mediaDurationMs  = 13;
    optional  bool  containsAnimatedStickers  = 14;
}

message SCMessagingMediaMetadata_LegacyDirectDownloadUrl {
    optional  string  URL  = 1;
    optional  uint64  expirySeconds  = 2;
    optional  int32  type  = 3;
    optional  string  region  = 4;
}

message SCMessagingMediaMetadata_MediaDimensions {
    optional  uint32  width  = 1;
    optional  uint32  height  = 2;
}

message SCMessagingMediaMetadata_MediaEncryptionInfo {
    optional  bytes  key  = 1;
    optional  bytes  iv  = 2;
}

message SCMessagingMediaTypeToCount {
    optional  int32  mediaType  = 1;
    optional  uint64  count  = 2;
}

message SCMessagingMemoriesStory {
    repeated  SCMessagingMediaMetadata  mediaArray  = 1;
    optional  string  storyTitle  = 2;
    repeated  SDMSnapDoc  snapdocArray  = 3;
}

message SCMessagingMentionAttribute {
    optional  SCMessagingUUID  userId  = 2;
}

message SCMessagingMentionInfo {
    repeated  SCMessagingUUID  mentionedUserIdsArray  = 1;
}

message SCMessagingMessageEraseStatusMessage {
    optional  SCMessagingUUID  userId  = 1;
    optional  int32  messageType  = 2;
}

message SCMessagingNameChangeStatusMessage {
    optional  SCMessagingUUID  initiatingUserId  = 1;
    optional  string  oldName  = 2;
    optional  string  newName  = 3;
}

message SCMessagingNote {
    optional  SCMessagingAudioNote  audio  = 1;
    optional  SCMessagingVideoNote  video  = 2;
}

message SCMessagingParticipantChangeStatusMessage {
    repeated  SCMessagingParticipantChangeStatusMessage_Entry  statusChangesArray  = 1;
    optional  SCMessagingUUID  initiatingUserDeprecated  = 2;
    optional  SCMessagingUUID  initiatingUser  = 3;
}

message SCMessagingParticipantChangeStatusMessage_Entry {
    optional  SCMessagingUUID  affectedUser  = 1;
    optional  int32  statusChange  = 2;
    optional  int32  changeOrigin  = 3;
    optional  int32  leaveReason  = 4;
}

message SCMessagingPinMyFriendNotificationRequest {
    optional  SCMessagingUUID  targetUserId  = 1;
}

message SCMessagingPinMyFriendNotificationResponse {
}

message SCMessagingPlaceShare {
    optional  SCMessagingUUID  placeId  = 1;
}

message SCMessagingPlusGiftStatusMessage {
}

message SCMessagingQuoteReplyShareStatusMessage {
}

message SCMessagingRange {
    optional  uint32  location  = 1;
    optional  uint32  length  = 2;
}

message SCMessagingReplyMessageInfo {
    optional  uint64  quotedMessageId  = 1;
}

message SCMessagingSaveToCameraRollStatusMessage {
    optional  SCMessagingUUID  userId  = 1;
    optional  uint64  messageId  = 2;
    repeated  SCMessagingMediaTypeToCount  mediaTypeToCountArray  = 3;
}

message SCMessagingScreenCaptureStatusMessage {
    optional  SCMessagingUUID  capturingUser  = 1;
    optional  int32  captureType  = 2;
    optional  int32  captureSource  = 3;
    optional  int32  capturingUserInfo  = 4;
}

message SCMessagingSearchShare {
    optional  string  dynamicStoryId  = 1;
}

message SCMessagingSearchShareSnap {
    optional  string  dynamicStoryId  = 1;
    optional  string  mediaType  = 2;
    optional  string  snapId  = 3;
}

message SCMessagingShare {
    optional  SCMessagingMapShare  map  = 1;
    optional  SCMessagingShazamShare  shazam  = 2;
    optional  SCMessagingSearchShare  search  = 3;
    optional  SCMessagingDiscoverShare  discover  = 4;
    optional  SCMessagingStoryShare  story  = 5;
    optional  SCMessagingSearchShareSnap  searchSnap  = 6;
    optional  SCMessagingUserShare  user  = 7;
    optional  SCMessagingLegacyDiscoverShare  legacyDiscover  = 8;
    optional  SCMessagingLegacyShazamShare  legacyShazam  = 9;
    optional  SCMessagingMapShareStory  mapStory  = 10;
    optional  SCMessagingMemoriesStory  memoriesStory  = 11;
    optional  SCMessagingGameScoreShare  gameScore  = 12;
    optional  SCMessagingSnapProProfileShare  snapProProfile  = 13;
    optional  SCMessagingSnapProSnapShare  snapProSnap  = 14;
    optional  SCMessagingLegacyAdShare  legacyAd  = 15;
    optional  SCMessagingSpotlightStoryShare  spotlightStoryShare  = 16;
    optional  SCMessagingBitmojiOutfitShare  bitmojiOutfitShare  = 17;
    optional  SCMessagingMapDrop  mapDropShare  = 18;
    optional  SCMessagingSnapKitInviteShare  snapKitInviteShare  = 19;
    optional  SCMessagingPlaceShare  placeShare  = 20;
    optional  SCMessagingSnapProSavedStoryShare  snapProSavedStory  = 21;
    optional  SCMessagingBloopsStoryShare  bloopsStoryShare  = 22;
}

message SCMessagingShazamShare {
    optional  string  attachedURL  = 1;
    optional  string  artistArtURL  = 2;
    optional  string  title  = 3;
    optional  string  artist  = 4;
}

message SCMessagingSnap {
    repeated  SCMessagingSnapComponent  componentsArray  = 1;
}

message SCMessagingSnapComponent {
    optional  SCMessagingDuration  duration  = 1;
    optional  SCMessagingTiming  timing  = 2;
    optional  SCMessagingUnlockables  unlockables  = 3;
    optional  SCMessagingContext  context  = 4;
    optional  SCMessagingAttachments  attachments  = 5;
    optional  SCMessagingMediaMetadata  mediaMetadata  = 6;
    optional  SCMessagingCaptions  captions  = 7;
    optional  SCMessagingCreativeKitSourceApp  snapKitSourceApp  = 8;
    optional  SCMessagingLegacyMultisnap  legacyMultisnap  = 9;
}

message SCMessagingSnapDisplayInfo {
    optional  bool  hasAudio  = 1;
    optional  bool  notViewable  = 2;
}

message SCMessagingSnapKitInviteShare {
    optional  SCMessagingUUID  appId  = 1;
    optional  SCMessagingMediaMetadata  stickerMediaMetadata  = 2;
    optional  string  inviteUri  = 3;
}

message SCMessagingSnapProProfileShare {
    optional  SCMessagingUUID  profileId  = 1;
}

message SCMessagingSnapProSavedStoryShare {
    optional  SCMessagingStoryShareInfo  story  = 1;
    optional  SCMessagingUUID  profileId  = 2;
}

message SCMessagingSnapProSnapReplyInfo {
    optional  bool  replyDisclaimerSeen  = 1;
}

message SCMessagingSnapProSnapShare {
    optional  SCMessagingUUID  profileId  = 1;
    optional  string  snapId  = 2;
    optional  bool  isUserQuoted  = 3;
}

message SCMessagingSnapReply {
    optional  SCMessagingSnap  originalSnap  = 1;
    optional  SCMessagingSnapdocWrapper  originalSnapdocWrapper  = 2;
    optional  SDMSnapDoc  originalSnapdoc  = 3;
    optional  SCMessagingSnap  replySnap  = 10;
    optional  SCMessagingText  replyText  = 11;
    optional  SCMessagingExternalMedia  replyExternalMedia  = 12;
    optional  SCMessagingSticker  replySticker  = 13;
    optional  SCMessagingShare  replyShare  = 14;
    optional  SCMessagingNote  replyNote  = 15;
    optional  SCMessagingSnapdocWrapper  replySnapdocWrapper  = 16;
    optional  SDMSnapDoc  replySnapdoc  = 17;
    optional  SCMessagingSnapProSnapReplyInfo  snapProSnapReplyInfo  = 18;
    optional  SCMessagingSnapStoryId  snapStoryId  = 19;
    optional  SCMessagingGiftInfo  giftInfo  = 20;
}

message SCMessagingSnapStoryId {
    optional  SCCORECompositeStoryId  compositeStoryId  = 1;
    optional  string  legacyStoryId  = 2;
}

message SCMessagingSnapdocWrapper {
    optional  bytes  contents  = 1;
}

message SCMessagingSpotlightStoryShare {
    optional  SCCORECompositeStoryId  compositeStoryId  = 1;
    optional  int32  source  = 2;
}

message SCMessagingStatusCallingStatusDisplayInfo {
    optional  int32  callStatus  = 1;
    optional  int32  callType  = 2;
}

message SCMessagingStatusGenericChat {
}

message SCMessagingStatusInMyContactsDisplayInfo {
    optional  SCMessagingUUID  recentlyJoinedUserId  = 1;
}

message SCMessagingStatusMessage {
    optional  SCMessagingScreenCaptureStatusMessage  screenCapture  = 1;
    optional  SCMessagingCallingStatusMessage  callingStatus  = 2;
    optional  SCMessagingParticipantChangeStatusMessage  participantChange  = 3;
    optional  SCMessagingNameChangeStatusMessage  nameStatusChange  = 4;
    optional  SCMessagingMessageEraseStatusMessage  messageErase  = 5;
    optional  SCMessagingGroupChatCreatedStatusMessage  groupChatCreated  = 6;
    optional  SCMessagingSaveToCameraRollStatusMessage  saveToCameraRoll  = 7;
    optional  SCMessagingChangeConversationRetentionPolicyStatusMessage  changeConversationRetentionPolicy  = 8;
    optional  SCMessagingGameClosedStatusMessage  gameClosed  = 9;
    optional  SCMessagingInviteLinkStatusMessage  inviteLink  = 10;
    optional  SCMessagingGroupInviteStickerJoinTextPromptStatusMessage  groupInviteStickerJoinTextPrompt  = 11;
    optional  SCMessagingCanvasCustomUpdateStatusMessage  canvasUpdate  = 12;
    optional  SCMessagingLiveLocationShareTerminatedStatusMessage  liveLocationTerminated  = 13;
    optional  SCMessagingInMyContactsStatusMessage  inMyContacts  = 14;
    optional  SCMessagingAcceptFamilyCenterInviteStatusMessage  acceptFamilyCenterInvite  = 15;
    optional  SCMessagingLeaveFamilyCenterStatusMessage  leaveFamilyCenter  = 16;
    optional  SCMessagingDWebUpsellStatusMessage  dwebUpsell  = 17;
    optional  SCMessagingQuoteReplyShareStatusMessage  quoteReplyShare  = 18;
    optional  SCMessagingUpdateChatWallpaperStatusMessage  updateChatWallpaperStatusMessage  = 19;
    optional  SCMessagingPlusGiftStatusMessage  plusGift  = 20;
}

message SCMessagingStatusMessageDisplayInfo {
    optional  SCMessagingStatusScreenCaptureDisplayInfo  screenCapture  = 1;
    optional  SCMessagingStatusCallingStatusDisplayInfo  callingStatus  = 2;
    optional  SCMessagingStatusParticipantAddDisplayInfo  changeParticipant  = 3;
    optional  SCMessagingStatusNameChangeDisplayInfo  nameChange  = 4;
    optional  SCMessagingStatusSaveToCameraRollDisplayInfo  saveToCameraRoll  = 5;
    optional  SCMessagingStatusInMyContactsDisplayInfo  inMyContacts  = 6;
    optional  SCMessagingStatusGenericChat  genericChat  = 7;
}

message SCMessagingStatusNameChangeDisplayInfo {
}

message SCMessagingStatusParticipantAddDisplayInfo {
}

message SCMessagingStatusSaveToCameraRollDisplayInfo {
}

message SCMessagingStatusScreenCaptureDisplayInfo {
    optional  int32  captureType  = 1;
}

message SCMessagingSticker {
    optional  SCMessagingIncludedSticker  included  = 1;
    optional  SCMessagingCustomSticker  custom  = 2;
    optional  string  emoji  = 3;
}

message SCMessagingStoryMentionInfo {
    optional  bool  isUserTagged  = 1;
}

message SCMessagingStoryPostInfo {
    optional  SCSCOREStoryMetadata  storyMetadata  = 1;
}

message SCMessagingStoryShare {
    optional  string  storyId  = 1;
    optional  string  mediaType  = 2;
    optional  bool  isUserTagged  = 3;
}

message SCMessagingStoryShareInfo {
    optional  SCCORECompositeStoryId  compositeStoryId  = 1;
    optional  SCMessagingUUID  snapId  = 2;
}

message SCMessagingStoryShareMediaInfo {
    optional  SCMessagingMediaMetadata  media  = 1;
}

message SCMessagingText {
    optional  string  text  = 1;
    repeated  SCMessagingTextAttribute  attributesArray  = 2;
}

message SCMessagingTextAttribute {
    optional  SCMessagingRange  range  = 1;
    optional  SCMessagingTextFormatAttribute  formatAttribute  = 2;
    optional  SCMessagingTextMediaAttribute  mediaAttribute  = 3;
    optional  SCMessagingTextUrlAttribute  URLAttribute  = 4;
    optional  SCMessagingMentionAttribute  mention  = 5;
}

message SCMessagingTextFormatAttribute {
    optional  int32  textFormatAttributeType  = 2;
}

message SCMessagingTextMediaAttribute {
    optional  int32  textMediaAttributeType  = 2;
}

message SCMessagingTextUrlAttribute {
    optional  string  URL  = 2;
}

message SCMessagingThumbnailInfo {
    optional  SDMMediaId  mediaId  = 1;
    optional  uint32  mediaReferenceListIndex  = 2;
}

message SCMessagingTiming {
    optional  uint64  timestamp  = 1;
    optional  uint64  secondaryTimestamp  = 2;
    optional  uint64  pendingDeliveryTimestamp  = 3;
    optional  uint64  sendStartTimestamp  = 4;
}

message SCMessagingTranscriptionInfo {
    optional  SDMMediaId  mediaId  = 1;
    optional  uint32  mediaReferenceListIndex  = 2;
}

message SCMessagingTranscriptions {
    repeated  SCMessagingTranscriptionInfo  transcriptionsArray  = 1;
}

message SCMessagingUUID {
    optional  bytes  id_p  = 1;
}

message SCMessagingUnlockables {
    optional  bytes  encryptedGeoData  = 1;
    optional  bytes  lensId  = 2;
    optional  bytes  lensMetadata  = 3;
    optional  bytes  unlockablesSnapInfo  = 4;
    optional  bytes  filterId  = 5;
    optional  bytes  lensOptionId  = 6;
}

message SCMessagingUpdateChatWallpaperStatusMessage {
}

message SCMessagingUserShare {
    optional  SCMessagingUUID  userId  = 1;
}

message SCMessagingVideoNote {
    optional  SCMessagingMediaMetadata  note  = 1;
}

message SCMetadataRequest {
    optional  int64  unlockableId  = 1;
    optional  SCULRequestInfo  requestInfo  = 2;
    optional  int32  unlockType  = 3;
}

message SCMetadataResponse {
    optional  int32  unlockStatus  = 1;
    optional  SCLGGeofilterResponse  geofilter  = 2;
    optional  SCLPLensSnapchat  lens  = 3;
}

message SCMinisPermissionsGetPermissionsRequest {
    optional  string  appId  = 1;
    repeated  string  userIdsArray  = 2;
    repeated  int32  scopesArray  = 3[packed=true];
}

message SCMinisPermissionsGetPermissionsResponse {
    repeated  SCMinisPermissionsUserPermissions  userPermissionsArray  = 1;
}

message SCMinisPermissionsGetUserPermissionsRequest {
    optional  string  appId  = 1;
    repeated  int32  scopesArray  = 2[packed=true];
}

message SCMinisPermissionsGetUserPermissionsResponse {
    repeated  SCMinisPermissionsPermission  permissionsArray  = 1;
}

message SCMinisPermissionsPermission {
    optional  int32  value  = 1;
    optional  int32  scope  = 2;
}

message SCMinisPermissionsRemoveAllUserPermissionsRequest {
    optional  string  appId  = 1;
}

message SCMinisPermissionsRemoveAllUserPermissionsResponse {
}

message SCMinisPermissionsSetUserPermissionRequest {
    optional  string  appId  = 1;
    repeated  SCMinisPermissionsPermission  permissionArray  = 2;
}

message SCMinisPermissionsSetUserPermissionResponse {
}

message SCMinisPermissionsUserPermissions {
    optional  string  userId  = 1;
    repeated  SCMinisPermissionsPermission  permissionsArray  = 2;
}

message SCMossContentDescriptorOverride {
    optional  SCBoltContentDescriptor  contentDescriptor  = 1;
    optional  GPBEmpty  useVariantName  = 2;
    optional  string  useCustomSuffix  = 3;
    optional  int32  useStandardExtension  = 4;
    optional  string  useCustomExtension  = 5;
}

message SCMossDeviceInfo {
    optional  string  userAgent  = 1;
    optional  int32  platform  = 2;
    optional  int32  deviceCluster  = 3;
}

message SCMossHlsVodStreaming {
    optional  SCBoltContentDescriptor  masterManifest  = 1;
}

message SCMossImageMetadata {
    optional  uint64  sizeBytes  = 1;
    optional  uint32  width  = 2;
    optional  uint32  height  = 3;
    optional  int32  imageFormat  = 4;
}

message SCMossMediaBundle {
    optional  string  mediaBundleId  = 1;
    optional  bool  notConsumable  = 2;
    optional  SCBoltContentDescriptor  baseContentDescriptor  = 3;
    optional  int32  featureContentType  = 10;
    optional  string  cofConfigurationKey  = 11;
    repeated  SCMossMediaVariant  mediaVariantsArray  = 20;
    optional  SCBoltContentDescriptor  guaranteedContentDescriptor  = 30;
    optional  int32  status  = 40;
}

message SCMossMediaCaptureContext {
    optional  int32  mediaInput  = 1;
    optional  int32  animatedSnapType  = 2;
    optional  int32  mediaQualityLevel  = 10;
    optional  SCMossDeviceInfo  deviceInfo  = 20;
    optional  string  attribution  = 21;
}

message SCMossMediaVariant {
    optional  int32  variantName  = 1;
    optional  SCMossMediaVariantMetadata  metadata  = 2;
    optional  int32  status  = 3;
    optional  SCMossContentDescriptorOverride  overrideContentDescriptor  = 4;
    optional  SCBoltContentDescriptor  contentDescriptor  = 10;
    optional  SCMossHlsVodStreaming  hlsVodStreaming  = 11;
}

message SCMossMediaVariantMetadata {
    optional  SCMossVideoMetadata  videoMetadata  = 1;
    optional  SCMossImageMetadata  imageMetadata  = 2;
}

message SCMossVideoMetadata {
    optional  uint64  sizeBytes  = 1;
    optional  float  ssim  = 2;
    optional  float  psnr  = 3;
    optional  bool  faststart  = 4;
    optional  float  vmaf  = 5;
    optional  uint32  width  = 6;
    optional  uint32  height  = 7;
    optional  int32  videoFormat  = 8;
    optional  SCMossVideoMetadata_PrefetchHint  prefetchHint  = 9;
    optional  uint32  lengthMs  = 10;
}

message SCMossVideoMetadata_PrefetchHint {
    repeated  uint32  kbPerTimeWindowArray  = 1[packed=true];
    optional  uint32  timeWindowMs  = 2;
}

message SCMusicAlbumArt {
    optional  SCCTPEncryptedMedia  media  = 1;
}

message SCMusicCheckIsAvailableRequest {
    optional  uint64  trackId  = 1;
}

message SCMusicCheckIsAvailableResponse {
    optional  bool  isAvailable  = 1;
}

message SCMusicCreateCustomSoundRequest {
    optional  string  title  = 1;
    optional  SCCTPEncryptedMedia  audioTrack  = 2;
    optional  bool  isPublic  = 3;
    optional  string  artistName  = 4;
}

message SCMusicCreateCustomSoundResponse {
    optional  SCMusicCustomSound  customSound  = 1;
    optional  int32  errorStatus  = 2;
    optional  SCMusicError  error  = 3;
}

message SCMusicCreateSoundRequest {
    optional  SCCOREUUID  userId  = 1;
    optional  string  title  = 2;
    optional  SCCTPEncryptedMedia  audioTrack  = 3;
    optional  bool  isPublic  = 4;
    optional  string  artistName  = 5;
}

message SCMusicCreateSoundResponse {
    optional  SCMusicCustomSound  customSound  = 1;
    optional  int32  errorStatus  = 2;
}

message SCMusicCustomSound {
    optional  SCCTPMusicTrack  musicTrackInfo  = 1;
    optional  bool  isPublic  = 2;
    optional  SCCOREUUID  creatorUserId  = 3;
}

message SCMusicDeleteCustomSoundRequest {
    optional  uint64  trackId  = 1;
}

message SCMusicDeleteCustomSoundResponse {
    optional  SCMusicError  error  = 1;
}

message SCMusicDeleteSoundRequest {
    optional  SCCOREUUID  userId  = 1;
    optional  uint64  trackId  = 2;
}

message SCMusicDeleteSoundResponse {
    optional  SCMusicError  error  = 1;
}

message SCMusicError {
    optional  int32  status  = 1;
    optional  string  message  = 2;
}

message SCMusicFindMusicTrackRequest {
    optional  string  isrc  = 1;
}

message SCMusicFindMusicTrackResponse {
    optional  SCCTPMusicTrack  musicTrack  = 1;
}

message SCMusicGetAllSoundsRequest {
    optional  SCCOREUUID  userId  = 1;
}

message SCMusicGetAllSoundsResponse {
    repeated  SCMusicCustomSound  customSoundsArray  = 1;
}

message SCMusicGetArtistPageRequest {
    optional  string  artistId  = 1;
}

message SCMusicGetArtistPageResponse {
    optional  SCMusicPickerLayoutPage  page  = 1;
}

message SCMusicGetArtistsWithAvailabilityRequest {
    repeated  uint64  artistIdsArray  = 1[packed=true];
    optional  string  countryCode  = 2;
}

message SCMusicGetArtistsWithAvailabilityResponse {
    repeated  SCCTPMusicArtist  artistsArray  = 1;
}

message SCMusicGetFeaturedPlaylistRequest {
}

message SCMusicGetFeaturedPlaylistResponse {
    optional  SCMusicPlaylist  playlist  = 1;
}

message SCMusicGetMusicTrackLyricsRequest {
    optional  uint64  trackId  = 1;
}

message SCMusicGetMusicTrackLyricsResponse {
    optional  SCMusicTrackLyrics  musicTrackLyrics  = 1;
}

message SCMusicGetMusicTrackRequest {
    optional  uint64  trackId  = 1;
    repeated  SCMusicGetMusicTrackRequest_RequestOption  requestOptionsArray  = 2;
}

message SCMusicGetMusicTrackRequest_RequestOption {
    optional  SCMusicGetMusicTrackRequest_RequestOption_MusicTrack  musicTrack  = 1;
    optional  SCMusicGetMusicTrackRequest_RequestOption_MusicArtist  artist  = 2;
    optional  SCMusicGetMusicTrackRequest_RequestOption_Availability  availability  = 3;
    optional  SCMusicGetMusicTrackRequest_RequestOption_MusicBeatSync  musicBeatSync  = 4;
}

message SCMusicGetMusicTrackRequest_RequestOption_Availability {
    optional  string  logKey  = 1;
}

message SCMusicGetMusicTrackRequest_RequestOption_MusicArtist {
}

message SCMusicGetMusicTrackRequest_RequestOption_MusicBeatSync {
}

message SCMusicGetMusicTrackRequest_RequestOption_MusicTrack {
}

message SCMusicGetMusicTrackResponse {
    optional  SCCTPMusicTrack  musicTrackInfo  = 1;
    repeated  SCCTPMusicArtist  artistsArray  = 2;
    optional  SCMusicMusicTrackAvailability  availability  = 3;
    optional  SCMESelectedMusicMetadata  musicBeatSyncData  = 4;
}

message SCMusicGetMusicTracksRequest {
    repeated  uint64  trackIdsArray  = 1[packed=true];
    optional  string  countryCode  = 2;
}

message SCMusicGetMusicTracksResponse {
    repeated  SCCTPMusicTrack  musicTrackInfoMap  = 1;
}

message SCMusicGetMyCustomSoundsPlaylistRequest {
}

message SCMusicGetMyCustomSoundsPlaylistResponse {
    repeated  SCMusicCustomSound  customSoundsArray  = 1;
}

message SCMusicGetPickerLayoutPageRequest {
    optional  string  pageId  = 1;
}

message SCMusicGetPickerLayoutPageResponse {
    optional  SCMusicPickerLayoutPage  page  = 1;
    optional  string  requestId  = 2;
}

message SCMusicGetPickerLayoutPageSectionRequest {
    optional  string  sectionId  = 1;
    repeated  string  requiredParams  = 2;
}

message SCMusicGetPickerLayoutPageSectionResponse {
    optional  SCMusicPickerLayoutPageSection  section  = 1;
    optional  int64  cacheTtlMinutes  = 2;
}

message SCMusicGetPickerLayoutRequest {
    optional  bool  includeCustomSounds  = 1;
    optional  int32  requestSource  = 2;
    optional  SCMusicMusicPickerLayoutRequestContext  requestContext  = 3;
}

message SCMusicGetPickerLayoutResponse {
    optional  SCMusicPickerLayout  layout  = 1;
    optional  string  requestId  = 2;
}

message SCMusicGetPlaylistRequest {
    optional  int64  playlistId  = 1;
}

message SCMusicGetPlaylistResponse {
    optional  SCMusicPlaylist  playlist  = 1;
}

message SCMusicGetPlaylistsRequest {
}

message SCMusicGetPlaylistsResponse {
    repeated  SCMusicPlaylist  playlistsArray  = 1;
}

message SCMusicGetSoundsRequest {
    repeated  uint64  trackIdsArray  = 1[packed=true];
}

message SCMusicGetSoundsResponse {
    repeated  SCMusicCustomSound  customSounds  = 1;
}

message SCMusicMusicPickerLayoutRequestContext {
    optional  string  lensId  = 1;
}

message SCMusicMusicTrackAvailability {
    optional  bool  isAvailable  = 1;
    optional  string  reasonCode  = 2;
    optional  string  debug  = 3;
}

message SCMusicOriginalSoundsCreateSoundRequest {
    optional  string  snapId  = 1;
    optional  SCCOREUUID  userId  = 2;
    optional  SCCTPEncryptedMedia  extractedAudio  = 3;
    optional  int64  durationMs  = 4;
    optional  bool  isBackfill  = 5;
    optional  bool  asyncContentId  = 6;
    optional  string  asyncContentIdMetadata  = 7;
    optional  bool  isCanary  = 8;
    optional  SCCTPEncryptedMedia  audio  = 9;
    optional  SCMusicOriginalSoundsUnencryptedMedia  unencryptedAudio  = 10;
    optional  SCMusicOriginalSoundsUnencryptedRawMedia  unencryptedRawAudio  = 11;
    optional  string  snapjoinerCallbackTopicId  = 12;
    optional  string  countryCode  = 13;
}

message SCMusicOriginalSoundsCreateSoundResponse {
    optional  uint64  trackId  = 2;
    optional  bool  isCopyrightViolation  = 3;
    optional  SCCTXContextClientInfo_MusicTrackInfo  contextMusicTrack  = 4;
}

message SCMusicOriginalSoundsDeleteSoundRequest {
    optional  uint64  trackId  = 1;
    optional  int32  reason  = 2;
}

message SCMusicOriginalSoundsDeleteSoundResponse {
}

message SCMusicOriginalSoundsGetSoundsRequest {
    repeated  uint64  trackIdsArray  = 1[packed=true];
}

message SCMusicOriginalSoundsGetSoundsResponse {
    repeated  SCMusicOriginalSoundsOriginalSound  originalSounds  = 1;
}

message SCMusicOriginalSoundsNotifySnapDeletedRequest {
    optional  uint64  trackId  = 1;
}

message SCMusicOriginalSoundsNotifySnapDeletedResponse {
}

message SCMusicOriginalSoundsNotifyUserDeletedRequest {
    optional  SCCOREUUID  userId  = 1;
    optional  int32  eventType  = 2;
}

message SCMusicOriginalSoundsNotifyUserDeletedResponse {
}

message SCMusicOriginalSoundsOriginalSound {
    optional  SCCTPMusicTrack  musicTrackInfo  = 1;
    optional  string  snapId  = 2;
    optional  SCCOREUUID  creatorUserId  = 3;
    optional  bool  isCopyrightViolation  = 4;
    repeated  string  isrcsArray  = 5;
}

message SCMusicOriginalSoundsTriggerAsyncProcessRequest {
    optional  string  process  = 1;
    optional  string  paramsJson  = 2;
}

message SCMusicOriginalSoundsTriggerAsyncProcessResponse {
}

message SCMusicOriginalSoundsUnencryptedMedia {
    optional  string  contentURL  = 1;
}

message SCMusicOriginalSoundsUnencryptedRawMedia {
    optional  bytes  contentBytes  = 1;
}

message SCMusicOriginalSoundsUpdateSoundRequest {
    optional  uint64  trackId  = 1;
    optional  SCCOREUUID  requestingUserId  = 2;
    optional  string  title  = 3;
    optional  bool  isCopyrightViolation  = 4;
    optional  string  isrc  = 5;
    repeated  string  isrcsArray  = 6;
    optional  bool  updateTitle  = 1003;
    optional  bool  updateIsCopyrightViolation  = 1004;
    optional  bool  updateIsrc  = 1005;
    optional  bool  updateIsrcs  = 1006;
}

message SCMusicOriginalSoundsUpdateSoundResponse {
    optional  int32  errorStatus  = 2;
}

message SCMusicOriginalSoundsValidateSoundRequest {
    optional  SCCOREUUID  userId  = 1;
    optional  SCCTPEncryptedMedia  extractedAudio  = 2;
    optional  SCCTXContextClientInfo_MusicTrackInfo  contextMusicTrack  = 3;
    optional  int64  durationMs  = 4;
    optional  bool  isBackfill  = 5;
    optional  string  snapId  = 6;
    optional  bool  isFullAudio  = 7;
    optional  bool  asyncContentId  = 8;
    optional  string  asyncContentIdMetadata  = 9;
    optional  bool  isCanary  = 10;
    optional  SCCTPEncryptedMedia  audio  = 11;
    optional  SCMusicOriginalSoundsUnencryptedMedia  unencryptedAudio  = 12;
    optional  SCMusicOriginalSoundsUnencryptedRawMedia  unencryptedRawAudio  = 13;
    optional  string  snapjoinerCallbackTopicId  = 14;
    optional  string  countryCode  = 15;
}

message SCMusicOriginalSoundsValidateSoundResponse {
    optional  int32  status  = 1;
    optional  SCCTXContextClientInfo_MusicTrackInfo  contextMusicTrack  = 2;
}

message SCMusicPickerLayout {
    repeated  SCMusicPickerLayoutTab  tabsArray  = 1;
    optional  uint32  tabStartIndex  = 2;
}

message SCMusicPickerLayoutPage {
    optional  string  pageId  = 1;
    repeated  SCMusicPickerLayoutPageSection  sectionsArray  = 2;
}

message SCMusicPickerLayoutPageEmptyStateInfo {
    optional  string  title  = 1;
    optional  SCCTPEncryptedMedia  image  = 2;
}

message SCMusicPickerLayoutPageReference {
    optional  string  pageId  = 1;
    optional  SCMusicPickerLayoutPage  page  = 2;
    optional  string  title  = 3;
    optional  SCMusicPickerLayoutPageEmptyStateInfo  emptyStateInfo  = 4;
}

message SCMusicPickerLayoutPageSection {
    optional  string  title  = 1;
    optional  SCMusicPickerLayoutPageSection_TrackListSection  trackListSection  = 2;
    optional  SCMusicPickerLayoutPageSection_MyCustomSoundsSection  myCustomSoundsSection  = 3;
    optional  SCMusicPickerLayoutPageSection_PlaylistGridSection  playlistGridSection  = 4;
    optional  string  id_p  = 5;
    optional  SCMusicPickerLayoutPageSection_PlaylistListSection  playlistListSection  = 6;
    optional  SCMusicPickerLayoutPageSection_ArtistListSection  artistListSection  = 7;
    optional  SCMusicPickerLayoutPageSection_HeroBannerSection  heroBannerSection  = 8;
    optional  SCMusicPickerLayoutPageSection_MusicItemPreviewSection  musicItemPreviewSection  = 9;
    optional  SCMusicPickerLayoutPageSection_SpotlightTrendingSection  spotlightTrendingSection  = 10;
    optional  SCMusicPickerLayoutPageSection_LensesSection  lensesSection  = 11;
    optional  SCMusicPickerLayoutPageSection_PickerLayoutPageSectionReference  sectionReference  = 12;
}

message SCMusicPickerLayoutPageSection_ArtistListSection {
    repeated  SCMusicPickerLayoutPageSection_ArtistListSection_Entry  entriesArray  = 1;
    optional  SCMusicPickerLayoutPageReference  viewAllPage  = 2;
}

message SCMusicPickerLayoutPageSection_ArtistListSection_Entry {
    optional  string  title  = 1;
    optional  SCMusicAlbumArt  artistArt  = 2;
    optional  SCMusicPickerLayoutPageReference  pageReference  = 3;
    optional  uint64  artistId  = 4;
}

message SCMusicPickerLayoutPageSection_HeroBannerSection {
    repeated  SCMusicPickerLayoutPageSection_HeroBannerSection_HeroBanner  heroBannersArray  = 1;
}

message SCMusicPickerLayoutPageSection_HeroBannerSection_HeroBanner {
    optional  uint64  heroBannerId  = 1;
    optional  int32  type  = 2;
    optional  SCMusicPickerLayoutPageSection_HeroBannerSection_HeroBannerImageCover  imageCover  = 3;
}

message SCMusicPickerLayoutPageSection_HeroBannerSection_HeroBannerAction {
    optional  uint64  heroBannerActionId  = 1;
    optional  string  text  = 2;
    optional  int32  type  = 3;
    optional  SCMusicPickerLayoutPageSection_HeroBannerSection_HeroBannerAction_HeroBannerActionOpenPage  openPageAction  = 4;
}

message SCMusicPickerLayoutPageSection_HeroBannerSection_HeroBannerAction_HeroBannerActionOpenPage {
    optional  SCMusicPickerLayoutPageReference  pageReference  = 1;
}

message SCMusicPickerLayoutPageSection_HeroBannerSection_HeroBannerImageCover {
    optional  string  title  = 1;
    optional  string  subtitle  = 2;
    optional  int32  size  = 3;
    optional  SCCTPEncryptedMedia  backgroundImage  = 4;
    optional  SCMusicPickerLayoutPageSection_HeroBannerSection_HeroBannerAction  action  = 5;
}

message SCMusicPickerLayoutPageSection_LensesSection {
    repeated  SCLELensExplorerLensTile  lensTilesArray  = 1;
}

message SCMusicPickerLayoutPageSection_MusicItemPreviewSection {
    repeated  SCMusicPickerLayoutPageSection_MusicItemPreviewSection_MusicPreviewItem  itemsArray  = 1;
    optional  int32  scrollDirection  = 2;
    optional  SCMusicPickerLayoutPageReference  viewAllPage  = 3;
    optional  int32  layoutType  = 4;
    optional  uint64  rowSize  = 5;
}

message SCMusicPickerLayoutPageSection_MusicItemPreviewSection_MusicPlaylist {
    optional  SCMusicPickerLayoutPageSection_MusicItemPreviewSection_MusicPlaylist_PlaylistBitmojiItem  playlistBitmojiItem  = 1;
}

message SCMusicPickerLayoutPageSection_MusicItemPreviewSection_MusicPlaylist_PlaylistBitmojiItem {
    optional  string  title  = 1;
    optional  string  bitmojiTemplateId  = 2;
    optional  SCCTPEncryptedMedia  fallbackImage  = 3;
    optional  string  backgroundColor  = 4;
    optional  SCMusicPickerLayoutPageReference  pageReference  = 5;
}

message SCMusicPickerLayoutPageSection_MusicItemPreviewSection_MusicPreviewItem {
    optional  SCCTPMusicTrack  track  = 1;
    optional  SCCTPMusicArtist  artist  = 2;
    optional  SCMusicPickerLayoutPageSection_MusicItemPreviewSection_MusicPlaylist  playlist  = 3;
}

message SCMusicPickerLayoutPageSection_MyCustomSoundsSection {
    repeated  SCMusicCustomSound  customSoundsArray  = 1;
}

message SCMusicPickerLayoutPageSection_PickerLayoutPageSectionReference {
    optional  int32  loadingStyle  = 1;
    repeated  string  requiredParamsArray  = 2;
}

message SCMusicPickerLayoutPageSection_PlaylistGridSection {
    repeated  SCMusicPickerLayoutPageSection_PlaylistGridSection_Entry  entriesArray  = 1;
    optional  SCMusicPickerLayoutPageReference  viewAllPage  = 2;
}

message SCMusicPickerLayoutPageSection_PlaylistGridSection_Entry {
    optional  string  title  = 1;
    optional  SCMusicAlbumArt  albumArt  = 2;
    optional  SCMusicPickerLayoutPageReference  pageReference  = 3;
}

message SCMusicPickerLayoutPageSection_PlaylistListSection {
    repeated  SCMusicPickerLayoutPageSection_PlaylistListSection_Entry  entriesArray  = 1;
}

message SCMusicPickerLayoutPageSection_PlaylistListSection_Entry {
    optional  string  title  = 1;
    optional  string  subtitle  = 2;
    repeated  SCMusicAlbumArt  albumArtsArray  = 3;
    optional  SCMusicPickerLayoutPageReference  pageReference  = 4;
}

message SCMusicPickerLayoutPageSection_SpotlightTrendingSection {
    repeated  SCMusicPickerLayoutPageSection_SpotlightTrendingSection_SpotlightTrendingEntry  entriesArray  = 1;
}

message SCMusicPickerLayoutPageSection_SpotlightTrendingSection_SpotlightTrendingEntry {
    optional  SCCTPMusicTrack  track  = 1;
    optional  uint64  topicId  = 2;
    optional  string  snapId  = 3;
    optional  SCCTPEncryptedMedia  thumbnail  = 4;
}

message SCMusicPickerLayoutPageSection_TrackListSection {
    repeated  SCCTPMusicTrack  tracksArray  = 1;
    optional  SCMusicPickerLayoutPageReference  viewAllPage  = 2;
}

message SCMusicPickerLayoutTab {
    optional  string  title  = 1;
    optional  SCMusicPickerLayoutPageReference  pageReference  = 2;
}

message SCMusicPlaylist {
    optional  int64  playlistId  = 1;
    optional  string  name  = 2;
    repeated  SCCTPMusicTrack  tracksArray  = 3;
    optional  string  tabTitle  = 4;
}

message SCMusicTrackLyrics {
    optional  uint64  trackId  = 1;
    repeated  SCMusicTrackLyricsLine  linesArray  = 2;
}

message SCMusicTrackLyricsLine {
    repeated  SCMusicTrackLyricsSync  syncsArray  = 1;
    optional  float  offset  = 2;
    optional  float  offsetEnd  = 3;
}

message SCMusicTrackLyricsSync {
    optional  string  syncString  = 1;
    optional  float  offset  = 2;
}

message SCMusicTriggerAsyncProcessRequest {
    optional  string  process  = 1;
    optional  string  paramsJson  = 2;
}

message SCMusicTriggerAsyncProcessResponse {
}

message SCMusicUpdateCustomSoundRequest {
    optional  uint64  trackId  = 1;
    optional  string  title  = 2;
    optional  bool  isPublic  = 3;
    optional  string  artistName  = 4;
}

message SCMusicUpdateCustomSoundResponse {
    optional  SCMusicCustomSound  customSound  = 1;
    optional  int32  errorStatus  = 2;
    optional  SCMusicError  error  = 3;
}

message SCMusicUpdateOriginalSoundRequest {
    optional  uint64  trackId  = 1;
    optional  string  title  = 2;
}

message SCMusicUpdateOriginalSoundResponse {
    optional  int32  errorStatus  = 2;
}

message SCMusicUpdateSoundRequest {
    optional  SCCOREUUID  userId  = 1;
    optional  uint64  trackId  = 2;
    optional  string  title  = 3;
    optional  bool  isPublic  = 4;
    optional  string  artistName  = 5;
}

message SCMusicUpdateSoundResponse {
    optional  SCMusicCustomSound  customSound  = 1;
    optional  int32  errorStatus  = 2;
}

message SCNotificationClearDeviceTokenRequest {
    optional  SCPushNotificationUUID  userId  = 1;
    optional  int32  reason  = 3;
    optional  int32  deviceType  = 4;
}

message SCNotificationClearDeviceTokenResponse {
    optional  int32  statusCode  = 1;
}

message SCNotificationDeleteUserResponse {
    optional  int32  statusCode  = 1;
}

message SCNotificationDeviceToken {
    optional  string  token  = 1;
    optional  int32  tokenType  = 2;
    optional  int64  updateTimestamp  = 3;
    optional  SCNotificationTokenDeletionInfo  tokenDeletionInfo  = 4;
}

message SCNotificationDeviceTokenUpdateRequest {
    optional  SCPushNotificationUUID  userId  = 1;
    optional  string  deviceToken  = 2;
    optional  string  deviceVoipToken  = 3;
    optional  int32  deviceType  = 4;
    optional  int32  releaseType  = 5;
    optional  SCNotificationPushNotificationEncryptionData  pushNotificationEncryptionData  = 6;
    optional  int32  appId  = 7;
}

message SCNotificationDeviceTokenUpdateResponse {
    optional  int32  statusCode  = 1;
}

message SCNotificationDeviceVersionInfo {
    optional  SCNotificationVersion  appVersion  = 1;
    optional  SCNotificationVersion  osVersion  = 2;
}

message SCNotificationGetNotificationSettingRequest {
    optional  SCPushNotificationUUID  userId  = 1;
    optional  int32  settingChoice  = 2;
}

message SCNotificationGetNotificationSettingResponse {
    optional  int32  notificationSetting  = 1;
    optional  int32  privacySetting  = 2;
    optional  int32  statusCode  = 3;
}

message SCNotificationGetTokenStateRequest {
    optional  SCPushNotificationUUID  userId  = 1;
}

message SCNotificationGetTokenStateResponse {
    optional  int32  deviceTokenState  = 1;
    optional  int32  tokenDeletionReason  = 2;
    optional  int32  deviceType  = 3;
    optional  int32  releaseType  = 4;
    optional  int32  statusCode  = 5;
}

message SCNotificationNotificationSettingUpdateRequest {
    optional  SCPushNotificationUUID  userId  = 1;
    optional  int32  sound  = 2;
    optional  int32  ringingSound  = 3;
    optional  int32  enabled  = 4;
    optional  int32  privacy  = 5;
    optional  int32  bitmoji  = 6;
    optional  int32  webPushEnabled  = 7;
}

message SCNotificationNotificationSettingUpdateResponse {
    optional  int32  statusCode  = 1;
}

message SCNotificationPNDGetResponse {
    optional  int32  statusCode  = 1;
    optional  SCNotificationPushNotificationData  pushNotificationData  = 2;
}

message SCNotificationPushNotificationData {
    optional  SCPushNotificationUUID  userId  = 1;
    optional  string  deviceToken  = 2;
    optional  string  deviceVoipToken  = 3;
    optional  int32  deviceType  = 4;
    optional  int32  releaseType  = 5;
    optional  int32  sound  = 6;
    optional  int32  ringingSound  = 7;
    optional  int32  enabled  = 8;
    optional  int32  privacy  = 9;
    optional  string  snsArn  = 10;
    optional  string  snsVoipArn  = 11;
    optional  SCNotificationPushNotificationEncryptionData  pushNotificationEncryptionData  = 12;
    optional  int32  appId  = 13;
    optional  SCNotificationTokenDeletionInfo  tokenDeletionInfo  = 14;
    optional  int32  bitmoji  = 15;
    optional  SCNotificationTokens  tokens  = 16;
    repeated  SCNotificationSessionData  webSessionsArray  = 17;
    optional  SCNotificationDeviceVersionInfo  deviceVersionInfo  = 18;
    optional  bool  hasWebSessions  = 19;
    optional  int32  webPushEnabled  = 20;
    optional  string  locationToken  = 21;
}

message SCNotificationPushNotificationEncryptionData {
    optional  string  encryptionSecret  = 1;
    optional  int32  encryptionType  = 2;
}

message SCNotificationRegisterDeviceRequest {
    optional  SCPushNotificationUUID  userId  = 1;
    optional  SCNotificationDeviceToken  deviceToken  = 2;
    optional  int32  deviceType  = 3;
    optional  int32  releaseType  = 4;
    optional  SCNotificationPushNotificationEncryptionData  encryptionData  = 5;
    optional  int32  appId  = 6;
}

message SCNotificationRegisterDeviceResponse {
    optional  int32  statusCode  = 1;
    optional  bool  isRetryable  = 2;
}

message SCNotificationSessionData {
    optional  string  sessionId  = 1;
    optional  int32  type  = 2;
    optional  SCNotificationTokenData  tokenData  = 3;
}

message SCNotificationSnsArnUpdateRequest {
    optional  SCPushNotificationUUID  userId  = 1;
    optional  string  arn  = 2;
    optional  string  voipArn  = 3;
}

message SCNotificationSnsArnUpdateResponse {
    optional  int32  statusCode  = 1;
}

message SCNotificationTokenData {
    optional  string  token  = 1;
    optional  string  voipToken  = 2;
    optional  SCNotificationTokenDeletionInfo  tokenDeletionInfo  = 3;
    optional  int64  creationTime  = 4;
}

message SCNotificationTokenDeletionInfo {
    optional  int64  deletionTime  = 1;
    optional  int32  reason  = 2;
}

message SCNotificationTokens {
    repeated  SCNotificationDeviceToken  tokensArray  = 1;
}

message SCNotificationVersion {
    optional  uint32  major  = 1;
    optional  uint32  minor  = 2;
}

message SCNotificationsAckMigrationIosV3Config {
    optional  string  ackTreatmentExt  = 1;
    optional  string  customPathForExt  = 2;
    optional  string  ackTreatmentMainApp  = 3;
    optional  int64  timeoutInSecMainApp  = 4;
    optional  bool  useNewConcurrencyLogicInExt  = 5;
    optional  bool  serveAbToIosThirteenAndAboveOnly  = 6;
    optional  int32  applyIosTwelveRetainedSelfFix  = 7;
    optional  bool  useDeprecatedScrequest  = 8;
}

message SCOrbisGetMultiOrbisStoryRequest {
}

message SCOrbisGetMultiOrbisStoryResponse {
    repeated  SCOrbisStory  orbisStoriesArray  = 1;
}

message SCOrbisGetStoryPreviewsRequest {
    repeated  string  verrazanoIdArray  = 1;
}

message SCOrbisGetStoryPreviewsResponse {
    repeated  SCOrbisStoryPreview  storyPreviewsArray  = 1;
}

message SCOrbisGetStoryRequest {
    optional  string  verrazanoId  = 1;
    optional  string  requestId  = 2;
}

message SCOrbisGetStoryResponse {
    optional  SCOrbisStory  orbisStory  = 1;
}

message SCOrbisGetVenueStoriesRequest {
    optional  uint64  createdAfterMillis  = 1;
    optional  int32  limit  = 2;
}

message SCOrbisGetVenueStoriesResponse {
    repeated  SCOrbisStory  venueStoriesArray  = 1;
}

message SCOrbisSnapInfo {
    optional  SCOrbisSssId  sssId  = 1;
    optional  int64  timestampMs  = 2;
    optional  SCCOREUUID  userId  = 3;
    optional  SCCOREUUID  multiSnapBundleId  = 4;
    optional  int32  multiSnapSequenceId  = 5;
    optional  int32  modDecision  = 6;
    optional  bool  isSpotlight  = 7;
}

message SCOrbisSssId {
    optional  SCCOREUUID  id_p  = 1;
    optional  string  storyId  = 2;
}

message SCOrbisStory {
    optional  string  verrazanoId  = 1;
    optional  int64  createdAtMs  = 2;
    optional  int64  updatedAtMs  = 3;
    optional  SCStoryManifest  manifest  = 4;
    repeated  string  bannedSnapIdsArray  = 5;
    repeated  string  flaggedSnapIdsArray  = 6;
    optional  int32  audience  = 7;
    optional  int64  maxSnapAgeMins  = 8;
    optional  SPCGPoint  centroid  = 9;
    optional  string  placeName  = 10;
    repeated  VRZLocalizedLabels  alternatePlaceNamesArray  = 11;
    repeated  int32  alternateRankingArray  = 12[packed=true];
}

message SCOrbisStoryData {
    optional  SCCOREUUID  verrazanoId  = 1;
    optional  int64  createdAtMs  = 2;
    optional  int64  updatedAtMs  = 3;
    repeated  SCOrbisSnapInfo  snapsArray  = 4;
    optional  int32  storyType  = 5;
}

message SCOrbisStoryPreview {
    optional  string  verrazanoId  = 1;
    optional  SCMTThumbnailInfo  streamingThumbnailInfo  = 2;
    optional  int32  numSnaps  = 3;
}

message SCPBAdOpportunityRequestIds {
    optional  string  filterOpportunityRequestId  = 1;
    optional  string  lensOpportunityRequestId  = 2;
}

message SCPBAirAirRequest {
    optional  string  id_p  = 1;
    optional  string  reportType  = 2;
    optional  string  description_p  = 3;
    optional  string  feature  = 4;
    optional  string  subFeature  = 5;
    optional  string  connectionType  = 6;
    optional  int64  bandwidth  = 7;
    optional  string  shakeSensitivity  = 8;
    optional  double  deviceScore  = 9;
    optional  string  otherInfo  = 10;
    optional  SCPBAirReportOption  reportOption  = 11;
    repeated  string  notificationEmailsArray  = 12;
    optional  int64  appUsedMemory  = 13;
    optional  int64  freeMemory  = 14;
    optional  string  blobData  = 15;
    optional  string  reportSource  = 16;
    optional  string  appLastChangeCommitHash  = 17;
    optional  string  userId  = 18;
    optional  string  deviceId  = 19;
    optional  string  isp  = 20;
    optional  SCPBAirPreferenceInfo  preferenceInfo  = 21;
    optional  bool  guestMode  = 22;
    optional  bool  lockscreen  = 23;
    optional  string  sessionId  = 24;
    optional  double  shakeReproducibility  = 25;
}

message SCPBAirAirResponse {
    optional  int32  statusCode  = 1;
    optional  string  uploadURL  = 2;
    optional  int64  backoffTime  = 3;
    optional  string  debugInfo  = 4;
}

message SCPBAirAppBuildInfo {
    optional  bool  isSelfServiceBuild  = 1;
}

message SCPBAirCrashBreadcrumbData {
    optional  int64  timeStamp  = 1;
    optional  string  content  = 2;
}

message SCPBAirCrashMetaData {
    optional  string  key  = 1;
    optional  string  value  = 2;
}

message SCPBAirCrashReportOtherInfo {
    optional  string  secondaryNativeCrashLog  = 1;
    repeated  SCPBAirCrashBreadcrumbData  breadcrumbsArray  = 2;
    repeated  SCPBAirCrashMetaData  metadataArray  = 3;
    optional  string  crashAppVersion  = 4;
    optional  SCPBAirPreferenceInfo  preferenceInfo  = 5;
    optional  double  crashFormatVersion  = 6;
    optional  bool  anrDeadlock  = 7;
    optional  string  cpuAbi  = 8;
    optional  string  appState  = 9;
    optional  SCPBAirAppBuildInfo  appBuildInfo  = 10;
    optional  string  lastPageView  = 11;
    optional  string  crashLogs  = 12;
    optional  bool  isSystemCrash  = 13;
    optional  string  nonFatalSenderId  = 14;
    optional  bool  isCommonProblemNonFatal  = 15;
}

message SCPBAirPreferenceInfo {
    repeated  SCPBAirPreferenceObject  experimentArray  = 1;
    repeated  SCPBAirPreferenceObject  settingArray  = 2;
    repeated  SCPBAirPreferenceObject  tweakArray  = 3;
    repeated  SCPBAirPreferenceObject  serverSettingArray  = 4;
    repeated  SCPBAirPreferenceObject  featureSettingArray  = 5;
}

message SCPBAirPreferenceObject {
    optional  string  name  = 1;
    optional  string  value  = 2;
}

message SCPBAirReportOption {
    optional  bool  createJira  = 1;
    optional  bool  uploadLog  = 2;
    optional  bool  fromTestAutomation  = 3;
    optional  bool  isAutoShake  = 4;
    repeated  string  jiraLabelsArray  = 5;
}

message SCPBConnectedLensInfo {
    optional  string  appId  = 1;
}

message SCPBContextFilterSkyItem {
    optional  string  uuid  = 1;
    optional  string  URL  = 2;
    optional  string  skyType  = 3;
    optional  string  styleType  = 4;
    optional  float  colorBrightness  = 5;
    optional  string  replacementSkyURL  = 6;
    optional  string  blimpURL  = 7;
}

message SCPBCoordinate {
    optional  double  lat  = 1;
    optional  double  long_p  = 2;
}

message SCPBDynamicContentSetting {
    optional  int64  autoRefreshDelayInMilli  = 1;
    optional  float  autoRefreshMessageXPortrait  = 2;
    optional  float  autoRefreshMessageXLandscape  = 3;
    optional  float  autoRefreshMessageYPortrait  = 4;
    optional  float  autoRefreshMessageYLandscape  = 5;
    optional  string  dynamicFilterRefreshHint  = 6;
    optional  string  dynamicFilterUpdatingMessage  = 7;
}

message SCPBGalleryMediaAttribute {
    optional  string  attribute  = 1;
}

message SCPBGalleryMultiSnapSegment {
    optional  int64  trimmedLeftTime  = 1;
    optional  int64  trimmedRightTime  = 2;
}

message SCPBGalleryServletAddSnapsResponse {
    optional  int32  serviceStatusCode  = 1;
    optional  string  userString  = 2;
    optional  int64  backoffTime  = 3;
    optional  string  debugInfo  = 4;
    optional  SCPBGalleryServletQuota  quota  = 5;
    optional  int32  totalEntryCount  = 6;
    repeated  SCPBGalleryServletSnapResult  snapsArray  = 501;
    optional  int64  lastSeqnum  = 502;
    optional  string  storageType  = 503;
}

message SCPBGalleryServletBaseResponse {
    optional  int32  serviceStatusCode  = 1;
    optional  string  userString  = 2;
    optional  int64  backoffTime  = 3;
    optional  string  debugInfo  = 4;
    optional  SCPBGalleryServletQuota  quota  = 5;
    optional  int32  totalEntryCount  = 6;
}

message SCPBGalleryServletDefunctMedia {
    optional  string  mediaId  = 1;
    optional  int32  defunctReason  = 2;
}

message SCPBGalleryServletDeleteEntriesResponse {
    optional  int32  serviceStatusCode  = 1;
    optional  string  userString  = 2;
    optional  int64  backoffTime  = 3;
    optional  string  debugInfo  = 4;
    optional  SCPBGalleryServletQuota  quota  = 5;
    optional  int32  totalEntryCount  = 6;
    repeated  SCPBGalleryServletEntryResult  entriesArray  = 501;
    optional  int64  lastSeqnum  = 502;
}

message SCPBGalleryServletEntryResult {
    optional  string  entryId  = 1;
    optional  int64  seqNum  = 2;
    optional  int32  statusCode  = 3;
    optional  string  debugInfo  = 4;
}

message SCPBGalleryServletGalleryEntry {
    optional  string  entryId  = 1;
    optional  int64  seqNum  = 2;
    optional  int32  entryType  = 3;
    repeated  SCPBGalleryServletGallerySnap  snapsArray  = 4;
    repeated  string  highlightedSnapIdsArray  = 5;
    optional  int64  createTime  = 6;
    optional  int32  status  = 7;
    optional  string  title  = 8;
    optional  bool  isPrivate  = 9;
    optional  int64  lastAutosaveTime  = 10;
    optional  string  externalId  = 11;
    optional  int32  entrySource  = 12;
    repeated  float  snapOrder  = 13;
    repeated  int64  snapOrderV2  = 14;
}

message SCPBGalleryServletGallerySnap {
    optional  string  snapId  = 1;
    optional  bool  defunct  = 2;
    optional  string  mediaId  = 3;
    optional  string  encryption  = 4;
    optional  int32  mediaType  = 5;
    optional  string  overlay  = 6;
    optional  int64  createTime  = 7;
    optional  int32  orientation  = 8;
    optional  int32  overlayOrientation  = 9;
    optional  SCPBCoordinate  location  = 10;
    optional  string  timeZone  = 11;
    optional  double  temperature  = 12;
    optional  double  speed  = 13;
    optional  double  battery  = 14;
    optional  int32  width  = 15;
    optional  int32  height  = 16;
    optional  double  duration  = 17;
    optional  int64  size  = 18;
    optional  string  mediaDownloadURL  = 19;
    optional  string  hdMediaDownloadURL  = 20;
    optional  int32  hdMediaStatus  = 21;
    optional  string  overlayDownloadURL  = 22;
    optional  bool  hasOverlayImage  = 23;
    optional  string  thumbnailDownloadURL  = 24;
    optional  bool  hasThumbnail  = 25;
    optional  string  tags  = 26;
    optional  int32  tagsVersion  = 27;
    optional  int32  cameraHardwareMountingDegrees  = 28;
    optional  bool  cameraFrontFacing  = 29;
    optional  SCPBGallerySnapSource  source  = 30;
    optional  SCPBStoryFrame  framing  = 31;
    optional  int32  statusCode  = 32;
    optional  double  contentScore  = 33;
    optional  string  deviceId  = 34;
    optional  bool  isInfiniteDuration  = 35;
    optional  string  miniThumbnailBytes  = 36;
    optional  string  thumbnailRedirectURL  = 37;
    optional  bool  infiniteDuration  = 38;
    optional  string  thumbnailRedirectUri  = 39;
    optional  string  overlayRedirectUri  = 40;
    optional  string  mediaRedirectUri  = 41;
    optional  string  hdMediaRedirectUri  = 42;
    optional  bool  gzippedOverlay  = 43;
    optional  int64  thumbnailSize  = 44;
    optional  int64  overlayImageSize  = 45;
    optional  int64  hdMediaSize  = 46;
    optional  int64  captureTime  = 47;
    optional  string  mediaFormat  = 48;
    optional  SCPBGalleryMultiSnapSegment  multiSnapSegment  = 49;
    optional  string  multiSnapGroupId  = 50;
    optional  SCPBGalleryServletSensorBlob  sensorBlob  = 51;
    repeated  SCPBGalleryToolVersion  toolVersionsArray  = 52;
    optional  string  spectaclesMetadataURL  = 53;
    optional  bool  hasSpectaclesMetadata  = 54;
    optional  string  spectaclesMetadataRedirectUri  = 55;
    optional  bool  hasDepthEffect  = 56;
    repeated  SCPBGalleryMediaAttribute  mediaAttributesArray  = 57;
    optional  string  spectaclesSecondaryMetadataURL  = 58;
    optional  bool  hasSpectaclesSecondaryMetadata  = 59;
    optional  string  spectaclesSecondaryMetadataRedirectUri  = 60;
    repeated  SCPBGalleryServletSnapAssetsGallerySnapAsset  snapAssetsArray  = 61;
    repeated  string  assetsArray  = 62;
    optional  string  thumbnailDirectDownloadURL  = 63;
    optional  string  overlayDirectDownloadURL  = 64;
    optional  string  mediaDirectDownloadURL  = 65;
}

message SCPBGalleryServletGallerySyncResponse {
    optional  int32  serviceStatusCode  = 1;
    optional  string  userString  = 2;
    optional  int64  backoffTime  = 3;
    optional  string  debugInfo  = 4;
    optional  SCPBGalleryServletQuota  quota  = 5;
    optional  int32  totalEntryCount  = 6;
    optional  int64  lastSeqnum  = 501;
    optional  int64  highestSeqnum  = 502;
    repeated  SCPBGalleryServletGalleryEntry  entriesArray  = 503;
    optional  bool  hasMore  = 504;
    optional  SCPBGalleryServletGalleryUserSetting  userSettings  = 505;
    repeated  SCPBGalleryServletDefunctMedia  defunctMediasArray  = 506;
    optional  int64  batchLowSeqnum  = 507;
    optional  int64  batchHighSeqnum  = 508;
    optional  int64  lowestSeqnum  = 509;
    optional  string  syncToken  = 510;
}

message SCPBGalleryServletGalleryUserSetting {
    optional  bool  storyAutoSaving  = 1;
    optional  bool  autoSaveToCameraRoll  = 2;
    optional  bool  backupOnCellular  = 3;
    optional  bool  privateGalleryEnabled  = 4;
    optional  bool  topSecretPrivateGalleryEnabled  = 5;
    optional  bool  saveToPrivateGalleryByDefault  = 6;
    optional  string  snapSaveOption  = 7;
    optional  int32  entriesToPrefetchGrid  = 8;
    optional  int32  entriesToPrefetchBrowse  = 9;
    optional  int64  minMediaCacheSize  = 10;
    optional  double  mediaCachePercentage  = 11;
    optional  bool  swipedIntoMemoriesPage  = 12;
    optional  bool  forceSyncRequired  = 13;
}

message SCPBGalleryServletGetSnapsResponse {
    optional  int32  serviceStatusCode  = 1;
    optional  string  userString  = 2;
    optional  int64  backoffTime  = 3;
    optional  string  debugInfo  = 4;
    optional  SCPBGalleryServletQuota  quota  = 5;
    optional  int32  totalEntryCount  = 6;
    repeated  SCPBGalleryServletGallerySnap  snapsArray  = 501;
}

message SCPBGalleryServletQuota {
    optional  bool  unlimited  = 1;
    optional  SCPBGalleryServletQuotaUsage  snapNumber  = 2;
}

message SCPBGalleryServletQuotaUsage {
    optional  int64  remaining  = 1;
    optional  int64  total  = 2;
}

message SCPBGalleryServletSensorBlob {
    optional  string  data_p  = 1;
    optional  int32  sensorMajorVersion  = 2;
    optional  int32  sensorMinorVersion  = 3;
}

message SCPBGalleryServletSnapAssetsAddSnapAssetResponse {
    optional  string  id_p  = 1;
    optional  string  uploadURL  = 2;
    repeated  string  uploadHeaders  = 3;
}

message SCPBGalleryServletSnapAssetsGalleryMediaAssetMetadata {
    optional  int32  mediaType  = 1;
    optional  int64  captureTime  = 2;
    optional  string  mediaFormat  = 3;
    repeated  SCPBGalleryMediaAttribute  mediaAttributesArray  = 4;
}

message SCPBGalleryServletSnapAssetsGallerySnapAsset {
    optional  string  id_p  = 1;
    optional  int32  assetDescriptor  = 2;
    optional  string  downloadURL  = 3;
    optional  SCPBGalleryServletSnapAssetsGallerySnapAssetMetadata  assetMetadata  = 4;
}

message SCPBGalleryServletSnapAssetsGallerySnapAssetMetadata {
    optional  SCPBGalleryServletSnapAssetsGalleryMediaAssetMetadata  mediaMetadata  = 1;
}

message SCPBGalleryServletSnapResult {
    optional  string  snapId  = 1;
    optional  int32  statusCode  = 2;
    optional  string  debugInfo  = 3;
    optional  bool  mediaUploaded  = 4;
    optional  string  mediaURL  = 5;
    optional  string  overlayURL  = 6;
    optional  string  thumbnailURL  = 7;
    repeated  string  mediaUploadHeaders  = 8;
    repeated  string  overlayUploadHeaders  = 9;
    repeated  string  thumbnailUploadHeaders  = 10;
    optional  string  mediaRedirectUri  = 11;
    optional  string  overlayImageRedirectUri  = 12;
    optional  string  thumbnailRedirectUri  = 13;
    repeated  SCPBGalleryServletSnapAssetsAddSnapAssetResponse  snapAssetsArray  = 14;
    repeated  string  assetsArray  = 15;
    optional  string  thumbnailDirectDownloadURL  = 16;
    optional  string  overlayDirectDownloadURL  = 17;
    optional  string  mediaDirectDownloadURL  = 18;
}

message SCPBGalleryServletUpdateEntriesResponse {
    optional  int32  serviceStatusCode  = 1;
    optional  string  userString  = 2;
    optional  int64  backoffTime  = 3;
    optional  string  debugInfo  = 4;
    optional  SCPBGalleryServletQuota  quota  = 5;
    optional  int32  totalEntryCount  = 6;
    repeated  SCPBGalleryServletEntryResult  entriesArray  = 501;
    optional  int64  lastSeqnum  = 502;
}

message SCPBGallerySnapSource {
    optional  int32  type  = 1;
    repeated  string  attributionArray  = 2;
    optional  string  cameraRollId  = 3;
    optional  string  externalId  = 4;
    optional  string  saverUserId  = 5;
    optional  SCPBSnapCreatorAttribution  creatorAttribution  = 6;
}

message SCPBGalleryToolVersion {
    optional  string  tool  = 1;
    optional  int32  version  = 2;
}

message SCPBGeofence {
    optional  string  id_p  = 1;
    repeated  SCPBCoordinate  coordinatesArray  = 2;
}

message SCPBGeofilterDisplayParameters {
    optional  int32  size  = 1;
    optional  string  color  = 2;
    optional  string  font  = 3;
    optional  string  staticText  = 4;
    optional  string  align  = 5;
    optional  float  textAlpha  = 6;
    optional  SCPBTextShadowParameters  textShadow  = 7;
    optional  bool  autoResizeEnabled  = 8;
    optional  string  fallbackText  = 9;
    optional  int32  maxFontSize  = 10;
    optional  string  dynamicText  = 11;
    optional  string  targetDatetime  = 12;
    optional  string  targetDatetimeDirection  = 13;
    optional  string  capitalization  = 14;
    optional  string  calculatedDynamicText  = 15;
    optional  string  fallbackMethod  = 16;
}

message SCPBGeofilterImageMetadata {
    optional  SCPBSize  imageSizePx  = 1;
    optional  SCPBSize  croppedImageSizePx  = 2;
    optional  SCPBIntegerPoint  croppedImageOffset  = 3;
}

message SCPBGeofilterLayoutParameters {
    optional  float  xOffset  = 1;
    optional  float  yOffset  = 2;
    optional  float  xSize  = 3;
    optional  float  ySize  = 4;
    optional  float  rotation  = 5;
    optional  int32  zIndex  = 6;
}

message SCPBGeofilterMarkup {
    optional  int64  refreshRate  = 1;
    optional  string  type  = 2;
    optional  string  source  = 3;
    optional  SCPBGeofilterLayoutParameters  layoutParameters  = 4;
    optional  SCPBGeofilterDisplayParameters  displayParameters  = 5;
    optional  SCPBLocalDateTimeInterval  displaySchedule  = 6;
    optional  SCPBUnlockablesCompanionCreativeProperties  companionCreativeProperties  = 7;
}

message SCPBGeofilterMusicTrackMetadata {
    optional  string  trackId  = 1;
    optional  bytes  contentRestrictions  = 2;
}

message SCPBGeofilterPrompt {
    optional  string  text  = 1;
    optional  string  position  = 2;
    optional  int64  fadeInTimeMs  = 3;
    optional  int64  onScreenTimeMs  = 4;
    optional  int64  fadeOutTimeMs  = 5;
}

message SCPBGeofilterResponse {
    optional  string  filterId  = 1;
    optional  int64  expiresCountdown  = 2;
    optional  string  image  = 3;
    repeated  string  URLParams  = 4;
    optional  string  imageCroppedToVisible  = 5;
    optional  SCPBGeofilterImageMetadata  extraImageMetadata  = 6;
    optional  SCPBGeofence  geofence  = 7;
    optional  string  unlockableContentType  = 8;
    optional  string  unlockableContentId  = 9;
    optional  int32  priority  = 10;
    repeated  string  positionArray  = 11;
    repeated  SCPBGeofilterMarkup  dynamicContentArray  = 12;
    optional  bool  isDynamicGeofilter  = 13;
    optional  int64  clientCacheExpirationDateTime  = 14;
    optional  int64  clientCacheTtlMinutes  = 15;
    optional  bool  isSponsored  = 16;
    optional  SCPBSponsoredSlugPosAndText  sponsoredSlug  = 17;
    optional  string  sponsoredSlugPosition  = 18;
    optional  string  sponsoredSlugImgLink  = 19;
    optional  SCPBDynamicContentSetting  dynamicContentSetting  = 20;
    optional  bool  isLens  = 21;
    optional  SCPBLensData  lensData  = 22;
    repeated  string  lensCategoriesArray  = 23;
    optional  string  section  = 24;
    optional  bool  isFeatured  = 25;
    optional  string  appstoreIapId  = 26;
    optional  string  gplayIapId  = 27;
    optional  string  targetingType  = 28;
    optional  bool  belowDrawingLayer  = 29;
    optional  string  encGeoData  = 30;
    optional  SCPBGeofilterPrompt  geofilterPrompt  = 31;
    optional  SCPBUnlockablesSchedule  schedule  = 32;
    optional  string  unlockDurationMessage  = 33;
    optional  double  filterScore  = 34;
    optional  bool  shouldSubsampleImage  = 35;
    repeated  SCPBLensCategoryDatum  lensCategoriesDataArray  = 36;
    optional  int64  serverTimestamp  = 37;
    optional  bool  guaranteeDelivery  = 38;
    repeated  string  exclusionTagsArray  = 39;
    repeated  string  excludedByTagsArray  = 40;
    optional  int32  lensCarouselIndex  = 41;
    optional  SCPBLensPlacementInfo  lensPlacementInfo  = 42;
    optional  bool  isFrameFilter  = 43;
    optional  SCPBUnlockableTrackInfo  unlockableTrackInfo  = 44;
    optional  string  unlockableCategory  = 45;
    optional  SCPBUnlockablesUnlockableContext  unlockableContext  = 46;
    repeated  string  unlockableAttributesArray  = 47;
    optional  bool  eligibleForNotification  = 48;
    optional  SCPBUnlockablesDynamicContextProperties  dynamicContextProperties  = 49;
    optional  SCPBStickerPack  stickerPackData  = 50;
    optional  SCPBUnlockablesAutoStacking  autoStacking  = 51;
    optional  bool  isAnimated  = 52;
    optional  string  syncSensitivity  = 53;
    repeated  string  populatedUnlockableContextTypesArray  = 54;
    optional  SCPBSponsoredSlugStyle  sponsoredSlugStyle  = 55;
    optional  bool  isMenuFilter  = 56;
    repeated  string  metaTagsArray  = 57;
    optional  bool  hasContextCard  = 58;
    optional  SCPBUnlockablesCarouselGroup  carouselGroup  = 59;
    optional  SCPBUnlockablesArSegmentationFilter  arSegmentation  = 60;
    optional  SCPBUnlockablesAttachment  attachment  = 61;
    optional  SCPBUnlockablesDebugInfo  debugInfo  = 62;
    optional  SCPBUnlockablesScannableData  scannableData  = 63;
    optional  SCPBUnlockablesTooltip  tooltip  = 64;
    optional  string  contextHint  = 65;
    optional  SCPBUnlockablesAudio  audio  = 66;
    optional  SCPBUnlockablesPostCaptureLensData  postCaptureLensData  = 67;
    optional  SCPBUnlockablesCaptionStyle  captionStyle  = 68;
    optional  int64  filterIdLong  = 69;
    optional  bytes  checksum  = 70;
    optional  bool  eligibleForLensExplorer  = 71;
    optional  string  snapInfo  = 72;
    repeated  SCPBUnlockablesCaptionStyle  additionalCaptionStylesArray  = 73;
    repeated  SCPBGeofilterMusicTrackMetadata  musicTrackMetadataArray  = 74;
    repeated  int32  adPlacements  = 75;
    optional  string  sponsoredType  = 76;
}

message SCPBIntegerPoint {
    optional  int32  x  = 1;
    optional  int32  y  = 2;
}

message SCPBLensAssetManifestItem {
    optional  string  type  = 1;
    optional  string  id_p  = 2;
    optional  string  requestTiming  = 3;
    optional  int32  scale  = 4;
    optional  string  assetURL  = 5;
    optional  string  assetSignature  = 6;
    optional  int32  preloadLimit  = 7;
    optional  string  animationGroup  = 8;
    optional  string  originalFilename  = 9;
    optional  string  contentSignature  = 10;
    repeated  SCPBLensAssetStorageOption  storageOptionsArray  = 11;
}

message SCPBLensAssetStorageOption {
    optional  string  optionType  = 1;
    optional  string  fileURL  = 2;
    optional  string  checksum  = 3;
}

message SCPBLensCategoryDatum {
    optional  string  id_p  = 1;
    optional  string  name  = 2;
    optional  string  activator  = 3;
    optional  string  config  = 4;
    optional  string  configChecksum  = 5;
    repeated  string  additionalCarouselCategoriesArray  = 6;
    optional  int32  additionalCarouselLensesLimit  = 7;
}

message SCPBLensData {
    optional  string  code  = 1;
    optional  string  configPath  = 2;
    optional  string  iconLink  = 3;
    optional  string  lensLink  = 4;
    optional  string  hintId  = 5;
    repeated  string  hintTranslations  = 6;
    optional  string  signature  = 7;
    optional  int64  demoStartDate  = 8;
    optional  string  bitmojiComicId  = 9;
    repeated  SCPBLensAssetManifestItem  assetManifestArray  = 10;
    optional  bool  hideUntilAssetsDownloaded  = 11;
    optional  bool  isThirdParty  = 12;
    optional  bool  isStudioPreview  = 13;
    optional  string  lensCreatorUsername  = 14;
    optional  string  lensAttributionName  = 15;
    optional  string  activationCamera  = 16;
    optional  bool  isDisabledForVideoChat  = 17;
    optional  string  unlockCompanionBackReferenceId  = 18;
    optional  string  name  = 19;
    optional  string  filterImageLink  = 20;
    repeated  string  lensDescriptorsArray  = 21;
    optional  string  snappableReplyType  = 22;
    optional  string  lensCreatorUserId  = 23;
    optional  string  lensCreatorAvatarId  = 24;
    optional  string  snappableTaglineKey  = 25;
    optional  SCPBLensSnappablePlayButtonGradientColor  snappablePlayButtonGradient  = 26;
    optional  bool  isLeftCarousel  = 27;
    optional  int64  clientCacheTtl  = 28;
    optional  string  lensCreatorSelfieId  = 29;
    repeated  SCPBLensResource  lensResourcesArray  = 30;
    optional  string  snapProProfileId  = 31;
    optional  bool  isCreatorDeactivated  = 32;
    optional  bool  isOfficialLensCreator  = 33;
    optional  bool  isCommunity  = 34;
    optional  string  lensThumbnailPreviewImageURL  = 35;
    optional  string  apiLevel  = 36;
    optional  int64  lensCollectionId  = 37;
    optional  SCPBConnectedLensInfo  connectedLensInfo  = 38;
    optional  bytes  shoppingLensMetadata  = 39;
    optional  SCPBRemoteApiInfo  remoteApiInfo  = 40;
}

message SCPBLensPlacementInfo {
    optional  string  adServeRequestId  = 1;
    optional  string  rawAdData  = 2;
}

message SCPBLensResource {
    optional  string  resourceType  = 1;
    optional  string  quality  = 2;
    optional  string  archiveLink  = 3;
    optional  string  checksum  = 4;
    optional  string  signature  = 5;
    optional  int64  lastUpdated  = 6;
    optional  int32  algorithmVersion  = 7;
}

message SCPBLensSnappablePlayButtonGradientColor {
    optional  int32  startColor  = 1;
    optional  int32  endColor  = 2;
}

message SCPBLoadScheduledLensesResponseV2 {
    repeated  SCPBGeofilterResponse  activeLensesArray  = 1;
    repeated  SCPBGeofilterResponse  precachedLensesArray  = 2;
    optional  int64  cacheTtlMillis  = 3;
    optional  string  lensListSignature  = 4;
    optional  string  preselectedLensId  = 5;
    repeated  SCPBGeofilterResponse  activeRearLensesArray  = 6;
    optional  int64  medianIndexDepth  = 7;
    repeated  SCPBUnlockablesUnlockableChecksumResponse  activeLensesChecksumsArray  = 8;
    repeated  SCPBUnlockablesUnlockableChecksumResponse  precachedLensesChecksumsArray  = 9;
    repeated  SCPBUnlockablesUnlockableChecksumResponse  activeRearLensesChecksumsArray  = 10;
}

message SCPBLocalDateTimeInterval {
    optional  int64  start  = 1;
    optional  int64  end  = 2;
}

message SCPBLocationDeliveryPurpose {
    optional  string  purposeType  = 1;
    optional  int64  responseTimestamp  = 2;
}

message SCPBPlaybackIosStreamingResourceLoaderConfig {
    optional  bool  enablePartialResponseFromFirstChunk  = 1;
    optional  int32  fetchStrategy  = 2;
    optional  float  fetchChunkSizeMultiplier  = 3;
    optional  float  fetchChunkSizeSuccessiveMultiplier  = 4;
    optional  float  fetchChunkSizeMaxMultiplier  = 5;
    optional  int64  fetchMaxChunkSize  = 6;
}

message SCPBPurikuraPatternItem {
    optional  string  uuid  = 1;
    optional  string  URL  = 2;
    optional  int32  thumbnailX  = 3;
    optional  int32  thumbnailY  = 4;
    optional  int32  thumbnailWidth  = 5;
    optional  int32  thumbnailHeight  = 6;
    optional  string  colorFilter  = 7;
    optional  bool  bokeh  = 8;
    optional  string  beauty  = 9;
}

message SCPBRemoteApiInfo {
    repeated  string  remoteApiSpecIdsArray  = 1;
}

message SCPBRichStoryRichStoryDeepLinkAttachment {
    optional  string  uri  = 1;
    optional  bool  inAppMode  = 2;
    optional  string  appTitle  = 3;
    optional  string  inAppBackground  = 4;
    optional  string  iosAppIcon  = 5;
    optional  int64  iosAppId  = 6;
    optional  string  androidAppIcon  = 7;
    optional  string  androidPackageId  = 8;
    optional  string  tapLinkActionText  = 9;
    optional  string  deepLinkWebFallbackURL  = 10;
    optional  string  deepLinkFallbackType  = 11;
}

message SCPBSavedState {
    optional  bool  saved  = 1;
    optional  int32  version  = 2;
}

message SCPBScDoubleList {
    repeated  double  payloadArray  = 1[packed=true];
}

message SCPBScIntegerIntegerMap {
    repeated  int32  payload  = 1;
}

message SCPBScIntegerList {
    repeated  int32  payloadArray  = 1[packed=true];
}

message SCPBScIntegerStringMap {
    repeated  string  payload  = 1;
}

message SCPBScStringBooleanMap {
    repeated  bool  payload  = 1;
}

message SCPBScStringDoubleMap {
    repeated  double  payload  = 1;
}

message SCPBScStringIntegerMap {
    repeated  int32  payload  = 1;
}

message SCPBScStringList {
    repeated  string  payloadArray  = 1;
}

message SCPBScStringLongMap {
    repeated  int64  payload  = 1;
}

message SCPBScStringStringMap {
    repeated  string  payload  = 1;
}

message SCPBSecurityGetUrlReputationRequest {
    optional  bytes  URL  = 1;
    optional  string  URLStr  = 2;
    optional  string  canonicalURL  = 3;
    optional  bool  skipSafeBrowsing  = 4;
    optional  bool  skipURLResolving  = 5;
}

message SCPBSecurityGetUrlReputationResponse {
    optional  int32  URLType  = 1;
    optional  int64  expirationTimestamp  = 2;
}

message SCPBSecuritySetUrlReputationRequest {
    optional  string  URL  = 1;
    optional  int32  type  = 2;
    optional  int32  blockType  = 3;
    optional  uint64  expiresAtMillis  = 4;
}

message SCPBSize {
    optional  int32  width  = 1;
    optional  int32  height  = 2;
}

message SCPBSnapCreatorAttribution {
    optional  string  creatorId  = 1;
    optional  int32  creatorType  = 2;
    optional  string  creatorDisplayName  = 3;
    optional  string  originalStoryId  = 4;
    optional  int64  originalTimestamp  = 5;
    optional  int32  visibility  = 6;
    optional  string  logoURL  = 7;
    optional  string  creatorUsername  = 8;
    optional  string  editionId  = 9;
    optional  string  attachment  = 10;
}

message SCPBSnaptokenSnapAccessToken {
    optional  string  accessToken  = 1;
    optional  string  scope  = 2;
    optional  int64  expiresInSeconds  = 3;
}

message SCPBSnaptokenSnapAccessTokenPrefetchHint {
    optional  int64  earlyInvalidSecs  = 1;
    optional  int64  earlyPrefetchSecs  = 2;
}

message SCPBSnaptokenSnapAccessTokenRequest {
    optional  string  refreshToken  = 1;
    optional  string  scope  = 2;
}

message SCPBSnaptokenSnapAccessTokensRequest {
    optional  string  refreshToken  = 1;
    repeated  string  scopesArray  = 2;
    optional  string  deviceId  = 3;
    repeated  int32  scopesAsEnumsArray  = 4[packed=true];
}

message SCPBSnaptokenSnapAccessTokensResponse {
    repeated  SCPBSnaptokenSnapAccessToken  snapAccessTokensArray  = 1;
    optional  int32  status  = 2;
    optional  SCPBSnaptokenSnapAccessTokenPrefetchHint  prefetchHint  = 3;
}

message SCPBSnaptokenSnapSessionRequest {
    repeated  string  scopesArray  = 2;
    optional  string  deviceId  = 3;
    repeated  int32  scopesAsEnumsArray  = 4[packed=true];
}

message SCPBSnaptokenSnapSessionResponse {
    optional  string  refreshToken  = 1;
    repeated  SCPBSnaptokenSnapAccessToken  snapAccessTokensArray  = 2;
    optional  int32  status  = 3;
    optional  SCPBSnaptokenSnapAccessTokenPrefetchHint  prefetchHint  = 4;
}

message SCPBSponsoredSlugPosAndText {
    optional  SCPBStrRect  viewRect  = 1;
    optional  string  alignment  = 2;
    optional  string  position  = 3;
    optional  string  hmargin  = 4;
    optional  string  vmargin  = 5;
    optional  string  text  = 6;
    optional  string  sponsoredText  = 7;
    optional  string  sponsoredChannelText  = 8;
    optional  int32  timeBeforeFadeout  = 9;
    optional  string  longformText  = 10;
    optional  int32  longformTimeBeforeFadeout  = 11;
}

message SCPBSponsoredSlugStyle {
    optional  string  font  = 1;
    optional  string  textSize  = 2;
    optional  string  color  = 3;
    optional  string  dropshadowColor  = 4;
    optional  SCPBStrPoint  dropshadowOffset  = 5;
}

message SCPBStickerPack {
    optional  string  packId  = 1;
    optional  string  categoryId  = 2;
    optional  string  iconURL  = 3;
    optional  int32  iconVersion  = 4;
    optional  string  URL  = 5;
    optional  int32  version  = 6;
    optional  bool  active  = 7;
    optional  string  type  = 8;
    repeated  string  capabilitiesArray  = 9;
    repeated  string  targetArray  = 10;
    optional  string  superCategory  = 11;
    optional  SCPBGeofence  geofence  = 12;
    optional  string  unlockablePreviewImgURL  = 13;
    optional  string  title  = 14;
    optional  int64  unlockExpirationTimeInSec  = 15;
    optional  SCPBStickerPackContextualMetadata  contextualPackMetadata  = 16;
    optional  string  unlockableId  = 17;
    optional  bool  isExpandable  = 18;
    optional  string  metadataURL  = 19;
    optional  int64  expirationTtlInSec  = 20;
}

message SCPBStickerPackContextualMetadata {
    optional  string  placement  = 1;
    optional  int32  priority  = 2;
    optional  int32  displayCount  = 3;
}

message SCPBStoryFrame {
    optional  int64  createTime  = 1;
    optional  int32  source  = 2;
}

message SCPBStrPoint {
    optional  string  x  = 1;
    optional  string  y  = 2;
}

message SCPBStrRect {
    optional  string  x  = 1;
    optional  string  y  = 2;
    optional  string  width  = 3;
    optional  string  height  = 4;
}

message SCPBTextShadowParameters {
    optional  string  color  = 1;
    optional  SCPBIntegerPoint  shadowOffset  = 2;
    optional  float  blurRadius  = 3;
}

message SCPBUnlockGetUnlocksResponse {
    repeated  SCPBGeofilterResponse  geofilters  = 1;
    repeated  SCPBUnlockOrderedUnlocks  groupedUnlocks  = 2;
}

message SCPBUnlockMetadataResponse {
    optional  SCPBGeofilterResponse  metadata  = 1;
    optional  string  status  = 2;
}

message SCPBUnlockOrderedUnlocks {
    repeated  SCPBUnlockablesUnlockableChecksumResponse  unlocksArray  = 1;
}

message SCPBUnlockSortedUnlocksResponse {
    repeated  SCPBGeofilterResponse  geofilters  = 1;
    repeated  SCPBUnlockablesUnlockableChecksumResponse  unlocksArray  = 2;
}

message SCPBUnlockUnlockResponse {
    optional  string  unlockStatus  = 1;
    optional  SCPBGeofilterResponse  metadata  = 2;
}

message SCPBUnlockableTrackInfo {
    optional  string  adServeRequestId  = 1;
    optional  string  rawAdData  = 2;
    optional  bool  skipTrack  = 3;
    optional  string  encryptedSponsoredUnlockableTargetingInfoData  = 4;
    optional  string  adTrackURL  = 5;
    optional  string  rankingId  = 6;
    optional  string  rankingData  = 7;
    optional  string  encryptedUserTrackData  = 8;
    optional  string  jsonTrackURL  = 9;
    optional  string  protoTrackURL  = 10;
    optional  string  batchTrackURL  = 11;
    optional  string  skAdNetworkAttribution  = 12;
    optional  bytes  adId  = 13;
}

message SCPBUnlockablesAppInstallAttachment {
    optional  string  appName  = 1;
    optional  string  iosAppId  = 2;
    optional  string  androidAppURL  = 3;
    optional  string  appIconURL  = 4;
}

message SCPBUnlockablesArSegmentationFilter {
    optional  SCPBContextFilterSkyItem  sky  = 1;
    optional  SCPBPurikuraPatternItem  portrait  = 2;
    optional  bool  shouldStillDisplayWithoutSegmentationMatch  = 3;
}

message SCPBUnlockablesAttachment {
    optional  string  attachmentType  = 1;
    optional  SCPBUnlockablesLongFormVideoAttachment  longFormVideo  = 2;
    optional  SCPBUnlockablesWebViewAttachment  webView  = 3;
    optional  string  ctaText  = 4;
    optional  SCPBUnlockablesAppInstallAttachment  appInstall  = 5;
    optional  SCPBRichStoryRichStoryDeepLinkAttachment  deepLink  = 6;
    optional  string  localizedCtaText  = 7;
}

message SCPBUnlockablesAudio {
    optional  string  URL  = 1;
    optional  bool  isLooping  = 2;
}

message SCPBUnlockablesAutoStacking {
    optional  string  autoStackType  = 1;
}

message SCPBUnlockablesBackgroundStyle {
    optional  SCPBUnlockablesTextColor  color  = 1;
    optional  SCPBUnlockablesTextShadow  boxShadow  = 2;
    optional  double  borderRadius  = 3;
    optional  bool  isStretchable  = 4;
}

message SCPBUnlockablesCaptionStyle {
    optional  string  styleId  = 1;
    optional  string  displayName  = 2;
    optional  SCPBUnlockablesFontStyle  fontStyle  = 3;
    optional  SCPBUnlockablesBackgroundStyle  backgroundStyle  = 4;
    optional  bool  colorChangeable  = 5;
    optional  string  baseColor  = 6;
    optional  bool  isWifiOnly  = 7;
    optional  string  type  = 8;
}

message SCPBUnlockablesCarouselGroup {
    optional  string  groupName  = 1;
    optional  float  carouselScore  = 2;
}

message SCPBUnlockablesCompanionCreativeProperties {
    optional  string  companionCreativeType  = 1;
    optional  bool  movable  = 2;
    optional  bool  modifiable  = 3;
    optional  SCPBUnlockablesRatingStickerProperties  ratingStickerProperties  = 4;
}

message SCPBUnlockablesDebugInfo {
    optional  SCPBUnlockablesScheduledLensesDebugInfo  scheduledLensesInfo  = 1;
}

message SCPBUnlockablesDynamicContextProperties {
    repeated  string  deeplinkProperties  = 1;
    repeated  SCPBUnlockablesTimeComponent  relativeTimeComponentsArray  = 2;
}

message SCPBUnlockablesFontStyle {
    optional  string  fontName  = 1;
    optional  string  fontURL  = 2;
    optional  SCPBUnlockablesTextColor  fontColor  = 3;
    optional  string  backgroundImageURL  = 4;
    optional  double  letterSpacing  = 5;
    optional  double  lineHeight  = 6;
    optional  string  textTransform  = 7;
    repeated  SCPBUnlockablesTextShadow  textShadowArray  = 8;
    optional  string  textDecoration  = 9;
    optional  string  textAlign  = 10;
    optional  double  fontSize  = 11;
    optional  SCPBUnlockablesTextPadding  padding  = 12;
    optional  string  backgroundRepeat  = 13;
    optional  SCPBUnlockablesTextColor  borderColor  = 14;
    optional  double  fontBorderWidth  = 15;
    optional  double  minFontSize  = 16;
    optional  double  maxFontSize  = 17;
}

message SCPBUnlockablesGtqFeaturedLensesNamespaceResponse {
    optional  string  namespace_p  = 1;
    repeated  SCPBGeofilterResponse  activeListArray  = 2;
    repeated  SCPBGeofilterResponse  precacheListArray  = 3;
    repeated  SCPBUnlockablesUnlockableChecksumResponse  checksumsListArray  = 4;
    optional  int64  cacheTtlMillis  = 5;
    repeated  SCPBUnlockablesUnlockableChecksumResponse  activeChecksumsListArray  = 6;
    repeated  SCPBUnlockablesUnlockableChecksumResponse  precachedChecksumsListArray  = 7;
    optional  bytes  streamToken  = 8;
}

message SCPBUnlockablesGtqFeaturedLensesResponse {
    repeated  SCPBUnlockablesGtqFeaturedLensesNamespaceResponse  responsesArray  = 1;
}

message SCPBUnlockablesGtqServeResponse {
    optional  SCPBUnlockablesGtqUnlockablesResponse  unlockables  = 1;
    optional  SCPBUnlockablesGtqVenuesResponse  venues  = 2;
}

message SCPBUnlockablesGtqUnlockablesResponse {
    repeated  SCPBGeofilterResponse  filtersArray  = 1;
    repeated  string  invalidFilterIdsArray  = 2;
    repeated  SCPBGeofilterResponse  bitmojiFiltersArray  = 3;
    repeated  SCPBGeofilterResponse  lensesArray  = 4;
    repeated  SCPBGeofilterResponse  prefetchLensesArray  = 5;
    repeated  SCPBGeofilterResponse  stickersArray  = 6;
    repeated  SCPBLocationDeliveryPurpose  purposesArray  = 7;
    optional  SCPBAdOpportunityRequestIds  opportunityRequestIds  = 8;
    repeated  SCPBGeofilterResponse  assetPrecachedFiltersArray  = 9;
    repeated  SCPBGeofilterResponse  previewCaptionStylesArray  = 10;
    repeated  SCPBUnlockablesUnlockableChecksumResponse  checksumResponseListArray  = 11;
    optional  bytes  encryptedUserTrackData  = 12;
    repeated  SCPBUnlockablesLensSnapchat  newActiveLensesArray  = 13;
    repeated  SCPBUnlockablesLensSnapchat  newPrefetchLensesArray  = 14;
    repeated  SCPBUnlockablesUnlockableNoFillAdResponse  noFillAdResponseListArray  = 15;
}

message SCPBUnlockablesGtqVenuesResponse {
    repeated  SCPBVenue  venueFiltersArray  = 1;
}

message SCPBUnlockablesLensCollectionCtaItems {
    optional  int64  id_p  = 1;
    optional  string  iconURL  = 2;
}

message SCPBUnlockablesLensCollectionResponse {
    optional  int64  lensCollectionId  = 1;
    optional  string  name  = 2;
    repeated  SCPBUnlockablesLensCollectionCtaItems  lensCollectionCtaItemsArray  = 3;
    repeated  SCPBGeofilterResponse  lensesArray  = 4;
    optional  string  description_p  = 5;
    optional  string  tileImageURL  = 6;
}

message SCPBUnlockablesLensSnapchat {
    optional  bytes  payload  = 1;
}

message SCPBUnlockablesLongFormVideoAttachment {
    optional  string  videoId  = 1;
    optional  int32  videoPlatform  = 2;
    optional  string  videoURL  = 3;
}

message SCPBUnlockablesOndemandCheckBadWordsRequest {
    repeated  string  wordsArray  = 1;
}

message SCPBUnlockablesPostCaptureLensData {
    optional  string  resourceURL  = 1;
    optional  string  resourceSignature  = 2;
}

message SCPBUnlockablesRatingStickerProperties {
    optional  string  unselectedStateAsset  = 1;
    optional  string  selectedStateAsset  = 2;
    optional  int32  initialRating  = 3;
    optional  int32  maxRating  = 4;
}

message SCPBUnlockablesScannableData {
    optional  string  data_p  = 1;
}

message SCPBUnlockablesSchedule {
    optional  string  schedulingType  = 1;
    optional  string  startDateTime  = 2;
    optional  string  endDateTime  = 3;
    optional  string  timezone  = 4;
    optional  bool  useLocalTimezone  = 5;
    optional  string  repetitionFrequency  = 6;
    optional  string  repetitionEndDateTime  = 7;
    optional  string  weeklyFrequency  = 8;
    repeated  SCPBUnlockablesScheduleInterval  repeatIntervalsArray  = 9;
}

message SCPBUnlockablesScheduleInterval {
    optional  string  startDateTime  = 1;
    optional  string  endDateTime  = 2;
    optional  int64  startMillisSinceEpoch  = 3;
    optional  int64  endMillisSinceEpoch  = 4;
}

message SCPBUnlockablesScheduleLensesCache {
    repeated  SCPBUnlockablesGtqFeaturedLensesNamespaceResponse  responsesArray  = 1;
    optional  int64  lastModifiedTime  = 2;
}

message SCPBUnlockablesScheduledLensesDebugInfo {
    optional  bool  isRanked  = 1;
}

message SCPBUnlockablesTextColor {
    repeated  string  colorArray  = 1;
    repeated  double  colorStopArray  = 2[packed=true];
    optional  string  colorTransform  = 3;
    optional  double  colorGradientAngleDegree  = 4;
    repeated  double  colorTransformParamsArray  = 5[packed=true];
}

message SCPBUnlockablesTextPadding {
    optional  double  top  = 1;
    optional  double  left  = 2;
    optional  double  right  = 3;
    optional  double  bottom  = 4;
}

message SCPBUnlockablesTextShadow {
    optional  SCPBUnlockablesTextColor  color  = 1;
    optional  double  x  = 2;
    optional  double  y  = 3;
    optional  double  radius  = 4;
}

message SCPBUnlockablesTimeComponent {
    optional  string  timeUnit  = 1;
    optional  string  singularName  = 2;
    optional  string  pluralName  = 3;
}

message SCPBUnlockablesTooltip {
    optional  string  message  = 1;
    optional  int32  coolDownPeriodMinutes  = 2;
}

message SCPBUnlockablesUnlockableChecksumResponse {
    optional  int64  id_p  = 1;
    optional  bytes  checksum  = 2;
    optional  int64  clientCacheTtlMinutes  = 3;
}

message SCPBUnlockablesUnlockableContext {
    repeated  string  triggerContextsArray  = 1;
    repeated  string  friendContextsArray  = 2;
    repeated  string  cameraContextsArray  = 3;
    repeated  string  mediaTypeContextsArray  = 4;
    repeated  int64  actionmojiContextsArray  = 5[packed=true];
    repeated  string  visualContextsArray  = 6;
    repeated  string  lensApplicableContextsArray  = 7;
}

message SCPBUnlockablesUnlockableNoFillAdResponse {
    repeated  int32  carouselIndexMap  = 1;
    optional  bytes  serveItemId  = 2;
    optional  bytes  encryptedAdData  = 3;
}

message SCPBUnlockablesWebViewAttachment {
    optional  string  webViewURL  = 1;
    optional  bool  shouldAutoFill  = 2;
}

message SCPBUserOwnedUnlockablesResponse {
    repeated  SCPBGeofilterResponse  userOwnedUnlockablesArray  = 1;
    repeated  SCPBGeofilterResponse  personalFiltersArray  = 2;
    repeated  SCPBGeofilterResponse  userUnlockedFiltersArray  = 3;
    optional  string  lensListSignature  = 4;
    repeated  SCPBGeofilterResponse  userUnlockedStickerPacksArray  = 5;
    repeated  SCPBGeofilterResponse  userPinnedLensesArray  = 6;
    repeated  SCPBUnlockablesUnlockableChecksumResponse  userUnlockedFiltersChecksumsArray  = 7;
    repeated  SCPBUnlockablesUnlockableChecksumResponse  userPinnedLensesChecksumsArray  = 8;
}

message SCPBVenue {
    optional  string  venueId  = 1;
    optional  string  name  = 2;
    optional  string  locality  = 3;
    optional  string  filterId  = 4;
    optional  string  subtitle  = 5;
    optional  bool  splitByServer  = 6;
    optional  string  matchingGeofilterId  = 7;
    optional  bool  isExtra  = 8;
    optional  string  venueName  = 9;
    repeated  string  categoriesArray  = 10;
    optional  string  iconURL  = 11;
    optional  string  superCategory  = 12;
}

message SCPBWeb3FTXMetadata {
    optional  string  ftxUsername  = 1;
}

message SCPBWeb3GetWalletsRequest {
}

message SCPBWeb3GetWalletsResponse {
    repeated  SCPBWeb3Wallet  walletsArray  = 1;
}

message SCPBWeb3InternalLensOwnersRequest {
    optional  string  lensId  = 1;
    optional  string  userId  = 2;
}

message SCPBWeb3InternalLensOwnersResponse {
    optional  SCPBWeb3OneOfOneMetadata  oneOfOne  = 1;
    optional  SCPBWeb3OpenEditionMetadata  openEdition  = 2;
}

message SCPBWeb3LensOwnersRequest {
    optional  string  lensId  = 1;
}

message SCPBWeb3LensOwnersResponse {
    optional  SCPBWeb3OneOfOneMetadata  oneOfOne  = 3;
    optional  SCPBWeb3OpenEditionMetadata  openEdition  = 4;
}

message SCPBWeb3OneOfOneMetadata {
    optional  string  ownerUserId  = 1;
    optional  SCPBWeb3WalletAddress  address  = 2;
    optional  bool  isOwnerAgeGated  = 3;
}

message SCPBWeb3OpenEditionMetadata {
    optional  bool  isOwnedByCurrentUser  = 1;
    optional  int32  numberOfOwners  = 2;
}

message SCPBWeb3RegisterFTXWalletRequestInfo {
    optional  string  nonce  = 1;
    optional  string  redirectLink  = 2;
}

message SCPBWeb3RegisterPhantomWalletInfo {
    optional  string  walletAddress  = 1;
    optional  string  plainTextMessage  = 2;
    optional  string  signedMessage  = 3;
}

message SCPBWeb3RegisterWalletRequest {
    optional  SCPBWeb3RegisterPhantomWalletInfo  registerPhantomWalletInfo  = 1;
    optional  SCPBWeb3RegisterFTXWalletRequestInfo  registerFtxWalletRequestInfo  = 2;
}

message SCPBWeb3RegisterWalletResponse {
    optional  SCPBWeb3Wallet  registeredWallet  = 1;
}

message SCPBWeb3RemoveWalletRequest {
    optional  SCPBWeb3Wallet  walletToRemove  = 1;
}

message SCPBWeb3RemoveWalletResponse {
}

message SCPBWeb3SetWalletRequest {
    optional  string  userId  = 1;
    optional  SCPBWeb3Wallet  wallet  = 2;
}

message SCPBWeb3SetWalletResponse {
}

message SCPBWeb3SolanaAddress {
    optional  string  address  = 1;
}

message SCPBWeb3SolanaAddresses {
    repeated  string  addressesArray  = 1;
}

message SCPBWeb3TokenIdentifier {
    optional  SCPBWeb3SolanaAddress  mintAddress  = 1;
    optional  SCPBWeb3SolanaAddresses  mintAddresses  = 2;
}

message SCPBWeb3Wallet {
    optional  SCPBWeb3WalletAddress  address  = 1;
    optional  SCPBWeb3WalletMetadata  metadata  = 2;
}

message SCPBWeb3WalletAddress {
    optional  SCPBWeb3SolanaAddress  solanaAddress  = 1;
}

message SCPBWeb3WalletMetadata {
    optional  int32  walletProvider  = 1;
    optional  int64  registrationTimestamp  = 2;
    optional  SCPBWeb3WalletProviderMetadata  walletProviderMetadata  = 3;
}

message SCPBWeb3WalletProviderMetadata {
    optional  SCPBWeb3FTXMetadata  ftxMetadata  = 1;
}

message SCPCNAmazonResponseV2 {
    optional  string  sessionId  = 1;
    optional  string  sessionQueryId  = 2;
    repeated  SCPNQueryResult  queryResultsArray  = 3;
    repeated  SCPNProductResult  productResultsArray  = 4;
    optional  string  deeplinkURL  = 5;
}

message SCPCNAudio {
    optional  bytes  audioBytes  = 1;
}

message SCPCNAudioConfig {
    optional  int32  sampleRate  = 1;
    optional  int32  format  = 2;
    repeated  string  preferredLanguagesArray  = 3;
}

message SCPCNBarcode {
    optional  int32  format  = 1;
    optional  string  value  = 2;
}

message SCPCNBytesList {
    repeated  bytes  valueArray  = 1;
}

message SCPCNCOFConfig {
    optional  string  name  = 1;
    optional  Value  value  = 2;
}

message SCPCNCOFLensSearchConfig {
    optional  bool  oldLensSearchRankingEnabled  = 1;
    optional  string  treatment  = 2;
}

message SCPCNCOFScanImageResolution {
    optional  int32  width  = 1;
    optional  int32  height  = 2;
    optional  int32  compressionQuality  = 3;
    optional  bool  frontFacingUploadDisabled  = 4;
}

message SCPCNCOFScanSnapcodesRolloutConfigParams {
    optional  bool  adCreativePreview  = 1;
    optional  bool  addFriendEnabled  = 2;
    optional  bool  commerce  = 3;
    optional  bool  discover  = 4;
    optional  bool  games  = 5;
    optional  bool  message  = 6;
    optional  bool  scanToAuth  = 7;
    optional  bool  scanKit  = 8;
    optional  bool  URL  = 9;
    optional  bool  unlockableLens  = 10;
}

message SCPCNCategoryV2 {
    optional  string  name  = 1;
    optional  float  score  = 2;
}

message SCPCNConfigRequest {
    optional  SCPCNAudioConfig  audioConfig  = 1;
    optional  bool  includeTokenLattice  = 2;
    optional  bool  excludePartialTranscriptions  = 3;
    optional  int32  useCase  = 4;
    optional  bool  processBeyondFirstUtterance  = 5;
    repeated  string  preferredLanguagesArray  = 6;
}

message SCPCNDecryptionKeyIv {
    optional  string  iv  = 1;
    optional  string  key  = 2;
}

message SCPCNFSNScannableRequest {
    optional  string  userId  = 1;
    optional  SCPCNSnapcodeRequest  request  = 2;
}

message SCPCNFSNScannableResponse {
    optional  SCPCNSnapcodeResponse  response  = 1;
}

message SCPCNFloatList {
    repeated  float  valueArray  = 1[packed=true];
}

message SCPCNGTQMockRequest {
    optional  int32  latencyMs  = 2;
}

message SCPCNGTQRequest {
    optional  SCPCNGTQMockRequest  mockRequest  = 1;
    optional  SCULGtqServeRequest  serverRequest  = 2;
}

message SCPCNGeoCoordinate {
    optional  double  latitude  = 1;
    optional  double  longitude  = 2;
}

message SCPCNImageV2 {
    optional  bytes  imageBytes  = 1;
}

message SCPCNInt64List {
    repeated  int64  valueArray  = 1[packed=true];
}

message SCPCNLearnMoreAction {
    optional  string  title  = 1;
    optional  string  html  = 2;
    optional  string  URL  = 3;
}

message SCPCNLensRecommendationRequest {
    optional  SCPCNGTQRequest  gtqRequest  = 1;
}

message SCPCNLensRecommendationResponse {
    optional  SCULLensResponse  lenses  = 1;
    optional  bytes  gtqServeResponse  = 2;
}

message SCPCNLocalTimeV2 {
    optional  int64  timestampMs  = 1;
    optional  int64  timezoneOffsetSec  = 2;
}

message SCPCNOpenAppAction {
    optional  string  title  = 1;
    optional  string  link  = 2;
}

message SCPCNOpenLensAction {
    optional  string  lensId  = 1;
    optional  string  iconURL  = 2;
}

message SCPCNOpenShowcaseAction {
    optional  string  title  = 1;
    optional  bytes  bytes  = 2;
}

message SCPCNPoint {
    optional  double  x  = 1;
    optional  double  y  = 2;
}

message SCPCNRTSAnnotation {
    optional  string  label  = 1;
    optional  float  score  = 2;
}

message SCPCNRTSAnnotations {
    repeated  SCPCNRTSAnnotation  annotationArray  = 1;
}

message SCPCNRect {
    optional  SCPCNPoint  topLeft  = 1;
    optional  double  width  = 2;
    optional  double  height  = 3;
}

message SCPCNScanBarAffordanceRequest {
}

message SCPCNScanBarAffordanceResponse {
    repeated  SCPCNCategoryV2  categoriesArray  = 1;
}

message SCPCNScanCardActionButton {
    optional  SCPCNLearnMoreAction  learnMoreAction  = 1;
    optional  SCPCNOpenAppAction  openAppAction  = 2;
    optional  SCPCNShareAction  shareAction  = 3;
    optional  SCPCNOpenLensAction  openLensAction  = 4;
    optional  SCPCNOpenShowcaseAction  openShowcase  = 5;
}

message SCPCNScanCardData {
    optional  string  category  = 1;
    optional  string  brandImageURL  = 2;
    optional  string  brandName  = 3;
    optional  GTPColor  brandNameColor  = 4;
    optional  string  itemImageURL  = 5;
    optional  string  itemName  = 6;
    optional  string  itemDescription  = 7;
    optional  string  html  = 8;
    repeated  SCPCNScanCardActionButton  actionButtonsArray  = 9;
}

message SCPCNScanCardDataRequestAll {
}

message SCPCNScanCardDataRequestForIds {
    repeated  string  lensIdsArray  = 1;
}

message SCPCNScanCardRequest {
    optional  SCPCNScanCardDataRequestAll  scanCardsAll  = 1;
    optional  SCPCNScanCardDataRequestForIds  scanCardsWithIds  = 2;
}

message SCPCNScanCardResponse {
    optional  string  lensId  = 1;
    optional  SCPCNScanCardData  result  = 2;
}

message SCPCNScanCardResponses {
    repeated  SCPCNScanCardResponse  scanCardDataArray  = 1;
}

message SCPCNScanContext {
    optional  SCPCNLocalTimeV2  time  = 1;
    optional  SCPCNGeoCoordinate  location  = 2;
    optional  bool  isFrontFacing  = 3;
    optional  int32  source  = 4;
    optional  SCPCNPoint  relativeTouchPoint  = 5;
    repeated  SCPCNScanExperimentV2  experimentsArray  = 6;
    optional  string  countryCode  = 7;
    optional  bool  supportsBarcode  = 8;
    optional  string  freeformTweak  = 9;
    optional  bool  supportsScanCards  = 10;
    optional  bool  shouldIntrospectRequest  = 11;
}

message SCPCNScanExperimentV2 {
    optional  string  name  = 1;
    optional  string  treatment  = 2;
}

message SCPCNScanRequest {
    optional  string  id_p  = 1;
    optional  SCPCNScanContext  metadata  = 2;
    optional  SCPCNImageV2  image  = 3;
    optional  string  text  = 4;
    optional  bytes  audio  = 5;
    optional  SCPCNLensRecommendationRequest  lensRecommendationRequest  = 6;
    optional  SCPCNScanBarAffordanceRequest  scanBarAffordanceRequest  = 7;
    optional  SCPCNUtilityLensMetadataRequest  utilityLensMetadataRequest  = 8;
    optional  SCPCNUtilityLensDataRequest  utilityLensResultsRequest  = 9;
    optional  SCPCNScanCardRequest  scanCardsResultsRequest  = 10;
    optional  SCPCNSnapcodeRequest  snapcodeRequest  = 11;
    optional  SCPCNBarcode  barcode  = 12;
}

message SCPCNScanResponse {
    optional  string  id_p  = 1;
    optional  SCPCNLensRecommendationResponse  lensRecommendationResponse  = 6;
    optional  SCPCNScanBarAffordanceResponse  scanBarAffordanceResponse  = 7;
    optional  SCPCNUtilityLensMetadataResponse  utilityLensMetadataResponse  = 8;
    optional  SCPCNUtilityLensDataResponses  utilityLensResultsResponses  = 9;
    optional  SCPCNScanCardResponses  scanCardsResultsResponses  = 10;
    optional  SCPCNSnapcodeResponse  snapcodeResponse  = 11;
    optional  bytes  introspectionData  = 12;
}

message SCPCNScannableAction {
    optional  string  id_p  = 1;
    optional  int32  type  = 2;
    optional  bytes  actionBytes  = 3;
    optional  int32  status  = 4;
    optional  int32  priority  = 5;
    optional  int64  timestampCreatedMs  = 6;
    optional  int64  timestampExpiredMs  = 7;
}

message SCPCNSettingsCategoriesRequiringPermissions {
    repeated  SCPCNSettingsCategoriesRequiringPermissions_Category  categoriesArray  = 1;
}

message SCPCNSettingsCategoriesRequiringPermissions_Category {
    optional  string  categoryId  = 1;
    optional  string  displayName  = 2;
}

message SCPCNSettingsCategoryPermissionSetting {
    optional  string  categoryId  = 1;
    optional  int32  generalScanPermission  = 4;
    optional  SCPCNSettingsPromptHistory  generalScanPermissionPromptsFromMscd  = 6;
    optional  SCPCNSettingsPromptHistory  generalScanPermissionPromptsFromTray  = 7;
}

message SCPCNSettingsCategoryPermissionSettings {
    repeated  SCPCNSettingsCategoryPermissionSetting  settingsArray  = 1;
}

message SCPCNSettingsPromptHistory {
    optional  int64  lastPromptedEpochSec  = 1;
    optional  int64  numPrompts  = 2;
}

message SCPCNSettingsSettingsRequest {
    optional  string  requestId  = 1;
}

message SCPCNSettingsSettingsResponse {
    repeated  SCPCNSettingsSettingsResponse_Section  sectionsArray  = 1;
}

message SCPCNSettingsSettingsResponse_Section {
    optional  string  title  = 1;
    optional  string  subtitle  = 2;
    optional  SCPCNSettingsCategoriesRequiringPermissions  categoriesRequiringPermissions  = 3;
}

message SCPCNShareAction {
    optional  string  iconURL  = 1;
}

message SCPCNSnapcodeRequest {
    optional  int32  snapcodeVersion  = 1;
    optional  string  snapcodeId  = 2;
    optional  bool  augmentedRealityEnabled  = 3;
    optional  bool  socialGraphQuickaddEnabled  = 4;
    optional  bool  createScanHistory  = 5;
}

message SCPCNSnapcodeResponse {
    optional  string  snapcodeId  = 1;
    repeated  SCPCNScannableAction  scannableActionsArray  = 2;
}

message SCPCNTokenLattice {
    optional  string  token  = 1;
    optional  int32  startMs  = 2;
    optional  int32  endMs  = 3;
}

message SCPCNTranscribeFinalResponse {
    optional  string  transcription  = 1;
    repeated  SCPCNTokenLattice  tokenLatticeArray  = 2;
}

message SCPCNTranscribePartialResponse {
    optional  string  transcription  = 1;
}

message SCPCNTranscribeStreamRequest {
    optional  SCPCNAudioConfig  config  = 1;
    optional  bytes  audioSample  = 2;
    optional  SCPCNConfigRequest  configRequest  = 3;
}

message SCPCNTranscribeStreamResponse {
    optional  string  transcription  = 1;
    optional  SCPCNTranscribePartialResponse  partialResponse  = 2;
    optional  SCPCNTranscribeFinalResponse  finalResponse  = 3;
}

message SCPCNUtilityLensData {
    optional  string  html  = 1;
    optional  SCPCNAmazonResponseV2  amazonResponse  = 2;
}

message SCPCNUtilityLensDataRequest {
    optional  SCPCNUtilityLensDataRequestAll  utilityLensesAll  = 1;
    optional  SCPCNUtilityLensDataRequestForIds  utilityLensesWithIds  = 2;
    optional  bool  includeScanCards  = 3;
}

message SCPCNUtilityLensDataRequestAll {
}

message SCPCNUtilityLensDataRequestForIds {
    repeated  string  lensIdsArray  = 1;
}

message SCPCNUtilityLensDataResponse {
    optional  string  lensId  = 1;
    optional  SCPCNUtilityLensData  result  = 2;
    optional  SCPCNScanCardData  scanCard  = 3;
}

message SCPCNUtilityLensDataResponses {
    repeated  SCPCNUtilityLensDataResponse  lensDataArray  = 1;
}

message SCPCNUtilityLensMetadata {
    optional  string  lensId  = 1;
    optional  string  name  = 2;
    optional  string  iconURL  = 3;
    optional  SCPCNUtilityLensViewModel  frontFacingViewModel  = 4;
    optional  SCPCNUtilityLensViewModel  backFacingViewModel  = 5;
    optional  bool  cameraPickerEnabled  = 6;
    optional  bool  barcodeRequired  = 7;
}

message SCPCNUtilityLensMetadataRequest {
}

message SCPCNUtilityLensMetadataResponse {
    repeated  SCPCNUtilityLensMetadata  metadataArray  = 1;
}

message SCPCNUtilityLensNotSupportedViewModel {
    optional  bool  showFlipIcon  = 1;
    optional  string  centerTitle  = 2;
}

message SCPCNUtilityLensSupportedViewModel {
    optional  SCPCNRect  relativeMaskRect  = 1;
    optional  string  idleTooltipTitle  = 2;
    optional  string  idleTooltipSubtitle  = 3;
    optional  string  scanningTooltipTitle  = 4;
    optional  string  scanningTooltipSubtitle  = 5;
    optional  string  noResultsTooltipTitle  = 6;
    optional  string  noResultsTooltipSubtitle  = 7;
}

message SCPCNUtilityLensViewModel {
    optional  SCPCNUtilityLensSupportedViewModel  utilityLensSupportedViewModel  = 1;
    optional  SCPCNUtilityLensNotSupportedViewModel  utilityLensNotSupportedViewModel  = 2;
}

message SCPCNV3AlertDialog {
    optional  string  titleText  = 1;
    optional  string  bodyText  = 2;
    optional  string  primaryCtaText  = 3;
    optional  string  secondaryCtaText  = 4;
}

message SCPCNV3AllUtilityLensMetadataResponseV1 {
    repeated  SCPCNV3UtilityLensMetadata  metadataArray  = 1;
}

message SCPCNV3AllUtilityLensMetadataSubscriptionRequestV1 {
}

message SCPCNV3Barcode {
    optional  int32  format  = 1;
    optional  string  value  = 2;
}

message SCPCNV3CameraShortcut {
    optional  string  title  = 1;
    optional  string  subtitle  = 2;
    optional  string  openInCameraButtonIconURL  = 3;
    optional  string  openInCameraButtonText  = 4;
    repeated  SCPCNV3CameraShortcutAction  actionsArray  = 5;
}

message SCPCNV3CameraShortcutAction {
    optional  SCPCNV3CameraShortcutAction_ShowLenses  showLenses  = 1;
    optional  SCPCNV3CameraShortcutAction_AddMusic  addMusic  = 2;
    optional  SCPCNV3CameraShortcutAction_SetCameraOrientation  setCameraOrientation  = 3;
    optional  SCPCNV3CameraShortcutAction_SetCameraMode  setCameraMode  = 4;
}

message SCPCNV3CameraShortcutAction_AddMusic {
    optional  string  trackId  = 1;
    optional  string  iconURL  = 2;
}

message SCPCNV3CameraShortcutAction_SetCameraMode {
    optional  int32  mode  = 1;
    optional  string  iconURL  = 2;
}

message SCPCNV3CameraShortcutAction_SetCameraOrientation {
    optional  int32  orientation  = 1;
}

message SCPCNV3CameraShortcutAction_ShowLenses {
    optional  bytes  gtqServeResponse  = 1;
}

message SCPCNV3CategoryResponseV1 {
    repeated  SCPCNV3CategoryResponseV1_Result  resultsArray  = 1;
    optional  string  categoryId  = 2;
}

message SCPCNV3CategoryResponseV1_Result {
    optional  SCPCNV3ScanCard  scanCard  = 1;
    optional  SCPCNV3CameraShortcut  cameraShortcut  = 2;
    optional  string  id_p  = 3;
    optional  SCPCNV3Snapcode  snapcode  = 4;
    optional  string  requestId  = 5;
    optional  int64  timestampMs  = 6;
    optional  int32  trayRank  = 7;
    optional  SCPCNV3ScanToLensResult  scanToLensResult  = 12;
}

message SCPCNV3CategorySubscriptionRequestV1 {
    repeated  string  categoryIdsArray  = 1;
    repeated  int32  additionalRequestsArray  = 2[packed=true];
}

message SCPCNV3CreativeLensResponseV1 {
    optional  SCULLensResponse  lenses  = 1;
    optional  bytes  gtqServeResponse  = 2;
}

message SCPCNV3CreativeLensSubscriptionRequestV1 {
    optional  SCPCNV3GTQRequest  gtqRequest  = 1;
}

message SCPCNV3DecodeSnapcodeRequest {
    optional  string  reqId  = 1;
    optional  SCPCNV3Image  image  = 2;
}

message SCPCNV3DecodeSnapcodeResponse {
    repeated  SCPCNV3Snapcode  snapcodesArray  = 1;
}

message SCPCNV3FoodCell {
    optional  string  name  = 1;
    optional  string  imageURL  = 2;
    optional  SCPCNV3ScanCardKnowledgeModel  scanCardKnowledgeModel  = 3;
    optional  SCPCNV3ScanCardRecipeModel  scanCardRecipeModel  = 4;
    optional  string  id_p  = 5;
}

message SCPCNV3GTQMockRequest {
    optional  int32  latencyMs  = 1;
}

message SCPCNV3GTQRequest {
    optional  SCPCNV3GTQMockRequest  mockRequest  = 1;
    optional  SCULGtqServeRequest  serveRequest  = 2;
}

message SCPCNV3Image {
    optional  bytes  imageBytes  = 1;
    optional  int32  cameraOrientation  = 2;
    optional  SCPCNV3Point  relativeTouchPoint  = 3;
    optional  SCPCNCOFScanImageResolution  imageResolution  = 4;
    repeated  SCPCNRTSAnnotations  annotations  = 5;
}

message SCPCNV3LearnMoreAction {
    optional  string  title  = 1;
    optional  string  html  = 2;
    optional  string  URL  = 3;
}

message SCPCNV3LensPreview {
    optional  string  URLTemplate  = 1;
    optional  int32  sequenceSize  = 2;
}

message SCPCNV3MoreScanCanDoCell {
    optional  SCPCNV3UtilityServiceCell  utilityServiceCell  = 1;
}

message SCPCNV3Notification {
    optional  string  text  = 1;
    optional  string  iconURL  = 2;
}

message SCPCNV3OpenAppAction {
    optional  string  title  = 1;
    optional  string  link  = 2;
}

message SCPCNV3OpenProfileAction {
    optional  string  profileId  = 1;
    optional  string  title  = 2;
    optional  bool  isPublicProfile  = 3;
}

message SCPCNV3OpenShowcaseAction {
    optional  string  title  = 1;
    optional  bytes  bytes  = 2;
}

message SCPCNV3OpenSnapchatDeeplinkAction {
    optional  string  URL  = 1;
    optional  string  title  = 2;
}

message SCPCNV3Point {
    optional  double  x  = 1;
    optional  double  y  = 2;
}

message SCPCNV3RecipeCell {
    optional  string  title  = 1;
    optional  string  author  = 2;
    optional  string  imageURL  = 3;
    optional  double  rating  = 4;
    optional  string  cookTime  = 5;
    optional  string  actionURL  = 6;
    optional  string  recipeId  = 7;
}

message SCPCNV3RectRatio {
    optional  double  widthRatio  = 1;
    optional  double  heightRatio  = 2;
}

message SCPCNV3ScanAffordance {
    optional  string  iconURL  = 1;
    optional  string  title  = 2;
    optional  SCPCNV3ScanAffordance_ViewfinderAffordance  viewfinderAffordance  = 3;
    optional  SCPCNV3ScanAffordance_ShazamAffordance  shazamAffordance  = 4;
    optional  string  subtitle  = 6;
}

message SCPCNV3ScanAffordance_ShazamAffordance {
}

message SCPCNV3ScanAffordance_ViewfinderAffordance {
    optional  SCPCNV3RectRatio  rectRatio  = 6;
    optional  string  utilityOverlayURL  = 7;
    optional  string  viewfinderURL  = 8;
}

message SCPCNV3ScanCOFConfig {
    optional  string  name  = 1;
    optional  Value  valueV2  = 4;
}

message SCPCNV3ScanCOFConfigs {
    repeated  SCPCNV3ScanCOFConfig  configsArray  = 1;
}

message SCPCNV3ScanCard {
    optional  SCPCNV3ScanCardModel  scanCardModel  = 1;
    optional  SCPCNV3ScanCardWithLensesModel  scanCardWithLensesModel  = 2;
    optional  SCPCNV3ScanCardMoreScanCanDoModel  scanCardMoreScanCanDoModel  = 3;
    optional  SCPCNV3ScanCardTipsModel  scanCardTipsModel  = 4;
    optional  SCPCNV3ScanCardFoodModel  scanCardFoodModel  = 7;
    optional  SCPCNV3ScanCardCategoryPermissionsPromptModel  scanCardPermissionsPromptModel  = 8;
    optional  SCPCNV3ScanCardBitmojiFashionModel  scanCardBitmojiFashionModel  = 9;
    optional  SCPCNV3ScanCardWebResultModel  scanCardWebResultModel  = 10;
    optional  SCPCNV3ScanCardSpotlightTopicModel  scanCardSpotlightTopicModel  = 11;
    optional  SCPCNV3ScanCardWithLensesModelV2  scanCardWithLensesModelV2  = 12;
    optional  SCPCNV3ScanCardProfileModel  scanCardProfileModel  = 13;
}

message SCPCNV3ScanCardActionButton {
    optional  SCPCNV3LearnMoreAction  learnMoreAction  = 1;
    optional  SCPCNV3OpenAppAction  openAppAction  = 2;
    optional  SCPCNV3OpenShowcaseAction  openShowcaseAction  = 3;
    optional  SCPCNV3ShareResultAction  shareResultAction  = 4;
    optional  SCPCNV3OpenSnapchatDeeplinkAction  openSnapchatDeeplinkAction  = 5;
    optional  SCPCNV3OpenProfileAction  openProfileAction  = 6;
}

message SCPCNV3ScanCardBitmojiFashionModel {
    optional  string  header  = 1;
    optional  string  subtitle  = 2;
    repeated  SCBitmojiUUID  costumeOverrideIdsArray  = 3;
    optional  BMCompactAvatarId  bitmojiAvatarId  = 4;
}

message SCPCNV3ScanCardCategoryPermissionsPromptModel {
    optional  string  categoryId  = 1;
    optional  string  headerText  = 2;
    optional  string  headerIconURL  = 3;
    optional  string  bodyText  = 4;
    optional  string  ctaText  = 5;
    optional  SCPCNV3Notification  enabledPermissionsNotification  = 6;
    optional  SCPCNV3AlertDialog  dismissAlertDialog  = 7;
}

message SCPCNV3ScanCardFoodModel {
    optional  string  header  = 1;
    repeated  SCPCNV3FoodCell  cellsArray  = 2;
}

message SCPCNV3ScanCardKnowledgeModel {
    optional  string  header  = 1;
    optional  string  headerIconURL  = 2;
    optional  string  title  = 3;
    optional  string  imageURL  = 4;
    optional  string  knowledgeSource  = 5;
    optional  string  bodyText  = 6;
    repeated  SCPCNV3ScanCardActionButton  actionButtonsArray  = 7;
}

message SCPCNV3ScanCardModel {
    optional  string  utilityServiceId  = 1;
    optional  string  category  = 2;
    optional  string  brandImageURL  = 3;
    optional  string  brandName  = 4;
    optional  GTPColor  brandNameColor  = 5;
    optional  string  itemImageURL  = 6;
    optional  string  itemName  = 7;
    optional  string  itemDescription  = 8;
    optional  string  html  = 9;
    repeated  SCPCNV3ScanCardActionButton  actionButtonsArray  = 10;
}

message SCPCNV3ScanCardMoreScanCanDoModel {
    repeated  SCPCNV3MoreScanCanDoCell  cellsArray  = 1;
    optional  string  header  = 2;
    optional  string  subtitle  = 3;
}

message SCPCNV3ScanCardProfileModel {
    optional  string  profileName  = 1;
    optional  string  profileImageURL  = 2;
    optional  string  profileDescription  = 3;
    optional  bool  isSnapPro  = 4;
    repeated  SCPCNV3ScanCardActionButton  actionButtonsArray  = 5;
    optional  string  profileBadgeIconURL  = 6;
}

message SCPCNV3ScanCardRecipeModel {
    optional  string  header  = 1;
    optional  string  headerIconURL  = 2;
    repeated  SCPCNV3RecipeCell  cellsArray  = 3;
}

message SCPCNV3ScanCardResponseV1 {
    repeated  SCPCNV3ScanCardModel  scanCardArray  = 1;
}

message SCPCNV3ScanCardSpotlightTopicModel {
    optional  string  header  = 1;
    optional  string  headerIconURL  = 2;
    optional  string  topicId  = 3;
    repeated  SCPCNV3ScanCardSpotlightVideo  videosArray  = 4;
}

message SCPCNV3ScanCardSpotlightVideo {
    optional  string  thumbnailURL  = 1;
    optional  SCPCNDecryptionKeyIv  decryptionKeyIv  = 2;
    optional  int64  viewCount  = 3;
    optional  string  snapId  = 4;
}

message SCPCNV3ScanCardSubscriptionRequestV1 {
    optional  bool  allUtilities  = 1;
    optional  string  utilityServiceId  = 2;
}

message SCPCNV3ScanCardTipsModel {
    repeated  SCPCNV3ScanCardTipsModel_Tip  tipsArray  = 1;
    optional  bool  autoscrollEnabled  = 2;
}

message SCPCNV3ScanCardTipsModel_Tip {
    optional  string  title  = 1;
    optional  string  subtitle  = 2;
    optional  string  iconURL  = 3;
}

message SCPCNV3ScanCardWebResultModel {
    optional  string  header  = 1;
    repeated  SCPCNV3WebResultCell  cellsArray  = 2;
}

message SCPCNV3ScanCardWithLensesModel {
    optional  bytes  gtqServeResponse  = 1;
    optional  string  header  = 2;
    optional  string  overlayIconURL  = 3;
    optional  string  openToLensId  = 4;
    optional  string  subtitle  = 5;
    repeated  SCPCNV3LensPreview  previews  = 6;
}

message SCPCNV3ScanCardWithLensesModelV2 {
    repeated  SCPCNV3ScanCardWithLensesModelV2_Lens  lensesArray  = 1;
    optional  string  header  = 2;
    optional  string  subtitle  = 3;
    optional  string  overlayIconURL  = 4;
    optional  string  openToLensId  = 5;
}

message SCPCNV3ScanCardWithLensesModelV2_Lens {
    optional  string  id_p  = 1;
    optional  string  name  = 2;
    optional  string  creatorName  = 3;
    optional  string  iconURL  = 4;
    optional  SCPCNV3LensPreview  preview  = 6;
}

message SCPCNV3ScanCategoryMetadata {
    optional  string  categoryId  = 1;
    optional  int32  requestedDataType  = 2;
    repeated  int32  supportedCameraOrientationsArray  = 3[packed=true];
    optional  string  scanningText  = 4;
    optional  string  scanningSubtext  = 5;
    optional  string  preScanText  = 6;
    optional  string  preScanSubtext  = 7;
    optional  string  preScanIconURL  = 8;
}

message SCPCNV3ScanConfigurationRequest {
    optional  SCPCNV3ScanContext  context  = 1;
    repeated  SCPCNV3ScanSubscriptionRequest  subscriptionRequestsArray  = 2;
}

message SCPCNV3ScanContext {
    optional  SCPCNGeoCoordinate  location  = 1;
    repeated  SCPCNV3ScanExperiment  experimentsArray  = 4;
    optional  string  freeformTweak  = 5;
    optional  SCPCNV3GTQRequest  gtqRequest  = 6;
    optional  bool  shouldIntrospectRequest  = 7;
    optional  SCPCNSettingsCategoryPermissionSettings  categoryPermissionSettings  = 8;
    optional  BMCompactAvatarId  bitmojiCompactAvatarId  = 9;
    optional  string  clientSessionId  = 10;
    optional  string  queryId  = 11;
    optional  SCPCNV3ScanContext_IntrospectionRequest  introspectionRequest  = 12;
}

message SCPCNV3ScanContext_IntrospectionRequest {
    optional  bool  introspectAnalyzers  = 1;
}

message SCPCNV3ScanDataRequest {
    optional  SCPCNV3Image  image  = 1;
    optional  SCPCNV3Barcode  barcode  = 2;
    optional  SCPCNAudio  audio  = 3;
}

message SCPCNV3ScanExperiment {
    optional  string  name  = 1;
    optional  string  treatmentName  = 3;
    optional  SCPCNV3ScanCOFConfigs  configs  = 5;
}

message SCPCNV3ScanMetadataRequest {
    optional  string  requestId  = 1;
    repeated  SCPCNV3ScanExperiment  experimentsArray  = 2;
}

message SCPCNV3ScanMetadataResponse {
    repeated  SCPCNV3ScanMetadataResponse_Metadata  metadataArray  = 1;
}

message SCPCNV3ScanMetadataResponse_Metadata {
    optional  SCPCNV3ScanCategoryMetadata  scanCategoryMetadata  = 1;
}

message SCPCNV3ScanModeMetadata {
    optional  string  categoryId  = 1;
    optional  string  header  = 2;
    optional  string  iconURL  = 3;
    optional  SCPCNV3ScanCategoryMetadata  scanCategoryMetadatas  = 4;
}

message SCPCNV3ScanModesMetadataRequest {
    optional  string  requestId  = 1;
}

message SCPCNV3ScanModesMetadataResponse {
    optional  string  drawerHeader  = 1;
    repeated  SCPCNV3ScanModeMetadata  scanModeMetadatasArray  = 2;
}

message SCPCNV3ScanStreamRequest {
    optional  string  sessionId  = 1;
    optional  int64  timestampMs  = 2;
    optional  int64  timezoneOffsetSec  = 3;
    optional  SCPCNV3ScanConfigurationRequest  configurationRequest  = 4;
    optional  SCPCNV3ScanDataRequest  dataRequest  = 5;
    optional  string  requestId  = 6;
}

message SCPCNV3ScanStreamResponse {
    optional  string  subscriptionId  = 1;
    optional  int64  timestampMs  = 2;
    optional  SCPCNV3CreativeLensResponseV1  creativeLensResponseV1  = 3;
    optional  SCPCNV3AllUtilityLensMetadataResponseV1  allUtilityLensMetadataResponseV1  = 4;
    optional  SCPCNV3ScanCardResponseV1  scanCardResponseV1  = 5;
    optional  SCPCNV3CategoryResponseV1  categoryResponseV1  = 7;
    repeated  bytes  introspectionDataArray  = 8;
    optional  SCPCNV3ScanStreamResponse_IntrospectionData  introspectionDataV2  = 10;
}

message SCPCNV3ScanStreamResponse_IntrospectionData {
    repeated  SCPNAnalyzerResponse  analyzerOutput  = 1;
}

message SCPCNV3ScanSubscriptionRequest {
    optional  string  subscriptionId  = 1;
    optional  bool  closeAfterFirstResponse  = 2;
    optional  SCPCNV3CreativeLensSubscriptionRequestV1  creativeLensSubscriptionRequestV1  = 3;
    optional  SCPCNV3AllUtilityLensMetadataSubscriptionRequestV1  allUtilityLensMetadataRequestV1  = 4;
    optional  SCPCNV3ScanCardSubscriptionRequestV1  scanCardSubscriptionRequestV1  = 5;
    optional  SCPCNV3CategorySubscriptionRequestV1  categorySubscriptionRequestV1  = 6;
}

message SCPCNV3ScanToLensResult {
    repeated  string  lensIdsArray  = 1;
    optional  bytes  scanFromLensResponseJson  = 2;
}

message SCPCNV3ShareResultAction {
    optional  string  iconURL  = 1;
}

message SCPCNV3Snapcode {
    optional  uint32  version  = 1;
    optional  string  decodeMessageUuid  = 2;
}

message SCPCNV3UtilityLensMetadata {
    optional  string  lensId  = 1;
    optional  string  name  = 2;
    optional  string  iconURL  = 3;
    optional  SCPCNV3UtilityLensViewModel  frontFacingViewModel  = 4;
    optional  SCPCNV3UtilityLensViewModel  backFacingViewModel  = 5;
    optional  bool  cameraPickerEnabled  = 6;
    optional  bool  barcodeRequired  = 7;
}

message SCPCNV3UtilityLensUnsupportedAffordanceViewModel {
    optional  string  instructionLabel  = 1;
}

message SCPCNV3UtilityLensViewFinderAffordanceViewModel {
    optional  SCPCNV3RectRatio  viewFinderRatio  = 1;
    optional  string  instructionTitle  = 2;
    optional  string  instructionSubtitle  = 3;
    optional  string  failureTitle  = 4;
    optional  string  failureSubtitle  = 5;
}

message SCPCNV3UtilityLensViewModel {
    optional  SCPCNV3UtilityLensUnsupportedAffordanceViewModel  utilityLensUnsupportedAffordanceViewModel  = 1;
    optional  SCPCNV3UtilityLensViewFinderAffordanceViewModel  utilityLensViewFinderAffordanceViewModel  = 2;
    optional  SCPCNV3UtilityLensWaveAffordanceViewModel  utilityLensWaveAffordanceViewModel  = 3;
}

message SCPCNV3UtilityLensWaveAffordanceViewModel {
    optional  string  instructionTitle  = 1;
    optional  string  instructionSubtitle  = 2;
    optional  string  failureTitle  = 3;
    optional  string  failureSubtitle  = 4;
}

message SCPCNV3UtilityServiceCell {
    optional  string  serviceId  = 1;
    optional  string  title  = 2;
    optional  string  subtitle  = 3;
    optional  string  iconURL  = 4;
    optional  string  scanningText  = 5;
    optional  string  scanningSubtext  = 6;
    optional  SCPCNV3UtilityServiceCell_PermissionsPrompt  permissionsPrompt  = 7;
    optional  SCPCNV3ScanAffordance  scanAffordance  = 8;
}

message SCPCNV3UtilityServiceCell_PermissionsPrompt {
    optional  SCPCNV3AlertDialog  permissionsAlertDialog  = 1;
    optional  SCPCNV3Notification  enabledPermissionsNotification  = 2;
}

message SCPCNV3WebResultCell {
    optional  WebResult  webResult  = 1;
}

message SCPCNVoiceScanLensRecommendationAction {
    optional  SCPCNUtilityLensMetadataResponse  utilityLensMetadataResponse  = 1;
    optional  SCPCNLensRecommendationResponse  lensRecommendationResponse  = 2;
    optional  SCPCNVoiceScanLensRecommendationAction_DebugInfo  debug  = 3;
}

message SCPCNVoiceScanLensRecommendationAction_DebugInfo {
    repeated  SCPCNVoiceScanLensRecommendationAction_DebugInfo_SpacyToken  spacyTokensArray  = 1;
    optional  string  bleveQuery  = 2;
    repeated  SCPCNVoiceScanLensRecommendationAction_DebugInfo_Tags  tagsArray  = 3;
}

message SCPCNVoiceScanLensRecommendationAction_DebugInfo_SpacyToken {
    optional  string  word  = 1;
    optional  string  pos  = 2;
    optional  bool  usedInBleveQuery  = 3;
}

message SCPCNVoiceScanLensRecommendationAction_DebugInfo_Tags {
    optional  string  lensId  = 1;
    optional  string  type  = 2;
    repeated  string  valuesArray  = 3;
}

message SCPCNVoiceScanRequest {
    optional  string  id_p  = 1;
    optional  string  transcription  = 2;
    optional  SCPCNGTQRequest  gtqRequest  = 3;
    optional  bool  returnDebugInfo  = 4;
    optional  int32  source  = 5;
}

message SCPCNVoiceScanResponse {
    optional  string  id_p  = 1;
    optional  SCPCNVoiceScanLensRecommendationAction  lensRecommendationAction  = 2;
}

message SCPCreatePollRequest {
    optional  SCPPollInfo  pollInfo  = 1;
}

message SCPCreatePollResponse {
    optional  string  pollId  = 1;
    optional  string  error  = 2;
    optional  uint64  votingEndTime  = 3;
}

message SCPFDModel {
    optional  bytes  model  = 1;
    optional  int32  backend  = 2;
    repeated  SCPFDModel_TensorDefinition  inputs  = 3;
    repeated  SCPFDModel_TensorDefinition  outputs  = 4;
    optional  SCPFDModel_Options  options  = 5;
    optional  bool  trainable  = 6;
}

message SCPFDModel_Options {
    optional  bool  enableMeanSubtraction  = 1;
    repeated  float  channelMeansArray  = 2[packed=true];
    optional  int32  normalization  = 3;
    optional  bool  enableScale  = 4;
    optional  float  scale  = 5;
}

message SCPFDModel_TensorDefinition {
    optional  SCPFDModel_TensorShape  shape  = 2;
}

message SCPFDModel_TensorShape {
    optional  int32  n  = 1;
    optional  int32  c  = 2;
    optional  int32  h  = 3;
    optional  int32  w  = 4;
}

message SCPGTQMockRequest {
    optional  int32  latencyMs  = 1;
}

message SCPGTQRequest {
    optional  SCPGTQMockRequest  mockRequest  = 1;
    optional  SCULGtqServeRequest  serveRequest  = 2;
}

message SCPGetPollRequest {
    optional  string  pollId  = 1;
    optional  bool  includeVoterList  = 2;
    optional  string  userId  = 3;
}

message SCPGetPollResponse {
    optional  SCPPollInteractions  interactions  = 2;
    optional  string  error  = 3;
    optional  bool  isCreator  = 4;
}

message SCPMDRBoltRegisteredModelReference {
    optional  bytes  contentObject  = 1;
    optional  string  contentURL  = 2;
}

message SCPMDRDeliverableModel {
    optional  SCPMDRFastDNNDeliverableModel  fastdnnModel  = 1;
    optional  int32  modelApi  = 2;
    optional  SCPMDRImageClassificationMetadata  imageClassificationMetadata  = 3;
    optional  SCPMDRVisionDeliverableModel  visionModel  = 4;
    optional  int32  hash_p  = 5;
    optional  SCPMDRSnapScanDeliverableModel  snapscanModel  = 6;
    optional  SCPMDRPercGraphDeliverableModel  percgraphModel  = 7;
}

message SCPMDRDeliverableModelHandle {
    optional  string  modelId  = 1;
    optional  bytes  contentObject  = 2;
    repeated  string  userData  = 3;
}

message SCPMDRFastDNNDeliverableModel {
    optional  SCPMDRFastDNNDeliverableModel_Identifier  identifier  = 1;
    optional  SCPFDModel  model  = 2;
}

message SCPMDRFastDNNDeliverableModel_Identifier {
    optional  string  name  = 1;
    optional  string  flavor  = 2;
    optional  int32  backend  = 3;
    optional  string  version  = 4;
}

message SCPMDRImageClassificationMetadata {
    repeated  string  labels  = 1;
    repeated  float  thresholds  = 2;
    optional  int32  topN  = 3;
    repeated  SCPMDRImageClassificationMetadata_ScorePropagation  scorePropagationsArray  = 4;
}

message SCPMDRImageClassificationMetadata_ScorePropagation {
    optional  int32  srcClassId  = 1;
    repeated  int32  dstClassIdsArray  = 2[packed=true];
}

message SCPMDRModelDeliveryConfig {
    repeated  SCPMDRDeliverableModelHandle  modelHandles  = 1;
}

message SCPMDRPercGraphDeliverableModel {
    optional  SCPMDRPercGraphDeliverableModel_Identifier  identifier  = 1;
    optional  bytes  model  = 2;
}

message SCPMDRPercGraphDeliverableModel_Identifier {
    optional  string  name  = 1;
    optional  string  flavor  = 2;
    optional  string  version  = 3;
}

message SCPMDRRegisteredModelReference {
    optional  string  id_p  = 1;
    optional  SCPMDRBoltRegisteredModelReference  boltReference  = 2;
    optional  int32  hash_p  = 3;
}

message SCPMDRSnapScanDeliverableModel {
    optional  SCPMDRSnapScanDeliverableModel_Identifier  identifier  = 1;
    optional  SCPSSModel  model  = 2;
}

message SCPMDRSnapScanDeliverableModel_Identifier {
    optional  string  name  = 1;
    optional  string  flavor  = 2;
    optional  string  version  = 3;
}

message SCPMDRVisionDeliverableModel {
    optional  SCPMDRVisionDeliverableModel_Identifier  identifier  = 1;
    optional  SCPVNModel  model  = 2;
}

message SCPMDRVisionDeliverableModel_Identifier {
    optional  string  name  = 1;
    optional  string  flavor  = 2;
    optional  int32  requestType  = 3;
    optional  string  version  = 4;
}

message SCPNAmazonData {
    optional  string  asin  = 1;
    optional  bool  isPrime  = 2;
}

message SCPNAnalyzer {
    optional  int32  type  = 1;
    optional  int32  maxResults  = 2;
}

message SCPNAnalyzerRequestMetadata {
    optional  float  validateVideoDurationLimit  = 7;
    optional  string  modelVersionLabel  = 8;
    optional  SCPNVisualSearchRequestMetadata  visualSearchRequestMetadata  = 9;
    repeated  SCPNBoundingPoly  normedBboxesArray  = 10;
    optional  SCPNLookalikeRequestMetadata  lookalikeRequestMetadata  = 11;
}

message SCPNAnalyzerResponse {
    repeated  SCPNEntityAnnotation  annotationsArray  = 1;
    optional  string  version  = 2;
    optional  SnapBrainResponse_Results  snapEye  = 3;
    optional  SCPNAnalyzerResponse_EntityAnnotations  entityAnnotations  = 4;
    optional  SCPNAnalyzerResponseMetadata  metadata  = 5;
}

message SCPNAnalyzerResponseMetadata {
    optional  SCPNVisualSearchTrace  trace  = 1;
}

message SCPNAnalyzerResponse_EntityAnnotations {
    repeated  SCPNEntityAnnotation  annotationsArray  = 1;
}

message SCPNBoundingPoly {
    repeated  SCPNVertex  verticesArray  = 1;
    repeated  SCPNNormalizedVertex  normalizedVerticesArray  = 2;
}

message SCPNContentBasedRetrievalResult {
    optional  Hit  lookalikeHit  = 1;
}

message SCPNCoordinate {
    optional  float  x  = 1;
    optional  float  y  = 2;
    optional  float  z  = 3;
}

message SCPNEntityAnnotation {
    optional  string  id_p  = 1;
    optional  string  label  = 2;
    optional  float  score  = 3;
    optional  SCPNBoundingPoly  boundingPolygon  = 4;
    optional  bytes  mask  = 5;
    repeated  float  featureVectorArray  = 6[packed=true];
    repeated  SCPNPersonKeypoint  personKeypointsArray  = 7;
    repeated  SCPNFeature  allFeatures  = 8;
    optional  SCPNOurStoryFrameMetadata  ourStoryFrameMetadata  = 103;
    optional  SCPNOurStoryContentFinderMetadata  ourStoryContentFinderMetadata  = 104;
    optional  SCPNMuseumArtworkMetadata  museumArtworkMetadata  = 111;
    optional  SCPNContentBasedRetrievalResult  contentBasedRetrievalResult  = 300;
    optional  SCPNFeatureExtractionResult  featureExtractionResult  = 301;
}

message SCPNFeature {
    optional  SCPCNBytesList  bytesList  = 1;
    optional  SCPCNFloatList  floatList  = 2;
    optional  SCPCNInt64List  int64List  = 3;
}

message SCPNFeatureExtractionResult {
    optional  ExtractFeaturesResponse  lookalikeFeatures  = 1;
}

message SCPNIrisRequest {
    optional  SCPNMedia  media  = 1;
    repeated  SCPNAnalyzer  analyzersArray  = 2;
    repeated  SCPNAnalyzerRequestMetadata  requestMetadata  = 3;
    optional  bool  allowPartialResponse  = 4;
}

message SCPNIrisResponse {
    repeated  SCPNAnalyzerResponse  analyzerResponses  = 1;
}

message SCPNLOOKALIEBytesList {
    repeated  bytes  valueArray  = 1;
}

message SCPNLOOKALIEFeature {
    optional  SCPNLOOKALIEBytesList  bytesList  = 1;
    optional  SCPNLOOKALIEFloatList  floatList  = 2;
    optional  SCPNLOOKALIEInt64List  int64List  = 3;
    repeated  int64  shapeArray  = 4[packed=true];
}

message SCPNLOOKALIEFeatureList {
    repeated  SCPNLOOKALIEFeature  featureArray  = 1;
}

message SCPNLOOKALIEFeatureLists {
    repeated  SCPNLOOKALIEFeatureList  featureList  = 1;
}

message SCPNLOOKALIEFeatures {
    repeated  SCPNLOOKALIEFeature  feature  = 1;
}

message SCPNLOOKALIEFloatList {
    repeated  float  valueArray  = 1[packed=true];
}

message SCPNLOOKALIEInt64List {
    repeated  int64  valueArray  = 1[packed=true];
}

message SCPNLOOKALIEMedia {
    optional  int32  mediaType  = 1;
    optional  bytes  mediaString  = 2;
    repeated  string  properties  = 100;
}

message SCPNLOOKALIEMediaFeatures {
    optional  SCPNLOOKALIEFeatures  features  = 1;
    optional  SCPNLOOKALIEFeatureLists  featureLists  = 2;
    optional  SCPNLOOKALIESequenceExample  sequenceExample  = 3;
}

message SCPNLOOKALIEMediaFeaturesList {
    repeated  SCPNLOOKALIEMediaFeatures  featuresArray  = 1;
}

message SCPNLOOKALIEMediaList {
    repeated  SCPNLOOKALIEMedia  mediaArray  = 1;
}

message SCPNLOOKALIEMediaReference {
    optional  string  mediaId  = 1;
    optional  string  sharedStorySubmissionId  = 2;
    optional  string  lensId  = 3;
    optional  int32  mediaType  = 100;
    optional  string  mediaURL  = 101;
    optional  float  secondsElapsed  = 102;
}

message SCPNLOOKALIESequenceExample {
    optional  SCPNLOOKALIEFeatures  context  = 1;
    optional  SCPNLOOKALIEFeatureLists  featureLists  = 2;
}

message SCPNLookalikeRequestMetadata {
    optional  string  indexVersion  = 1;
}

message SCPNMedia {
    optional  bytes  mediaString  = 1;
    optional  int32  mediaType  = 2;
    optional  string  text  = 3;
}

message SCPNMuseumArtworkMetadata {
    optional  string  mediaURL  = 1;
    optional  string  museum  = 2;
    optional  string  title  = 3;
    optional  string  placardText  = 4;
    optional  string  sourceURL  = 5;
    repeated  string  properties  = 6;
}

message SCPNNormalizedVertex {
    optional  float  x  = 1;
    optional  float  y  = 2;
}

message SCPNOurStoryContentFinderMetadata {
    optional  string  storyMediaURL  = 1;
    optional  string  sharedStorySubmissionId  = 2;
    optional  int32  storyMediaType  = 3;
    optional  string  frameMediaURL  = 4;
    optional  string  frameId  = 5;
}

message SCPNOurStoryFrameMetadata {
    optional  string  mediaURL  = 1;
    optional  string  sharedStorySubmissionId  = 2;
    optional  int32  storyMediaType  = 3;
    optional  string  storyMediaURL  = 4;
    optional  float  secondsElapsed  = 5;
}

message SCPNPersonKeypoint {
    optional  int32  type  = 1;
    optional  SCPNCoordinate  coordinate  = 2;
}

message SCPNProductResult {
    optional  string  uniqueIdentifier  = 1;
    optional  string  title  = 2;
    optional  string  price  = 3;
    optional  string  thumbnailURL  = 4;
    optional  string  deeplinkURL  = 5;
    optional  int32  numReviews  = 6;
    optional  float  rating  = 7;
    optional  bool  isAdultProduct  = 8;
    optional  string  seller  = 9;
    optional  SCPNResultSource  source  = 10;
    optional  GPBAny  vendorSpecificData  = 11;
}

message SCPNQueryResult {
    optional  string  query  = 1;
    optional  int64  numResults  = 2;
    optional  string  deeplinkURL  = 3;
    repeated  SCPNProductResult  sampleResultsArray  = 4;
    optional  SCPNResultSource  source  = 5;
    optional  GPBAny  vendorSpecificData  = 6;
}

message SCPNResultSource {
    optional  int32  source  = 1;
    optional  string  sourceLogoURL  = 2;
}

message SCPNSnapJoinStoryMetadata {
    optional  string  snapId  = 1;
    optional  GPBAny  snapJoinMsg  = 2;
}

message SCPNStoryAnalyzerResponse {
    repeated  SCPNAnalyzerResponse  analyzerResponses  = 1;
    optional  SCPNSnapJoinStoryMetadata  snapJoinStoryMetadata  = 2;
}

message SCPNVertex {
    optional  int32  x  = 1;
    optional  int32  y  = 2;
}

message SCPNVisualSearchRequestMetadata {
    optional  bool  includeTrace  = 1;
}

message SCPNVisualSearchTrace {
    repeated  SCPNVisualSearchTrace_VisualSearchTraceOperationLog  operationLogsArray  = 1;
}

message SCPNVisualSearchTrace_VisualSearchTraceOperationLog {
    optional  string  name  = 1;
    repeated  string  eventsArray  = 2;
    repeated  string  properties  = 3;
}

message SCPPollInfo {
    optional  string  pollId  = 1;
    optional  string  title  = 2;
    optional  SCPTextPollOptions  textPollOptions  = 3;
    optional  uint64  votingEndTime  = 4;
}

message SCPPollInteractions {
    repeated  uint32  selfVoteOptionIdsArray  = 1[packed=true];
    optional  GPBInt64Value  selfVoteServerTimestampMs  = 2;
    repeated  uint64  voteCounts  = 3;
    repeated  double  voteCountRatios  = 4;
    repeated  SCPVoters  voters  = 5;
}

message SCPSHBoltContentObject {
    optional  bytes  contentObject  = 1;
    optional  SCPSHEncryptionKeyIv  encryptionKeyIv  = 2;
}

message SCPSHCategoriesV1 {
    repeated  SCPSHCategoriesV1_Category  categoriesArray  = 1;
}

message SCPSHCategoriesV1_Category {
    optional  string  categoryId  = 1;
    optional  string  localizedName  = 2;
}

message SCPSHDeleteAllScansRequestV1 {
}

message SCPSHDeleteScanHistoryRequest {
    optional  SCPSHDeleteScanSessionsRequestV1  deleteScanSessionsRequestV1  = 1;
    optional  SCPSHDeleteScanResultsRequestV1  deleteScanResultsRequestV1  = 2;
    optional  SCPSHDeleteAllScansRequestV1  deleteAllScansRequestV1  = 3;
    optional  string  id_p  = 4;
    repeated  SCPCNCOFConfig  cofConfigsArray  = 5;
}

message SCPSHDeleteScanHistoryResponse {
}

message SCPSHDeleteScanResultsRequestV1 {
    repeated  bytes  resultIdsArray  = 1;
}

message SCPSHDeleteScanSessionsRequestV1 {
    repeated  bytes  sessionIdsArray  = 1;
}

message SCPSHDeleteSession {
    optional  string  primaryText  = 1;
    optional  SCPSHDeleteScanHistoryRequest  deleteScanHistoryRequest  = 2;
}

message SCPSHEncryptionKeyIv {
    optional  bytes  key  = 1;
    optional  bytes  iv  = 2;
}

message SCPSHImageDateTimeLocation {
    optional  string  primaryText  = 1;
    optional  string  secondaryText  = 2;
    optional  SCPSHMediaObjectV1  mediaObjectV1  = 3;
}

message SCPSHLensesResultV1 {
    repeated  string  lensIdsArray  = 1;
    optional  string  iconURL  = 2;
    optional  string  title  = 3;
    optional  string  subtitle  = 4;
    optional  string  overlayIconURL  = 5;
}

message SCPSHMediaObjectV1 {
    optional  int32  type  = 1;
    optional  SCPSHBoltContentObject  boltContentObject  = 2;
}

message SCPSHNoSessionsV1 {
    optional  string  bitmojiTemplateId  = 1;
    optional  string  fallbackImageURL  = 2;
    optional  string  title  = 3;
    optional  string  subtitle  = 4;
    optional  string  footerText  = 5;
    optional  string  footerURL  = 6;
}

message SCPSHOpenActionSheet {
    repeated  SCPSHOpenActionSheet_ActionSheetCell  actionSheetCellsArray  = 3;
}

message SCPSHOpenActionSheet_ActionSheetCell {
    optional  SCPSHImageDateTimeLocation  showDateTimeLocation  = 1;
    optional  SCPSHResultAction  resultAction  = 2;
}

message SCPSHOpenApp {
    optional  string  link  = 1;
}

message SCPSHOpenHtml {
    optional  string  html  = 1;
}

message SCPSHOpenLink {
    optional  string  URL  = 1;
}

message SCPSHOpenSnapcode {
    optional  SCSnapcodeSnapcode  snapcode  = 1;
}

message SCPSHReadScanHistoryRequest {
    optional  string  categoryId  = 1;
    optional  bytes  pageCursor  = 2;
    optional  SCPGTQRequest  gtqRequest  = 3;
    optional  string  id_p  = 4;
    repeated  SCPCNCOFConfig  cofConfigsArray  = 5;
}

message SCPSHReadScanHistoryResponse {
    optional  bytes  pageCursor  = 1;
    optional  SCPSHSessionsV1  sessionsV1  = 2;
    optional  SCPSHNoSessionsV1  noSessionsV1  = 3;
}

message SCPSHResultAction {
    optional  SCPSHOpenActionSheet  openActionSheet  = 1;
    optional  SCPSHOpenLink  openLink  = 2;
    optional  SCPSHOpenApp  openApp  = 3;
    optional  SCPSHDeleteSession  deleteSession  = 4;
    optional  SCPSHOpenHtml  openHtml  = 5;
    optional  SCPSHOpenSnapcode  openSnapcode  = 6;
}

message SCPSHResultV1 {
    optional  bytes  id_p  = 1;
    optional  SCPSHUtilityResultV1  utilityResultV1  = 2;
    optional  SCPSHLensesResultV1  lensesResultV1  = 3;
    optional  SCPSHResultAction  tapAction  = 4;
    optional  SCPSHSnapcodeResultV1  snapcodeResultV1  = 5;
}

message SCPSHScanHistoryMetadataRequest {
    repeated  SCPCNCOFConfig  cofConfigsArray  = 1;
}

message SCPSHScanHistoryMetadataResponse {
    optional  SCPSHCategoriesV1  categoriesV1  = 1;
}

message SCPSHSessionsV1 {
    repeated  SCPSHSessionsV1_Session  sessionsArray  = 1;
}

message SCPSHSessionsV1_Session {
    optional  bytes  id_p  = 1;
    optional  string  primaryText  = 2;
    optional  string  secondaryText  = 3;
    optional  SCPSHMediaObjectV1  mediaObjectV1  = 4;
    repeated  SCPSHResultV1  resultsV1Array  = 5;
    optional  SCPSHResultAction  tapAction  = 6;
}

message SCPSHSnapcodeResultV1 {
    optional  string  iconURL  = 1;
    optional  string  itemImageURL  = 2;
    optional  string  title  = 3;
    optional  string  subtitle  = 4;
}

message SCPSHUtilityResultV1 {
    optional  string  iconURL  = 1;
    optional  string  itemImageURL  = 2;
    optional  string  title  = 3;
    optional  string  subtitle  = 4;
}

message SCPSSDecryptionKey {
    optional  string  key  = 1;
    optional  string  iv  = 2;
}

message SCPSSModel {
    optional  SCPSSSnapcodeDetectionMetadata  snapcodeDetectionMetadata  = 1;
}

message SCPSSNormalizedBoundingPoly {
    repeated  SCPSSNormalizedVertex  normalizedVerticesArray  = 2;
}

message SCPSSNormalizedVertex {
    optional  float  x  = 1;
    optional  float  y  = 2;
}

message SCPSSScreenshopShowcaseContextWithBoundingPoly {
    optional  bytes  bytes  = 1;
    optional  SCPSSNormalizedBoundingPoly  boundingBox  = 2;
}

message SCPSSShoppabilityIndicator {
    repeated  SCPSSTreatmentToShoppability  treatmentToShoppabilityArray  = 1;
    optional  bool  defaultShoppability  = 2;
    repeated  string  defaultShoppableFramesArray  = 3;
    optional  int32  snapMediaType  = 4;
    repeated  string  boltDefaultShoppableFramesArray  = 5;
}

message SCPSSShoppabilityVersionRequest {
}

message SCPSSShoppabilityVersionResponse {
    optional  uint32  version  = 1;
}

message SCPSSShoppableCategoriesResponse {
    optional  bool  isShoppable  = 1;
    repeated  uint32  categoriesArray  = 2[packed=true];
    repeated  uint32  patternsArray  = 3[packed=true];
    repeated  uint32  colorsArray  = 4[packed=true];
}

message SCPSSShoppableRequest {
    optional  string  reqId  = 1;
    repeated  bytes  imagesArray  = 2;
    optional  uint32  shoppabilityVersion  = 3;
}

message SCPSSShoppableResponse {
    repeated  bool  isShoppableArray  = 1[packed=true];
    repeated  SCPSSShoppableCategoriesResponse  shoppableCategoriesResponsesArray  = 2;
}

message SCPSSShowcaseCOFConfig {
    optional  string  name  = 1;
    optional  Value  value  = 2;
}

message SCPSSShowcaseContext {
    repeated  SCPSSShowcaseCOFConfig  experimentsArray  = 1;
}

message SCPSSShowcaseRequest {
    optional  string  reqId  = 1;
    optional  bytes  imageBytes  = 2;
    optional  bool  returnBoundingBoxes  = 3;
    optional  SCPSSShowcaseContext  context  = 4;
    optional  string  snapId  = 5;
}

message SCPSSShowcaseResponse {
    optional  bytes  bytes  = 1;
    repeated  SCPSSNormalizedBoundingPoly  boundingBoxesArray  = 2;
    repeated  SCPSSScreenshopShowcaseContextWithBoundingPoly  multipleItemsArray  = 3;
}

message SCPSSSnapJoinerImageData {
    optional  string  imageURL  = 1;
    optional  SCPSSDecryptionKey  decryptionKey  = 2;
}

message SCPSSSnapJoinerVideoData {
    repeated  string  frameUrlsArray  = 1;
    optional  string  videoURL  = 2;
    optional  SCPSSDecryptionKey  decryptionKey  = 3;
}

message SCPSSSnapShoppableRequest {
    optional  string  imageURL  = 1;
    optional  string  snapId  = 2;
    optional  string  image  = 3;
    optional  SCPSSSnapJoinerVideoData  videoData  = 5;
    optional  SCPSSSnapJoinerImageData  imageData  = 6;
}

message SCPSSSnapShoppableResponse {
    optional  SCPSSShoppabilityIndicator  shoppabilityIndicator  = 1;
    optional  int32  snapMediaType  = 2;
}

message SCPSSSnapcodeDetectionMetadata {
    repeated  int32  snapcodeTypesArray  = 1[packed=true];
    optional  bool  enableFalseAlarmCheck  = 2;
    optional  bool  enableContourEnhancement  = 3;
}

message SCPSSTreatmentToShoppability {
    optional  string  treatmentId  = 1;
    optional  bool  shoppability  = 2;
    repeated  string  shoppableFramesArray  = 3;
    repeated  string  boltShoppableFramesArray  = 4;
}

message SCPTextPollItem {
    optional  uint32  optionId  = 1;
    optional  string  label  = 2;
}

message SCPTextPollOptions {
    repeated  SCPTextPollItem  itemsArray  = 1;
    optional  bool  isEmojiOnly  = 2;
}

message SCPVNDetectBarcodesRequestMetadata {
    repeated  int32  symbologiesArray  = 1[packed=true];
}

message SCPVNModel {
    optional  int32  requestType  = 1;
    optional  SCPVNDetectBarcodesRequestMetadata  detectBarcodesRequestMetadata  = 2;
}

message SCPVoteRequest {
    optional  string  pollId  = 1;
    repeated  uint32  optionIdsArray  = 2[packed=true];
}

message SCPVoteResponse {
    optional  SCPPollInteractions  interactions  = 1;
    optional  string  error  = 2;
}

message SCPVoter {
    optional  SCCOREUUID  uuid  = 1;
    optional  string  displayName  = 2;
    optional  string  mutableUsername  = 3;
    optional  string  avatarId  = 4;
    optional  string  selfieId  = 5;
}

message SCPVoters {
    repeated  SCPVoter  votersArray  = 1;
}

message SCPaymentsAccountInfo {
    optional  SCPaymentsContactDetails  contactDetails  = 1;
    repeated  SCPaymentsShippingAddress  shippingAddressListArray  = 2;
}

message SCPaymentsCancelOrderRequest {
    optional  int32  requestSource  = 1;
    optional  string  requester  = 2;
    optional  string  orderId  = 3;
    optional  string  requestId  = 4;
}

message SCPaymentsCancelOrderResponse {
    optional  string  requestId  = 1;
    optional  SCPaymentsOrder  order  = 2;
    optional  SCPaymentsCommerceServiceError  error  = 3;
}

message SCPaymentsCommerceServiceError {
    optional  string  debugMessage  = 1;
    optional  int32  errorCode  = 2;
}

message SCPaymentsConfirmOrderRequest {
    optional  string  userId  = 1;
    optional  string  orderId  = 2;
    optional  string  paymentMethodId  = 3;
    optional  string  requestId  = 4;
}

message SCPaymentsConfirmOrderResponse {
    optional  string  requestId  = 1;
    optional  SCPaymentsOrder  order  = 2;
    optional  SCPaymentsCommerceServiceError  error  = 3;
}

message SCPaymentsContactDetails {
    optional  string  email  = 1;
    optional  string  phone  = 2;
}

message SCPaymentsCreateOrderRequest {
    optional  string  userId  = 1;
    optional  string  storeId  = 2;
    repeated  SCPaymentsLineItem  lineItemsArray  = 3;
    optional  SCPaymentsContactDetails  contactDetails  = 4;
    optional  SCPaymentsShippingAddress  shippingAddress  = 5;
    optional  int32  orderSource  = 6;
    optional  string  requestId  = 7;
}

message SCPaymentsCreateOrderResponse {
    optional  string  requestId  = 1;
    optional  SCPaymentsOrder  order  = 2;
    optional  SCPaymentsCommerceServiceError  error  = 3;
}

message SCPaymentsDiscountDetail {
    optional  string  discountId  = 1;
    optional  string  discountName  = 2;
    optional  uint64  amount  = 3;
    optional  bool  applicable  = 4;
    optional  string  nonApplicableReason  = 5;
}

message SCPaymentsGetOrderHistoryRequest {
    optional  string  userId  = 1;
    optional  uint32  limit  = 2;
    optional  uint32  offset  = 3;
    optional  int32  sortOrder  = 4;
}

message SCPaymentsGetOrderHistoryResponse {
    optional  string  requestId  = 1;
    optional  SCPaymentsOrderHistory  orderHistory  = 2;
    optional  SCPaymentsCommerceServiceError  error  = 3;
}

message SCPaymentsGetSingleOrderRequest {
    optional  string  userId  = 1;
    optional  string  orderId  = 2;
}

message SCPaymentsGetSingleOrderResponse {
    optional  string  requestId  = 1;
    optional  SCPaymentsOrder  order  = 2;
    optional  SCPaymentsCommerceServiceError  error  = 3;
}

message SCPaymentsLineItem {
    optional  string  id_p  = 1;
    optional  string  sku  = 2;
    optional  string  productName  = 3;
    optional  string  productId  = 4;
    optional  uint32  quantity  = 5;
    optional  int32  currency  = 6;
    optional  uint64  unitPrice  = 7;
    optional  uint64  itemTax  = 8;
    optional  double  taxRate  = 9;
    optional  uint64  shippingCost  = 10;
    optional  uint64  shippingTax  = 11;
    optional  string  note  = 12;
    repeated  string  trackingNumbersArray  = 13;
    optional  uint64  strikethroughUnitPrice  = 14;
    optional  uint64  totalPrice  = 15;
    optional  uint64  strikethroughTotalPrice  = 16;
    repeated  SCPaymentsDiscountDetail  discountsArray  = 17;
    optional  string  variantId  = 18;
    optional  string  variantDescription  = 19;
    optional  string  productImageURL  = 20;
}

message SCPaymentsOrder {
    optional  string  orderId  = 1;
    optional  string  userId  = 2;
    optional  int32  orderStatus  = 3;
    repeated  SCPaymentsLineItem  lineItemsArray  = 4;
    optional  int32  currency  = 5;
    optional  string  merchantOrderId  = 6;
    optional  string  merchantId  = 7;
    optional  string  storeId  = 8;
    optional  SCPaymentsAccountInfo  accountInfo  = 9;
    optional  SCPaymentsPaymentDetail  paymentDetail  = 10;
    optional  SCPaymentsShippingDetail  shippingDetail  = 11;
    optional  int32  orderSource  = 12;
    optional  GPBTimestamp  postedPublicly  = 13;
    optional  GPBTimestamp  updatedAt  = 14;
    optional  GPBTimestamp  createdAt  = 15;
    optional  string  externalCheckoutToken  = 16;
    optional  SCPaymentsStoreInfo  storeInfo  = 17;
    optional  string  externalOrderNumber  = 18;
}

message SCPaymentsOrderHistory {
    repeated  SCPaymentsOrder  ordersArray  = 1;
    optional  uint32  cursor  = 2;
}

message SCPaymentsPaymentDetail {
    optional  string  partnerPaymentMethodToken  = 1;
    optional  string  paymentMethodId  = 2;
    optional  int32  currency  = 3;
    optional  uint64  totalAmount  = 4;
    optional  uint64  subtotal  = 5;
    optional  uint64  totalTax  = 6;
    optional  uint64  itemTax  = 7;
    optional  uint64  shippingCost  = 8;
    optional  uint64  shippingTax  = 9;
    optional  uint64  totalDiscount  = 10;
    repeated  string  discountCodesArray  = 11;
    optional  int32  paymentStatus  = 12;
    optional  int32  cardType  = 13;
    optional  string  lastFourDigit  = 14;
    repeated  SCPaymentsDiscountDetail  discountsArray  = 16;
}

message SCPaymentsShippingAddress {
    optional  bytes  addressId  = 1;
    optional  string  firstName  = 2;
    optional  string  lastName  = 3;
    optional  bool  isDefault  = 4;
    optional  string  street1  = 5;
    optional  string  street2  = 6;
    optional  string  city  = 7;
    optional  string  state  = 8;
    optional  int32  country  = 9;
    optional  string  zip  = 10;
    optional  GPBTimestamp  updatedAt  = 11;
    optional  GPBTimestamp  lastUsedAt  = 12;
    optional  GPBTimestamp  createdAt  = 13;
    optional  string  alias  = 14;
    optional  int32  addressType  = 15;
}

message SCPaymentsShippingDetail {
    optional  GPBTimestamp  shipByDate  = 1;
    optional  GPBTimestamp  receivedByDate  = 2;
    repeated  SCPaymentsShippingOption  shippingOptionsArray  = 3;
    optional  uint32  estimatedShippingDays  = 4;
    optional  SCPaymentsShippingAddress  shippingAddress  = 5;
    repeated  string  trackingNumbersArray  = 6;
    optional  string  deliveryNote  = 7;
    optional  string  chosenShippingOptionHandle  = 8;
}

message SCPaymentsShippingOption {
    optional  string  handle  = 1;
    optional  uint64  price  = 2;
    optional  string  title  = 3;
}

message SCPaymentsStoreInfo {
    optional  string  storeId  = 1;
    optional  string  storeName  = 2;
    optional  string  storeIconURL  = 3;
    optional  bool  isThirdPartyStore  = 4;
    optional  string  storeEmail  = 5;
    optional  string  supportURL  = 6;
    optional  string  returnPolicyURL  = 7;
    optional  string  termsOfServicePolicyURL  = 8;
    optional  string  privacyPolicyURL  = 9;
}

message SCPaymentsUpdateOrderRequest {
    optional  int32  requestSource  = 1;
    optional  string  requester  = 2;
    optional  SCPaymentsOrder  order  = 3;
    optional  string  requestId  = 4;
}

message SCPaymentsUpdateOrderResponse {
    optional  string  requestId  = 1;
    optional  SCPaymentsOrder  order  = 2;
    optional  SCPaymentsCommerceServiceError  error  = 3;
}

message SCPbGrapheneAppVersion {
    optional  SCPbGrapheneAppVersion_VersionNumber  versionNumber  = 1;
    optional  string  flavor  = 2;
    optional  string  variant  = 3;
}

message SCPbGrapheneAppVersion_VersionNumber {
    optional  int32  major  = 1;
    optional  int32  minor  = 2;
    optional  int32  patch  = 3;
    optional  int32  build  = 4;
}

message SCPbGrapheneMetric {
    optional  string  partitionName  = 1;
    optional  string  metricName  = 2;
    repeated  string  customDimensions  = 3;
    repeated  int64  valuesArray  = 4[packed=true];
}

message SCPbGrapheneMetricFrame {
    repeated  SCPbGrapheneMetric  timersArray  = 1;
    repeated  SCPbGrapheneMetric  countersArray  = 2;
    repeated  SCPbGrapheneMetric  levelsArray  = 3;
    optional  uint32  protocolVersion  = 4;
    optional  uint64  bufferStartTimestampMillis  = 5;
    optional  uint64  bufferEndTimestampMillis  = 6;
    optional  SCPbGrapheneAppVersion  appVersion  = 7;
    optional  int32  clientOsType  = 8;
    optional  string  userName  = 9;
    optional  fixed32  samplingId  = 10;
    optional  string  userGuid  = 11;
    optional  bytes  abC4Token  = 12;
}

message SCPbSpectaclesAlignmentFrame {
    optional  double  timestamp  = 1;
    repeated  float  alignmentCompArray  = 2[packed=true];
    repeated  float  leftAlignmentCompArray  = 3[packed=true];
    repeated  float  rightAlignmentCompArray  = 4[packed=true];
}

message SCPbSpectaclesAttitudeFrame {
    optional  double  timestamp  = 1;
    optional  float  roll  = 2;
    optional  float  pitch  = 3;
    optional  float  yaw  = 4;
    optional  float  translationX  = 5;
    optional  float  translationY  = 6;
    optional  float  translationZ  = 7;
    optional  float  quaternionW  = 8;
    optional  float  quaternionX  = 9;
    optional  float  quaternionY  = 10;
    optional  float  quaternionZ  = 11;
    optional  bool  useQuaternion  = 12;
}

message SCPbSpectaclesCameraData {
    optional  int32  width  = 1;
    optional  int32  height  = 2;
    optional  double  focalLength  = 3;
    optional  float  principalPointX  = 4;
    optional  float  principalPointY  = 5;
    repeated  float  leftCameraExtrinsicsArray  = 6[packed=true];
    repeated  float  rightCameraExtrinsicsArray  = 7[packed=true];
}

message SCPbSpectaclesDepthMetadata {
    optional  string  depthVersion  = 1;
    repeated  double  timestampArray  = 2[packed=true];
    repeated  SCPbSpectaclesAttitudeFrame  attitudeDataArray  = 3;
    repeated  SCPbSpectaclesAlignmentFrame  alignmentDataArray  = 4;
    repeated  SCPbSpectaclesImuAlignmentCompFrame  imuAlignmentCompDataArray  = 5;
    optional  SCPbSpectaclesCameraData  depthCameraData  = 6;
    optional  SCPbSpectaclesCameraData  rgbCameraData  = 7;
    optional  SCPbSpectaclesFactoryData  factoryData  = 8;
    repeated  SCPbSpectaclesDepthQualityFrame  depthQualityDataArray  = 9;
    repeated  SCPbSpectaclesEulerAnglesData  eulerAnglesDataArray  = 10;
    optional  float  initialCameraHeightCm  = 11;
    optional  float  videoFps  = 20;
}

message SCPbSpectaclesDepthQualityFrame {
    optional  double  timestamp  = 1;
    optional  int32  quality  = 2;
}

message SCPbSpectaclesEulerAnglesData {
    optional  double  timestamp  = 1;
    optional  float  roll  = 2;
    optional  float  pitch  = 3;
    optional  float  yaw  = 4;
}

message SCPbSpectaclesFactoryData {
    repeated  double  calibrationGyroRawArray  = 1[packed=true];
    repeated  double  calibrationAccelerometerRawArray  = 2[packed=true];
    repeated  double  jigRotationDegreesArray  = 3[packed=true];
    optional  float  clbVersion  = 100;
}

message SCPbSpectaclesImuAlignmentCompFrame {
    repeated  double  imuAlignmentCompArray  = 1[packed=true];
    optional  bool  isNewConvention  = 2;
}

message SCPbSpectaclesSixdofMetadataFile {
    optional  int32  type  = 1;
    optional  bytes  sixdofFile  = 2;
}

message SCPlusCustomAppThemeCamera {
    optional  SCPlusCustomAppThemeCamera_CaptureButton  captureButton  = 1;
    optional  SCPlusCustomAppThemeCamera_RecordingFrame  captureFrame  = 2;
    optional  SCPlusCustomAppThemeCamera_BlinkingGhost  captureBlinkingGhost  = 3;
}

message SCPlusCustomAppThemeCamera_BlinkingGhost {
    optional  SCPlusCustomAppThemeColor  color  = 1;
}

message SCPlusCustomAppThemeCamera_CaptureButton {
    optional  SCPlusCustomAppThemeColor  color  = 1;
    optional  SCPlusCustomAppThemeRemoteImage  image  = 2;
}

message SCPlusCustomAppThemeCamera_RecordingFrame {
    optional  SCPlusCustomAppThemeColor  color  = 1;
    optional  SCPlusCustomAppThemeLinearGradient  linearGradient  = 2;
}

message SCPlusCustomAppThemeColor {
    optional  float  red  = 1;
    optional  float  green  = 2;
    optional  float  blue  = 3;
    optional  float  alpha  = 4;
}

message SCPlusCustomAppThemeCustomAppTheme {
    optional  SCPlusCustomAppThemeCamera  camera  = 1;
}

message SCPlusCustomAppThemeLinearGradient {
    repeated  SCPlusCustomAppThemeLinearGradient_ColorStop  stopsArray  = 1;
    optional  double  angleDegrees  = 2;
}

message SCPlusCustomAppThemeLinearGradient_ColorStop {
    optional  double  offset  = 1;
    optional  SCPlusCustomAppThemeColor  color  = 2;
}

message SCPlusCustomAppThemeRemoteImage {
    optional  string  URL  = 1;
}

message SCPrefetchConfig {
    optional  bool  silentPassivePrefetch  = 1;
    optional  bool  discardPassivePrefetchOnLensCarouselOpen  = 2;
}

message SCPrivateProfilePbBitmojiTakeoverConfig {
    optional  bool  enabled  = 1;
    optional  int32  coolDownSeconds  = 2;
    optional  int32  treatment  = 3;
    optional  int32  initialCooldownImpressionCount  = 4;
    optional  int32  increasedCoolDownSeconds  = 5;
}

message SCPrivateProfilePbExpandedIdentityViewConfig {
    optional  bool  enabled  = 1;
    optional  int32  maxImpressionCount  = 2;
    optional  int32  treatment  = 3;
}

message SCPrivateProfilePbFriendProfileProminentFriendActionsConfig {
    optional  bool  enabled  = 1;
    repeated  int32  buttonsArray  = 2[packed=true];
    optional  bool  showButtonText  = 3;
}

message SCPrivateProfilePbSnapshotsConfig {
    optional  bool  mySnapshotsManagementEnabled  = 1;
    optional  bool  viewingOthersSnapshotsEnabled  = 2;
    optional  bool  trailingOverlayPrimaryButtonEnabled  = 3;
}

message SCProstEndpoint {
    optional  string  name  = 1;
    optional  string  URL  = 2;
    optional  string  audience  = 3;
}

message SCProstProstMethodOptions {
    optional  int32  verb  = 1;
    optional  string  path  = 2;
}

message SCProstProstServiceOptions {
    repeated  SCProstEndpoint  endpointsArray  = 1;
    optional  string  audience  = 2;
    optional  string  metricsGroup  = 3;
}

message SCPushNotificationAckNotificationRequest {
    optional  string  notificationId  = 10;
    optional  string  senderUserName  = 20;
    optional  int64  sentTimestamp  = 30;
    optional  int64  ackTimestamp  = 40;
    optional  GPBBoolValue  inBackground  = 50;
    optional  string  pushType  = 60;
    optional  string  trackingData  = 70;
    optional  string  userAgent  = 80;
    optional  GPBBoolValue  systemNotificationEnabled  = 90;
    optional  GPBBoolValue  fromExtension  = 100;
    optional  int32  ackEventName  = 110;
    optional  int64  displayDelayLatencyMillis  = 120;
    optional  string  displayDelayReason  = 130;
    optional  GPBBoolValue  loggedOutDisplayed  = 140;
}

message SCPushNotificationAckNotificationResponse {
    optional  int32  statusCode  = 1;
}

message SCPushNotificationAddPendingResendsRequest {
    repeated  SCPushNotificationPendingResend  pendingResendsArray  = 1;
}

message SCPushNotificationAddPendingResendsResponse {
    optional  int32  statusCode  = 1;
    optional  bool  isRetryable  = 2;
}

message SCPushNotificationAlert {
    optional  string  title  = 1;
    optional  string  body  = 2;
}

message SCPushNotificationAndroidNotificationConfig {
    optional  SCPushNotificationDryRun  dryRun  = 1;
    optional  int32  notificationProvider  = 2;
}

message SCPushNotificationBinaryPayload {
    optional  bytes  data_p  = 1;
}

message SCPushNotificationCategory {
    optional  string  name  = 1;
}

message SCPushNotificationDictionaryPayload {
    repeated  string  data_p  = 1;
}

message SCPushNotificationDryRun {
    optional  bool  enabled  = 1;
}

message SCPushNotificationGeneralNotificationConfig {
    optional  SCPushNotificationNotificationTTL  ttlInSec  = 1;
    optional  int32  pushPriority  = 2;
    optional  int32  sound  = 3;
    optional  SCPushNotificationLegacyTypeName  legacyTypeName  = 4;
}

message SCPushNotificationIosNotificationConfig {
    optional  SCPushNotificationVoIP  voip  = 1;
    optional  int32  launchImage  = 2;
    optional  int32  targetScreen  = 3;
    optional  SCPushNotificationCategory  category  = 4;
    optional  int32  notificationProvider  = 5;
}

message SCPushNotificationLegacyTypeName {
    optional  string  name  = 1;
}

message SCPushNotificationNotificationTTL {
    optional  uint32  ttlInSec  = 1;
}

message SCPushNotificationPendingResend {
    optional  string  key  = 1;
    optional  int64  timeToSend  = 2;
}

message SCPushNotificationPushNotificationConfig {
    optional  SCPushNotificationGeneralNotificationConfig  generalNotificationConfig  = 1;
    optional  SCPushNotificationAndroidNotificationConfig  androidNotificationConfig  = 2;
    optional  SCPushNotificationIosNotificationConfig  iosNotificationConfig  = 3;
}

message SCPushNotificationPushNotificationHeader {
    optional  SCPushNotificationUUID  recipientUserId  = 1;
    optional  int32  pushNotificationType  = 2;
    optional  string  notificationKey  = 3;
    optional  string  notificationRevokeKey  = 4;
    optional  int64  sentTime  = 5;
    optional  string  deliveryTrackingToken  = 6;
    optional  int32  notificationProvider  = 7;
    optional  string  collapseId  = 8;
    optional  int32  senderOrigin  = 9;
    optional  bool  fromScheduler  = 10;
    optional  SCPushNotificationTrackingSetting  trackingSetting  = 11;
    optional  float  loggingSampleRate  = 12;
    optional  string  contentIdentifier  = 13;
    optional  bool  enforceNotificationPrivacy  = 14;
    optional  SCPushNotificationSampleReasons  sampleReasons  = 15;
    optional  int32  appId  = 16;
}

message SCPushNotificationPushNotificationRequest {
    optional  SCPushNotificationPushNotificationHeader  header  = 1;
    optional  uint32  ttlInSeconds  = 2;
    optional  bytes  payload  = 3;
    repeated  string  deprecatedPayload  = 4;
    repeated  string  sealedEnvelopeContent  = 5;
    optional  bool  isV2  = 20;
    optional  SCPushNotificationPushNotificationConfig  pushNotificationConfigOverride  = 25;
    optional  SCPushNotificationAlert  systemAlert  = 26;
    optional  SCPushNotificationAlert  inAppAlert  = 27;
    optional  SCPushNotificationBinaryPayload  bytePayload  = 28;
    optional  SCPushNotificationDictionaryPayload  dictionaryPayload  = 29;
}

message SCPushNotificationPushNotificationResult {
    optional  SCPushNotificationUUID  pushNotificationId  = 1;
    optional  int32  status  = 2;
    optional  int32  notificationProvider  = 3;
    optional  bool  isRetryable  = 4;
}

message SCPushNotificationSampleReasons {
    optional  bool  sender  = 1;
}

message SCPushNotificationSendPushAsyncResponse {
    optional  SCPushNotificationUUID  pushNotificationId  = 1;
    optional  int32  status  = 2;
    optional  bool  isRetryable  = 3;
}

message SCPushNotificationSendPushResponse {
    optional  SCPushNotificationUUID  pushNotificationId  = 1;
    optional  int32  status  = 2;
    optional  string  errorCode  = 3;
    optional  bool  isRetryable  = 4;
}

message SCPushNotificationTrackingSetting {
    optional  bool  trackingDisplay  = 1;
    optional  bool  trackingDelivery  = 2;
    repeated  string  trackingData  = 10;
    optional  string  displayToken  = 11;
    optional  string  deliveryToken  = 12;
}

message SCPushNotificationUUID {
    optional  bytes  id_p  = 1;
}

message SCPushNotificationVoIP {
    optional  bool  enabled  = 1;
}

message SCR2ABTestStudyInfo {
    optional  string  studyId  = 1;
    repeated  string  variableValues  = 2;
}

message SCR2AdsCard {
    optional  string  title  = 1;
    repeated  string  subTitlesArray  = 2;
    optional  string  thumbnailURL  = 3;
    repeated  Advertisement  adsArray  = 4;
}

message SCR2Aggregator {
    repeated  SCR2Node  nodesArray  = 1;
}

message SCR2Ast {
    optional  string  versionId  = 1;
    optional  SCR2Node  root  = 2;
    optional  int32  targetPage  = 3;
    optional  bool  isProd  = 4;
    optional  SCR2Ast_AppVersion  minAppVersion  = 5;
}

message SCR2AstRequest {
    repeated  string  versionIdsArray  = 1;
}

message SCR2AstResponse {
    repeated  SCR2Ast  versionIdToAst  = 1;
}

message SCR2AstSignal {
    optional  string  name  = 1;
    optional  string  description_p  = 2;
    optional  int32  type  = 3;
    optional  string  version  = 4;
    optional  float  value  = 5;
    optional  int32  clientSideSignal  = 6;
    optional  uint32  serverSideSignal  = 7;
    optional  int32  mixerSignal  = 8;
}

message SCR2AstSignals {
    repeated  SCR2AstSignal  signalArray  = 1;
}

message SCR2Ast_AppVersion {
    optional  int32  major  = 1;
    optional  int32  minor  = 2;
    optional  int32  patch  = 3;
}

message SCR2BinaryOperator {
    optional  SCR2Node  left  = 1;
    optional  SCR2Node  right  = 2;
}

message SCR2BoundedSigmoid {
    optional  SCR2Node  variable  = 1;
    optional  float  midpoint  = 2;
    optional  float  endpoint  = 3;
    optional  float  slope  = 4;
}

message SCR2BrandProfileCard {
    optional  IMPBusinessProfileAndUserData  profile  = 1;
}

message SCR2BusinessInfoCard {
    optional  int32  cardCategory  = 1;
    optional  string  displayText  = 2;
    optional  string  associatedURL  = 3;
}

message SCR2BusinessReviewCard {
    optional  int32  source  = 1;
    optional  string  reviewerName  = 2;
    optional  string  content  = 3;
    optional  string  date  = 4;
}

message SCR2CandidateStoriesRequest {
    optional  SCR2GeoLocation  location  = 1;
    repeated  string  existingSubtextHintArray  = 2;
    optional  string  placeholder  = 99;
}

message SCR2CandidateStoryCard {
    optional  string  storyTitle  = 1;
    optional  string  storyId  = 2;
    optional  int32  candidateStoryType  = 3;
    optional  SCR2GeoBoundingBox  boundingBox  = 4;
    repeated  string  topicsArray  = 5;
}

message SCR2CardAttachment {
    optional  int32  type  = 1;
    optional  string  displayText  = 2;
    optional  SCR2TextSearchAction  textSearch  = 3;
    optional  SCR2TakeSnapAction  takeSnap  = 4;
    optional  SCR2GoToMapAction  goToMap  = 5;
    optional  SCR2ShowPlaceAction  showPlace  = 6;
    optional  SCR2ShowMoreBusinessHourAction  showMoreBusinessHour  = 7;
}

message SCR2CategoricalRequest {
    optional  SCR2GeoLocation  location  = 1;
    optional  string  category  = 2;
    repeated  string  keywordsArray  = 3;
}

message SCR2CognacClientInfo {
    optional  string  userContextToken  = 1;
}

message SCR2Comparator {
    optional  SCR2Node  left  = 1;
    optional  SCR2Node  right  = 2;
    optional  SCR2Node  trueValue  = 3;
    optional  SCR2Node  falseValue  = 4;
}

message SCR2CompositeStoryId {
    optional  int32  corpus  = 1;
    optional  string  id_p  = 2;
    optional  int64  version  = 3;
}

message SCR2Constant {
    optional  float  value  = 1;
}

message SCR2CurrentPlaceConfig {
    optional  bool  usePlacesApi  = 1;
    optional  float  singlePlaceThreshold  = 2;
    optional  float  multiPlaceThreshold  = 3;
    optional  int32  multiPlaceMaxCount  = 4;
    optional  float  minConfidenceThreshold  = 5;
    optional  SCR2GeoLocation  geoLocation  = 6;
}

message SCR2DiscoverCard {
    optional  string  title  = 1;
    optional  string  content  = 2;
    optional  string  iconURL  = 3;
    optional  string  color  = 4;
    optional  string  thumbnail  = 5;
    optional  string  deeplinkURL  = 6;
    optional  string  publishedDate  = 7;
    repeated  int64  dsnapIdsArray  = 8[packed=true];
    optional  string  thumbnailURL  = 9;
    optional  string  subtitle  = 10;
    optional  string  filledIconURL  = 11;
    optional  string  horizontalIconURL  = 12;
    optional  string  publisherFormalName  = 13;
    optional  int64  displayTimestampSecs  = 14;
    optional  string  publisherName  = 15;
    optional  int64  editionId  = 16;
    optional  int64  publisherId  = 17;
    optional  string  publisherDeeplinkURL  = 18;
    optional  string  publisherPrimaryColor  = 19;
    optional  string  publisherDescription  = 20;
    optional  string  publisherAnalyticsName  = 21;
    optional  string  bitmojiThumbnailTemplateId  = 22;
    optional  string  businessProfileId  = 23;
    optional  SCR2ShowMetadata  showMetadata  = 24;
    optional  string  profileLargeLogoURL  = 25;
    optional  string  websiteURL  = 26;
    optional  string  profileLargeLogoBitmojiTemplateId  = 27;
    optional  int32  profileLogoDisplay  = 28;
    optional  int32  adSetting  = 29;
}

message SCR2DynamicStoryType {
    optional  SCR2StoryType  type  = 1;
}

message SCR2ErrorBar {
    optional  string  errorMessage  = 1;
    optional  int32  color  = 2;
}

message SCR2ErrorMessageCard {
    optional  string  errorMessage  = 1;
    optional  string  errorDebug  = 2;
}

message SCR2Event {
    optional  int64  timeUsec  = 1;
    optional  string  name  = 2;
    optional  double  value  = 3;
}

message SCR2FeatureVector {
    repeated  float  valueArray  = 1[packed=true];
}

message SCR2FoursquareVenueTips {
    optional  string  venueId  = 1;
    optional  string  tipId  = 2;
    optional  uint64  timestamp  = 3;
    optional  uint32  recent  = 4;
    optional  string  tip  = 5;
    optional  string  detectedLanguage  = 6;
    optional  string  firstName  = 7;
    optional  string  lastName  = 8;
    optional  string  profilePhoto  = 9;
}

message SCR2FriendStoryHighlightScore {
    repeated  SCR2FriendStoryHighlightScore_Friend  friendsArray  = 1;
    optional  int64  runTimestampInMsecs  = 2;
}

message SCR2FriendStoryHighlightScoreFeatures {
    optional  int32  totalSnapsViewed7D  = 1;
    optional  int32  totalSnapsViewed15D  = 2;
    optional  int32  totalSnapsViewed30D  = 3;
    optional  int32  allStoriesViewed7D  = 4;
    optional  int32  allStoriesViewed15D  = 5;
    optional  int32  allStoriesViewed30D  = 6;
    optional  int32  replays7D  = 7;
    optional  int32  replays15D  = 8;
    optional  int32  replays30D  = 9;
    optional  float  ctr30D  = 10;
    optional  float  avgTimeViewedPct30D  = 11;
    optional  float  avgSnapViewedPct30D  = 12;
    optional  float  weightedScrollToView30D  = 13;
}

message SCR2FriendStoryHighlightScoreRequest {
    optional  bytes  encryptedUsername  = 1;
    optional  bool  includeRelatedAccountsStories  = 2;
}

message SCR2FriendStoryHighlightScoreResponse {
    optional  SCR2FriendStoryHighlightScore  score  = 1;
    optional  string  relatedAccountsStoriesMetadata  = 2;
}

message SCR2FriendStoryHighlightScore_Friend {
    optional  string  username  = 1;
    optional  bytes  encryptedUsername  = 2;
    optional  float  score  = 3;
    optional  SCR2RelatedPublicAccounts  relatedPublicAccounts  = 4;
    optional  SCR2FriendStoryHighlightScoreFeatures  features  = 5;
    optional  SCR2OfficialAccountMetadata  officialAccountMetadata  = 6;
    optional  string  userId  = 7;
}

message SCR2GameCard {
    optional  string  id_p  = 1;
    optional  string  displayName  = 2;
    optional  string  loadingPageImageURL  = 3;
    optional  string  iconImageURL  = 4;
    optional  string  logoURL  = 5;
    optional  string  contentURL  = 6;
    optional  string  description_p  = 7;
    optional  SCR2GameCard_NumSupportedPlayers  numSupportedPlayers  = 8;
}

message SCR2GameCard_NumSupportedPlayers {
    optional  int32  min  = 1;
    optional  int32  max  = 2;
}

message SCR2GeoAddress {
    optional  string  country  = 1;
    optional  string  state  = 2;
    optional  string  city  = 3;
    optional  string  streetName  = 4;
    optional  string  streetAddress  = 5;
    optional  string  neighborhood  = 6;
    optional  string  zipcode  = 7;
    optional  string  countryShortname  = 8;
    optional  string  stateShortname  = 9;
    optional  string  countryCode  = 10;
    optional  string  stateCode  = 11;
    optional  string  cityAdminId  = 12;
}

message SCR2GeoBoundingBox {
    optional  SCR2GeoLocation  swPoint  = 1;
    optional  SCR2GeoLocation  nePoint  = 2;
}

message SCR2GeoCircle {
    optional  SCR2GeoLocation  center  = 1;
    optional  double  radiusInMeters  = 2;
}

message SCR2GeoFence {
    optional  SCR2GeoPolygon  geoPolygon  = 1;
    optional  SCR2GeoCircle  geoCircle  = 2;
}

message SCR2GeoFenceDetail {
    optional  string  id_p  = 1;
    optional  string  name  = 2;
    repeated  string  tagsArray  = 3;
    optional  SCR2GeoFence  geofence  = 4;
    optional  uint64  createdTimeTsSecs  = 5;
    optional  string  dataSource  = 6;
}

message SCR2GeoFilterDetail {
    optional  string  id_p  = 1;
    optional  string  name  = 2;
    repeated  string  tagsArray  = 3;
    optional  SCR2GeoFence  geofence  = 4;
    optional  uint64  startTimeTsSecs  = 5;
    optional  uint64  endTimeTsSecs  = 6;
    optional  uint64  createdTimeTsSecs  = 7;
    repeated  string  targetingFenceIdsArray  = 8;
    optional  int32  origin  = 9;
    optional  string  imageLink  = 10;
}

message SCR2GeoFilterInfo {
    optional  string  id_p  = 1;
    optional  string  name  = 2;
    repeated  string  tagsArray  = 3;
    optional  SCR2GeoFence  geofence  = 4;
    optional  string  origin  = 5;
    optional  bool  isSponsored  = 6;
    optional  string  imageLink  = 10;
}

message SCR2GeoLocation {
    optional  double  latitude  = 1;
    optional  double  longitude  = 2;
    optional  double  altitude  = 3;
    optional  double  radiusInMeters  = 4;
    optional  int64  timestampInMsecs  = 5;
}

message SCR2GeoPoint {
    optional  double  latitude  = 1;
    optional  double  longitude  = 2;
}

message SCR2GeoPolygon {
    optional  string  id_p  = 1;
    repeated  SCR2GeoLocation  coordinatesArray  = 2;
}

message SCR2GeoRegion {
    optional  string  regionId  = 1;
    optional  SCR2GeoBoundingBox  boundingBox  = 2;
}

message SCR2GeofilterStoryRequest {
    optional  string  geofilterId  = 1;
}

message SCR2GoToMapAction {
    optional  SCR2GeoLocation  geoLocation  = 1;
    optional  float  zoomLevel  = 2;
}

message SCR2HtmlCard {
    optional  string  html  = 1;
    optional  int32  cardHeightPx  = 2;
    optional  int32  contentOffsetPx  = 3;
    optional  string  baseURL  = 4;
}

message SCR2InfluencerRecommendationRequest {
    optional  int32  age  = 1;
    optional  int32  gender  = 2;
    optional  string  locale  = 3;
    optional  int32  size  = 4;
    optional  bool  debug  = 5;
}

message SCR2InfluencerRecommendationResponse {
    repeated  SCR2InfluencerRecommendationResponse_InfluencerInfo  rankedInfluencersArray  = 1;
}

message SCR2InfluencerRecommendationResponse_InfluencerInfo {
    optional  string  userName  = 1;
    optional  string  userId  = 2;
    optional  int64  followerCount  = 3;
    optional  double  storyQuality  = 4;
    optional  string  debugStr  = 5;
}

message SCR2LabelFeatureVector {
    optional  string  version  = 1;
    optional  string  tfnode  = 2;
    repeated  float  featureVectorArray  = 3[packed=true];
    optional  int32  frameNumber  = 4;
}

message SCR2LabelFrameSelection {
    optional  string  version  = 1;
    repeated  int32  frameNumbersArray  = 2[packed=true];
}

message SCR2LensCard {
    optional  string  lensId  = 1;
    optional  string  lensName  = 2;
    optional  string  iconURL  = 3;
    optional  string  deeplinkURL  = 4;
    optional  string  creatorName  = 5;
    optional  bool  hasUnlocked  = 6;
}

message SCR2LiveStreamingCard {
    optional  string  title  = 1;
    optional  string  subtitle  = 2;
    optional  string  thumbnailURL  = 3;
    optional  SCMTStreamingMediaInfo  streamingMediaInfo  = 4;
    optional  SCMTOneSnapInfo  streamingSnapInfo  = 5;
}

message SCR2LocationPromptCard {
    optional  string  descriptionText  = 1;
    optional  string  buttonText  = 2;
}

message SCR2LoggingConfig {
    optional  string  eventName  = 1;
    optional  int32  destination  = 2;
    optional  float  samplingRate  = 3;
}

message SCR2LoggingConfigResponse {
    repeated  SCR2LoggingConfig  loggingConfigsArray  = 1;
}

message SCR2LogoDisplay {
}

message SCR2MapPipelineRequest {
    optional  string  placeholder  = 99;
}

message SCR2MediaInfo {
    optional  int32  mediaType  = 1;
    optional  double  mediaLengthSecs  = 2;
    optional  int32  orientation  = 3;
    optional  bool  frontFacing  = 4;
    optional  bool  zipped  = 5;
    optional  string  mediaIdMsm  = 6;
    optional  string  mediaKey  = 7;
    optional  string  mediaIv  = 8;
    optional  string  thumbnailIv  = 9;
    optional  bool  isInfiniteDuration  = 10;
    optional  SCMTStreamingMediaInfo  streamingMediaInfo  = 12;
    optional  float  aspectRatio  = 13;
    repeated  int32  thumbnailVariantsArray  = 14[packed=true];
    optional  SCMTOneSnapInfo  streamingSnapInfo  = 15;
    optional  string  thumbnailDominantColor  = 16;
    optional  SCMTPublicMediaInfo  publicMediaInfo  = 17;
}

message SCR2MixerSignal {
}

message SCR2MultiSnapExtension {
    optional  string  multiSnapBundleId  = 1;
    optional  int32  multiSnapSegmentCount  = 2;
    optional  int32  multiSnapSegmentId  = 3;
}

message SCR2MyStoryTrendingTopicsResponse {
    optional  SCR2TrendingTopicList  trendingTopicList  = 1;
}

message SCR2Node {
    optional  string  name  = 1;
    optional  SCR2Constant  constant  = 2;
    optional  SCR2Signal  signal  = 3;
    optional  SCR2BinaryOperator  plus  = 4;
    optional  SCR2BinaryOperator  minus  = 5;
    optional  SCR2BinaryOperator  mult  = 6;
    optional  SCR2BinaryOperator  div  = 7;
    optional  SCR2Comparator  lessThan  = 8;
    optional  SCR2Comparator  greaterThan  = 9;
    optional  SCR2BoundedSigmoid  boundedSigmoid  = 10;
    optional  SCR2PieceWiseLinear  pieceWiseLinear  = 11;
    optional  SCR2Aggregator  maximum  = 12;
    optional  SCR2Aggregator  minimum  = 13;
    optional  SCR2Squash  squash  = 14;
    optional  SCR2Aggregator  product  = 15;
    optional  SCR2Aggregator  sum  = 16;
    optional  SCR2WeightedSum  weightedSum  = 17;
    optional  SCR2Pow  pow  = 18;
    optional  SCR2Aggregator  geometricMean  = 19;
    optional  SCR2SquashHalf  squashHalf  = 20;
}

message SCR2ObjectBoundingBox {
    optional  float  xMin  = 1;
    optional  float  xMax  = 2;
    optional  float  yMin  = 3;
    optional  float  yMax  = 4;
}

message SCR2OfficialAccountMetadata {
    repeated  string  queriesArray  = 1;
    repeated  int32  categoriesArray  = 2[packed=true];
}

message SCR2OnDemandDebugRequest {
    optional  int32  sourceType  = 1;
    optional  string  storyId  = 2;
    optional  string  snapId  = 3;
    optional  string  storyDebugId  = 4;
    repeated  string  extra  = 5;
    optional  string  queryDebugId  = 6;
}

message SCR2OnDemandDebugResponse {
    optional  string  debugHtml  = 1;
    repeated  string  extra  = 2;
}

message SCR2OpeningHours {
    repeated  SCR2OpeningHours_DayHours  dayHoursArray  = 1;
}

message SCR2OpeningHours_DayHours {
    optional  int32  day  = 1;
    repeated  SCR2OpeningHours_TimeRange  hoursArray  = 2;
}

message SCR2OpeningHours_HourMinute {
    optional  int32  hour  = 1;
    optional  int32  minute  = 2;
}

message SCR2OpeningHours_TimeRange {
    optional  SCR2OpeningHours_HourMinute  start  = 1;
    optional  SCR2OpeningHours_HourMinute  end  = 2;
}

message SCR2PageFooter {
    optional  int32  type  = 1;
}

message SCR2PartialPostTypeRequest {
    optional  string  queryText  = 1;
    optional  SCR2GeoLocation  location  = 2;
}

message SCR2PartialStoryRequest {
    optional  string  storyId  = 1;
    optional  int32  numSnapsSent  = 2;
}

message SCR2PieceWiseLinear {
    optional  SCR2Node  variable  = 1;
    repeated  SCR2Point  pointsArray  = 2;
}

message SCR2PlaceDisplayMetadata {
    optional  string  rating  = 1;
}

message SCR2PlaceFlags {
    optional  bool  isWithinCollectionPlace  = 1;
    optional  bool  hasSimilarPlacesNearby  = 2;
    optional  bool  manyPlacesNearby  = 3;
    optional  bool  isUninteresting  = 4;
    optional  bool  isLowConfidence  = 5;
    optional  bool  isSensitive  = 6;
}

message SCR2PlaceInfo {
    optional  string  placesApiId  = 1;
    optional  string  name  = 2;
    optional  string  type  = 3;
    optional  double  score  = 4;
    optional  SCR2GeoLocation  geoLocation  = 5;
    optional  SCR2GeoAddress  geoAddress  = 6;
    optional  double  rating  = 7;
    optional  string  locale  = 8;
    optional  SCR2GeoFence  geofence  = 9;
    optional  uint32  area  = 10;
    optional  uint32  perimeter  = 11;
    optional  int32  source  = 12;
    optional  string  curatedType  = 13;
    optional  bool  placeIsDeleted  = 14;
    repeated  string  tagsArray  = 15;
    optional  string  venueId  = 16;
    optional  SCR2OpeningHours  openingHours  = 17;
    optional  uint32  priceTier  = 18;
    optional  string  phone  = 19;
    optional  double  foursquareRating  = 20;
    optional  string  website  = 21;
    optional  string  parentId  = 22;
    optional  uint64  numVfSubmissions  = 23;
    optional  double  avgAltitude  = 24;
    optional  uint64  impressions30D  = 25;
    optional  float  ctr30D  = 26;
    optional  SCR2PlaceNames  names  = 27;
}

message SCR2PlaceLikelihood {
    optional  SCR2PlaceInfo  placeInfo  = 1;
    optional  float  likelihood  = 2;
    optional  int32  isOpenNow  = 3;
}

message SCR2PlaceNames {
    optional  string  name  = 1;
    optional  string  shortName  = 2;
    optional  string  abbrName  = 3;
    repeated  string  aliasArray  = 4;
    repeated  string  nameByLang  = 5;
}

message SCR2PlaceStats {
    optional  int32  numSnapCaptionMentions  = 1;
    optional  int32  numVenueFilterSubmissions  = 2;
}

message SCR2Point {
    optional  float  x  = 1;
    optional  float  y  = 2;
}

message SCR2PopUpCard {
    optional  int32  type  = 1;
    optional  string  title  = 2;
    optional  string  displayText  = 3;
}

message SCR2PostTypeRequest {
    optional  SCR2GeoLocation  location  = 1;
    optional  string  queryText  = 2;
    optional  int32  queryTextOrigin  = 3;
    optional  string  suggestionText  = 4;
    repeated  SCR2PlaceLikelihood  candidatePlacesArray  = 5;
}

message SCR2Pow {
    optional  SCR2Node  base  = 1;
    optional  SCR2Node  power  = 2;
}

message SCR2PreTypeRequest {
    optional  SCR2GeoLocation  location  = 1;
    repeated  SCR2PlaceLikelihood  candidatePlacesArray  = 2;
    repeated  SCR2GeoLocation  recentLocationsArray  = 3;
}

message SCR2PublicAccountInfo {
    optional  string  username  = 1;
    optional  SCR2RelatedPublicAccounts  relatedPublicAccounts  = 2;
}

message SCR2PublicUserRequest {
    optional  bool  includeLocal  = 1;
}

message SCR2PublisherAdSetting {
}

message SCR2PublisherCard {
    optional  string  name  = 1;
    optional  string  publisherName  = 2;
    optional  string  formalName  = 3;
    optional  string  description_p  = 4;
    optional  string  searchIconURL  = 5;
    optional  string  filledIconURL  = 6;
    optional  string  editionDeeplinkURL  = 7;
    optional  string  publisherDeeplinkURL  = 8;
    optional  string  primaryColor  = 9;
    optional  int64  editionId  = 10;
    optional  int64  publisherId  = 11;
    optional  string  horizontalIconURL  = 12;
    optional  string  businessProfileId  = 13;
    optional  SCR2ShowMetadata  showMetadata  = 14;
    optional  bool  isShareable  = 15;
    optional  string  profileLargeLogoURL  = 16;
    optional  string  websiteURL  = 17;
    optional  string  profileLargeLogoBitmojiTemplateId  = 18;
    optional  int32  profileLogoDisplay  = 19;
    optional  int32  adSetting  = 20;
}

message SCR2RelatedPublicAccounts {
    repeated  SCR2RelatedPublicAccounts_Account  accountsArray  = 1;
    optional  int64  numUsersLike  = 2;
}

message SCR2RelatedPublicAccounts_Account {
    optional  string  username  = 1;
    optional  bytes  encryptedUsername  = 2;
    optional  float  score  = 3;
    optional  int32  source  = 4;
    optional  int64  numUsersLike  = 5;
    optional  int64  numUsersLikeBoth  = 6;
    optional  string  userId  = 7;
}

message SCR2RequestClientInfo {
    optional  string  appVersion  = 1;
    optional  string  appBuildFlavor  = 2;
    optional  string  deviceMode  = 3;
    optional  int32  osType  = 4;
    optional  string  osVersion  = 5;
    optional  string  cityName  = 6;
    optional  int64  forwardRequestTimestampMs  = 7;
    optional  SCR2GeoLocation  cityLocation  = 8;
    repeated  SCR2ABTestStudyInfo  studyInfoArray  = 9;
    optional  string  country  = 10;
    optional  int32  userGender  = 11;
    optional  int32  userAge  = 12;
    optional  bool  isEmployee  = 13;
    optional  int32  appVariant  = 14;
}

message SCR2RequestTrace {
    optional  int32  totalElapsedMs  = 1;
    optional  int32  totalProcessCpuMs  = 2;
    optional  SCR2TimedScope  rootScope  = 3;
}

message SCR2SalientTerm {
    optional  string  term  = 1;
    optional  double  idf  = 2;
    optional  uint32  tf  = 3;
    optional  double  ind  = 5;
    repeated  SCR2SalientTerm_TermCountPair  derivedFromArray  = 6;
    optional  double  cpt  = 7;
    optional  uint32  rawUserTf  = 8;
}

message SCR2SalientTerm_TermCountPair {
    optional  string  term  = 1;
    optional  uint32  count  = 2;
}

message SCR2SearchCard {
    optional  SCR2StoryCard  storyCard  = 1;
    optional  SCR2UserCard  userCard  = 2;
    optional  SCR2SuggestionCard  suggestionCard  = 3;
    optional  SCR2PopUpCard  popUpCard  = 4;
    optional  SCR2CardAttachment  attachment  = 5;
    optional  SCR2SportsCard  sportsCard  = 6;
    optional  SCR2HtmlCard  htmlCard  = 7;
    optional  SCR2DiscoverCard  discoverCard  = 8;
    optional  SCR2LocationPromptCard  locationPromptCard  = 9;
    optional  SCR2PublisherCard  publisherCard  = 10;
    optional  SCR2CandidateStoryCard  candidateStoryCard  = 11;
    optional  SCR2SnapToStoryCard  snapToStoryCard  = 12;
    optional  SCR2SpellCorrectionCard  spellCorrectionCard  = 13;
    optional  SCR2ErrorMessageCard  errorMessageCard  = 14;
    optional  SCR2WebCard  webCard  = 15;
    optional  SCR2BusinessInfoCard  businessInfoCard  = 16;
    optional  SCR2BusinessReviewCard  businessReviewCard  = 17;
    optional  SCR2AdsCard  adsCard  = 18;
    optional  SCR2LiveStreamingCard  liveStreamingCard  = 19;
    optional  SCR2SearchCard_UserInfo  userInfo  = 20;
    optional  SCR2LensCard  lensCard  = 21;
    optional  SCR2BrandProfileCard  brandProfileCard  = 22;
    optional  SCR2SnapStoreCard  snapStoreCard  = 23;
    optional  SCR2GameCard  gameCard  = 24;
}

message SCR2SearchCard_UserInfo {
    optional  bool  isSubscribed  = 1;
    optional  bool  isHidden  = 2;
    optional  bool  isNotificationOptedIn  = 3;
}

message SCR2SearchConfigResponse {
    optional  SCR2LoggingConfigResponse  loggingConfigResponse  = 1;
}

message SCR2SearchRequest {
    optional  string  searchSessionId  = 1;
    optional  string  searchSessionQueryId  = 2;
    optional  int64  creationTimestampMs  = 3;
    optional  int32  origin  = 4;
    optional  int32  entryPoint  = 5;
    optional  SCR2PreTypeRequest  preTypeRequest  = 6;
    optional  SCR2PostTypeRequest  postTypeRequest  = 7;
    optional  SCR2CategoricalRequest  categoricalRequest  = 8;
    optional  SCR2MapPipelineRequest  mapPipelineRequest  = 9;
    repeated  string  languagePreferencesArray  = 10;
    optional  int32  debugLevel  = 11;
    repeated  SCR2SearchTweakParameter  tweakParameters  = 12;
    repeated  string  debugMap  = 13;
    optional  string  timeZone  = 14;
    optional  string  countryCode  = 15;
    optional  SCR2SharedStoryRequest  sharedStoryRequest  = 16;
    optional  SCR2PartialStoryRequest  partialStoryRequest  = 17;
    optional  string  experimentSetting  = 18;
    repeated  string  expConfigMap  = 20;
    optional  bool  isLocationDisabled  = 21;
    optional  SCR2CandidateStoriesRequest  candidateStoriesRequest  = 23;
    optional  SCR2SnapToStoriesRequest  snapToStoriesRequest  = 24;
    optional  SCR2SnapPivotStoriesRequest  snapPivotStoriesRequest  = 25;
    repeated  string  extraLogData  = 26;
    optional  SCR2SnapFeedRequest  snapFeedRequest  = 27;
    optional  SCR2PublicUserRequest  publicUserRequest  = 28;
    optional  SCR2WatchNextRequest  watchNextRequest  = 29;
    repeated  int64  lastInteractionTimestampsMsArray  = 31[packed=true];
    optional  SCR2PartialPostTypeRequest  partialPostTypeRequest  = 32;
    optional  SCR2ShazamRequest  shazamRequest  = 33;
    optional  SCR2GeofilterStoryRequest  geofilterStoryRequest  = 34;
    optional  bool  hasBitmojiAvatar  = 35;
    optional  SCR2CognacClientInfo  cognacClientInfo  = 36;
}

message SCR2SearchResponse {
    optional  string  requestId  = 1;
    optional  string  searchSessionId  = 2;
    optional  string  searchSessionQueryId  = 3;
    optional  string  queryText  = 4;
    repeated  SCR2SearchSection  sectionsArray  = 5;
    repeated  string  debugMap  = 6;
    repeated  SCR2SearchConfigResponse  searchConfigResponsesArray  = 7;
    repeated  SCR2PageFooter  pageFooterArray  = 8;
    optional  SCR2ErrorBar  errorBar  = 9;
    optional  SCR2RequestTrace  trace  = 100;
}

message SCR2SearchSection {
    optional  string  title  = 1;
    optional  int32  sectionType  = 2;
    repeated  SCR2SearchCard  cardsArray  = 3;
    repeated  string  debugMap  = 4;
    optional  string  sectionId  = 5;
    optional  int32  titleDisplayRule  = 6;
    optional  SCR2SectionConfig  sectionConfig  = 7;
    optional  int32  sectionSemanticKey  = 8;
    optional  bool  onlyShowWhenNoResults  = 9;
}

message SCR2SearchTweakParameter {
    optional  int32  intValue  = 1;
    optional  float  floatValue  = 2;
    optional  bool  boolValue  = 3;
    optional  string  stringValue  = 4;
}

message SCR2SectionConfig {
    optional  SCR2CurrentPlaceConfig  currentPlaceConfig  = 1;
}

message SCR2SharedStoryRequest {
    optional  string  storyId  = 1;
}

message SCR2ShazamRequest {
    optional  SCR2GeoLocation  location  = 1;
    repeated  string  artistNamesArray  = 2;
    optional  string  songTitle  = 3;
}

message SCR2ShowMetadata {
    optional  string  showId  = 1;
    optional  string  showName  = 2;
    optional  string  showDescription  = 3;
    optional  string  showHeroImageURL  = 4;
    optional  int32  showType  = 5;
    optional  int32  seasonNumber  = 6;
    optional  int32  episodeNumber  = 7;
    optional  string  seasonId  = 8;
    optional  int32  profileLogoDisplay  = 9;
}

message SCR2ShowMetadata_ShowType {
}

message SCR2ShowMoreBusinessHourAction {
    repeated  SCR2ShowMoreBusinessHourAction_DaysAndBusinessHours  daysAndBusinessHoursArray  = 1;
}

message SCR2ShowMoreBusinessHourAction_DaysAndBusinessHours {
    optional  string  days  = 1;
    repeated  string  businessHoursArray  = 2;
}

message SCR2ShowPlaceAction {
    optional  string  placeId  = 1;
}

message SCR2Signal {
    optional  string  signalName  = 1;
    optional  float  defaultValue  = 2;
    optional  SCR2AstSignal  astSignal  = 3;
}

message SCR2SnapCreatorInfo {
    optional  string  userId  = 1;
    optional  string  displayName  = 2;
}

message SCR2SnapFeedRequest {
    optional  int32  start  = 1;
    optional  int32  limit  = 2;
}

message SCR2SnapLabel {
    optional  string  label  = 2;
    optional  double  score  = 3;
    optional  double  saliencyScoreByPos  = 4;
    optional  double  saliencyScoreByArea  = 5;
    repeated  double  saliencyMaskArray  = 6[packed=true];
    optional  double  saliencyArea  = 7;
    optional  int32  startOffsetMs  = 8;
    optional  int32  endOffsetMs  = 9;
    optional  SCR2ObjectBoundingBox  boundingBox  = 10;
    optional  double  calibrationScore  = 11;
}

message SCR2SnapLabels {
    optional  string  snaplabelVersion  = 1;
    repeated  SCR2SnapLabel  snaplabelsArray  = 2;
    optional  SCR2FeatureVector  featureVector  = 3;
    repeated  SCR2SnapLabel  thumbnailSnaplabelsArray  = 4;
    optional  bool  isSelfie  = 5;
    repeated  SCR2SnapLabelsPerFrame  snaplabelsPerFrameArray  = 6;
}

message SCR2SnapLabelsPerFrame {
    repeated  SCR2SnapLabel  snaplabelsArray  = 1;
    optional  int32  frameNumber  = 2;
}

message SCR2SnapMediaInfo {
    optional  int32  mediaType  = 1;
    optional  string  mediaURL  = 2;
    optional  string  mediaId  = 3;
    optional  string  mediaIv  = 4;
    optional  string  mediaKey  = 5;
    optional  bool  isZipped  = 6;
    optional  double  duration  = 7;
    optional  bool  isInfiniteDuration  = 8;
    optional  SCMTStreamingMediaInfo  streamingMediaInfo  = 9;
    optional  SCMTOneSnapInfo  streamingSnapInfo  = 10;
    optional  SCMTPublicMediaInfo  publicMediaInfo  = 11;
}

message SCR2SnapPivotInfo {
    optional  SCR2GeoLocation  location  = 1;
    optional  string  venueId  = 2;
    repeated  string  attachedStoryIdArray  = 3;
    optional  string  snapCaption  = 4;
    optional  SCR2SnapLabels  snapLabels  = 5;
    optional  SCR2GeoFilterInfo  geofilterInfo  = 6;
    repeated  string  visuallyAttachedStoryIdArray  = 7;
    repeated  string  entitiesArray  = 8;
    optional  string  originStoryId  = 9;
    optional  string  originStoryCaption  = 10;
    optional  string  snapTsInSecs  = 11;
    optional  string  snapId  = 12;
    optional  string  attachmentURL  = 13;
    repeated  SCR2StickerInfo  stickersArray  = 14;
    optional  string  inferredPlaceId  = 15;
    repeated  string  nearbyVenueIdsArray  = 16;
    optional  SCContextContextHint  contextHint  = 17;
}

message SCR2SnapPivotStoriesRequest {
    optional  SCR2SnapPivotInfo  pivotInfo  = 1;
    optional  bool  isProbe  = 2;
    optional  bool  excludeNearby  = 3;
}

message SCR2SnapStoreCard {
    optional  string  name  = 1;
    optional  string  description_p  = 2;
    optional  string  thumbnailURL  = 3;
    optional  string  deepLinkURL  = 4;
}

message SCR2SnapToStoriesRequest {
    repeated  string  rawSnapIdArray  = 1;
    optional  bool  includeStoryMetadata  = 2;
}

message SCR2SnapToStoryCard {
    optional  string  rawSnapId  = 1;
    optional  SCR2StoryCard  storyCard  = 2;
}

message SCR2SpellCorrectionCard {
    optional  string  spellCorrectedQueryText  = 1;
    optional  string  escapeHatchQueryText  = 2;
    optional  string  escapeHatchQueryDisplayText  = 3;
}

message SCR2SportsCard {
    optional  SCR2SportsGame  sportsGame  = 1;
    optional  SCR2StoryCard  storyCard  = 2;
}

message SCR2SportsGame {
    optional  string  homeTeam  = 1;
    optional  string  awayTeam  = 2;
    optional  int32  homeScore  = 3;
    optional  int32  awayScore  = 4;
    optional  string  homeImageURL  = 5;
    optional  string  awayImageURL  = 6;
    optional  string  gameStatus  = 7;
}

message SCR2Squash {
    optional  SCR2Node  variable  = 1;
    optional  float  linearRegion  = 2;
    optional  float  limit  = 3;
}

message SCR2SquashHalf {
    optional  SCR2Node  variable  = 1;
    optional  float  midpoint  = 2;
    optional  float  slope  = 3;
}

message SCR2StickerInfo {
    optional  string  id_p  = 1;
    optional  int32  type  = 2;
    optional  float  width  = 3;
    optional  float  height  = 4;
    optional  float  centerX  = 5;
    optional  float  centerY  = 6;
}

message SCR2StoryCard {
    optional  SCR2StoryMetadata  metadata  = 1;
    repeated  SCR2StorySnap  snapsArray  = 2;
    repeated  string  debugMap  = 3;
    optional  int32  uiType  = 4;
}

message SCR2StoryCorpus {
}

message SCR2StoryFetchBySourceRequest {
    repeated  SCR2StoryType  typeArray  = 1;
}

message SCR2StoryMetadata {
    optional  string  storyId  = 1;
    optional  string  thumbnailSnapId  = 2;
    optional  string  title  = 3;
    repeated  string  subTitlesArray  = 4;
    optional  string  emoji  = 5;
    optional  string  snippet  = 6;
    optional  float  storyScore  = 7;
    optional  SCR2StoryThumbnail  storyThumbnail  = 8;
    optional  SCR2GeoLocation  location  = 9;
    optional  int32  totalNumSnaps  = 10;
    optional  double  totalDuration  = 11;
    optional  SCR2PlaceLikelihood  place  = 12;
    optional  int32  storyType  = 14;
    optional  string  logoURL  = 15;
    optional  bytes  adPlacementMetadata  = 16;
    optional  int64  displayTimestampSecs  = 17;
    optional  SCR2PlaceDisplayMetadata  placeDisplayMetadata  = 18;
    repeated  SCR2Topic  topicLabelsArray  = 19;
    optional  SCR2DynamicStoryType  dynamicStoryType  = 20;
    optional  SCR2CompositeStoryId  compositeStoryId  = 21;
    optional  bool  isCampusStory  = 22;
    optional  string  description_p  = 23;
    optional  bool  isSubscribable  = 24;
}

message SCR2StorySnap {
    optional  string  rawSnapId  = 1;
    optional  string  sharedStorySubmissionId  = 2;
    optional  SCR2SnapMediaInfo  mediaInfo  = 3;
    optional  int64  creationTimestampMs  = 4;
    optional  string  title  = 5;
    repeated  string  subTitlesArray  = 6;
    repeated  string  debugMap  = 7;
    optional  int64  expirationTimestampMs  = 8;
    repeated  string  attachedStoryIdArray  = 9;
    optional  SCR2SnapPivotInfo  pivotInfo  = 10;
    optional  SCR2SnapCreatorInfo  creatorInfo  = 11;
    optional  string  attachmentURL  = 12;
    optional  bool  suppressContext  = 13;
    optional  bytes  audioStitchData  = 14;
    optional  SCR2MultiSnapExtension  multiSnapExtension  = 15;
    optional  bool  hasLensFilter  = 16;
    optional  string  snapSource  = 17;
    optional  string  lensId  = 18;
    optional  bool  hasSnappablesMetadata  = 19;
    optional  bytes  serializedUnlockablesSnapInfo  = 20;
}

message SCR2StorySnapClientMetadata {
    optional  int64  clientEditTimeBeforeSend  = 1;
    optional  bool  savedToMemoriesBeforeSend  = 2;
    optional  bool  isLoadedFromCameraRoll  = 3;
    optional  uint32  retakeTrials  = 4;
    repeated  uint32  zoomLevelSamplesArray  = 5[packed=true];
}

message SCR2StoryThumbnail {
    optional  string  thumbnailURL  = 1;
    optional  string  thumbnailIv  = 2;
    optional  string  mediaKey  = 3;
    optional  string  videoThumbnailURL  = 4;
    optional  string  videoFirstFrameThumbnailURL  = 5;
    optional  float  aspectRatio  = 6;
    repeated  int32  thumbnailVariantsArray  = 7[packed=true];
}

message SCR2StoryType {
    optional  int32  type  = 1;
}

message SCR2SuggestionCard {
    optional  string  displayText  = 1;
    optional  string  queryText  = 2;
    optional  string  imageURL  = 3;
    optional  string  storyId  = 4;
}

message SCR2TakeSnapAction {
    optional  string  placeId  = 1;
}

message SCR2TextSearchAction {
    optional  string  queryText  = 1;
}

message SCR2Thumbnail {
    optional  string  uri  = 1;
    optional  int64  widthPx  = 2;
    optional  int64  heightPx  = 3;
}

message SCR2TimedScope {
    optional  string  name  = 1;
    optional  int64  startTimeUsec  = 2;
    optional  int64  endTimeUsec  = 3;
    optional  int32  cpuTimeUsec  = 4;
    repeated  SCR2Event  eventsArray  = 5;
    repeated  SCR2TimedScope  innerScopesArray  = 6;
}

message SCR2Topic {
    optional  int32  type  = 1;
}

message SCR2TrendingTopic {
    optional  string  topic  = 1;
    optional  float  currentPopularity  = 2;
    repeated  float  past24HoursPopularitiesArray  = 3[packed=true];
    repeated  SCR2TrendingTopic_TopCountry  topCountriesArray  = 13;
    repeated  SCR2TrendingTopic_TopState  topStatesArray  = 14;
    optional  int32  trendingScope  = 15;
    optional  string  country  = 16;
    optional  string  state  = 17;
}

message SCR2TrendingTopicList {
    optional  int64  runTimestampInMsecs  = 1;
    repeated  SCR2TrendingTopic  trendingTopicsArray  = 2;
}

message SCR2TrendingTopic_TopCountry {
    optional  string  country  = 1;
    optional  float  popularity  = 2;
}

message SCR2TrendingTopic_TopState {
    optional  string  country  = 1;
    optional  string  state  = 2;
    optional  float  popularity  = 3;
}

message SCR2UserCard {
    optional  string  userId  = 1;
    optional  SCR2StoryThumbnail  storyThumbnail  = 2;
    optional  string  displayName  = 3;
    optional  string  username  = 4;
    optional  string  emoji  = 5;
    repeated  string  debugMap  = 6;
    optional  bool  isOfficial  = 7;
    optional  string  bitmojiAvatarId  = 8;
    optional  bool  isPopular  = 9;
    optional  string  searchResultHelpString  = 10;
    optional  int32  searchResultReason  = 11;
}

message SCR2WatchNextRequest {
    optional  string  storyId  = 1;
}

message SCR2WebCard {
    optional  string  title  = 1;
    optional  string  subtitle  = 2;
    optional  SCR2Thumbnail  thumbnail  = 3;
    optional  string  targetURL  = 4;
    optional  string  displayCardType  = 5;
    optional  int32  uiType  = 6;
}

message SCR2WeightedSum {
    repeated  SCR2WeightedSum_WeightedNode  nodesArray  = 1;
}

message SCR2WeightedSum_WeightedNode {
    optional  SCR2Node  weight  = 1;
    optional  SCR2Node  value  = 2;
}

message SCRMXRemixLensConfig {
    optional  string  URL  = 1;
    optional  string  checksum  = 2;
}

message SCRemoveUnlockRequest {
    optional  int64  unlockableId  = 1;
    repeated  int32  unlockTypesArray  = 4[packed=true];
    optional  int32  unlocksNamespace  = 5;
}

message SCReportChatMediaReportData {
    optional  string  snapId  = 1;
    optional  bytes  mediaContent  = 2;
    optional  bytes  mediaOverlay  = 3;
    optional  string  attachmentURL  = 4;
    optional  int64  mediaSentTimestamp  = 5;
    optional  string  conversationId  = 6;
    optional  int64  messageId  = 7;
    optional  string  reportedUserId  = 8;
}

message SCReportChatMessage {
    optional  string  content  = 1;
    optional  int64  messageId  = 2;
    optional  string  senderUserId  = 3;
    optional  int64  messageTimestampMs  = 4;
}

message SCReportChatMessageReportData {
    optional  string  conversationId  = 1;
    repeated  SCReportChatMessage  chatMessageArray  = 2;
    optional  int64  reportedMessageId  = 3;
}

message SCReportCustomStorySnapReportData {
    optional  string  snapId  = 1;
    optional  bool  usesCameraRollPickerLens  = 2;
}

message SCReportForwardedRequestInfo {
    optional  string  ip  = 1;
    optional  string  country  = 2;
    optional  string  region  = 3;
    optional  string  city  = 4;
    optional  string  userAgent  = 5;
    optional  string  principal  = 6;
}

message SCReportGetReportedBlobsRequest {
    repeated  string  blobIdsArray  = 1;
}

message SCReportGetReportedBlobsResponse {
    repeated  SCReportReportedBlob  reportedBlobsArray  = 1;
}

message SCReportGetReportsRequest {
    optional  string  referenceId  = 1;
    optional  int32  type  = 2;
}

message SCReportGetReportsResponse {
    repeated  SCReportReport  reportsArray  = 1;
}

message SCReportHighlightSnapReportData {
    optional  string  profileId  = 1;
    optional  string  highlightId  = 2;
    optional  string  highlightVersion  = 3;
    optional  string  snapId  = 4;
}

message SCReportHighlightTileReportData {
    optional  string  profileId  = 1;
    optional  string  highlightId  = 2;
    optional  string  highlightVersion  = 3;
}

message SCReportLensReportData {
    optional  string  lensId  = 1;
    optional  string  attribution  = 2;
}

message SCReportMapStorySnapReportData {
    optional  string  snapId  = 1;
    optional  string  storyName  = 2;
}

message SCReportMediaShareReportData {
    optional  string  linkId  = 1;
    optional  string  linkURL  = 2;
}

message SCReportMyStorySnapReportData {
    optional  string  snapId  = 1;
    optional  bool  usesCameraRollPickerLens  = 2;
}

message SCReportNonPartnerStoryTileReportData {
    optional  string  snapId  = 1;
}

message SCReportOfficialUserStoryTileReportData {
    optional  string  snapId  = 1;
}

message SCReportPrivateSnapReportData {
    optional  string  snapId  = 1;
    optional  bytes  mediaContent  = 2;
    optional  bytes  mediaOverlay  = 3;
    optional  string  attachmentURL  = 4;
    optional  int64  mediaSentTimestamp  = 5;
    optional  string  conversationId  = 6;
    optional  int64  messageId  = 7;
    optional  string  reportedUserId  = 8;
    optional  bool  usesCameraRollPickerLens  = 9;
}

message SCReportProfilePictureReportData {
    optional  string  reportedUserId  = 1;
}

message SCReportPublicUserStorySnapReportData {
    optional  string  snapId  = 1;
    optional  bool  usesCameraRollPickerLens  = 2;
}

message SCReportPublisherStorySnapReportData {
    optional  string  snapId  = 1;
    optional  string  editionId  = 2;
    optional  string  publisherId  = 3;
    optional  string  publisherName  = 4;
}

message SCReportPublisherStoryTileReportData {
    optional  string  tileId  = 1;
    optional  string  mediaURL  = 2;
    optional  string  publisherId  = 3;
    optional  string  publisherName  = 4;
}

message SCReportReport {
    optional  SCReportReporter  reporter  = 1;
    optional  SCReportReported  reported  = 2;
    optional  string  comment  = 3;
    optional  int32  reason  = 4;
    optional  int64  serverReceivedAtMs  = 5;
    optional  SCReportReportEntryPoint  entrypoint  = 6;
}

message SCReportReportEntryPoint {
    optional  string  feature  = 1;
    optional  string  subfeature  = 2;
}

message SCReportReported {
    optional  SCReportUserReportData  userReportData  = 101;
    optional  SCReportProfilePictureReportData  profilePictureReportData  = 102;
    optional  SCReportLensReportData  lensReportData  = 103;
    optional  SCReportPrivateSnapReportData  privateSnapReportData  = 104;
    optional  SCReportSpotlightStorySnapReportData  spotlightSnapReportData  = 105;
    optional  SCReportCustomStorySnapReportData  customStorySnapReportData  = 106;
    optional  SCReportMyStorySnapReportData  myStorySnapReportData  = 107;
    optional  SCReportPublicUserStorySnapReportData  publicUserStorySnapReportData  = 108;
    optional  SCReportPublisherStorySnapReportData  publisherStorySnapReportData  = 109;
    optional  SCReportMapStorySnapReportData  mapStorySnapReportData  = 110;
    optional  SCReportHighlightSnapReportData  highlightSnapReportData  = 111;
    optional  SCReportTopicStorySnapReportData  topicStorySnapReportData  = 112;
    optional  SCReportPublisherStoryTileReportData  publisherStoryTileReportData  = 113;
    optional  SCReportOfficialUserStoryTileReportData  officialUserStoryTileReportData  = 114;
    optional  SCReportNonPartnerStoryTileReportData  nonPartnerStoryTileReportData  = 115;
    optional  SCReportHighlightTileReportData  highlightTileReportData  = 116;
    optional  SCReportChatMediaReportData  chatMediaReportData  = 117;
    optional  SCReportMediaShareReportData  mediaShareReportData  = 119;
    optional  SCReportSpotlightReplyReportData  spotlightReplyReportData  = 120;
    optional  SCReportStoreItemReportData  storeItemReportData  = 121;
    optional  SCReportSavedStorySnapReportData  savedStorySnapReportData  = 122;
    optional  SCReportSavedStoryTileReportData  savedStoryTileReportData  = 123;
    optional  SCReportChatMessageReportData  chatMessageReportData  = 124;
    optional  SCReportTestReportData  testReportData  = 199;
}

message SCReportReportedBlob {
    optional  string  blobId  = 1;
    optional  string  boltContentURL  = 2;
    optional  bytes  encryptionKey  = 3;
    optional  bytes  encryptionIv  = 4;
    optional  string  mimeType  = 5;
}

message SCReportReporter {
    optional  string  userId  = 1;
    optional  string  serviceAccount  = 2;
}

message SCReportSavedStorySnapReportData {
    optional  string  profileId  = 1;
    optional  string  highlightId  = 2;
    optional  string  highlightVersion  = 3;
    optional  string  snapId  = 4;
}

message SCReportSavedStoryTileReportData {
    optional  string  profileId  = 1;
    optional  string  highlightId  = 2;
    optional  string  highlightVersion  = 3;
}

message SCReportSendReportRequest {
    optional  SCReportReport  report  = 1;
    optional  SCReportForwardedRequestInfo  forwardedRequestInfo  = 2;
}

message SCReportSendReportResponse {
}

message SCReportSpotlightReplyReportData {
    optional  string  snapId  = 1;
    optional  SCCOREUUID  replyId  = 2;
}

message SCReportSpotlightStorySnapReportData {
    optional  string  snapId  = 1;
    optional  bool  usesCameraRollPickerLens  = 2;
}

message SCReportStoreItemReportData {
    optional  int64  snapItemId  = 1;
    optional  string  storeId  = 2;
    optional  string  categoryId  = 3;
    optional  string  catalogId  = 4;
    optional  SCReportStoreItemReportData_Unlockable  unlockable  = 5;
}

message SCReportStoreItemReportData_Unlockable {
    optional  uint64  unlockableId  = 1;
    optional  int32  unlockableType  = 2;
}

message SCReportTestReportData {
}

message SCReportTopicStorySnapReportData {
    optional  string  snapId  = 1;
    optional  string  topicId  = 2;
}

message SCReportUserReportData {
    optional  string  reportedUserId  = 1;
    optional  bool  isUserContentsReport  = 2;
    optional  bool  isFamilyCenterReport  = 3;
}

message SCS2BatchResultLookupRequest {
    repeated  SCS2CompositeId  compIdsArray  = 1;
    optional  SCS2UserInfo  userInfo  = 2;
    optional  SCS2CognacClientInfo  cognacClientInfo  = 3;
    optional  SCS2RequestOptions  requestOptions  = 4;
}

message SCS2BatchResultLookupResponse {
    repeated  SCS2Result  resultsArray  = 1;
}

message SCS2BitmojiThumbnail {
    optional  string  tileTemplateId  = 1;
    optional  string  fallbackThumbnailURL  = 2;
}

message SCS2BitmojiUserInfo {
    optional  string  avatarId  = 1;
    optional  string  selfieId  = 2;
    optional  string  sceneId  = 3;
    optional  string  backgroundId  = 4;
}

message SCS2CognacClientInfo {
    optional  string  userContextToken  = 1;
}

message SCS2CompositeId {
    optional  int32  corpus  = 1;
    optional  string  id_p  = 2;
    optional  int64  version  = 3;
}

message SCS2FamilyCenter {
    optional  string  title  = 1;
    optional  string  subtitle  = 2;
    optional  string  thumbnailURL  = 3;
}

message SCS2FeaturedStory {
    optional  string  id_p  = 1;
    optional  string  title  = 2;
    optional  string  thumbnailURL  = 3;
    optional  SCS2FeaturedStory_JaguarCompositeId  jaguarCompositeId  = 4;
    optional  string  locality  = 5;
    optional  string  label  = 6;
    optional  int64  updatedAtMs  = 7;
}

message SCS2FeaturedStory_JaguarCompositeId {
    optional  int32  corpus  = 1;
    optional  string  id_p  = 2;
}

message SCS2Friend {
    optional  SCS2User  user  = 1;
    optional  SCS2StorySummaryInfo  storySummaryInfo  = 2;
}

message SCS2Game {
    optional  string  id_p  = 1;
    optional  string  displayName  = 2;
    optional  string  loadingPageImageURL  = 3;
    optional  string  iconImageURL  = 4;
    optional  string  logoURL  = 5;
    optional  string  contentURL  = 6;
    optional  string  description_p  = 7;
    optional  SCS2Game_NumSupportedPlayers  numSupportedPlayers  = 8;
    optional  int32  type  = 9;
}

message SCS2Game_NumSupportedPlayers {
    optional  int32  min  = 1;
    optional  int32  max  = 2;
}

message SCS2GeoLocation {
    optional  double  latitude  = 1;
    optional  double  longitude  = 2;
    optional  double  horizontalAccuracyMeters  = 3;
    optional  double  timestampMsecs  = 4;
}

message SCS2Group {
    optional  string  id_p  = 1;
    optional  string  name  = 2;
    repeated  SCS2Group_Participant  participantsArray  = 3;
    optional  SCS2StorySummaryInfo  storySummaryInfo  = 4;
}

message SCS2Group_Participant {
    optional  string  userId  = 1;
    optional  string  username  = 2;
    optional  string  displayName  = 3;
    optional  SCS2BitmojiUserInfo  bitmojiUserInfo  = 4;
    optional  string  mutableUsername  = 5;
}

message SCS2HappeningNow {
    optional  SCFEEDCompositeStoryId  compStoryId  = 1;
    optional  string  title  = 2;
    optional  string  publisherName  = 3;
    optional  double  timestampMs  = 5;
    optional  string  thumbnailURL  = 6;
    optional  SCS2Publisher  publisher  = 7;
    optional  int64  editionId  = 8;
    optional  string  category  = 9;
    optional  bool  isBreaking  = 10;
    optional  string  horizontalPublisherIconURL  = 11;
    optional  bool  isOptInNotificationStory  = 12;
}

message SCS2HappeningNowSectionContext {
    optional  SCS2HappeningNowSectionContext_Weather  weather  = 1;
    optional  SCS2Publisher  publisher  = 2;
}

message SCS2HappeningNowSectionContext_Weather {
    optional  bytes  json  = 1;
    optional  float  temperatureF  = 2;
    optional  string  iconURL  = 3;
    optional  int64  editionId  = 4;
}

message SCS2HeroCard {
    optional  string  title  = 1;
    optional  string  description_p  = 2;
    optional  string  backgroundImageURL  = 3;
    optional  SCS2LinkedSearch  linkedSearch  = 4;
}

message SCS2Lens {
    optional  string  lensId  = 1;
    optional  string  name  = 2;
    optional  string  iconURL  = 3;
    optional  string  deeplinkURL  = 4;
    optional  string  creatorName  = 5;
    optional  string  thumbnailURL  = 6;
    optional  SCS2LensThumbnailSequence  thumbnailSequence  = 7;
    optional  string  creatorUserId  = 8;
    optional  string  creatorProfileId  = 9;
    optional  bool  creatorIsOffical  = 10;
}

message SCS2LensDocumentRequest {
    repeated  string  idsArray  = 1;
}

message SCS2LensDocumentResponse {
    repeated  SCS2LensLensMetadata  lenses  = 1;
}

message SCS2LensLensMetadata {
    optional  string  lensId  = 1;
    optional  string  creatorName  = 2;
    optional  string  userId  = 3;
    optional  string  businessProfileId  = 4;
    optional  string  name  = 5;
    optional  int32  lastUpdatedEpoch  = 6;
    optional  string  thumbnailURL  = 7;
    optional  SCS2LensThumbnailSequence  thumbnailSequence  = 8;
    optional  string  iconURL  = 9;
    optional  string  deeplinkURL  = 10;
    optional  string  snapcodeURL  = 11;
    optional  string  previewVideoURL  = 12;
}

message SCS2LensSearchByTextMatch {
    optional  string  queryStr  = 1;
}

message SCS2LensSearchByTopLenses {
    optional  bool  topLenses  = 1;
}

message SCS2LensSearchByUserQuery {
    optional  string  userId  = 1;
    optional  string  businessProfileId  = 2;
    optional  int32  order  = 3;
}

message SCS2LensSearchRequest {
    optional  SCS2LensSearchByUserQuery  user  = 1;
    optional  SCS2LensSearchByTextMatch  textMatch  = 2;
    optional  SCS2LensSearchByTopLenses  topLenses  = 3;
    optional  SCS2LensUserInfo  userInfo  = 4;
    optional  bool  returnInactive  = 5;
    optional  bool  returnIncompatible  = 6;
    optional  bool  returnOrganic  = 7;
    optional  int32  maxCount  = 8;
    optional  int32  resultStartIndex  = 9;
}

message SCS2LensSearchResponse {
    repeated  SCS2LensLensMetadata  lensesArray  = 1;
    optional  bool  hasMoreResults  = 2;
    optional  int32  nextStartIndex  = 3;
}

message SCS2LensThumbnailSequence {
    optional  string  URLPattern  = 1;
    optional  int32  numThumbnails  = 2;
    optional  int32  animationIntervalMs  = 3;
}

message SCS2LensUserInfo {
    optional  string  countryCode  = 1;
    optional  string  forwardedUserAgent  = 2;
}

message SCS2LinkedSearch {
    optional  string  linkedSearchQuery  = 1;
}

message SCS2Place {
    optional  string  id_p  = 1;
    optional  string  displayName  = 2;
    optional  string  locality  = 3;
    optional  SCS2Place_MapOpenParams  mapOpenParams  = 4;
    optional  SCOrbisStoryPreview  storyPreview  = 5;
    optional  string  categoryIconURL  = 9;
}

message SCS2Place_MapOpenParams {
    optional  SPCGRect  boundingBox  = 1;
}

message SCS2PopularUser {
    optional  SCS2User  user  = 1;
    optional  SCS2StorySummaryInfo  storySummaryInfo  = 2;
}

message SCS2Publisher {
    optional  int64  id_p  = 1;
    optional  string  displayName  = 3;
    optional  string  description_p  = 4;
    optional  string  iconURL  = 5;
    optional  string  deeplinkURL  = 6;
    optional  string  businessProfileId  = 7;
    optional  string  primaryColor  = 8;
    optional  bool  isShow  = 9;
    optional  string  showId  = 10;
    optional  int32  adSetting  = 11;
    optional  int64  latestEditionId  = 12;
    optional  int64  approxSubscriptionCount  = 13;
}

message SCS2PublisherEdition {
    optional  int64  id_p  = 1;
    optional  string  title  = 2;
    optional  int64  publishEpoch  = 3;
    optional  string  thumbnailURL  = 5;
    optional  string  deeplinkURL  = 6;
    optional  SCS2Publisher  publisher  = 7;
    optional  SCS2PublisherEdition_Thumbnail  thumbnail  = 8;
    optional  StoryDoc_ID  storyDocId  = 9;
}

message SCS2PublisherEdition_Thumbnail {
    optional  string  URL  = 1;
    optional  SCS2BitmojiThumbnail  bitmojiThumbnail  = 2;
}

message SCS2QuerySuggestion {
    optional  string  queryText  = 1;
}

message SCS2RequestOptions {
    optional  bool  enableDebug  = 1;
    repeated  SCS2Tweak  tweaksArray  = 2;
    optional  SCS2SectionRequest  sectionRequest  = 3;
    optional  string  pageToken  = 4;
    repeated  int32  sectionsToReturnArray  = 5[packed=true];
    repeated  bytes  sectionToSectionPageToken  = 6;
    optional  int32  numToReturn  = 7;
    optional  bool  isSnapchatPlusEligible  = 8;
}

message SCS2Result {
    optional  int32  resultType  = 1;
    optional  SCS2User  user  = 2;
    optional  SCS2SnapProEntity  snapProEntity  = 3;
    optional  SCS2Group  group  = 4;
    optional  SCS2Friend  friend_p  = 5;
    optional  SCS2Publisher  publisher  = 6;
    optional  SCS2Lens  lens  = 7;
    optional  SCS2SuggestedFriend  suggestedFriend  = 8;
    optional  SCS2PopularUser  popularUser  = 9;
    optional  SCS2PublisherEdition  publisherEdition  = 10;
    optional  SCS2Store  store  = 11;
    optional  SCS2FeaturedStory  featuredStory  = 12;
    optional  SCS2CompositeId  compId  = 13;
    optional  SCS2Game  game  = 14;
    optional  SCS2Place  place  = 15;
    optional  SCS2Topic  topic  = 16;
    optional  SCS2HeroCard  heroCard  = 17;
    optional  SCS2HappeningNow  happeningNow  = 18;
    optional  SCCTPMusicTrack  musicTrack  = 19;
    optional  SCCTPMusicArtist  musicArtist  = 20;
    optional  SCS2FamilyCenter  familyCenter  = 21;
    optional  SCS2SnapchatPlus  snapchatPlus  = 22;
    optional  SCS2QuerySuggestion  querySuggestion  = 23;
}

message SCS2SearchRequest {
    optional  string  queryString  = 1;
    optional  int32  origin  = 2;
    optional  SCS2RequestOptions  requestOptions  = 3;
    repeated  SCS2StudyInfo  studyInfoArray  = 4;
    optional  string  sessionId  = 6;
    optional  string  sessionQueryId  = 7;
    optional  SCS2UserInfo  userInfo  = 8;
    optional  SCS2CognacClientInfo  cognacClientInfo  = 9;
}

message SCS2SearchResponse {
    repeated  SCS2Section  sectionsArray  = 1;
    optional  string  debugHtml  = 2;
    optional  SCS2ServiceDebug  serviceDebug  = 3;
    repeated  bytes  sectionToSectionPageToken  = 4;
}

message SCS2Section {
    optional  string  title  = 1;
    optional  int32  sectionType  = 2;
    repeated  SCS2Result  resultsArray  = 3;
    optional  int32  sectionLayout  = 5;
    optional  SCS2HappeningNowSectionContext  happeningNow  = 6;
    optional  int32  numToShow  = 7;
    optional  bool  endOfResults  = 8;
    optional  bytes  sectionPageToken  = 9;
}

message SCS2SectionRequest {
    repeated  int32  sectionTypesArray  = 1[packed=true];
}

message SCS2SectionToken {
    optional  int32  nextScoringOffset  = 1;
    optional  bytes  previousResultsBloomFilter  = 2;
}

message SCS2ServiceDebug {
    optional  SCS2ServiceDebug_RequestDebug  requestDebug  = 1;
    repeated  SCS2ServiceDebug_SectionDebug  sectionDebugArray  = 2;
    optional  string  rawDebug  = 3;
    repeated  SCS2ServiceDebug_PlaceServiceItemDebug  itemsArray  = 4;
}

message SCS2ServiceDebug_PlaceServiceItemDebug {
    optional  string  name  = 1;
    optional  string  id_p  = 2;
    optional  string  category  = 3;
    optional  string  address  = 4;
    optional  uint32  retrievalRank  = 5;
    optional  float  retrievalScore  = 6;
    optional  float  finalScore  = 7;
    optional  string  itemFeatures  = 8;
    optional  uint32  totalCheckins  = 9;
    optional  float  distance  = 10;
    optional  uint32  globalQueryRetrievalRank  = 11;
    optional  float  esScore  = 12;
    optional  float  globalQueryEsScore  = 13;
}

message SCS2ServiceDebug_RequestDebug {
    optional  string  requestId  = 1;
    optional  string  countryCode  = 2;
    optional  string  locale  = 3;
    repeated  string  languagePreferencesArray  = 4;
    optional  int32  origin  = 5;
    repeated  SCS2StudyInfo  activeStudiesArray  = 6;
    optional  string  serviceName  = 7;
    repeated  float  qplExpansions  = 8;
    optional  string  query  = 9;
}

message SCS2ServiceDebug_SectionDebug {
    optional  string  sectionName  = 1;
    repeated  SCS2ServiceDebug_SectionDebug_LiteItemDebug  liteItemDebugArray  = 2;
    repeated  string  retrievalQueryArray  = 3;
    optional  SCS2ServiceDebug_SectionDebug_ScoringDebug  scoringDebug  = 4;
}

message SCS2ServiceDebug_SectionDebug_Explanation {
    optional  float  value  = 1;
    optional  string  description_p  = 2;
    repeated  SCS2ServiceDebug_SectionDebug_Explanation  detailsArray  = 3;
}

message SCS2ServiceDebug_SectionDebug_LiteItemDebug {
    optional  SCS2CompositeId  compositeId  = 1;
    optional  int32  corpus  = 2;
    optional  string  itemType  = 3;
    optional  string  displayName  = 4;
    optional  uint32  retrievalRank  = 5;
    optional  float  retrievalScore  = 6;
    optional  float  finalScore  = 7;
    optional  uint32  finalRank  = 8;
    optional  string  itemFeatures  = 9;
    optional  SCS2ServiceDebug_SectionDebug_Explanation  explanation  = 10;
    optional  string  itemDebug  = 11;
}

message SCS2ServiceDebug_SectionDebug_ScoringDebug {
    optional  string  bentoModelId  = 1;
    optional  string  bentoModelHeads  = 2;
    optional  int32  numToScore  = 3;
    optional  int32  latencyMsecs  = 4;
}

message SCS2SnapProEntity {
    optional  IMPBusinessProfileAndUserData  profile  = 1;
}

message SCS2SnapchatPlus {
    optional  string  title  = 1;
    optional  string  subtitle  = 2;
}

message SCS2StickerLookupRequest {
    repeated  SCS2CompositeId  compIdsArray  = 1;
}

message SCS2StickerLookupResponse {
    repeated  SCS2StickerResult  resultsArray  = 1;
}

message SCS2StickerResult {
    optional  SCS2CompositeId  compId  = 1;
    optional  int32  resultType  = 2;
    optional  SCCTPCTItem  ctItem  = 3;
    optional  double  finalScore  = 4;
}

message SCS2StickerResultTypeOption {
    optional  int32  resultType  = 1;
    optional  SCS2StickerResultTypeOption_CameoOption  cameosOption  = 2;
    optional  SCS2StickerResultTypeOption_BitmojiOption  bitmojiOption  = 3;
    optional  SCS2StickerResultTypeOption_GfycatOption  gfycatOption  = 4;
}

message SCS2StickerResultTypeOption_BitmojiOption {
    repeated  int32  typesArray  = 1[packed=true];
    optional  bool  includeAnimated  = 2;
    optional  bool  includeCustomoji  = 3;
}

message SCS2StickerResultTypeOption_CameoOption {
    repeated  int32  gendersArray  = 1[packed=true];
    optional  SCCameosApiVersion  apiVersion  = 2;
    optional  int32  maxCustomCameos  = 3;
    optional  int32  minSearchResults  = 4;
}

message SCS2StickerResultTypeOption_GfycatOption {
    repeated  int32  contentTypeArray  = 1[packed=true];
}

message SCS2StickerSearchRequest {
    optional  string  superSessionId  = 1;
    optional  string  searchSessionId  = 2;
    optional  int64  sessionQueryId  = 3;
    optional  string  query  = 4;
    optional  int32  origin  = 5;
    optional  SCS2UserInfo  userInfo  = 6;
    repeated  SCS2StudyInfo  studyInfoArray  = 7;
    repeated  SCS2Tweak  tweaksArray  = 8;
    repeated  int32  sectionsToReturnArray  = 9[packed=true];
    repeated  SCS2StickerResultTypeOption  resultTypeOptionsArray  = 10;
}

message SCS2StickerSearchResponse {
    repeated  SCS2StickerSection  sectionsArray  = 1;
    optional  string  debugHtml  = 2;
    optional  SCS2ServiceDebug  serviceDebug  = 3;
}

message SCS2StickerSection {
    optional  int32  sectionType  = 1;
    repeated  SCS2StickerResult  resultsArray  = 2;
}

message SCS2Store {
    optional  string  name  = 1;
    optional  string  description_p  = 2;
    optional  string  thumbnailURL  = 3;
    optional  string  deeplinkURL  = 4;
}

message SCS2StorySummaryInfo {
    optional  SCS2StorySummaryInfo_ThumbnailInfo  thumbnailInfo  = 1;
    optional  bool  hasUnviewedSnaps  = 2;
    optional  bool  hasActiveStory  = 3;
}

message SCS2StorySummaryInfo_ThumbnailContentObjectInfo {
    optional  string  key  = 1;
    optional  string  iv  = 2;
    optional  bytes  contentObject  = 3;
}

message SCS2StorySummaryInfo_ThumbnailInfo {
    optional  string  key  = 1;
    optional  string  iv  = 2;
    optional  string  URL  = 3;
    optional  SCS2StorySummaryInfo_ThumbnailContentObjectInfo  contentObjectInfo  = 4;
}

message SCS2StudyInfo {
    optional  string  id_p  = 1;
    repeated  string  variableValues  = 2;
    optional  int32  experimentId  = 3;
    optional  string  studyName  = 4;
}

message SCS2SuggestedFriend {
    optional  SCS2User  user  = 1;
    optional  SCS2StorySummaryInfo  storySummaryInfo  = 2;
    optional  int32  suggestionReason  = 3;
}

message SCS2SuggestionsRequest {
    repeated  SCS2CompositeId  compIdsArray  = 1;
    optional  SCS2UserInfo  userInfo  = 2;
    optional  bool  enableDebug  = 3;
    repeated  SCS2Tweak  tweaksArray  = 4;
    optional  SCS2SuggestionsRequest_SearchContext  searchContext  = 5;
}

message SCS2SuggestionsRequest_SearchContext {
    optional  string  queryString  = 1;
    optional  int32  origin  = 2;
}

message SCS2SuggestionsResponse {
    repeated  SCS2Result  resultsArray  = 1;
    optional  string  debugHtml  = 2;
}

message SCS2Topic {
    optional  string  text  = 1;
    optional  int64  numSnaps  = 2;
}

message SCS2Tweak {
    optional  string  id_p  = 1;
    optional  int32  intValue  = 2;
    optional  float  floatValue  = 3;
    optional  bool  boolValue  = 4;
    optional  string  stringValue  = 5;
}

message SCS2User {
    optional  string  id_p  = 1;
    optional  string  displayName  = 2;
    optional  string  username  = 3;
    optional  bool  isPopular  = 5;
    optional  SCS2BitmojiUserInfo  bitmojiUserInfo  = 6;
    optional  string  emoji  = 7;
    optional  string  contextHint  = 8;
    optional  SCS2StorySummaryInfo  storySummaryInfo  = 9;
    optional  int32  recommendationReason  = 10;
    optional  bool  isOfficial  = 11;
    optional  string  snapProId  = 12;
    optional  string  mutableUsername  = 13;
}

message SCS2UserInfo {
    optional  int32  age  = 1;
    optional  string  countryCode  = 2;
    optional  SCS2GeoLocation  location  = 3;
    optional  string  bitmojiAvatarId  = 4;
    optional  int32  gender  = 5;
    optional  bool  cameosFeatureRestricted  = 6;
    optional  int32  astrologicalSign  = 7;
    optional  string  timezone  = 8;
}

message SCSAACPbSpamURLBlockingCofConfig {
    optional  bool  enabled  = 1;
    optional  uint64  friendshipPeriodSecs  = 2;
    repeated  string  spamDomainsArray  = 3;
}

message SCSCKCentralKitchenUserData {
    repeated  SCSCKEmbedding  userEmbedding  = 1;
    optional  string  userId  = 2;
}

message SCSCKClientInfo {
    optional  int32  connectionType  = 1;
    optional  uint32  bandwidthKbps  = 2;
    optional  int32  weekday  = 3;
    optional  uint32  hour  = 4;
    repeated  string  languagePrefsArray  = 5;
    optional  string  country  = 6;
    optional  bool  isSoundOn  = 7;
}

message SCSCKContentEngagementScores {
    optional  float  showEngagementScore  = 1;
    optional  float  showFanScore  = 2;
    optional  SCSUPEngagementStats  officialPublicStats  = 3;
    optional  SCSUPEngagementStats  nonOfficialPublicStats  = 4;
    optional  SCSUPEngagementStats  publisherStats  = 5;
    optional  float  publicUserSubscriptionCtr  = 6;
    optional  float  maxPublicUserCtr  = 7;
    optional  float  minPublicUserCtr  = 8;
    optional  float  publicUserRecommendedCtr  = 9;
    optional  int64  totalLongWatches  = 10;
    optional  SCSUPEngagementStats  ourStoryStats  = 11;
    optional  SCSUPEngagementStats  showStats  = 12;
    optional  SCSUPEngagementStats  originalShowStats  = 13;
    optional  SCSUPLensEngagementStats  lensStats  = 14;
    optional  SCSUPWindowedEngagementStats  windowedSpotlightPublisherStats  = 15;
    optional  SCSUPWindowedEngagementStats  windowedSpotlightPublicUserStats  = 16;
    optional  SCSUPWindowedEngagementStats  windowedSingleSnapStoryStats  = 17;
    optional  SCSUPEngagementStats  savedStoryStats  = 18;
    optional  SCSUPWindowedEngagementStats  windowedSingleSnapStoryStatsRealtime  = 19;
}

message SCSCKEmbedding {
    repeated  float  embeddingArray  = 1[packed=true];
    repeated  float  sparseEmbedding  = 2;
    optional  int32  sparseEmbeddingDim  = 3;
}

message SCSCKEmbeddingSet {
    optional  string  embedderInfo  = 1;
    repeated  SCSCKEmbedding  embedding  = 2;
}

message SCSCKFeedEngagementStatus {
    optional  bool  isForYouLeu  = 1;
}

message SCSCKFriendLinkFeatures {
    optional  float  friendshipCreationAgeInYears  = 1;
    optional  float  lastModifiedAgeInYears  = 2;
    optional  float  addedAgeInYears  = 3;
    optional  float  reverseAddedAgeInYears  = 4;
    optional  bool  isInFriendContacts  = 5;
    optional  int32  addSourceType  = 6;
}

message SCSCKFriendStoryClientEngagementFeatures {
    optional  int64  lastInteractionTimestampInSec  = 1;
    optional  int32  numPrivateStories  = 2;
    optional  int32  smallestPrivateStorySize  = 3;
    optional  int32  numGroupchats  = 4;
    optional  int32  smallestGroupchatSize  = 5;
    optional  int64  lastImpressionTimestampInSec  = 6;
    optional  int32  lastImpressionTimeInMs  = 7;
    optional  int64  lastWatchTimestampInSec  = 8;
    optional  int32  lastWatchTimeInMs  = 9;
    optional  string  userId  = 10;
    optional  float  lastInteractionAgeInHour  = 11;
    optional  float  lastImpressionAgeInHour  = 12;
    optional  float  lastWatchAgeInHour  = 13;
}

message SCSCKFriendStoryClientRankingSignals {
    repeated  SCSCKFriendStoryClientEngagementFeatures  friendStoryClientSignalsArray  = 1;
}

message SCSCKFriendStoryContentFeatures {
    optional  SCSCKFriendStoryStoryContentFeatures  friendStoryStoryContentFeatures  = 1;
    optional  SCSCKFriendStorySnapContentFeatures  friendStoryThumbnailContentFeatures  = 2;
}

message SCSCKFriendStoryDerivedEngagementFeatures {
    optional  WindowedFloatMetrics  ratioStoryStorySkips  = 1;
    optional  WindowedFloatMetrics  ratioStorySnapSkips  = 2;
    optional  WindowedFloatMetrics  ratioSnapTimeSpent  = 3;
    optional  WindowedFloatMetrics  ratioSnapTimeSpentPerStoryView  = 4;
    optional  WindowedFloatMetrics  ratioStorySnapViews  = 5;
    optional  WindowedFloatMetrics  ratioStoryStoryCompletions  = 6;
    optional  WindowedFloatMetrics  ratioStoryRepliesPerStoryView  = 7;
    optional  WindowedFloatMetrics  ratioStoryRepliesPerStoryCompletions  = 8;
    optional  WindowedFloatMetrics  ratioStoryStoryViewsPerInterstitialView  = 9;
    optional  WindowedFloatMetrics  ratioStoryStorySkipsPerInterstitialView  = 10;
    optional  WindowedFloatMetrics  ratioStoryStoryViewPerLongImp  = 11;
    optional  WindowedFloatMetrics  ratioStoryStoryCompletionsPerLongImp  = 12;
    optional  WindowedFloatMetrics  ratioStoryStoryTapViewPerLongImp  = 13;
    optional  WindowedFloatMetrics  ratioTotalChatAckTimePerChatView  = 14;
    optional  WindowedFloatMetrics  ratioTotalSnapAckTimePerSnapView  = 15;
    optional  WindowedFloatMetrics  ratioSnapTimeSpentPerSnapView  = 16;
    optional  WindowedFloatMetrics  ratioStoryStoryRepliesPerStoryView  = 17;
    optional  WindowedFloatMetrics  ratioStoryStoryRepliesPerStoryCompletions  = 18;
}

message SCSCKFriendStoryDerivedPosterEngagementFeatures {
    optional  WindowedFloatMetrics  historicalRatioSnapTimeSpent  = 1;
    optional  WindowedFloatMetrics  historicalRatioSnapTimeSpentPerStoryView  = 2;
    optional  WindowedFloatMetrics  historicalRatioStoryStoryCompletions  = 3;
    optional  WindowedFloatMetrics  historicalRatioStoryRepliesPerStoryView  = 4;
    optional  WindowedFloatMetrics  historicalRatioStoryRepliesPerStoryCompletions  = 5;
    optional  WindowedFloatMetrics  historicalRatioStoryStoryViewPerLongImp  = 6;
    optional  WindowedFloatMetrics  historicalRatioStoryStoryCompletionsPerLongImp  = 7;
    optional  WindowedFloatMetrics  historicalRatioStoryStoryTapViewPerLongImp  = 8;
    optional  WindowedFloatMetrics  historicalRatioStorySnapViews  = 9;
    optional  WindowedFloatMetrics  historicalRatioStoryStorySkips  = 10;
    optional  WindowedFloatMetrics  historicalRatioStorySnapSkips  = 11;
    optional  WindowedFloatMetrics  historicalRatioStoryLongImpPerSnapPost  = 12;
    optional  WindowedFloatMetrics  historicalRatioStorySnapViewsPerSnapPost  = 13;
    optional  WindowedFloatMetrics  historicalRatioStoryStoryViewsPerInterstitialView  = 14;
    optional  WindowedFloatMetrics  historicalRatioStoryStorySkipsPerInterstitialView  = 15;
    optional  WindowedFloatMetrics  historicalRatioTotalChatAckTimePerChatView  = 16;
    optional  WindowedFloatMetrics  historicalRatioTotalSnapAckTimePerSnapView  = 17;
    optional  WindowedFloatMetrics  historicalRatioSnapTimeSpentPerSnapView  = 18;
    optional  WindowedFloatMetrics  historicalRatioStoryStoryRepliesPerStoryView  = 19;
    optional  WindowedFloatMetrics  historicalRatioStoryStoryRepliesPerStoryCompletions  = 20;
}

message SCSCKFriendStoryFeatures {
    optional  EngagementFeatures  friendStoryEngagementFeatures  = 1;
    optional  SCSCKFriendStoryDerivedEngagementFeatures  friendStoryDerivedEngagementFeatures  = 2;
    optional  SCSCKFriendStoryMetadataFeatures  friendStoryMetadataFeatures  = 3;
    optional  SCSCKFriendStoryClientEngagementFeatures  friendStoryClientEngagementFeatures  = 4;
    optional  SCSCKFriendStoryPosterEngagementFeatures  friendStoryPosterEngagementFeatures  = 5;
    optional  SCSCKFriendStoryNotificationFeatures  friendStoryNotificationFeatures  = 6;
    optional  FriendMetadataFeatures  friendMetadataFeatures  = 7;
    optional  SCSCKFriendLinkFeatures  friendLinkFeatures  = 8;
    optional  SCSCKFriendStoryPosterFeatures  friendStoryPosterFeatures  = 9;
    optional  EngagementFeatures  friendStoryLongWindowEngagementFeatures  = 10;
    optional  SCSCKFriendStoryDerivedEngagementFeatures  friendStoryDerivedLongWindowEngagementFeatures  = 11;
    optional  SCSCKFriendStoryReverseEngagementFeatures  friendStoryReverseEngagementFeatures  = 12;
    optional  SCSCKFriendStoryDerivedEngagementFeatures  friendStoryDerivedReverseEngagementFeatures  = 13;
}

message SCSCKFriendStoryMetadataFeatures {
    optional  int32  numStorySnapsViewedPast24Hours  = 1;
    optional  int32  numStorySnapsScreenshotsPast24Hours  = 2;
    optional  int32  numStorySnapsPast24Hours  = 3;
    optional  int32  numPrivateStorySnapsViewedPast24Hours  = 4;
    optional  int32  numPrivateStorySnapsPast24Hours  = 5;
    optional  bool  isStoryCompletelyViewed  = 6;
    optional  bool  isPrivateStoryCompletelyViewed  = 7;
    optional  bool  isPrivateStory  = 8;
    optional  bool  isMergedStory  = 9;
    optional  float  latestStoryItemAgeInHour  = 10;
    optional  float  oldestUnviewedItemAgeInHour  = 11;
    optional  float  newestUnviewedItemAgeInHour  = 12;
    optional  SCSCKFriendStoryContentFeatures  friendStoryUnviewedContentFeatures  = 13;
    optional  int32  storyType  = 14;
    optional  SCSCKFriendStoryStoryContentFeatures  friendStoryViewedContentFeatures  = 15;
}

message SCSCKFriendStoryMetadataFeatures_StoryType {
}

message SCSCKFriendStoryNotificationFeatures {
    optional  bool  isOptedIn  = 1;
}

message SCSCKFriendStoryPosterContentFeatures {
    optional  WindowedIntMetrics  numVideoSnaps  = 1;
    optional  WindowedIntMetrics  numVideoNoSoundSnaps  = 2;
    optional  WindowedIntMetrics  numImageSnaps  = 3;
    optional  WindowedIntMetrics  numSnapsWithCaption  = 4;
    optional  WindowedIntMetrics  numSnapsWithDrawing  = 5;
    optional  WindowedIntMetrics  numSnapsWithFilter  = 6;
    optional  WindowedIntMetrics  numSnapsWithLens  = 7;
    optional  WindowedIntMetrics  numSnapsWithTag  = 8;
    optional  WindowedIntMetrics  numSnapsWithVenue  = 9;
    optional  WindowedIntMetrics  numSnapsWithSticker  = 10;
    optional  WindowedIntMetrics  numSnapsWithBitmojiSticker  = 11;
    optional  WindowedIntMetrics  numSnapsWithCustomSticker  = 12;
    optional  WindowedIntMetrics  numSnapsWithEmojiSticker  = 13;
    optional  WindowedIntMetrics  numSnapsWithInfoSticker  = 14;
    optional  WindowedIntMetrics  numSnapsWithAttachment  = 15;
    optional  WindowedIntMetrics  numStorySnapPosts  = 16;
    optional  WindowedIntMetrics  numDaysWithStorySnapPosts  = 17;
    optional  WindowedIntMetrics  numSnapsWithMusic  = 18;
}

message SCSCKFriendStoryPosterEngagementFeatures {
    optional  SCSCOREUUID  posterId  = 1;
    optional  SCSIDXFriendStoryPosterEngagementFeatures  friendStoryPosterEngagementFeatures  = 2;
    optional  SCSCKFriendStoryDerivedPosterEngagementFeatures  friendStoryDerivedPosterEngagementFeatures  = 3;
    optional  int32  numStoryPostDays28D  = 4;
    optional  bool  isTargetedRarePosterBoost  = 5;
    optional  SCSCKFriendStoryPosterContentFeatures  friendStoryPosterContentFeatures  = 6;
    optional  int32  rarePosterBoostSlot  = 7;
}

message SCSCKFriendStoryPosterFeatures {
    optional  SCSCOREUUID  posterId  = 1;
    optional  SCSIDXFriendStoryPosterEngagementFeatures  friendStoryPosterEngagementFeatures  = 2;
    optional  SCSCKFriendStoryDerivedPosterEngagementFeatures  friendStoryDerivedPosterEngagementFeatures  = 3;
    optional  int32  numStoryPostDays28D  = 4;
    optional  bool  isTargetedRarePosterBoost  = 5;
    optional  SCSCKFriendStoryPosterContentFeatures  friendStoryPosterContentFeatures  = 6;
    optional  int32  rarePosterBoostSlot  = 7;
    optional  SCSCKFriendStoryPosterMetadataFeatures  friendStoryPosterMetadataFeatures  = 8;
    repeated  SCSCKEmbedding  posterEmbeddings  = 9;
    repeated  float  posterServingEmbeddingArray  = 10[packed=true];
    optional  SCSUPBasicAttributes  friendStoryPosterBasicAttributesFeatures  = 11;
    optional  EngagementFeatures  expandedFriendStoryPosterEngagmentFeatures  = 12;
}

message SCSCKFriendStoryPosterMetadataFeatures {
    optional  int32  inferredGender  = 1;
    optional  int32  age  = 2;
    optional  int32  inferredBucketedAge  = 3;
}

message SCSCKFriendStoryReverseEngagementFeatures {
    optional  string  posterId  = 1;
    optional  string  viewerId  = 2;
    optional  EngagementFeatures  engagementFeatures  = 3;
}

message SCSCKFriendStorySnapContentFeatures {
    optional  int32  mediaType  = 1;
    optional  float  videoDuration  = 2;
    optional  int32  numWordsInCaption  = 3;
    optional  string  filterId  = 4;
    optional  bool  hasSponsoredGeoFilter  = 5;
    optional  string  lensId  = 6;
    optional  bool  hasSponsoredLens  = 7;
    optional  bool  hasVenue  = 8;
    repeated  string  stickerIdsArray  = 9;
    optional  bool  hasBitmojiSticker  = 10;
    optional  bool  hasEmojiSticker  = 11;
    optional  bool  hasTopicSticker  = 12;
    optional  bool  hasSnapchatSticker  = 13;
    optional  bool  hasAttachmentURL  = 14;
    optional  bool  isFrontFacing  = 15;
    optional  int32  orientation  = 16;
    optional  bool  isInfiniteDuration  = 17;
    optional  string  venueId  = 18;
    optional  SCSCORESnapSource  snapSource  = 19;
    optional  int64  clientEditTimeBeforeSend  = 20;
    optional  bool  savedToMemoriesBeforeSend  = 21;
    optional  int32  retakeTrials  = 22;
    optional  int32  lowestZoomLevel  = 23;
    optional  int32  highestZoomLevel  = 24;
    optional  int32  connectionType  = 25;
    optional  float  mediaDuration  = 26;
    optional  int32  numMentions  = 27;
    optional  int32  numCaptionTagMentions  = 28;
    optional  int32  numMentionStickerMentions  = 29;
    optional  int32  numSnapcodeStickerMentions  = 30;
    optional  bool  hasMusic  = 31;
    optional  bool  hasUnsetMusic  = 32;
    optional  bool  hasLicensedMusic  = 33;
    optional  bool  hasCustomSoundMusic  = 34;
    optional  bool  hasSpotlightOrigMusic  = 35;
    optional  int32  numCtStickers  = 36;
    optional  int32  numCtBitmojiStickers  = 37;
    optional  int32  numCtSnapchatStickers  = 38;
    repeated  string  lensRawTextTagsArray  = 39;
    optional  string  lensPrimaryCategoryId  = 40;
    optional  string  lensSecondaryCategoryId  = 41;
    repeated  string  lensContentTagIdsArray  = 42;
    repeated  string  lensIntegrityTagIdsArray  = 43;
}

message SCSCKFriendStoryStoryContentFeatures {
    optional  int32  numVideoSnaps  = 1;
    optional  int32  numVideoNoSoundSnaps  = 2;
    optional  int32  numImageSnaps  = 3;
    optional  int32  numSnapsWithCaption  = 4;
    optional  int32  numSnapsWithFilter  = 5;
    optional  int32  numSnapsWithSponsoredGeoFilter  = 6;
    optional  int32  numSnapsWithLens  = 7;
    optional  int32  numSnapsWithSponsoredLens  = 8;
    optional  int32  numSnapsWithVenue  = 9;
    optional  int32  numSnapsWithSticker  = 10;
    optional  int32  numSnapsWithBitmojiSticker  = 11;
    optional  int32  numSnapsWithEmojiSticker  = 12;
    optional  int32  numSnapsWithTopicSticker  = 13;
    optional  int32  numSnapsWithSnapchatSticker  = 14;
    optional  int32  numSnapsWithAttachment  = 15;
    optional  int32  numWordsInCaptions  = 16;
    optional  float  videoDuration  = 17;
    repeated  string  filterIdsArray  = 18;
    repeated  string  lensIdsArray  = 19;
    repeated  string  stickerIdsArray  = 20;
    optional  int32  numSnapsFrontFacing  = 21;
    optional  int32  numSnapsVertical  = 22;
    optional  int32  numSnapsUpsideDown  = 23;
    optional  int32  numSnapsHorizontalLeft  = 24;
    optional  int32  numSnapsHorizontalRight  = 25;
    optional  int32  numSnapsInfiniteDuration  = 26;
    repeated  string  venueIdsArray  = 27;
    optional  int32  numSnapsSourceUnknown  = 28;
    optional  int32  numSnapsSourceCameraRoll  = 29;
    optional  int32  numSnapsSourceMemories  = 30;
    optional  int32  numSnapsSourceWeb  = 31;
    optional  int64  totalClientEditTimeBeforeSend  = 32;
    optional  int32  numSnapsSavedToMemoriesBeforeSend  = 33;
    optional  int32  totalRetakeTrials  = 34;
    optional  int32  lowestZoomLevel  = 35;
    optional  int32  highestZoomLevel  = 36;
    optional  int32  numSnapsConnectionTypeWifi  = 37;
    optional  int32  numSnapsConnectionTypeCell  = 38;
    optional  int32  numSnapsConnectionTypeUnknown  = 39;
    optional  int32  numSnapsConnectionTypeEther  = 40;
    optional  float  mediaDuration  = 41;
    optional  int32  numMentions  = 42;
    optional  int32  numSnapsWithMentions  = 43;
    optional  int32  numCaptionTagMentions  = 44;
    optional  int32  numSnapsWithCaptionTagMentions  = 45;
    optional  int32  numMentionStickerMentions  = 46;
    optional  int32  numSnapsWithMentionStickerMentions  = 47;
    optional  int32  numSnapcodeStickerMentions  = 48;
    optional  int32  numSnapsWithSnapcodeStickerMentions  = 49;
    optional  int32  numSnapsWithMusic  = 50;
    optional  int32  numSnapsWithUnsetMusic  = 51;
    optional  int32  numSnapsWithLicensedMusic  = 52;
    optional  int32  numSnapsWithCustomSoundMusic  = 53;
    optional  int32  numSnapsWithSpotlightOrigMusic  = 54;
    optional  int32  numCtStickers  = 55;
    optional  int32  numSnapsWithCtStickers  = 56;
    optional  int32  numCtBitmojiStickers  = 57;
    optional  int32  numSnapsWithCtBitmojiStickers  = 58;
    optional  int32  numCtSnapchatStickers  = 59;
    optional  int32  numSnapsWithCtSnapchatStickers  = 60;
    repeated  string  lensRawTextTagsArray  = 61;
    repeated  string  lensPrimaryCategoryIdsArray  = 62;
    repeated  string  lensSecondaryCategoryIdsArray  = 63;
    repeated  string  lensContentTagIdsArray  = 64;
    repeated  string  lensIntegrityTagIdsArray  = 65;
}

message SCSCKFriendStoryViewerEngagementFeatures {
    optional  WindowedIntMetrics  numSnapsSent  = 1;
    optional  WindowedIntMetrics  numStoryStoryView  = 2;
    optional  WindowedIntMetrics  numStorySnapsViewed  = 3;
    optional  WindowedFloatMetrics  storySnapTimeSpent  = 4;
    optional  WindowedFloatMetrics  ratioSnapTimeSpentPerStoryView  = 5;
    repeated  SCSCKEmbedding  viewerEmbeddings  = 6;
    repeated  float  viewerServingEmbeddingArray  = 7[packed=true];
    optional  WindowedFloatMetrics  num1To1ChatsSent  = 8;
    optional  WindowedFloatMetrics  num1To1SnapsSent  = 9;
    optional  WindowedFloatMetrics  num1ToManyChatsSent  = 10;
    optional  WindowedFloatMetrics  num1ToManySnapsSent  = 11;
    optional  WindowedIntMetrics  numChatSaved  = 12;
    optional  WindowedIntMetrics  numChatScreenshots  = 13;
    optional  WindowedIntMetrics  numChatView  = 14;
    optional  WindowedIntMetrics  numChatsSent  = 15;
    optional  WindowedIntMetrics  numCustomStickersSent  = 16;
    optional  WindowedIntMetrics  numHoursWithStoryStoryView  = 17;
    optional  WindowedIntMetrics  numSnapScreenshots  = 18;
    optional  WindowedIntMetrics  numSnapView  = 19;
    optional  WindowedIntMetrics  numStickersSent  = 20;
    optional  WindowedIntMetrics  numStoryPlaylistExits  = 21;
    optional  WindowedIntMetrics  numStorySnapCompletions  = 22;
    optional  WindowedIntMetrics  numStorySnapReplays  = 23;
    optional  WindowedIntMetrics  numStorySnapReplies  = 24;
    optional  WindowedIntMetrics  numStorySnapSkips  = 25;
    optional  WindowedIntMetrics  numStorySnapsScreenshots  = 26;
    optional  WindowedIntMetrics  numStorySnapsViewedRaw  = 27;
    optional  WindowedIntMetrics  numStoryStoryCompletions  = 28;
    optional  WindowedIntMetrics  numStoryStoryLongImp  = 29;
    optional  WindowedIntMetrics  numStoryStoryViewViaInterstitialTap  = 30;
    optional  WindowedIntMetrics  numStoryStoryViewViaTap  = 31;
    optional  WindowedIntMetrics  numStoryStoryViewViaTapPos0  = 32;
    optional  WindowedFloatMetrics  snapTimeSpent  = 33;
    optional  WindowedFloatMetrics  storyStoryLongImpTime  = 34;
    optional  WindowedFloatMetrics  totalChatAckTime  = 35;
    optional  WindowedFloatMetrics  totalSnapAckTime  = 36;
    optional  SCSCKFriendStoryDerivedEngagementFeatures  derivedViewerEngagementFeatures  = 37;
    optional  WindowedIntMetrics  numStorySnapPosts  = 38;
    optional  WindowedIntMetrics  numStoryStoryReplies  = 39;
    optional  WindowedIntMetrics  numStoryStoryRepliesPos0  = 40;
    optional  WindowedIntMetrics  storySnapReplyCharCount  = 41;
    optional  EngagementFeatures  viewerEngagementFeatures  = 42;
    optional  EngagementFeatures  viewerLongWindowEngagementFeatures  = 43;
    optional  SCSCKFriendStoryDerivedEngagementFeatures  derivedViewerLongWindowEngagementFeatures  = 44;
}

message SCSCKInfer {
}

message SCSCKNegativeImpressionEvent {
    optional  SCSUPImpressionEvent  impressionEvent  = 1;
    optional  bool  positionLessThanDepth  = 2;
}

message SCSCKRecentEventFeatures {
    repeated  SCSUPWatchEvent  watchEventsArray  = 1;
    repeated  SCSCKNegativeImpressionEvent  negativeImpressionEventsArray  = 2;
    repeated  SCSUPFavoriteEvent  favoriteEventsArray  = 3;
    repeated  SCSUPUnfavoriteEvent  unfavoriteEventsArray  = 4;
    repeated  SCSUPSendEvent  sendEventsArray  = 5;
    repeated  SCSUPHideEvent  hideEventsArray  = 6;
    repeated  SCSUPUnhideEvent  unhideEventsArray  = 7;
    repeated  SCSUPBoostEvent  boostEventsArray  = 8;
    repeated  SCSUPUnboostEvent  unboostEventsArray  = 9;
    repeated  SCSUPReportEvent  reportEventsArray  = 10;
    repeated  SCSUPOpenProfileEvent  openProfileEventsArray  = 11;
}

message SCSCKUsedLenses {
    repeated  int64  history3DArray  = 1[packed=true];
    repeated  int64  history40DArray  = 2[packed=true];
}

message SCSCKUserFeatures {
    optional  SCSUPBasicAttributes  basicAttributes  = 1;
    repeated  SCSCKEmbedding  userEmbeddings  = 2;
    repeated  fixed64  subscriptionsArray  = 3[packed=true];
    repeated  fixed64  recentWatchesArray  = 4[packed=true];
    optional  int64  requestTimestampSecs  = 5;
    repeated  SCSUPSalientTermScore  scoredSalientTermsArray  = 6;
    repeated  SCSUPScoredInterest  scoredInterestsArray  = 7;
    optional  SCSCKClientInfo  clientInfo  = 8;
    optional  SCSCKContentEngagementScores  contentEngagementScores  = 9;
    repeated  float  interestTabVecArray  = 10[packed=true];
    repeated  fixed64  recentWatchesNoEditionArray  = 11[packed=true];
    repeated  bool  registeredInterestVecArray  = 12[packed=true];
    repeated  float  userDiEmbeddingArray  = 13[packed=true];
    optional  string  userDiEmbeddingVersion  = 14;
    optional  SCSCKFriendStoryViewerEngagementFeatures  friendStoryViewerEngagementFeatures  = 15;
    optional  bool  isNewUser  = 16;
    optional  SCSQNSectionStats  targetSectionStats  = 17;
    repeated  fixed64  topKRecencyOrderedLensCreatorSubsFpArray  = 18[packed=true];
    optional  SCSCKUsedLenses  usedLenses  = 19;
    repeated  SCSCKUserFeatures_UserStoryEngagementStats  publicUserStoryEngagementStatsArray  = 20;
    repeated  SCSCKUserFeatures_UserStoryEngagementStats  publisherStoryEngagementStatsArray  = 21;
    optional  SCSCKUserFeatures_FlattenedUserStoryInteractions  userStoryInteractions  = 22;
    repeated  SCSCKUserFeatures_SccWindowedEngagementStats  windowedSccPublisherStoryArray  = 23;
    repeated  SCSCKUserFeatures_SccWindowedEngagementStats  windowedSccPublicUserAccountArray  = 24;
    repeated  SCSCKUserFeatures_SccWindowedEngagementStats  windowedSccPublisherStorySpotlightArray  = 25;
    repeated  SCSCKUserFeatures_SccWindowedEngagementStats  windowedSccPublicUserAccountSpotlightArray  = 26;
    optional  SCSUPWindowedEngagementStats  windowedSectionEngagementStats  = 27;
    repeated  CreatorInfo  topKRecencyOrderedLensCreatorInfoArray  = 28;
    optional  SCSCKRecentEventFeatures  recentEvents  = 29;
    optional  fixed64  hashedUserId  = 30;
    repeated  SCSCKUserFeatures_SccWindowedEngagementStats  windowedCupSccSingleSnapStoryArray  = 31;
    repeated  SCSCKUserFeatures_SccWindowedEngagementStats  windowedYt8MSingleSnapStoryArray  = 32;
    repeated  SCSCKUserFeatures_HashtagWindowedEngagementStats  windowedHashtagSingleSnapStoryArray  = 33;
    repeated  SCSCKUserFeatures_LensWindowedEngagementStats  windowedLensSingleSnapStoryArray  = 34;
    repeated  SCSCKUserFeatures_MusicWindowedEngagementStats  windowedMusicSingleSnapStoryArray  = 35;
    repeated  SCSCKUserFeatures_SccWindowedEngagementStats  windowedSccSingleSnapStoryArray  = 36;
    repeated  SCSCKUserFeatures_SccWindowedEngagementStats  windowedCupSccV3SingleSnapStoryArray  = 37;
    optional  SCSUPWindowedEngagementSignals  suggestiveSignalsFourWeeks  = 38;
    repeated  SCSCKUserFeatures_SccWindowedEngagementStats  windowedCupSccPlusV1SingleSnapStoryArray  = 39;
    repeated  SCSCKUserFeatures_SccNormalizedStats  sccNormalizedStatsArray  = 40;
    repeated  SCSCKUserFeatures_SccNormalizedStats  cupSccV3NormalizedStatsArray  = 41;
    optional  SCSCKFeedEngagementStatus  feedEngagementStatus  = 42;
    optional  SCSCKRecentEventFeatures  clientInferredRecentEvents  = 43;
    optional  SCSCKRecentEventFeatures  spotlightRobustaRecentEvents  = 44;
    optional  SCSUPWindowedEngagementSignals  suggestivePublisherSignalsThreeMonth  = 45;
    optional  SCSUPWindowedEngagementSignals  sensitivePublisherSignalsThreeMonth  = 46;
    optional  SCSUPWindowedEngagementSignals  hbiPublisherSignalsThreeMonth  = 47;
    repeated  SCSCKUserFeatures_SccWindowedEngagementStats  windowedCupClusterV1SingleSnapStoryArray  = 48;
    repeated  SCSCKUserFeatures_LanguageWindowedEngagementStats  windowedLanguageSingleSnapStoryArray  = 50;
    optional  SCSCKRecentEventFeatures  spotlightLastSessionRecentEvents  = 51;
    optional  SCSCKRecentEventFeatures  discoverRobustaRecentEvents  = 52;
    repeated  SCSCKUserFeatures_SccWindowedEngagementStats  windowedCupSccPlusV1SingleSnapStoryRealtimeArray  = 53;
    repeated  SCSCKUserFeatures_SccWindowedEngagementStats  windowedCupClusterV1SingleSnapStoryRealtimeArray  = 54;
    optional  bool  isLeUser  = 55;
    repeated  SCSCKUserFeatures_BucketizedSuggestiveWindowedEngagementStats  windowedSuggestiveV1SingleSnapStoryArray  = 56;
}

message SCSCKUserFeatures_BucketizedSuggestiveWindowedEngagementStats {
    optional  int32  suggestiveBucket  = 1;
    optional  SCSUPWindowedEngagementStats  windowedEngagementStats  = 2;
}

message SCSCKUserFeatures_FlattenedUserStoryInteractions {
    repeated  fixed64  storyKeyArray  = 1[packed=true];
    repeated  bool  hiddenArray  = 2[packed=true];
    repeated  uint32  snapCompletionPercentArray  = 3[packed=true];
    repeated  uint32  storyLengthSecondsArray  = 4[packed=true];
    repeated  uint32  watchTimePercentArray  = 5[packed=true];
    repeated  uint32  numWatchesArray  = 6[packed=true];
    repeated  uint32  totalImpressionTimeArray  = 7[packed=true];
    repeated  uint32  storyExitArray  = 8[packed=true];
    repeated  uint32  storyEntranceArray  = 9[packed=true];
    repeated  bool  subscribedArray  = 10[packed=true];
    repeated  uint32  storyEntranceIntentArray  = 11[packed=true];
    repeated  uint32  storyExitIntentArray  = 12[packed=true];
    repeated  uint32  numBoostsArray  = 13[packed=true];
    repeated  uint32  numSnapsInStoryArray  = 14[packed=true];
    repeated  uint32  totalWatchTimeMsecsArray  = 15[packed=true];
}

message SCSCKUserFeatures_HashtagWindowedEngagementStats {
    optional  string  hashtag  = 1;
    optional  SCSUPWindowedEngagementStats  windowedEngagementStats  = 2;
}

message SCSCKUserFeatures_LanguageWindowedEngagementStats {
    optional  string  language  = 1;
    optional  SCSUPWindowedEngagementStats  windowedEngagementStats  = 2;
}

message SCSCKUserFeatures_LensWindowedEngagementStats {
    optional  string  lensId  = 1;
    optional  SCSUPWindowedEngagementStats  windowedEngagementStats  = 2;
}

message SCSCKUserFeatures_MusicWindowedEngagementStats {
    optional  uint64  musicId  = 1;
    optional  SCSUPWindowedEngagementStats  windowedEngagementStats  = 2;
}

message SCSCKUserFeatures_SccNormalizedStats {
    optional  int32  scc  = 1;
    optional  SCSUPNormalizedStats  normalizedStats  = 2;
}

message SCSCKUserFeatures_SccWindowedEngagementStats {
    optional  int32  scc  = 1;
    optional  SCSUPWindowedEngagementStats  windowedEngagementStats  = 2;
}

message SCSCKUserFeatures_UserStoryEngagementStats {
    optional  fixed64  storyKey  = 1;
    optional  SCSUPEngagementStats  engagementStats  = 2;
}

message SCSCKUserIngredient {
    repeated  SCSUPSalientTermScore  salientTermScoreArray  = 1;
}

message SCSCOREABFeatureLoggingEntry {
    optional  string  clientDfSessionId  = 1;
    optional  string  requestId  = 2;
    optional  string  crStudyId  = 3;
    optional  string  userName  = 4;
    optional  string  ghostId  = 5;
    repeated  SCSCOREABFeatureLoggingEntry_ExperimentCr  serverCrPerTypeArray  = 6;
    repeated  SCSCOREABFeatureLoggingEntry_ExperimentFirstChangedPosition  firstChangedPositionPerTypeArray  = 7;
    repeated  SCSCOREABFeatureLoggingEntry_CustomFeatures  customFeaturesArray  = 8;
    repeated  SCSCOREABFeatureLoggingEntry_StudyCRInfo  studyCrsArray  = 9;
}

message SCSCOREABFeatureLoggingEntry_CustomFeatures {
    optional  string  studyId  = 1;
    repeated  SCSCOREABFeatureLoggingEntry_CustomFeatures_Feature  featuresArray  = 2;
}

message SCSCOREABFeatureLoggingEntry_CustomFeatures_Feature {
    optional  string  name  = 1;
    optional  string  stringVal  = 2;
    optional  int64  intVal  = 3;
    optional  double  doubleVal  = 4;
    optional  bool  boolVal  = 5;
}

message SCSCOREABFeatureLoggingEntry_ExperimentCr {
    optional  int32  feedType  = 1;
    optional  float  serverCr  = 2;
}

message SCSCOREABFeatureLoggingEntry_ExperimentFirstChangedPosition {
    optional  int32  feedType  = 1;
    optional  int32  firstChangedPosition  = 2;
}

message SCSCOREABFeatureLoggingEntry_StudyCRInfo {
    optional  string  crStudyId  = 1;
    repeated  SCSCOREABFeatureLoggingEntry_StudyCRInfo_PerFeedInfo  perFeedArray  = 2;
    optional  SCSCOREABFeatureLoggingEntry_StudyCRInfo_TriggerReasons  triggerReasons  = 3;
}

message SCSCOREABFeatureLoggingEntry_StudyCRInfo_PerFeedInfo {
    optional  int32  feedType  = 1;
    optional  float  serverCr  = 2;
    optional  int32  firstChangedPosition  = 3;
}

message SCSCOREABFeatureLoggingEntry_StudyCRInfo_TriggerReasons {
    optional  bool  impactSampled  = 1;
    optional  bool  experimentTriggered  = 2;
}

message SCSCOREABPriority {
}

message SCSCOREABTestStudyInfo {
    optional  string  studyId  = 1;
    repeated  string  variableValues  = 2;
    optional  string  experimentId  = 3;
}

message SCSCOREAppBuild {
}

message SCSCOREAppInfo {
    optional  string  appVersion  = 1;
    optional  int32  osType  = 3;
    optional  string  osVersion  = 4;
    optional  int32  appBuild  = 5;
    optional  int32  appVariant  = 6;
    optional  string  rawUserAgent  = 7;
}

message SCSCOREAppStoryDestinationMetadata {
    optional  SCSCOREUUID  appId  = 1;
    optional  uint64  ttlSecs  = 2;
}

message SCSCOREAppVariant {
}

message SCSCOREAppVersionRange {
    optional  string  maxVersion  = 1;
    optional  string  minVersion  = 2;
}

message SCSCORECaptionMetadata {
    optional  float  fontSize  = 1;
    optional  float  centerX  = 2;
    optional  float  centerY  = 3;
    optional  float  rotation  = 4;
    optional  bool  tracking  = 5;
    optional  int32  type  = 7;
}

message SCSCOREChallengeMetadata {
    optional  SCSCOREUUID  id_p  = 1;
}

message SCSCOREClientInfo {
    optional  SCSCOREUUID  userId  = 1;
    optional  SCSCOREAppInfo  appInfo  = 2;
    optional  SCSCOREConnectionInfo  connectionInfo  = 3;
    optional  SCSCOREDeviceInfo  deviceInfo  = 4;
    optional  SCSCOREGeoLocation  location  = 5;
    optional  string  countryCode  = 6;
    optional  bool  isEmployee  = 7;
    optional  SCSCOREGeoAddress  geoAddress  = 8;
}

message SCSCOREConnectionInfo {
    optional  string  carrier  = 1;
    optional  string  carrierMccMnc  = 2;
    optional  int32  connectionType  = 3;
    optional  string  clientIp  = 4;
}

message SCSCOREContinuousExplorationIndexMetadata {
    optional  int64  startTimeMsecs  = 1;
    repeated  SCSCOREExplorationIndexCohortMetadata  metadata  = 2;
}

message SCSCORECustomStoryDestinationMetadata {
    optional  SCSCOREUUID  groupId  = 1;
    optional  SCSCORECustomizedTTL  customizedTtl  = 2;
}

message SCSCORECustomStoryMembership {
}

message SCSCORECustomStoryType {
}

message SCSCORECustomizedTTL {
    optional  int32  ttl  = 1;
}

message SCSCOREDeviceInfo {
    optional  bytes  idfa  = 1;
    optional  string  deviceModel  = 2;
}

message SCSCOREExperimentalMetadata {
    optional  bool  isTimelineMode  = 1;
}

message SCSCOREExplorationAb {
    repeated  SCSCOREExplorationAbExp  abTestsMap  = 1;
}

message SCSCOREExplorationAbExp {
    optional  string  name  = 1;
    optional  int64  latestVersionTs  = 2;
    repeated  SCSCOREExplorationAbTreatment  treatmentsArray  = 3;
}

message SCSCOREExplorationAbTreatment {
    optional  string  name  = 1;
    optional  int64  expId  = 2;
    optional  int64  bucketIdRangeStart  = 3;
    optional  int64  bucketIdRangeEnd  = 4;
    repeated  string  params  = 5;
}

message SCSCOREExplorationCohortParams {
    optional  string  country  = 1;
    optional  string  language  = 2;
    optional  int32  minQuota  = 3;
    optional  int32  maxQuota  = 4;
    repeated  SCSCOREExplorationTierParams  tierParamsMap  = 5;
    optional  double  fractionalMinQuota  = 6;
    optional  double  fractionalMaxQuota  = 7;
    repeated  string  countriesArray  = 8;
}

message SCSCOREExplorationDropReason {
}

message SCSCOREExplorationIndexCohortMetadata {
    optional  string  cohort  = 1;
    optional  int32  streamSize  = 2;
    optional  float  totalHourAge  = 3;
    optional  int32  totalNumStoryViews  = 4;
    optional  int32  numZeroViewStories  = 5;
    optional  string  country  = 6;
}

message SCSCOREExplorationIndexingMetadata {
    optional  int64  startTimeSecs  = 1;
    optional  int64  endTimeSecs  = 2;
    repeated  int32  backlogStoriesPerCountry  = 3;
    repeated  int32  indexedStoriesPerCountry  = 4;
    repeated  int32  finishedExploringStoriesPerCountry  = 5;
    repeated  int32  newStorySinceLastRunPerCountry  = 6;
    repeated  int32  expectedPoolSizePerCountry  = 7;
    repeated  int32  numViewsPerCountry  = 8;
}

message SCSCOREExplorationParams {
    repeated  SCSCOREExplorationCohortParams  cohortParamsArray  = 1;
}

message SCSCOREExplorationPromotionReason {
}

message SCSCOREExplorationStage {
}

message SCSCOREExplorationTierParams {
    optional  int32  viewUpperBound  = 1;
    optional  int32  viewLowerBound  = 2;
    optional  int32  maxAllowedHides  = 3;
    optional  double  longViewPromotionRate  = 4;
    optional  double  boostPromotionRate  = 5;
}

message SCSCOREGeoAddress {
    optional  string  country  = 1;
    optional  string  state  = 2;
    optional  string  city  = 3;
    optional  string  neighborhood  = 6;
    optional  string  countryCode  = 10;
}

message SCSCOREGeoBoundingBox {
    optional  SCSCOREGeoPoint  swPoint  = 1;
    optional  SCSCOREGeoPoint  nePoint  = 2;
}

message SCSCOREGeoCircle {
    optional  SCSCOREGeoPoint  center  = 1;
    optional  double  radiusInMeters  = 2;
}

message SCSCOREGeoFence {
    optional  SCSCOREGeoPolygon  geoPolygon  = 1;
    optional  SCSCOREGeoCircle  geoCircle  = 2;
}

message SCSCOREGeoLocation {
    optional  double  latitude  = 1;
    optional  double  longitude  = 2;
    optional  double  altitude  = 3;
    optional  double  radiusInMeters  = 4;
}

message SCSCOREGeoPoint {
    optional  double  latitude  = 1;
    optional  double  longitude  = 2;
}

message SCSCOREGeoPolygon {
    optional  string  id_p  = 1;
    repeated  SCSCOREGeoPoint  coordinatesArray  = 2;
}

message SCSCOREGeoRegion {
    optional  string  regionId  = 1;
    optional  SCSCOREGeoBoundingBox  boundingBox  = 2;
}

message SCSCOREHNNewsCategory {
    optional  string  id_p  = 1;
    optional  string  localizedDisplayName  = 2;
    optional  string  color  = 3;
}

message SCSCOREImpalaUserInfo {
    optional  string  hostUserId  = 1;
    optional  string  hostUserName  = 2;
    optional  string  hostUserDisplayName  = 3;
    optional  string  hostUserEmoji  = 4;
    optional  string  hostUserEmojiSafe  = 5;
    optional  string  hostUserBitmojiAvatarId  = 6;
    optional  string  hostUserBitmojiAvatarSelfieId  = 7;
    optional  string  posterUserId  = 8;
    optional  string  posterUserDisplayName  = 9;
    optional  string  businessId  = 10;
    optional  string  businessName  = 11;
    optional  string  businessLogoURL  = 12;
    optional  SGTILink  businessProfileLink  = 13;
    optional  bool  posterUserEligibleForUserAttribution  = 14;
    optional  int64  hostUserFriendCountBucketed  = 15;
    optional  int64  hostUserFollowerCountBucketed  = 16;
    optional  bool  hostUserIsOfficial  = 17;
    optional  bool  isEmployeeOnly  = 18;
    optional  int32  businessProfileCategory  = 19;
    optional  int32  snapproTier  = 20;
}

message SCSCOREImpalaUserInfoLite {
    optional  string  hostUserId  = 1;
    optional  string  businessId  = 2;
    optional  bool  isOfficialUser  = 3;
}

message SCSCOREImpalaUserInfo_BusinessProfileCategory {
}

message SCSCOREImpalaUserList {
    repeated  SCSCOREImpalaUserInfoLite  usersArray  = 1;
}

message SCSCORELensCategory {
}

message SCSCORELensInfo {
    optional  string  lensId  = 1;
    optional  bool  isSponsored  = 2;
    optional  string  lensName  = 3;
    optional  string  brandName  = 4;
    optional  bool  supportsSelfie  = 5;
    optional  bool  supportsBackCamera  = 6;
    optional  SCSCORELensSchedule  schedule  = 7;
    optional  bool  isCommunity  = 8;
    optional  bool  allowedInDiscover  = 9;
    optional  string  iconURL  = 10;
    optional  string  deeplinkURL  = 11;
    optional  string  creatorName  = 12;
    optional  SCSCORELensThumbnail  thumbnail  = 13;
    optional  string  creatorUuid  = 14;
    optional  bool  isOfficialCreator  = 15;
    optional  string  creatorBitmojiAvatarId  = 16;
    optional  string  creatorBitmojiAvatarSelfieId  = 17;
    optional  int64  lensCreationTsSecs  = 18;
    optional  int64  lensUpdateTsSecs  = 19;
    optional  bool  isPrivate  = 20;
    optional  int64  lensApprovalTsSecs  = 21;
    optional  SCSCOREAppVersionRange  iosVersion  = 22;
    optional  SCSCOREAppVersionRange  androidVersion  = 23;
    repeated  string  whitelistedCountriesArray  = 24;
    repeated  string  blacklistedCountriesArray  = 25;
    optional  bool  isSnappable  = 26;
    optional  int32  type  = 27;
    optional  bool  isMusic  = 28;
    optional  string  lensRankingId  = 29;
}

message SCSCORELensSchedule {
    optional  int64  startDateTsSecs  = 1;
    optional  int64  endDateTsSecs  = 2;
}

message SCSCORELensThumbnail {
    optional  SCSCORELensThumbnail_ImageSequence  imageSequence  = 1;
    optional  string  thumbnailMediaURL  = 2;
}

message SCSCORELensThumbnail_ImageSequence {
    optional  string  URLPattern  = 1;
    optional  int32  numImages  = 2;
    optional  int32  frameIntervalMs  = 3;
}

message SCSCORELiveStreamAuthHeader {
    optional  string  name  = 1;
    optional  string  value  = 2;
}

message SCSCORELogoDisplay {
}

message SCSCOREMediaInfo {
    optional  int32  mediaType  = 1;
    optional  double  mediaLengthSecs  = 2;
    optional  int32  orientation  = 3;
    optional  bool  frontFacing  = 4;
    optional  bool  zipped  = 5;
    optional  string  mediaIdMsm  = 6;
    optional  string  mediaKey  = 7;
    optional  string  mediaIv  = 8;
    optional  string  thumbnailIv  = 9;
    optional  bool  isInfiniteDuration  = 10;
    optional  SCMTStreamingMediaInfo  streamingMediaInfo  = 12;
    optional  float  aspectRatio  = 13;
    repeated  int32  thumbnailVariantsArray  = 14[packed=true];
    optional  SCMTOneSnapInfo  streamingSnapInfo  = 15;
    optional  string  thumbnailDominantColor  = 16;
    optional  SCMTPublicMediaInfo  publicMediaInfo  = 17;
    repeated  SCSCOREMediaVariant  mediaVariantsArray  = 18;
    optional  string  thumbnailURL  = 19;
    optional  string  mediaD2SURL  = 20;
    optional  bool  skipStreamingGeneration  = 21;
    optional  int32  processingStatus  = 22;
}

message SCSCOREMediaVariant {
    optional  int32  variantName  = 1;
    optional  string  URL  = 2;
}

message SCSCOREMultiPolygon {
    repeated  SCSCOREGeoPolygon  polygonsArray  = 1;
}

message SCSCOREMultiSnapExtension {
    optional  string  multiSnapBundleId  = 1;
    optional  int32  multiSnapSegmentCount  = 2;
    optional  int32  multiSnapSegmentId  = 3;
}

message SCSCOREMyStoryDestinationMetadata {
    optional  int32  privacyOverride  = 1;
    optional  SCSCORECustomizedTTL  customizedTtl  = 2;
}

message SCSCORENotificationAudience {
}

message SCSCOREOsType {
}

message SCSCOREOurStoryDestinationMetadata {
    repeated  int32  destinationsArray  = 1[packed=true];
    optional  bool  createHighlightFromSpotlight  = 2;
    repeated  Hashtag  hashtagsArray  = 3;
    optional  SCSCORESnapDescription  snapDescription  = 4;
    optional  SCSCOREPlaceTagsMetadata  placeTagsMetadata  = 5;
    optional  SCSCOREChallengeMetadata  challenge  = 6;
    optional  SCSCOREUUID  businessId  = 7;
}

message SCSCOREPlaceTagsMetadata {
    optional  bool  placeTagged  = 1;
    optional  uint64  placeItemCount  = 2;
    optional  uint64  placeItemIndex  = 3;
    optional  string  placeTagId  = 4;
}

message SCSCOREPostingStoryType {
}

message SCSCOREPublisherAdSetting {
}

message SCSCOREPublisherPostFrequency {
}

message SCSCOREPublisherSnapMediaType {
}

message SCSCOREPublisherTierLevel {
}

message SCSCORERankingMetadata {
    optional  bool  postedToUserStory  = 1;
    optional  SCSCORESnapClientMetadata  clientMetadata  = 2;
}

message SCSCORERequestMetadata {
    optional  string  requestId  = 1;
    optional  int64  requestTimestampMs  = 2;
    optional  int32  origin  = 3;
    optional  SCSCOREClientInfo  clientInfo  = 4;
}

message SCSCORERequestOrigin {
}

message SCSCOREResponseStatus {
    optional  int32  code  = 1;
    optional  string  reason  = 2;
}

message SCSCORESavedStoryDestinationMetadata {
    optional  SCSCOREUUID  profileId  = 1;
    optional  SCSCOREUUID  savedStoryId  = 2;
}

message SCSCORESnapClientMetadata {
    optional  int64  clientEditTimeBeforeSend  = 1;
    optional  bool  savedToMemoriesBeforeSend  = 2;
    optional  bool  isLoadedFromCameraRoll  = 3;
    optional  uint32  retakeTrials  = 4;
    repeated  uint32  zoomLevelSamplesArray  = 5[packed=true];
    optional  int32  connectionType  = 6;
}

message SCSCORESnapDescription {
    optional  string  text  = 1;
}

message SCSCORESnapProStoryDestinationMetadata {
    optional  SCSCOREUUID  businessId  = 1;
    optional  string  serviceEndpoint  = 2;
}

message SCSCORESnapSource {
    optional  int32  source  = 1;
}

message SCSCOREStatusCode {
}

message SCSCOREStoryMetadata {
    optional  string  clientId  = 1;
    optional  SCSCORERankingMetadata  rankingMetadata  = 3;
    optional  SCSCOREExperimentalMetadata  experimentalMetadata  = 4;
    optional  SDMLocation  location  = 5;
    optional  bytes  thumbnailData  = 6;
    optional  SCSCORECaptionMetadata  captionMetadata  = 7;
    optional  string  captionText  = 8;
    optional  SCSCOREGeoAddress  geoAddressFromIp  = 9;
    optional  int32  orientation  = 11;
    optional  string  locale  = 12;
    optional  SCSCORETimeZone  timeZone  = 13;
    optional  int64  goLiveTsMs  = 14;
    optional  string  routeTag  = 100;
}

message SCSCOREStoryPostDestinationMetadata {
    optional  SCSCOREMyStoryDestinationMetadata  myStory  = 1;
    optional  SCSCORECustomStoryDestinationMetadata  customStory  = 2;
    optional  SCSCOREOurStoryDestinationMetadata  ourStory  = 3;
    optional  SCSCORESnapProStoryDestinationMetadata  snapProStory  = 4;
    optional  SCSCOREAppStoryDestinationMetadata  appStory  = 5;
    optional  SCSCORESavedStoryDestinationMetadata  savedStory  = 6;
    optional  bytes  messagingDestinationId  = 7;
}

message SCSCOREStorySubtype {
}

message SCSCORETimeZone {
    optional  string  id_p  = 1;
}

message SCSCORETweakParameter {
    optional  int32  intValue  = 1;
    optional  float  floatValue  = 2;
    optional  bool  boolValue  = 3;
    optional  string  stringValue  = 4;
}

message SCSCORETweaks {
    repeated  SCSCORETweakParameter  parameters  = 1;
}

message SCSCOREUUID {
    optional  fixed64  highBits  = 1;
    optional  fixed64  lowBits  = 2;
}

message SCSFLScanFromLensRequest {
    optional  string  id_p  = 1;
    optional  bytes  image  = 2;
    repeated  string  servicesArray  = 3;
    optional  bool  isFrontFacing  = 4;
    optional  string  lensId  = 5;
    optional  bool  isLensTexture  = 6;
    optional  int32  source  = 7;
}

message SCSFLScanFromLensWrappedResponse {
    optional  string  id_p  = 1;
    optional  bytes  jsonResponse  = 2;
}

message SCSIDXFriendStoryPosterEngagementFeatures {
    optional  WindowedIntMetrics  numStoryStoryView  = 1;
    optional  WindowedIntMetrics  numStoryStoryCompletions  = 2;
    optional  WindowedIntMetrics  numStorySnapsViewed  = 3;
    optional  WindowedIntMetrics  numStorySnapReplies  = 4;
    optional  WindowedIntMetrics  numStoryStoryLongImp  = 5;
    optional  WindowedFloatMetrics  storySnapTimeSpent  = 6;
    optional  WindowedFloatMetrics  storyStoryLongImpTime  = 7;
    optional  WindowedIntMetrics  numStoryStoryViewViaTap  = 8;
    optional  WindowedIntMetrics  numStoryStoryViewViaInterstitialTap  = 9;
    optional  WindowedIntMetrics  numHoursWithStoryStoryView  = 10;
    optional  WindowedIntMetrics  numStoryStorySkips  = 11;
    optional  WindowedIntMetrics  numStorySnapsViewedRaw  = 12;
    optional  WindowedIntMetrics  numStorySnapCompletions  = 13;
    optional  WindowedIntMetrics  numStorySnapsScreenshots  = 14;
    optional  WindowedIntMetrics  numStorySnapReplays  = 15;
    optional  WindowedIntMetrics  numStorySnapSkips  = 16;
    optional  WindowedIntMetrics  numStoryPlaylistExits  = 17;
}

message SCSLIAction {
}

message SCSLIClientInfo {
    optional  int64  uploadTimestampMsecs  = 1;
    optional  bool  isLowScoreUser  = 2;
    optional  int32  accountAgeDays  = 3;
    optional  SCSLISpectrumParameters  spectrumParameters  = 4;
}

message SCSLIDiscoverFeedLog {
    optional  string  requestId  = 1;
    optional  string  clientDfSessionId  = 2;
    optional  int64  requestTimestampMs  = 3;
    repeated  SCSCOREABTestStudyInfo  studyInfoArray  = 4;
}

message SCSLIEntryEvent {
}

message SCSLIEntryIntent {
}

message SCSLIEvent {
    optional  int64  timestampMsecs  = 1;
    optional  SCSLIGenericEvent  generic  = 2;
    optional  SCSLIStoryFeedItemLongImpression  storyFeedItemLongImpression  = 3;
    optional  SCSLIStoryFeedItemAction  storyFeedItemAction  = 4;
    optional  SCSLIStoryFeedItemViewSession  storyFeedItemViewSession  = 5;
    optional  SCSLSQueryInfo  searchQueryInfo  = 6;
    optional  SCSLSImpressionInfo  searchImpressionInfo  = 7;
    optional  SCSLSActionInfo  searchActionInfo  = 8;
    optional  SCSLIDiscoverFeedLog  discoverFeedLog  = 9;
    optional  SCSCOREABFeatureLoggingEntry  abFeatureLog  = 10;
    optional  SCSLILensContentAction  lensContentAction  = 11;
}

message SCSLIEventsBatch {
    optional  SCSLIClientInfo  clientInfo  = 1;
    optional  SCSLIServerAttachedInfo  attachedInfo  = 2;
    repeated  SCSLIEvent  eventsArray  = 3;
}

message SCSLIExitEvent {
}

message SCSLIExitIntent {
}

message SCSLIFeedBaseInfo {
    optional  int32  pageType  = 1;
    optional  string  pageTypeSpecific  = 2;
    optional  string  pageSessionId  = 3;
    optional  int32  section  = 4;
    optional  string  sectionName  = 5;
    optional  int32  sectionPos  = 6;
}

message SCSLIFeedBaseInfo_FeedPageSection {
}

message SCSLIFieldValue {
    optional  int32  intValue  = 1;
    optional  float  floatValue  = 2;
    optional  bool  boolValue  = 3;
    optional  string  stringValue  = 4;
}

message SCSLIGAEServerInfo {
    optional  string  gaeVersion  = 1;
}

message SCSLIGenericEvent {
    optional  string  eventName  = 1;
    repeated  SCSLIFieldValue  fields  = 2;
}

message SCSLILensContentAction {
    optional  SCSLIStoryFeedBaseInfo  baseInfo  = 1;
    optional  int32  action  = 2;
    optional  int32  numRecipients  = 3;
    optional  bytes  attachedInfo  = 4;
}

message SCSLILoggingRequest {
    optional  int32  source  = 1;
    optional  SCSLIMetadata  metadata  = 2;
    optional  SCSLIEventsBatch  events  = 3;
    optional  int64  requestTimestampMsec  = 4;
}

message SCSLILoggingRequestSource {
}

message SCSLILoggingResponse {
}

message SCSLIMediaType {
}

message SCSLIMetadata {
    optional  SCSLIClientInfo  appClientInfo  = 1;
    optional  SCSLIGAEServerInfo  gaeServerInfo  = 2;
    repeated  GPBAny  extensionsArray  = 3;
}

message SCSLIServerAttachedInfo {
    optional  string  userUuid  = 1;
    optional  string  userGhostId  = 2;
    optional  int64  serverTimestampMsecs  = 3;
    optional  string  country  = 4;
    optional  string  city  = 5;
    optional  string  region  = 6;
    optional  int32  osType  = 7;
    optional  int32  appBuild  = 8;
    optional  string  appVersion  = 9;
}

message SCSLISpectrumParameters {
    optional  bool  alsoLoggedToSpectrum  = 1;
}

message SCSLIStoryFeedBaseInfo {
    optional  SCSLIFeedBaseInfo  feedBaseInfo  = 1;
    optional  string  streamId  = 2;
    optional  SCCORECompositeStoryId  itemId  = 3;
    optional  int32  itemLayout  = 4;
    optional  int32  itemPosition  = 5;
    optional  int32  itemType  = 6;
    optional  string  itemTypeSpecific  = 7;
    optional  int32  rerankingId  = 8;
    optional  int32  storyFeedItemSource  = 9;
    optional  bool  isPromoted  = 10;
    optional  bool  isSubscribed  = 11;
    optional  bool  isExplorationStory  = 12;
    optional  bool  isMagellan  = 13;
    optional  string  creatorId  = 14;
    optional  bool  isBlendedFeed  = 15;
}

message SCSLIStoryFeedInteractionContext {
}

message SCSLIStoryFeedItemAction {
    optional  SCSLIStoryFeedBaseInfo  baseInfo  = 1;
    optional  int32  gesture  = 2;
    optional  int32  action  = 3;
    optional  string  subitemId  = 4;
    optional  int32  subitemIndex  = 5;
    optional  string  tileId  = 6;
    optional  bytes  attachedInfo  = 7;
    optional  string  variantId  = 8;
    optional  int32  interactionContext  = 9;
    optional  bool  withViewedState  = 10;
    optional  double  spotlightRepliesTimeViewedSecs  = 11;
}

message SCSLIStoryFeedItemLongImpression {
    optional  SCSLIStoryFeedBaseInfo  baseInfo  = 1;
    optional  int32  gesture  = 2;
    optional  string  tileId  = 3;
    optional  bool  tileAutoplayed  = 4;
    optional  int64  impressionStartMsecs  = 5;
    optional  float  impressionTimeSecs  = 6;
    optional  float  minimalVisibleFraction  = 7;
    optional  bytes  attachedInfo  = 8;
    optional  string  variantId  = 9;
    optional  string  triggeringItemId  = 10;
    optional  int32  triggeringItemPlaylistOffset  = 11;
    optional  bool  withViewedState  = 12;
    optional  int32  exitEvent  = 13;
}

message SCSLIStoryFeedItemLongImpression_ExitEventType {
}

message SCSLIStoryFeedItemViewSession {
    optional  SCSLIStoryFeedBaseInfo  baseInfo  = 1;
    optional  string  subitemId  = 2;
    optional  int32  subitemIndex  = 3;
    optional  int32  entryEvent  = 4;
    optional  int32  exitEvent  = 5;
    optional  int32  mediaType  = 6;
    optional  int64  viewSessionStartMsecs  = 7;
    optional  float  viewTimeSecs  = 8;
    optional  float  totalMediaDurationSecs  = 9;
    optional  int32  numSubitemsAvailable  = 10;
    optional  int32  numUniqueSubitemsViewed  = 11;
    optional  string  tileId  = 12;
    optional  int32  viewSessionType  = 13;
    optional  bytes  attachedInfo  = 14;
    optional  int32  maxSubitemViewIndex  = 15;
    optional  string  variantId  = 16;
    optional  string  triggeringItemId  = 17;
    optional  int32  triggeringItemPlaylistOffset  = 18;
    optional  bool  withViewedState  = 19;
    optional  float  impressionFraction  = 20;
    optional  bool  isLongformPlayer  = 21;
    optional  float  totalViewTimeSecs  = 22;
    optional  int32  interactionContext  = 23;
    optional  int32  entryIntent  = 24;
    optional  int32  exitIntent  = 25;
    optional  int32  operaNavigationType  = 26;
    optional  bool  isSpotlightRepliesEnabled  = 27;
    optional  int32  spotlightRepliesLiveCount  = 28;
}

message SCSLIStoryFeedItemViewSession_OperaNavigationType {
}

message SCSLIUploadHistoryState {
    optional  int32  readState  = 1;
}

message SCSLIUploadHistoryState_ReadState {
}

message SCSLOCGeoFeatures {
    repeated  SCSLOCGeoFeatures_Feature  featuresArray  = 3;
}

message SCSLOCGeoFeatures_Feature {
    optional  string  name  = 1;
    optional  string  address  = 2;
    optional  SCSCOREGeoPoint  center  = 4;
    optional  SCSCOREGeoBoundingBox  bbox  = 5;
    optional  SCSCOREGeoPolygon  polygon  = 6;
    optional  double  relevance  = 7;
}

message SCSLSActionInfo {
    optional  string  searchSessionId  = 1;
    optional  int64  searchQueryId  = 2;
    repeated  SCSLSSearchAction  searchActionsArray  = 3;
}

message SCSLSActionType {
}

message SCSLSImpressionInfo {
    optional  string  searchSessionId  = 1;
    optional  int64  searchQueryId  = 2;
    repeated  SCSLSResultImpression  resultImpressionsArray  = 3;
}

message SCSLSQueryInfo {
    optional  int32  searchQueryContext  = 1;
    optional  int32  searchQueryType  = 2;
    optional  string  searchQueryText  = 3;
    optional  string  s2CellId  = 4;
    repeated  string  userLanguagePreferencesArray  = 5;
    optional  bool  queryIsSuggestion  = 6;
    optional  bool  queryIsPrefetch  = 7;
    optional  int64  clientTsHourForFirstQuery  = 8;
    optional  int64  millisecondsSinceFirstQuery  = 9;
    optional  string  searchSessionId  = 10;
    optional  int64  searchQueryId  = 11;
    optional  string  anonymizedUserIdentifier  = 12;
    optional  string  osType  = 13;
    optional  string  appVersion  = 14;
    optional  string  country  = 15;
    optional  string  city  = 16;
    optional  string  region  = 17;
    optional  string  hashedGhostId  = 18;
    optional  SCSLSUserDemographics  userDemographics  = 19;
    optional  string  appBuild  = 20;
}

message SCSLSQueryInfo_QueryContext {
}

message SCSLSQueryInfo_QueryType {
}

message SCSLSResultImpression {
    optional  int32  resultSection  = 1;
    optional  SCSLSSearchResult  searchResult  = 2;
    optional  int32  impressionReason  = 3;
    optional  int64  millisecondsSinceQuery  = 4;
}

message SCSLSResultImpression_ImpressionReason {
}

message SCSLSResultSection {
    optional  int32  resultSection  = 1;
    repeated  SCSLSSearchResult  resultsArray  = 2;
    optional  int64  millisecondsSinceQuery  = 3;
    optional  string  tabTitle  = 4;
}

message SCSLSResultsInfo {
    repeated  SCSLSResultSection  sectionsArray  = 1;
    optional  string  searchSessionId  = 2;
    optional  int64  searchQueryId  = 3;
}

message SCSLSSearchAction {
    optional  int32  resultSection  = 1;
    optional  SCSLSSearchResult  searchResult  = 2;
    optional  int32  actionType  = 3;
    optional  int64  millisecondsSinceQuery  = 4;
    optional  string  resultSubcomponentId  = 5;
}

message SCSLSSearchResult {
    optional  string  resultRankingId  = 1;
    optional  string  resultIdentifier  = 2;
    optional  SCSLSUserResultDetails  userResultDetails  = 3;
    optional  SCSLSSuggestionResultDetails  suggestionResultDetails  = 4;
}

message SCSLSSectionType {
}

message SCSLSSuggestionResultDetails {
    optional  int32  suggestionType  = 1;
}

message SCSLSSuggestionResultDetails_SuggestionType {
}

message SCSLSUserDemographics {
    optional  int32  userGender  = 1;
    optional  int32  userAgeBucket  = 2;
}

message SCSLSUserResultDetails {
    optional  string  userSuggestReason  = 1;
    optional  string  userProfileImageType  = 2;
}

message SCSNTFGetOptInsRequest {
    repeated  int32  optInTypesArray  = 2[packed=true];
    optional  bool  includeOptInCandidates  = 3;
    optional  string  userId  = 4;
}

message SCSNTFGetOptInsResponse {
    repeated  SCSNTFOptInEntity  userStoryOptInsArray  = 1;
    repeated  SCSNTFOptInEntity  publisherStoryOptInsArray  = 2;
    repeated  SCSNTFOptInEntity  ourStoryOptInsArray  = 3;
    repeated  SCSNTFOptInEntity  liveStreamOptInsArray  = 4;
}

message SCSNTFHNNewsSection {
}

message SCSNTFLiveStreamId {
    optional  string  creatorId  = 1;
    optional  string  streamId  = 2;
}

message SCSNTFNotificationCancelResponse {
    optional  string  notificationId  = 1;
    optional  bool  isJobCancelled  = 2;
}

message SCSNTFNotificationEntityId {
    optional  SCSNTFUserStoryId  userStoryId  = 1;
    optional  SCSNTFPublisherStoryId  publisherStoryId  = 2;
    optional  SCSNTFOurStoryId  ourStoryId  = 3;
    optional  SCSNTFLiveStreamId  liveStreamId  = 4;
    optional  SCSNTFHNNewsSection  hnNewsSection  = 5;
}

message SCSNTFNotificationReason {
}

message SCSNTFNotificationRenderingData {
    optional  SCSNTFPublisherStory  publisherStory  = 3;
    optional  SCSNTFPublicUserStory  publicUserStory  = 4;
}

message SCSNTFNotificationRequest {
    optional  string  notificationId  = 1;
    optional  int32  notificationType  = 2;
    optional  string  userId  = 3;
    optional  SCSNTFTargetUserInfo  targetInfo  = 4;
    optional  string  title  = 5;
    optional  string  message  = 6;
    optional  SCCORECompositeStoryId  storyId  = 7;
    optional  int64  displayDurationSecs  = 8;
    optional  bool  isDryRun  = 9;
    optional  bool  isEmployeesOnly  = 10;
    optional  int64  scheduleTimestampMsecs  = 11;
    optional  int64  lastCutoffTimestampMsecs  = 12;
    optional  bool  isCustomPoolOnly  = 13;
    optional  string  customPoolId  = 14;
    optional  bool  sendToAllEmployees  = 15;
    optional  string  userEmail  = 16;
    optional  string  notificationKey  = 17;
    optional  int32  notificationReason  = 18;
    optional  int64  lastSuccessPushTimestampMsecs  = 19;
    optional  bool  isViewMyStoryCustom  = 20;
    optional  bool  isPrivateStory  = 21;
    optional  int32  notificationStoryType  = 22;
    repeated  SCCORECompositeStoryId  storyIdsArray  = 23;
    optional  SCSNTFNotificationRenderingData  notificationRenderingData  = 24;
}

message SCSNTFNotificationResponse {
    optional  uint32  deliveryStatusCode  = 1;
    optional  int32  pushEligibilityCheckDetail  = 2;
    optional  string  notificationId  = 3;
    optional  SCPushNotificationPushNotificationResult  result  = 4;
}

message SCSNTFNotificationScheduleResponse {
    optional  string  notificationId  = 1;
}

message SCSNTFNotificationStoryType {
}

message SCSNTFNotificationType {
}

message SCSNTFNotificationWorkItem {
    optional  SCSNTFNotificationRequest  request  = 1;
    optional  string  startKey  = 2;
    optional  string  endKey  = 3;
}

message SCSNTFOptInEntity {
    optional  SCSNTFNotificationEntityId  id_p  = 1;
    optional  int32  type  = 2;
    optional  string  displayName  = 3;
    optional  int32  state  = 4;
}

message SCSNTFOptInNotification {
    optional  SCSNTFNotificationEntityId  id_p  = 1;
    optional  int32  state  = 2;
    optional  int64  stateTimestampMsecs  = 3;
    optional  int64  stateExpireTimestampMsecs  = 4;
}

message SCSNTFOptInRequest {
    optional  SCSNTFNotificationEntityId  entityId  = 2;
    optional  int32  toState  = 3;
    optional  int64  requestServerTimestampMsecs  = 4;
    optional  string  userId  = 5;
}

message SCSNTFOptInResponse {
    optional  int32  status  = 1;
    optional  SCSNTFOptInResponse_ErrorReason  errorReason  = 2;
}

message SCSNTFOptInResponse_ErrorReason {
    optional  SCSNTFOptInResponse_TooManyOptIns  tooManyOptIns  = 1;
}

message SCSNTFOptInResponse_Status {
}

message SCSNTFOptInResponse_TooManyOptIns {
    optional  int32  limit  = 1;
    optional  int32  type  = 2;
}

message SCSNTFOptInState {
}

message SCSNTFOptInStatus {
    optional  string  userId  = 1;
    optional  bool  isOptedIn  = 2;
    optional  int64  updateTimestampMsecs  = 3;
    optional  bool  isCustomPopulated  = 4;
    optional  string  customPoolId  = 5;
    optional  string  userEmail  = 6;
}

message SCSNTFOptInType {
}

message SCSNTFOurStoryId {
    optional  SCCORECompositeStoryId  compositeStoryId  = 1;
}

message SCSNTFPublicUserStory {
    optional  string  iconURL  = 1;
    optional  string  displayName  = 2;
}

message SCSNTFPublisherSnapMediaInfo {
    optional  string  publisherSnapMediaURL  = 1;
    optional  string  publisherSnapHash  = 2;
    optional  string  publisherSnapId  = 3;
}

message SCSNTFPublisherStory {
    optional  string  iconURL  = 1;
    repeated  SCSNTFPublisherSnapMediaInfo  mediaInfosArray  = 2;
    optional  string  headline  = 3;
    optional  string  formalName  = 4;
    optional  int32  type  = 5;
    optional  string  altIconURL  = 6;
}

message SCSNTFPublisherStoryId {
    optional  int64  publisherId  = 1;
}

message SCSNTFRestoreOptInRequests {
    optional  string  userId  = 1;
    repeated  SCSNTFOptInRequest  requestsArray  = 2;
}

message SCSNTFSubscriptionStatus {
}

message SCSNTFTargetUserInfo {
    repeated  string  countryCodesArray  = 1;
    repeated  string  localesArray  = 2;
    repeated  int32  ageBucketsArray  = 3[packed=true];
    repeated  int32  gendersArray  = 4[packed=true];
    optional  SCSUPAppVersion  minAppVersion  = 5;
    optional  SCSUPAppVersion  maxAppVersion  = 6;
    repeated  int32  subscriptionStatusArray  = 7[packed=true];
}

message SCSNTFUserOptInNotifications {
    repeated  SCSNTFOptInNotification  userStoryOptInsArray  = 2;
    repeated  SCSNTFOptInNotification  publisherStoryOptInsArray  = 3;
    repeated  SCSNTFOptInNotification  ourStoryOptInsArray  = 4;
    repeated  SCSNTFOptInNotification  liveStreamOptInsArray  = 5;
    optional  string  userId  = 6;
    optional  SCSNTFOptInNotification  hnNewsSectionOptIn  = 7;
}

message SCSNTFUserStoryId {
    optional  string  userId  = 2;
}

message SCSQNSectionStats {
    optional  float  numRequestDedupedImpressions  = 1;
    optional  float  numStoryImpressions  = 2;
    optional  float  numRequestDedupedStoryImpressions  = 3;
    optional  float  impressionTotalTimeSecs  = 4;
    optional  float  numRequestDedupedWatches  = 5;
    optional  float  numStoryWatches  = 6;
    optional  float  numRequestDedupedStoryWatches  = 7;
    optional  float  totalWatchTimeSecs  = 8;
    optional  float  numRequestDedupedQualifiedImpressions  = 9;
    optional  float  numRequestDedupedPivotImpressions  = 10;
    optional  float  pivotImpressionTotalTimeSecs  = 11;
    optional  float  numPivotClicks  = 12;
    optional  float  numRequestDedupedPivotClicks  = 13;
    optional  float  numCompleteWatches  = 14;
    optional  float  numWatchesBelow1P5Secs  = 15;
    optional  float  numWatchesAbove20Secs  = 16;
    optional  float  numRequestDedupedBoosts  = 17;
    optional  float  numOpenProfiles  = 18;
    optional  float  numWatchesBelow3Secs  = 19;
}

message SCSSMActionLoggingExtension {
    optional  SCSSMLoggingContext  loggingContext  = 1;
    optional  bool  explorationStory  = 2;
    optional  bool  isFromBoostUpnextRetrieval  = 3;
    optional  bool  isFromBoostSameAccount  = 4;
}

message SCSSMAdsClientInfo {
    optional  bytes  encryptedUserData  = 1;
    optional  bool  limitAdTracking  = 2;
    optional  bool  audienceMatchOptOut  = 3;
    optional  bool  externalActivityMatchOptOut  = 4;
    optional  SCSSMAdsUserData  userData  = 5;
    optional  string  debugAdId  = 6;
    optional  SCAdsInventoryRequest  inventoryRequest  = 7;
    optional  bytes  said  = 8;
    optional  GPBInt64Value  diskTotalSpaceKb  = 9;
    optional  GPBInt64Value  diskFreeSpaceKb  = 10;
}

message SCSSMAdsUserData {
    optional  bytes  said  = 1;
    optional  bool  isAdsHoldout  = 2;
    optional  bool  isEmployee  = 3;
    optional  SCSSMAdsUserData_DebugConfig  debugConfig  = 4;
}

message SCSSMAdsUserData_DebugConfig {
    optional  bool  isTestUser  = 1;
    optional  bool  isAutomationUser  = 2;
    optional  bool  skipInventoryCapping  = 3;
}

message SCSSMAppInfo {
    optional  string  appVersion  = 1;
    optional  int32  osType  = 3;
    optional  string  osVersion  = 4;
    optional  int32  appBuild  = 5;
    optional  int32  appVariant  = 6;
    optional  string  rawUserAgent  = 7;
}

message SCSSMAutoPlayTile {
    optional  string  videoThumbnailBoltURL  = 1;
}

message SCSSMBadgeRequest {
    optional  string  requestId  = 1;
    optional  string  clientDfSessionId  = 2;
    optional  int64  requestTimestampMs  = 3;
    optional  SCSSMClientInfo  clientInfo  = 4;
    repeated  SCSCOREABTestStudyInfo  studyInfoArray  = 5;
    optional  SCSCORETweaks  tweaks  = 6;
    optional  bytes  lastStreamToken  = 7;
    optional  int32  debug  = 8;
    optional  int32  studyPriority  = 9;
}

message SCSSMBadgeResponse {
    optional  string  requestId  = 1;
    repeated  BadgeCard  badgeCardsArray  = 2;
    optional  int64  nextRequestMsec  = 3;
    optional  bytes  streamToken  = 4;
    optional  string  debugHtml  = 100;
}

message SCSSMBatchStoryLookupRequest {
    optional  string  requestId  = 1;
    optional  int64  requestTimestampMs  = 2;
    optional  int32  origin  = 3;
    optional  SCSSMClientInfo  clientInfo  = 4;
    repeated  SCSCOREABTestStudyInfo  studyInfoArray  = 5;
    optional  SCSCORETweaks  tweaks  = 6;
    repeated  SCSSMStoryLookupRequestItem  requestItemsArray  = 7;
    optional  bool  ignoreBlockerStories  = 8;
    optional  int32  studyPriority  = 9;
    optional  bool  ignoreUnviewableStories  = 10;
    optional  bool  enablePublicTierStories  = 11;
}

message SCSSMBatchStoryLookupResponse {
    optional  string  requestId  = 1;
    optional  SCSCOREResponseStatus  status  = 2;
    repeated  SCSSMStoryLookupResponseItem  responseItemsArray  = 3;
}

message SCSSMCameosFeatureStatus {
}

message SCSSMCardDebugInfo {
    optional  string  onDemandDebugKey  = 1;
    optional  int32  visualElement  = 2;
    optional  string  debugHtml  = 3;
    optional  uint64  numImpressions  = 5;
    optional  uint64  numLongImpressions  = 6;
    optional  uint64  numRawWatches  = 7;
    optional  bytes  debugPb  = 8;
    optional  SCSSMCardDebugInfo_LiteOverlayDebug  liteOverlayDebug  = 9;
    optional  bool  isRetrievedFromBoosts  = 10;
}

message SCSSMCardDebugInfo_LiteOverlayDebug {
    repeated  SCSSMCardDebugInfo_LiteOverlayDebug_DebugRow  debugRowArray  = 1;
}

message SCSSMCardDebugInfo_LiteOverlayDebug_DebugRow {
    optional  string  key  = 1;
    optional  int32  intValue  = 2;
    optional  float  floatValue  = 3;
    optional  double  doubleValue  = 4;
    optional  string  stringValue  = 5;
}

message SCSSMClientDisplayInfo {
    optional  bool  hideTimestamp  = 1;
    optional  bool  showCompleted  = 2;
    optional  bool  shouldMarkStoryUnviewed  = 3;
}

message SCSSMClientInfo {
    optional  string  userId  = 1;
    optional  SCSSMAppInfo  appInfo  = 2;
    optional  SCSCOREGeoLocation  location  = 3;
    optional  string  countryCode  = 4;
    optional  string  locale  = 5;
    repeated  string  languagePreferencesArray  = 6;
    optional  string  timeZone  = 7;
    repeated  int64  lastInteractionTimestampsMsArray  = 8[packed=true];
    optional  int32  userGender  = 9;
    optional  int32  userAge  = 10;
    optional  string  userEmail  = 11;
    optional  bool  isEmployee  = 12;
    optional  bool  soundIsOn  = 13;
    optional  SCSSMConnectionInfo  connectionInfo  = 14;
    optional  SCSSMDeviceInfo  deviceInfo  = 15;
    optional  SCSSMUserRecentTapHistory  tapHistory  = 16;
    optional  bool  isNewUser  = 17;
    optional  bool  userRegisteredInCheetah  = 18;
    optional  string  userName  = 19;
    optional  SCSSMUserRecentInteractionsHistory  interactionsHistory  = 20;
    optional  bool  hasBitmojiAvatar  = 21;
    optional  HappeningNowHoroscope  horoscope  = 23;
    optional  int64  userCreationTimestampMs  = 24;
    optional  int32  bidirectionalFriendCount  = 25;
    optional  bool  isCameosFeatureRestricted  = 26;
    optional  int32  cameosFeatureRestricted  = 27;
    optional  SCSUPRecentEvents  recentEvents  = 28;
    optional  bool  isVerticalNavigation  = 29;
}

message SCSSMClientRankingFeatures {
    optional  bool  isSensitive  = 1;
    optional  int32  hideAfterWatch  = 2;
    optional  bool  isBoostedStory  = 3;
    optional  bool  rankShouldBeFixed  = 4;
    optional  bool  requiredBrandSafeCover  = 5;
    optional  bool  qualifiedBrandSafeStory  = 6;
    optional  bool  explorationStory  = 7;
    optional  bool  petraBrandSafeStory  = 8;
}

message SCSSMClientScoringParams {
    repeated  string  astVersionMap  = 1;
    optional  float  meanStoryScore  = 2;
    optional  float  storyScoreVariance  = 3;
    optional  int32  groupStoryStartPos  = 4;
    optional  float  groupStoryDensity  = 5;
    optional  float  ageDecayWeight  = 6;
    optional  string  discoverFeedAstVersionKey  = 7;
    optional  int32  highScoreGroupStoryStartPos  = 8;
    optional  float  highScoreGroupStoryScoreThreshold  = 9;
    optional  int32  lowScoreGroupStoryStartPos  = 10;
    optional  float  lowScoreGroupStoryScoreThreshold  = 11;
    optional  bool  showGroupStories  = 12;
    optional  bool  disableLocalReorder  = 13;
}

message SCSSMCognacCard {
    optional  SCSSMStoryThumbnail  thumbnail  = 1;
    optional  string  title  = 2;
    optional  string  subtitle  = 3;
    optional  string  logoURL  = 4;
    optional  int32  logoLocation  = 5;
    optional  string  contentDisplayName  = 6;
    optional  string  contentURL  = 7;
    optional  string  loadingScreenURL  = 8;
    optional  string  miniProfileTitle  = 9;
    optional  string  miniProfileIconURL  = 10;
    optional  string  miniProfileDescription  = 11;
    optional  SCSSMCognacCard_ContentUpdateAlert  contentUpdateAlert  = 12;
    optional  SCSSMCognacCard_PlayerLimits  playerLimits  = 13;
}

message SCSSMCognacCard_ContentUpdateAlert {
    optional  bool  isNewGame  = 1;
    optional  bool  hasMajorUpdate  = 2;
    optional  string  majorUpdateDescription  = 3;
    optional  int32  majorUpdateVersion  = 4;
    optional  int32  minorUpdateVersion  = 5;
}

message SCSSMCognacCard_PlayerLimits {
    optional  int64  maxPlayersNumber  = 1;
    optional  int64  minPlayersNumber  = 2;
}

message SCSSMCognacClientInfo {
    optional  string  userTargetingToken  = 1;
}

message SCSSMCommonLoggingExtension {
    optional  SCSSMLoggingContext  loggingContext  = 1;
    optional  bool  explorationStory  = 2;
}

message SCSSMConnectionInfo {
    optional  string  carrier  = 1;
    optional  string  carrierMccMnc  = 2;
    optional  int32  connectionType  = 3;
    optional  string  clientIp  = 4;
    optional  uint64  bandwidthBps  = 5;
}

message SCSSMDebugOption {
}

message SCSSMDeviceInfo {
    optional  bytes  idfa  = 1;
    optional  string  deviceModel  = 2;
}

message SCSSMDiscoverFeedMetadata {
    repeated  FeedTypeMetadata  feedTypeMetadataArray  = 1;
}

message SCSSMEngagementStats {
    optional  int64  boostCount  = 1;
    optional  int64  shareCount  = 2;
    optional  int64  viewCount  = 3;
    optional  int64  subCount  = 4;
    optional  int64  spotlightPendingReplyCount  = 5;
    optional  int64  spotlightLiveReplyCount  = 6;
    optional  int64  spotlightNewPendingReplyCount  = 7;
    optional  int64  rewatchCount  = 8;
}

message SCSSMHNNewsWeatherMetadata {
    optional  bytes  weatherJson  = 1;
    optional  int32  temperature  = 2;
    optional  string  weatherCondition  = 3;
    optional  string  weatherIconURL  = 4;
    optional  bool  displayInSectionHeader  = 5;
    optional  bool  displayInsideSection  = 6;
}

message SCSSMHeroCard {
    optional  SCSSMHeroCard_HeroCardStaticAsset  staticAsset  = 1;
    optional  SCSSMHeroCard_HeroCardFeedAction  feedAction  = 2;
}

message SCSSMHeroCard_HeroCardFeedAction {
    optional  int32  feedType  = 1;
    optional  int32  actionDestination  = 2;
    optional  string  feedDisplayName  = 3;
}

message SCSSMHeroCard_HeroCardStaticAsset {
    optional  string  assetURL  = 1;
    optional  int32  mediaType  = 2;
    optional  string  imagePlacehoderURL  = 3;
}

message SCSSMImpalaStoryMetadata {
    optional  string  businessId  = 1;
    optional  string  businessName  = 2;
    optional  string  businessLogoURL  = 3;
    optional  SGTILink  businessProfileLink  = 4;
    optional  string  category  = 5;
    optional  int32  businessProfileCategory  = 6;
    optional  bool  publicStoriesProfileMonetizedStatus  = 7;
}

message SCSSMImpressionLoggingExtension {
    optional  SCSSMUpNextLoggingExtension  upNext  = 1;
    optional  string  variantLoggingKey  = 2;
    optional  SCSSMLoggingContext  loggingContext  = 3;
    optional  bool  explorationStory  = 4;
    optional  bool  isFromBoostUpnextRetrieval  = 5;
    optional  bool  isFromBoostSameAccount  = 6;
}

message SCSSMIndicatorType {
}

message SCSSMJaguarClientLogging {
    optional  string  tileLoggingKey  = 1;
    optional  bool  isBoostedStory  = 2;
    optional  fixed64  tapStoryKey  = 3;
    optional  bytes  impressionLoggingExtension  = 4;
    optional  bytes  actionLoggingExtension  = 5;
    optional  bytes  viewSessionLoggingExtension  = 6;
    optional  string  variantLoggingKey  = 7;
    optional  bytes  commonLoggingExtension  = 8;
    optional  int32  explorationSource  = 9;
    optional  string  creatorId  = 10;
}

message SCSSMJaguarClientLogging_ExplorationSource {
}

message SCSSMLayoutDescription {
    optional  int32  firstServedTsSecs  = 1;
    repeated  SCSSMLayoutDescription_Position  sectionPositions  = 2;
    repeated  SCSSMLayoutDescription_SeedHistory  seedSectionHistory  = 3;
}

message SCSSMLayoutDescription_Position {
    optional  int32  firstServedTsSecs  = 1;
    optional  int32  position  = 2;
}

message SCSSMLayoutDescription_SeedHistory {
    repeated  SCSSMLayoutDescription_SeedHistory_SeedDecision  seedDecisionsArray  = 2;
}

message SCSSMLayoutDescription_SeedHistory_SeedDecision {
    optional  int32  decisionTsSecs  = 1;
    optional  fixed64  seedAccountFp  = 2;
}

message SCSSMLensCategoryCard {
    optional  string  displayName  = 1;
    optional  int32  category  = 2;
    optional  bool  isEmpty  = 3;
}

message SCSSMLensChallengeCard {
    optional  fixed64  lensId  = 1;
    optional  string  lensDeeplinkURL  = 2;
    optional  string  challengeName  = 3;
    optional  SCSCORELensThumbnail  challengeThumbnail  = 4;
    optional  SCSSMLensChallengeCard_MusicChallengeMetadata  musicMetadata  = 5;
    optional  string  challengeInstructions  = 6;
    optional  string  lensIconURL  = 7;
    optional  int32  totalNumSubmissions  = 8;
    optional  fixed64  lensChallengeId  = 9;
    optional  bool  isOnTrial  = 10;
    optional  string  numSubmissionsMsg  = 11;
    optional  bool  isSnappable  = 12;
}

message SCSSMLensChallengeCard_MusicChallengeMetadata {
    optional  string  artistName  = 1;
    optional  string  songName  = 2;
    optional  string  songIconURL  = 3;
}

message SCSSMLensChallengeStoryCard {
    optional  SCSSMLensChallengeStoryMetadata  metadata  = 1;
    repeated  SCSSMStorySnap  snapsArray  = 2;
}

message SCSSMLensChallengeStoryMetadata {
    optional  SCSSMStoryThumbnail  storyThumbnail  = 1;
    optional  bool  isSubscribable  = 2;
    optional  string  bitmojiAvatarId  = 3;
    optional  string  bitmojiAvatarSelfieId  = 4;
    optional  bool  isShareable  = 5;
}

message SCSSMLensCollectionCard {
    optional  string  collectionName  = 1;
    optional  string  collectionId  = 2;
    optional  string  creatorDisplayName  = 3;
    optional  bool  isOfficialCreator  = 4;
    optional  int32  snapProProfileCategory  = 5;
    optional  string  thumbnailURL  = 6;
    optional  string  creatorLogoURL  = 7;
    optional  string  collectionDescription  = 8;
    optional  string  creatorId  = 9;
    optional  string  snapProId  = 10;
}

message SCSSMLensCreatorCard {
    optional  string  creatorName  = 1;
    optional  string  creatorId  = 2;
    optional  bool  isCreatorSubscribed  = 3;
    optional  string  creatorBitmojiAvatarId  = 4;
    repeated  SCSSMLensCreatorCard_LensPreview  lensPreviewsArray  = 5;
    optional  string  creatorDisplayName  = 6;
    optional  string  creatorBitmojiAvatarSelfieId  = 7;
    optional  string  profilePicURL  = 8;
    optional  string  snapproId  = 9;
    repeated  SCSSMStorySnap  snapsArray  = 10;
    optional  SCSSMStoryThumbnail  storyThumbnail  = 11;
    optional  SCSSMPublicUserStoryMetadata  storyMetadata  = 12;
}

message SCSSMLensCreatorCard_LensPreview {
    optional  string  lensId  = 1;
    optional  string  deeplinkURL  = 2;
    optional  string  thumbnailMediaURL  = 3;
    optional  string  iconURL  = 4;
}

message SCSSMLensObjectCard {
    optional  string  lensName  = 1;
    optional  string  iconURL  = 2;
    optional  string  deeplinkURL  = 3;
    optional  string  creatorName  = 4;
    optional  SCSCORELensThumbnail  thumbnail  = 5;
    optional  int64  lensId  = 6;
    optional  string  creatorId  = 7;
    optional  string  creatorBitmojiAvatarId  = 8;
    optional  bool  isOfficialCreator  = 9;
    optional  string  creatorBitmojiAvatarSelfieId  = 10;
    optional  bool  isCreatorSubscribed  = 11;
    optional  bool  isSubscriptionPinned  = 12;
    optional  string  snapProProfileId  = 13;
    optional  bool  isCreatorDeactivated  = 14;
    optional  bool  isSponsored  = 15;
    optional  int32  businessProfileCategory  = 16;
    optional  SCSSMLensObjectCard_PremiumInfo  premiumInfo  = 17;
    optional  bool  isPremium  = 18;
    optional  int32  activationCamera  = 19;
    optional  string  rankingInfo  = 20;
}

message SCSSMLensObjectCard_PremiumInfo {
    optional  int32  snapTokensPrice  = 1;
}

message SCSSMLoggingContext {
    optional  string  language  = 1;
    optional  int32  gender  = 2;
    optional  int32  ageBucket  = 3;
    optional  string  rankingTreatmentId  = 4;
    optional  string  countryCode  = 5;
    optional  string  explorationTreatmentId  = 6;
    optional  int32  explorationSource  = 7;
    optional  int32  magellanExplorationStage  = 8;
    optional  string  region  = 9;
}

message SCSSMLoggingContext_ExplorationSource {
}

message SCSSMLongformVideoAd {
    optional  SCSSMLongformVideoInterval  videoInterval  = 1;
    optional  bytes  adPlacementMetadata  = 2;
    optional  float  score  = 3;
    optional  GPBFloatValue  scoreValue  = 4;
}

message SCSSMLongformVideoChapter {
    optional  SCSSMLongformVideoInterval  videoInterval  = 1;
}

message SCSSMLongformVideoInterval {
    optional  int32  trackNumber  = 1;
    optional  int32  timeScale  = 2;
    optional  int64  startTime  = 3;
}

message SCSSMLongformVideoTrack {
    optional  string  videoId  = 1;
    optional  string  hlsManifestURL  = 2;
    optional  int64  durationMsecs  = 3;
    optional  int32  timeScale  = 4;
    optional  int64  duration  = 5;
    optional  int32  dynamicURLType  = 6;
    optional  string  dashManifestURL  = 7;
    optional  bytes  videoContentObject  = 8;
}

message SCSSMLongformVideoTracks {
    repeated  SCSSMLongformVideoTrack  videoTracksArray  = 1;
}

message SCSSMMapTileCard {
    optional  SCSSMStoryThumbnail  thumbnail  = 1;
    optional  string  title  = 2;
    optional  int64  displayTimestampSecs  = 3;
    optional  string  displayGeoInfo  = 4;
    optional  float  zoomLevel  = 5;
    optional  SCSCOREGeoLocation  centroid  = 6;
    optional  string  emoji  = 7;
    optional  string  description_p  = 8;
    optional  string  miniProfileTitle  = 9;
    optional  string  mapPoiId  = 10;
}

message SCSSMMediaDimensions {
    optional  uint32  width  = 1;
    optional  uint32  height  = 2;
}

message SCSSMMetaStreamToken {
    repeated  int32  firstServedTsSecs  = 1;
    optional  SCSSMLayoutDescription  layoutDescription  = 2;
    repeated  int64  lastBadgeRequestedTsMsecs  = 3;
}

message SCSSMMomentStoryCard {
    optional  SCSSMStoryThumbnail  thumbnail  = 1;
    optional  string  title  = 2;
    optional  string  subtitle  = 3;
    optional  SCMTStreamingMediaInfo  streamingMediaInfo  = 4;
    optional  string  miniProfileTitle  = 5;
    optional  string  miniProfileIconURL  = 6;
    optional  string  description_p  = 7;
    repeated  SCMTStreamingMediaInfo  streamingMediaInfosArray  = 9;
    repeated  SCSCORELiveStreamAuthHeader  authHeadersArray  = 12;
    optional  int32  pollIntervalSecs  = 13;
    optional  int64  endTimeSecs  = 14;
    optional  string  endStreamImageURL  = 15;
    optional  string  endStreamDescription  = 16;
    optional  string  endStreamOptInButtonText  = 17;
    optional  int64  displayTimestampSecs  = 18;
    optional  string  chromeSubtitle  = 19;
    optional  string  chromeSubtitleIconURL  = 20;
    optional  string  interactiveURL  = 21;
    optional  string  lowLatencyManifestURL  = 22;
    optional  SCSSMTileBadge  tileBadge  = 23;
    optional  bool  isReplay  = 24;
}

message SCSSMOrderedStoriesStream {
    optional  bytes  streamToken  = 1;
    optional  int32  startOffset  = 2;
    repeated  SCSSMStoryCard  cardsArray  = 3;
}

message SCSSMOurStoryCard {
    optional  SCSSMOurStoryMetadata  metadata  = 1;
    repeated  SCSSMStorySnap  snapsArray  = 2;
    optional  SCSSMStoryFragmentMetadata  fragmentMetadata  = 3;
    optional  SCSSMStoryPrefetchMetadata  prefetchMetadata  = 4;
    optional  BoostMetadata  boostMetadata  = 5;
    optional  SCSSMEngagementStats  engagementStats  = 6;
    optional  bool  topCreatorBadge  = 7;
}

message SCSSMOurStoryMetadata {
    optional  SCSSMStoryThumbnail  storyThumbnail  = 1;
    optional  string  title  = 2;
    optional  string  category  = 3;
    optional  int64  displayTimestampSecs  = 4;
    optional  string  emoji  = 5;
    optional  string  displayGeoInfo  = 6;
    optional  string  logoURL  = 7;
    optional  int32  totalNumSnaps  = 8;
    optional  double  totalDurationSecs  = 9;
    optional  bool  isSensitive  = 10;
    optional  bytes  adPlacementMetadata  = 11;
    optional  bool  isCampusStory  = 12;
    optional  string  description_p  = 13;
    optional  string  miniProfileTitle  = 14;
    optional  bool  isPartnered  = 15;
    optional  string  miniProfileIconURL  = 16;
    optional  bool  isNews  = 17;
    optional  bool  isShareable  = 18;
    optional  SCSSMOurStoryMetadata_LensMetaData  lensMetadata  = 19;
}

message SCSSMOurStoryMetadata_LensMetaData {
    optional  string  iconURL  = 1;
    optional  string  deeplinkURL  = 2;
    optional  string  creatorName  = 3;
}

message SCSSMPivotCard {
    optional  int32  style  = 1;
    optional  string  displayText  = 2;
    optional  string  iconURL  = 3;
    optional  SCSSMPivotPageInfo  pivotPageInfo  = 4;
}

message SCSSMPivotCard_Style {
}

message SCSSMPivotPageInfo {
    optional  int32  theme  = 1;
    repeated  int32  feedTypesArray  = 2[packed=true];
    optional  SCSSMPivotPrefetchMetadata  pivotPrefetchMetadata  = 3;
}

message SCSSMPivotPageTheme {
}

message SCSSMPivotPrefetchMetadata {
    repeated  int32  numPrefetchedStories  = 1;
}

message SCSSMPromotedStoryCard {
    optional  bytes  adData  = 1;
    optional  string  trackURL  = 2;
    optional  bytes  requestId  = 3;
    optional  bytes  encryptedAdTrackData  = 4;
    optional  bytes  encryptedUserTrackData  = 5;
    optional  bytes  serveItemId  = 6;
    optional  string  jsonTrackURL  = 7;
    optional  string  protoTrackURL  = 8;
    optional  SCAdsSKAdNetworkAttribution  skAdNetworkAttribution  = 9;
    optional  bytes  pixelId  = 10;
    optional  int64  serveTimestampMillis  = 11;
}

message SCSSMPublicUserStoryCard {
    optional  SCSSMPublicUserStoryMetadata  metadata  = 1;
    repeated  SCSSMStorySnap  snapsArray  = 2;
    optional  SCSSMStoryFragmentMetadata  fragmentMetadata  = 3;
    optional  SCSSMStoryPrefetchMetadata  prefetchMetadata  = 4;
}

message SCSSMPublicUserStoryMetadata {
    optional  string  userId  = 1;
    optional  SCSSMStoryThumbnail  storyThumbnail  = 2;
    optional  string  displayName  = 3;
    optional  string  username  = 4;
    optional  string  emoji  = 5;
    optional  bool  isPopular  = 6;
    optional  bool  isOfficial  = 7;
    optional  string  bitmojiAvatarId  = 8;
    optional  int32  totalNumSnaps  = 9;
    optional  double  totalDurationSecs  = 10;
    optional  bool  isFollowed  = 11;
    optional  int64  displayTimestampSecs  = 12;
    optional  string  emojiSafe  = 13;
    optional  string  bitmojiAvatarSelfieId  = 14;
    repeated  SCSSMStoryThumbnail  candidateThumbnailsArray  = 15;
    repeated  SCSSMStoryCard  postSubscribeSuggestionsArray  = 16;
    optional  SCSSMImpalaStoryMetadata  impalaStoryMetadata  = 17;
    optional  int32  brandFriendliness  = 18;
}

message SCSSMPublisher {
    optional  string  name  = 1;
    optional  string  publisherName  = 2;
    optional  string  publisherFormalName  = 3;
    optional  int64  publisherId  = 4;
    optional  string  primaryColor  = 5;
    optional  string  secondaryColor  = 6;
    optional  string  publisherDeeplinkURL  = 7;
    optional  string  publisherDescription  = 8;
    optional  int32  publisherType  = 9;
    optional  bool  isNews  = 10;
    optional  string  filledIconURL  = 11;
    optional  string  horizontalIconURL  = 12;
    optional  bool  isSubscribable  = 13;
    optional  string  businessProfileId  = 14;
    optional  bool  allowNotifOptInMsg  = 15;
    optional  string  heroImageURL  = 16;
    optional  string  websiteURL  = 17;
    optional  string  heroImageBitmojiTemplateId  = 18;
    optional  int32  profileLogoDisplay  = 19;
    optional  int32  adSetting  = 20;
    optional  bool  rollingNewsEnabled  = 21;
}

message SCSSMPublisherHNNewsMetadata {
    optional  SCSCOREHNNewsCategory  category  = 1;
    optional  string  ringColor  = 2;
    optional  bool  isBitmojiWeather  = 3;
    optional  SCSSMHNNewsWeatherMetadata  hnNewsWeatherMetadata  = 4;
    optional  bool  isBreakingNews  = 5;
    optional  string  dedupClusterId  = 6;
    optional  bool  isOptInNotificationStory  = 7;
    optional  bool  openHappeningNowPlaylist  = 8;
}

message SCSSMPublisherShowMetadata {
    optional  string  showId  = 1;
    optional  string  showName  = 2;
    optional  string  showDescription  = 3;
    optional  string  showHeroImageURL  = 4;
    optional  int32  showType  = 5;
    optional  string  episodeSubtitle  = 7;
    optional  string  profileOverlayButtonText  = 8;
    optional  int32  seasonNumber  = 9;
    optional  int32  episodeNumber  = 10;
    optional  string  seasonId  = 11;
    optional  int32  profileLogoDisplay  = 12;
    optional  string  coverMediaManifest  = 13;
}

message SCSSMPublisherSnap {
    optional  string  snapRelativeURL  = 1;
    optional  string  hash_p  = 2;
    optional  int64  snapId  = 3;
    optional  string  snapType  = 4;
    optional  SCSSMPublisherTile  tile  = 5;
    optional  int32  adType  = 6;
    optional  bytes  adPlacementMetadata  = 7;
    optional  SCSSMSnapFragmentMetadata  fragmentMetadata  = 8;
    optional  int32  mediaType  = 9;
    optional  SCSSMLongformVideoChapter  chapter  = 10;
    optional  SCSSMLongformVideoAd  ad  = 11;
    optional  string  originalSnapId  = 12;
    optional  bool  isUserGeneratedContent  = 13;
    optional  SDMWebPage  webpageAttachment  = 14;
    optional  SDMCommerce  commerce  = 15;
    optional  SDMCallToAction  callToAction  = 16;
    optional  SDMSnapDoc  snapDoc  = 17;
    optional  bytes  firstFrameContentObject  = 18;
    optional  bool  isPetraBrandSafe  = 19;
    optional  SCContextContextHint  contextHint  = 20;
    optional  SCSSMAutoPlayTile  autoPlayTile  = 21;
    optional  BoostMetadata  boostMetadata  = 22;
    optional  SCSSMEngagementStats  engagementStats  = 23;
    optional  SDMCameraAttachment  cameraAttachment  = 24;
    optional  SDMLongformVideo  longformAttachment  = 25;
    optional  bytes  overlayImageContentObject  = 26;
    optional  SCCOREUUID  hostUserId  = 27;
    optional  SDMSnapAlias  snapAlias  = 28;
}

message SCSSMPublisherSnaps {
    optional  string  baseURL  = 1;
    repeated  SCSSMPublisherSnap  snapsArray  = 2;
}

message SCSSMPublisherStoryAdPlacementMetadata {
    optional  string  adUnitId  = 1;
    optional  SCSSMPublisherStoryAdPlacementMetadata_TargetingInfo  targetingInfo  = 2;
    repeated  SCSSMPublisherStoryAdPlacementMetadata_AdSlot  adSlotsArray  = 3;
    repeated  SCSSMPublisherSnap  optionalAdSnaps  = 4;
    optional  bool  interstitialAdBrandUnsafe  = 5;
    optional  bool  isAdsPreRollEnabled  = 6;
}

message SCSSMPublisherStoryAdPlacementMetadata_AdSlot {
    optional  int32  adSlotIndex  = 1;
    optional  int64  prevSnapId  = 2;
    optional  int64  nextSnapId  = 3;
}

message SCSSMPublisherStoryAdPlacementMetadata_TargetingInfo {
    optional  string  inventoryName  = 1;
    optional  string  inventoryFullyQualifiedName  = 2;
    optional  string  userRegionCode  = 3;
    optional  string  channelId  = 4;
}

message SCSSMPublisherStoryCard {
    optional  SCSSMPublisher  publisher  = 1;
    optional  int64  editionId  = 2;
    optional  int64  publishTimestampMsecs  = 3;
    optional  SCSSMPublisherSnaps  snaps  = 4;
    optional  bool  isLive  = 5;
    optional  SCSSMPublisherStoryWatchedState  watchedState  = 6;
    optional  SCSSMPublisherShowMetadata  showMetadata  = 7;
    optional  bool  hasCuratedSnaps  = 8;
    optional  bool  isShareable  = 9;
    optional  SCSSMStoryFragmentMetadata  fragmentMetadata  = 10;
    optional  SCSSMStoryPrefetchMetadata  prefetchMetadata  = 11;
    optional  SCSSMLongformVideoTracks  videoTracks  = 12;
    optional  SCSSMPublisherStoryAdPlacementMetadata  adPlacementMetadata  = 13;
    optional  SCSSMPublisherHNNewsMetadata  hnNewsMetadata  = 14;
    optional  uint64  viewCount  = 15;
    optional  int32  indicatorType  = 16;
    optional  int64  segmentId  = 17;
    optional  BoostMetadata  boostMetadata  = 18;
    optional  SCSSMEngagementStats  engagementStats  = 19;
    optional  SCSSMPublisher  originalPublisher  = 20;
    optional  STOAdPlacement_TimeBasedAdPlacements  timedAdPlacements  = 21;
}

message SCSSMPublisherStoryWatchedState {
    optional  string  lastWatchedSnapId  = 1;
    optional  int32  snapProgressMsecs  = 2;
    optional  int64  clientTimestampMsecs  = 3;
    optional  string  lastWatchedVideoId  = 4;
    optional  int32  videoProgressMsecs  = 5;
}

message SCSSMPublisherTile {
    optional  string  headline  = 1;
    optional  string  imageRelativeURL  = 2;
    optional  string  logoRelativeURL  = 3;
    optional  string  videoThumbnailRelativeURL  = 4;
    optional  string  videoThumbnailFirstFrameRelativeURL  = 5;
    optional  int32  logoLocation  = 6;
    optional  string  logoReadStateOverlayColor  = 7;
    optional  string  tileId  = 8;
    optional  SCSSMTileBadge  tileBadge  = 9;
    optional  int32  progress  = 10;
    optional  string  showSubtitle  = 11;
    optional  string  bitmojiThumbnailTemplateId  = 12;
    optional  string  imageURLSmall  = 13;
    optional  bytes  singleTileContentObject  = 14;
    optional  SCCameosCameoTile  cameoTile  = 15;
}

message SCSSMRankFriendStoriesRequest {
    optional  string  requestId  = 1;
    optional  SCSSMClientInfo  clientInfo  = 2;
    optional  int32  origin  = 3;
    repeated  FriendFeedItem  itemsArray  = 4;
    optional  int32  debug  = 5;
    repeated  SCSCOREABTestStudyInfo  studyInfoArray  = 6;
    optional  SCSCORETweaks  tweaks  = 7;
    optional  int64  requestTimestampMs  = 8;
    optional  bool  returnFinalScore  = 9;
    optional  int32  studyPriority  = 10;
}

message SCSSMRankFriendStoriesResponse {
    optional  string  requestId  = 1;
    repeated  FriendFeedItem  itemsArray  = 2;
    optional  string  debugHtml  = 3;
    optional  bytes  debugPb  = 4;
}

message SCSSMSavedStoryCard {
    optional  SCSSMSavedStoryMetadata  savedStoryMetadata  = 1;
    repeated  SCSSMStorySnap  snapsArray  = 2;
}

message SCSSMSavedStoryMetadata {
    optional  string  title  = 1;
    optional  string  userDisplayName  = 2;
    optional  SCSSMStoryThumbnail  storyThumbnail  = 3;
    optional  string  businessProfileId  = 4;
    optional  int32  snapproTier  = 5;
    optional  int32  interCategory  = 6;
    optional  string  userId  = 7;
    optional  string  businessLogoURL  = 8;
    optional  string  bitmojiAvatarId  = 9;
    optional  string  emoji  = 10;
    optional  int64  version  = 11;
}

message SCSSMSearchRequest {
    optional  string  requestId  = 1;
    optional  int64  requestTimestampMs  = 2;
    optional  int32  origin  = 3;
    optional  SCSSMClientInfo  clientInfo  = 4;
    optional  SCSSMSearchRequest_Query  query  = 5;
    optional  int32  debug  = 6;
    optional  int32  mask  = 7;
    repeated  SCSCOREABTestStudyInfo  studyInfoArray  = 9;
    optional  SCSCORETweaks  tweaks  = 10;
    optional  int32  entryPoint  = 11;
    optional  int32  studyPriority  = 13;
}

message SCSSMSearchRequest_EntryPoint {
}

message SCSSMSearchRequest_Query {
    optional  string  text  = 1;
    optional  SCSCOREGeoBoundingBox  geoBound  = 2;
    optional  SCSSMSearchRequest_Query_TimeBounds  timeBound  = 3;
}

message SCSSMSearchRequest_Query_TimeBounds {
    optional  int64  minTimestampSecs  = 1;
    optional  int64  maxTimestampSecs  = 2;
}

message SCSSMSearchResponse {
    optional  string  requestId  = 1;
    repeated  SCSSMStoryCard  globalStoriesArray  = 2;
    optional  string  debugHtml  = 3;
    optional  bytes  debugPb  = 4;
    optional  SCSLOCGeoFeatures  geoFeatures  = 5;
    repeated  SCSSMStoryCard  geoStoriesArray  = 6;
    repeated  SCSSMStoryCard  localStoriesArray  = 7;
}

message SCSSMSearchTopicsRequest {
    optional  string  requestId  = 1;
    optional  string  query  = 2;
    optional  int64  requestTimestampMs  = 3;
    optional  SCSSMClientInfo  clientInfo  = 4;
    optional  SCSCORETweaks  tweaks  = 5;
    optional  int32  debug  = 6;
}

message SCSSMSearchTopicsResponse {
    optional  string  requestId  = 1;
    repeated  SCSSMSearchTopicsResponse_SuggestedTopic  suggestedTopicsArray  = 2;
    optional  string  debugHtml  = 100;
}

message SCSSMSearchTopicsResponse_SuggestReason {
}

message SCSSMSearchTopicsResponse_SuggestedTopic {
    optional  string  title  = 2;
    optional  int32  suggestReason  = 3;
}

message SCSSMSectionConfig {
    optional  bool  shouldRefreshIfAllRead  = 1;
    optional  uint64  cacheTtlMsecs  = 2;
}

message SCSSMSelectionCard {
    optional  SCSSMSelectionCardInfo  info  = 1;
    repeated  SCSSMSelectionCardInfo  relatedCardsArray  = 2;
}

message SCSSMSelectionCardInfo {
    optional  int32  type  = 1;
    optional  string  id_p  = 2;
    optional  string  displayText  = 3;
    optional  string  thumbnailURL  = 4;
    optional  string  logoURL  = 5;
    optional  string  iconURL  = 6;
    optional  string  overlayColor  = 7;
    optional  string  displaySubtext  = 8;
    optional  SCSUPActionableStoryKey  actionableStoryKey  = 9;
    optional  string  thumbnailIv  = 10;
    optional  string  thumbnailMediaKey  = 11;
    optional  bool  isRegisteredInterest  = 12;
}

message SCSSMSelectionCardInfo_Type {
}

message SCSSMSingleSnapStoryCard {
    repeated  SCSSMStorySnap  snapsArray  = 1;
    optional  SCSSMStoryThumbnail  storyThumbnail  = 2;
    optional  SCSSMSingleSnapStoryMetadata  singleSnapStoryMetadata  = 3;
    optional  BoostMetadata  boostMetadata  = 4;
    optional  SCSSMEngagementStats  engagementStats  = 5;
    optional  bool  topCreatorBadge  = 6;
    optional  SCSSMSingleSnapStoryCard_TopicBadgeMetadata  trendingTopicBadgeMetadata  = 7;
    optional  bool  repliesEnabled  = 8;
}

message SCSSMSingleSnapStoryCard_TopicBadgeMetadata {
    optional  string  topicId  = 1;
    optional  int32  topicStoryType  = 2;
}

message SCSSMSingleSnapStoryLookupRequestConfig {
    optional  bool  preferStitchedMedia  = 1;
    optional  bool  returnSingleSnapStoryCard  = 2;
}

message SCSSMSingleSnapStoryMetadata {
    optional  string  displayName  = 1;
    optional  string  businessProfileId  = 2;
    optional  string  topicId  = 3;
    optional  int32  topicStoryType  = 4;
    optional  bool  isOriginalSoundSnap  = 5;
    optional  bool  isSpotlightChallengeWinner  = 6;
    optional  int32  topicPageBadge  = 7;
}

message SCSSMSingleSnapStoryMetadata_TopicPageBadge {
}

message SCSSMSnapBoltInfo {
    optional  bytes  mediaContentObject  = 1;
    optional  bytes  overlayContentObject  = 2;
    optional  bytes  rawContentObject  = 3;
    optional  bytes  zippedContentObject  = 4;
}

message SCSSMSnapCreatorInfo {
    optional  string  userId  = 1;
    optional  string  displayName  = 2;
    optional  string  userName  = 3;
}

message SCSSMSnapFragmentMetadata {
    optional  int64  sequence  = 1;
    optional  int32  type  = 2;
}

message SCSSMSnapFragmentMetadata_Type {
}

message SCSSMSnapMediaInfo {
    optional  int32  mediaType  = 1;
    optional  string  mediaURL  = 2;
    optional  string  mediaId  = 3;
    optional  string  mediaIv  = 4;
    optional  string  mediaKey  = 5;
    optional  bool  isZipped  = 6;
    optional  double  duration  = 7;
    optional  bool  isInfiniteDuration  = 8;
    optional  SCMTStreamingMediaInfo  streamingMediaInfo  = 9;
    optional  SCMTPublicMediaInfo  publicMediaInfo  = 10;
    optional  SCSSMSnapBoltInfo  snapBoltInfo  = 11;
    optional  string  mediaD2SURL  = 12;
    optional  bytes  firstFrameContentObject  = 13;
    optional  string  boltWatermarkedVideoURL  = 14;
    optional  SCSSMMediaDimensions  boltWatermarkedVideoDimensions  = 15;
    optional  SCSSMMediaDimensions  mediaDimensions  = 16;
    optional  string  unencryptedFlatVideoURL  = 17;
    optional  string  unencryptedImageURL  = 18;
}

message SCSSMSnapPivotInfo {
    optional  SCContextContextHint  contextHint  = 1;
    optional  string  venueId  = 2;
    optional  string  attachmentURL  = 3;
}

message SCSSMSoloStoryCard {
    optional  SCSSMSoloStoryMetadata  metadata  = 1;
    repeated  SCSSMStorySnap  snapsArray  = 2;
}

message SCSSMSoloStoryMetadata {
    optional  string  userId  = 1;
    optional  string  username  = 2;
    optional  SCSSMStoryThumbnail  storyThumbnail  = 3;
    optional  string  displayName  = 4;
    optional  string  emoji  = 5;
    optional  string  emojiSafe  = 6;
    optional  string  bitmojiAvatarId  = 7;
    optional  string  bitmojiAvatarSelfieId  = 8;
    optional  int32  totalNumSnaps  = 9;
    optional  double  totalDurationSecs  = 10;
    optional  bool  isOfficial  = 11;
    optional  bool  isPopular  = 12;
    optional  int64  displayTimestampSecs  = 13;
    optional  string  miniProfileIconURL  = 14;
    optional  string  miniProfileTitle  = 15;
    optional  string  miniProfileDescription  = 16;
    optional  bool  isPartnered  = 17;
    optional  bool  isShareable  = 18;
    optional  int32  storyType  = 19;
    optional  string  title  = 20;
}

message SCSSMSpotlightChallengeCard {
    optional  SCSCOREUUID  id_p  = 1;
    optional  string  title  = 2;
    optional  string  imageURL  = 3;
    optional  string  description_p  = 4;
    optional  string  details  = 5;
    optional  string  termsAndConditionsURL  = 6;
    optional  int64  submissionStartTsMs  = 7;
    optional  int64  submissionEndTsMs  = 8;
    optional  string  bitmojiThumbnailTemplateId  = 9;
    optional  SCSSMSpotlightChallengeCard_ChallengeAmountDetails  amountDetails  = 10;
    optional  uint64  totalSubmissionCount  = 11;
    optional  string  topicId  = 12;
    optional  int32  topicStoryType  = 13;
    optional  string  legalText  = 14;
    optional  string  stringId  = 15;
}

message SCSSMSpotlightChallengeCard_ChallengeAmountDetails {
    optional  int64  totalAmount  = 1;
    repeated  int64  amountsForEachPlaceArray  = 2[packed=true];
}

message SCSSMStoriesBatchResponse {
    optional  string  requestId  = 1;
    optional  bytes  metaStreamToken  = 2;
    repeated  SCSSMStoriesResponse  storiesResponsesArray  = 3;
    optional  string  debugHtml  = 4;
    optional  bytes  debugPb  = 5;
    optional  SCSCOREResponseStatus  status  = 6;
}

message SCSSMStoriesRequest {
    optional  string  requestId  = 1;
    optional  int64  requestTimestampMs  = 2;
    optional  int32  origin  = 3;
    optional  SCSSMClientInfo  clientInfo  = 4;
    optional  int32  trigger  = 5;
    optional  bytes  lastStreamToken  = 6;
    optional  int32  nextScrollOffset  = 7;
    repeated  SCSCOREABTestStudyInfo  studyInfoArray  = 8;
    optional  SCSCORETweaks  tweaks  = 9;
    optional  SCSSMAdsClientInfo  adsClientInfo  = 10;
    optional  int32  debug  = 11;
    optional  int32  feedType  = 12;
    optional  string  clientDfSessionId  = 13;
    repeated  bytes  lastStreamTokens  = 14;
    optional  bytes  lastMetaStreamToken  = 15;
    optional  SCSSMStoriesRequest_LensMetadata  lensMetadata  = 16;
    optional  SCSSMCognacClientInfo  cognacClientInfo  = 17;
    repeated  int32  feedTypesArray  = 18[packed=true];
    optional  SCSSMStoriesRequest_DeltaFetchInfo  deltaFetchInfo  = 19;
    repeated  int32  numStories  = 20;
    optional  int32  requestSource  = 21;
    optional  BadgeMetadata  badgeMetadata  = 22;
    optional  int32  studyPriority  = 23;
    optional  SCSSMStoriesRequest_TopicMetadata  topicMetadata  = 24;
    optional  SCSSMStoriesRequest_FeedRequestMetadata  feedRequestMetadata  = 25;
    optional  SCSSMStoriesRequest_PaginationInfo  paginationInfo  = 26;
    optional  SCSSMStoriesRequest_HNMetadata  hnMetadata  = 27;
    optional  OurStoryFilterOptions  ourStoryFilterOptions  = 28;
    optional  SCSSMStoriesRequest_LightModeParams  lightModeParams  = 29;
}

message SCSSMStoriesRequest_DeltaFetchInfo {
    optional  bool  enabled  = 1;
    repeated  bool  enabledForCorpus  = 2;
    repeated  SCSSMStoryLookupRequestItem  deltaTokenArray  = 3;
}

message SCSSMStoriesRequest_FeedRequestMetadata {
    repeated  SCSSMStoriesRequest_FeedRequestMetadata_FeedOptions  feedOptions  = 1;
}

message SCSSMStoriesRequest_FeedRequestMetadata_FeedOptions {
    optional  int32  thumbnailOption  = 1;
    optional  int32  sectionDisplayNameOption  = 2;
    repeated  int32  overrideStoryTypesArray  = 3[packed=true];
}

message SCSSMStoriesRequest_FeedRequestMetadata_SectionDisplayNameOption {
}

message SCSSMStoriesRequest_FeedRequestMetadata_ThumbnailOption {
}

message SCSSMStoriesRequest_HNMetadata {
    optional  SCSSMStoriesRequest_HNMetadata_HNNotificationMetadata  notificationMetadata  = 1;
}

message SCSSMStoriesRequest_HNMetadata_HNNotificationMetadata {
    repeated  SCCORECompositeStoryId  storyIdsArray  = 1;
}

message SCSSMStoriesRequest_LensMetadata {
    optional  string  creatorUuid  = 1;
    optional  string  category  = 2;
    optional  fixed64  lensChallengeId  = 3;
    optional  int32  lensCategory  = 4;
    repeated  int64  lensesInCarouselArray  = 5[packed=true];
    optional  SCSSMStoriesRequest_LensMetadata_SponsoredLensData  sponsoredLens  = 6;
    optional  int32  sponsoredLensPosition  = 7;
}

message SCSSMStoriesRequest_LensMetadata_SponsoredLensData {
    optional  SCSCORELensInfo  lensInfo  = 1;
}

message SCSSMStoriesRequest_LightModeParams {
    optional  int32  localCacheCount  = 1;
}

message SCSSMStoriesRequest_PaginationInfo {
    repeated  SCSSMStoriesRequest_PaginationInfo_FeedPaginationInfo  paginationInfoForFeeds  = 1;
}

message SCSSMStoriesRequest_PaginationInfo_FeedPaginationInfo {
    optional  int32  firstPageSize  = 1;
}

message SCSSMStoriesRequest_RequestSource {
}

message SCSSMStoriesRequest_TopicMetadata {
    optional  string  topicId  = 1;
    optional  int32  topicStoryType  = 2;
}

message SCSSMStoriesResponse {
    optional  string  requestId  = 1;
    optional  SCSCOREResponseStatus  status  = 2;
    optional  SCSSMOrderedStoriesStream  orderedStoriesStream  = 3;
    optional  string  debugHtml  = 5;
    optional  SCSSMClientScoringParams  clientScoringParams  = 6;
    optional  bytes  debugPb  = 7;
    optional  SCSSMDiscoverFeedMetadata  discoverFeedMetadata  = 8;
    optional  bool  eof  = 9;
    optional  FeedTypeMetadata  feedMetadata  = 10;
    optional  bool  isDegradedMode  = 11;
    optional  string  onDemandDebugKey  = 100;
}

message SCSSMStoryCard {
    optional  string  storyId  = 1;
    optional  SCSSMOurStoryCard  ourStoryCard  = 2;
    optional  SCSSMPublisherStoryCard  publisherStoryCard  = 3;
    optional  SCSSMPublicUserStoryCard  publicUserStoryCard  = 4;
    optional  SCSSMMapTileCard  mapTileCard  = 5;
    optional  SCSSMPromotedStoryCard  promotedStoryCard  = 6;
    optional  float  tileAspectRatio  = 7;
    optional  bool  isSubscribed  = 8;
    optional  bool  isFeatured  = 9;
    optional  string  featuredBannerText  = 10;
    optional  SCSSMJaguarClientLogging  jaguarClientLogging  = 11;
    optional  SCCORECompositeStoryId  compositeStoryId  = 12;
    optional  float  score  = 13;
    optional  bool  rankShouldBeFixed  = 14;
    optional  bool  notModerated  = 15;
    optional  int32  hideAfterWatch  = 16;
    optional  fixed64  storyDedupeFp  = 17;
    optional  string  tileDominantColor  = 18;
    optional  int64  latestUpdateTimestampSecs  = 19;
    optional  SCSSMClientRankingFeatures  clientRankingFeatures  = 20;
    optional  SCSSMClientDisplayInfo  clientDisplayInfo  = 21;
    optional  SCSSMMomentStoryCard  momentStoryCard  = 22;
    optional  int32  storySubtype  = 23;
    optional  fixed64  storyCacheFp  = 24;
    optional  SCSSMCognacCard  cognacCard  = 25;
    optional  bool  hasUpnextRecommendation  = 26;
    optional  SCSSMSoloStoryCard  soloStoryCard  = 27;
    optional  bool  hideSubscribeButton  = 28;
    optional  SCSSMLensObjectCard  lensObjectCard  = 29;
    optional  SCSSMSelectionCard  selectionCard  = 30;
    optional  SCSSMStoryCard_TapAction  tapAction  = 31;
    optional  bool  isNotificationOptedIn  = 32;
    optional  SCSSMLensChallengeCard  lensChallengeCard  = 33;
    optional  SCSSMLensChallengeStoryCard  lensChallengeStoryCard  = 34;
    optional  SCSSMPivotCard  pivotCard  = 35;
    optional  SCSSMUserStoryCard  userStoryCard  = 36;
    optional  SCSSMLensCategoryCard  lensCategoryCard  = 37;
    optional  SCSSMSingleSnapStoryCard  singleSnapStoryCard  = 38;
    optional  BoostConfig  boostConfig  = 39;
    optional  fixed64  storyIdFp  = 40;
    optional  bytes  contentToken  = 41;
    optional  bool  isPlaceholder  = 42;
    optional  SCSSMHeroCard  heroCard  = 43;
    optional  SCSSMLensCreatorCard  lensCreatorCard  = 44;
    optional  SCSSMLensCollectionCard  lensCollectionCard  = 45;
    optional  bytes  adOrganicSignals  = 46;
    optional  SCSSMSpotlightChallengeCard  spotlightChallengeCard  = 47;
    optional  SCSSMSavedStoryCard  savedStoryCard  = 48;
    optional  int32  storyHomingSection  = 49;
    optional  SCSSMCardDebugInfo  debugInfo  = 100;
    repeated  FriendStoryModelHeadScore  friendStoryModelHeadScoresArray  = 101;
    optional  WindowedIntMetrics  numStorySnapPosts  = 102;
}

message SCSSMStoryCard_TapAction {
}

message SCSSMStoryDeltaForceMetadata {
    optional  bytes  deltaSyncToken  = 1;
    optional  bool  isCompleted  = 2;
    optional  bool  isFullSync  = 3;
}

message SCSSMStoryFragmentMetadata {
    optional  int64  sequenceMin  = 1;
    optional  int64  sequenceMax  = 2;
    optional  int64  sequenceBegin  = 3;
    optional  int64  sequenceEnd  = 4;
}

message SCSSMStoryLookupRequest {
    optional  string  requestId  = 1;
    optional  int64  requestTimestampMs  = 2;
    optional  int32  origin  = 3;
    optional  SCSSMClientInfo  clientInfo  = 4;
    optional  int32  requestType  = 5;
    optional  SCCORECompositeStoryId  compositeStoryId  = 6;
    optional  string  storyShareKey  = 7;
    repeated  SCSCOREABTestStudyInfo  studyInfoArray  = 8;
    optional  SCSCORETweaks  tweaks  = 9;
    optional  SCSSMStoryLookupRequestItem  requestItem  = 11;
    optional  int32  studyPriority  = 12;
}

message SCSSMStoryLookupRequestItem {
    optional  SCCORECompositeStoryId  compositeStoryId  = 1;
    optional  SCSSMStoryLookupRequestItem_DeltaFetchInfo  deltaFetchInfo  = 2;
    optional  SCSSMStoryLookupRequestItem_EnvironmentInfo  environmentInfo  = 3;
    optional  SCSSMStoryLookupRequestItem_SnapSelectInfo  snapSelectInfo  = 4;
    optional  fixed64  storyIdFp  = 5;
    optional  SCSSMSingleSnapStoryLookupRequestConfig  singleSnapStory  = 6;
    optional  bool  isDisplayOrder  = 7;
}

message SCSSMStoryLookupRequestItem_DeltaFetchInfo {
    optional  bool  elementsOnly  = 1;
    optional  int64  sequenceBegin  = 2;
    optional  int64  numSnaps  = 3;
    optional  int64  sequenceMax  = 4;
    optional  bytes  deltaSyncToken  = 5;
    optional  bytes  contentToken  = 6;
}

message SCSSMStoryLookupRequestItem_EnvironmentInfo {
    optional  int32  feedType  = 1;
}

message SCSSMStoryLookupRequestItem_SnapSelectInfo {
    repeated  string  snapIdsArray  = 1;
}

message SCSSMStoryLookupResponse {
    optional  string  requestId  = 1;
    optional  SCSCOREResponseStatus  status  = 2;
    optional  SCSSMStoryCard  storyCard  = 3;
    optional  SCSSMStoryLookupResponseItem  responseItem  = 4;
}

message SCSSMStoryLookupResponseItem {
    optional  SCCORECompositeStoryId  compositeStoryId  = 1;
    optional  SCSSMStoryCard  storyCard  = 2;
    optional  int32  status  = 3;
    optional  SCSCOREResponseStatus  responseStatus  = 4;
    optional  bool  retriable  = 5;
}

message SCSSMStoryLookupResponseItem_Status {
}

message SCSSMStoryPrefetchMetadata {
    optional  int64  numPrefetchSnaps  = 1;
}

message SCSSMStorySnap {
    optional  string  rawSnapId  = 1;
    optional  SCSSMSnapMediaInfo  mediaInfo  = 2;
    optional  int64  creationTimestampMs  = 3;
    optional  int64  expirationTimestampMs  = 4;
    optional  string  title  = 5;
    repeated  string  subTitlesArray  = 6;
    optional  SCSSMSnapPivotInfo  pivotInfo  = 7;
    optional  SCSSMSnapCreatorInfo  creatorInfo  = 8;
    optional  string  attachmentURL  = 9;
    optional  bytes  audioStitchData  = 10;
    optional  SCSCOREMultiSnapExtension  multiSnapExtension  = 11;
    optional  string  sharedStorySubmissionId  = 12;
    optional  SCSCORESnapSource  snapSource  = 13;
    optional  string  displayGeoInfo  = 14;
    optional  string  encryptedGeoData  = 15;
    optional  bytes  serializedUnlockablesSnapInfo  = 16;
    optional  string  lensId  = 17;
    optional  bool  hasSnappablesMetadata  = 18;
    optional  SCSSMSnapFragmentMetadata  fragmentMetadata  = 19;
    optional  string  snapClientId  = 20;
    optional  string  originalSnapId  = 21;
    optional  SCSSMStoryThumbnail  snapThumbnail  = 22;
    optional  string  externalId  = 23;
    optional  int32  brandFriendliness  = 24;
    optional  bool  isPublic  = 25;
    optional  bytes  lensMetadata  = 26;
    optional  int64  sourceCreationTimestamp  = 27;
    optional  string  caption  = 28;
    optional  SCConnectSnapConnectAttributes  snapConnectAttributes  = 29;
    optional  string  storyFilterId  = 30;
    optional  string  filterId  = 31;
    optional  bool  isPetraBrandSafe  = 32;
    optional  BoostMetadata  boostMetadata  = 33;
    optional  SCSSMEngagementStats  engagementStats  = 34;
    optional  int32  animatedSnapType  = 35;
    optional  bool  isRotationLocked  = 36;
    repeated  int32  ourStoryDestinationsArray  = 37[packed=true];
    repeated  SCSCOREUUID  blockedUserIdsArray  = 38;
    optional  int32  spotlightSnapStatus  = 40;
    optional  bytes  eventSignature  = 41;
    optional  bool  isStitchedMedia  = 42;
    optional  SCSCOREGeoLocation  geoLocation  = 43;
    optional  SCSCORESnapDescription  snapDescription  = 44;
    optional  int32  connectionType  = 45;
    optional  SDMCameoMetadata  cameo  = 46;
    optional  SDMSponsor  sponsor  = 47;
    optional  SDMAdsTracking  adsTracking  = 48;
    optional  SCCameosCameoTile  cameoTile  = 49;
    optional  string  lensRankingId  = 50;
}

message SCSSMStorySnap_SpotlightSnapStatus {
}

message SCSSMStoryThumbnail {
    optional  string  thumbnailURL  = 1;
    optional  string  thumbnailIv  = 2;
    optional  string  mediaKey  = 3;
    optional  string  videoThumbnailURL  = 4;
    optional  string  videoFirstFrameThumbnailURL  = 5;
    optional  string  thumbnailDominantColor  = 6;
    repeated  int32  thumbnailVariantsArray  = 7[packed=true];
    optional  bool  isBrandSafe  = 8;
    optional  float  score  = 9;
    optional  string  mediaId  = 10;
    optional  string  snapId  = 11;
    optional  string  largeThumbnailURL  = 12;
    optional  bytes  thumbnailContentObject  = 13;
    optional  string  thumbnailCoKey  = 14;
    optional  string  thumbnailCoIv  = 15;
}

message SCSSMStreamToken {
    optional  SCSSMStreamToken_DebugInfo  debugInfo  = 1;
    optional  int32  nextScoringOffset  = 2;
    optional  bytes  criticalStoriesBf  = 3;
    repeated  SCSSMStreamToken_Session  sessionsArray  = 4;
    optional  int64  lastP2RTsSecs  = 5;
    optional  bool  explorationEnabled  = 6;
    optional  int64  randomRankingSeed  = 7;
    optional  SCSSMStreamToken_DiversificationState  diversificationState  = 8;
    optional  SCSSMStreamToken_SuperFeedBlendingState  superFeedBlendingState  = 9;
    optional  SCSSMStreamToken_DiscoverBlendedFeedState  discoverBlendedFeedState  = 10;
}

message SCSSMStreamToken_DebugInfo {
    optional  int64  epoch  = 1;
    repeated  string  cohortIdsArray  = 2;
}

message SCSSMStreamToken_DiscoverBlendedFeedState {
    optional  double  maxScoreSubs  = 1;
    optional  double  maxScoreForYou  = 2;
}

message SCSSMStreamToken_DiversificationState {
    optional  uint32  suggestiveFreePrefix  = 2;
    optional  uint32  coldStartFreePrefix  = 3;
    repeated  bool  subscriptionLastWindowArray  = 4[packed=true];
    repeated  bool  partnerLastWindowArray  = 5[packed=true];
    repeated  bool  nonLocalLastWindowArray  = 6[packed=true];
    repeated  bool  nonSnapCameraLastWindowArray  = 7[packed=true];
    repeated  SCSSMStreamToken_SCCState  sccLastWindowArray  = 8;
    optional  SCSSMStreamToken_DiversificationState_CreatorDiversificationState  creatorDiversificationState  = 9;
    optional  uint32  lastBibStoryIndex  = 10;
    optional  uint32  bibPromotionInSession  = 11;
}

message SCSSMStreamToken_DiversificationState_CreatorDiversificationState {
    repeated  int32  creatorToCntMap  = 1;
    repeated  string  creatorRollingWindowArray  = 2;
}

message SCSSMStreamToken_SCCState {
    repeated  float  sccMap  = 1;
}

message SCSSMStreamToken_Session {
    optional  int64  startTsSecs  = 1;
    optional  int64  endTsSecs  = 2;
    optional  uint32  reqCounts  = 3;
}

message SCSSMStreamToken_SuperFeedBlendingState {
    optional  bool  shouldNextResponseExcludeFriendsFeed  = 1;
    optional  int32  lastFeedTypeServed  = 2;
    optional  int32  storyCountOfLastFeedTypeServed  = 3;
    optional  SCSSMStreamToken_DiversificationState_CreatorDiversificationState  creatorDiversificationState  = 4;
}

message SCSSMTileBadge {
    optional  string  title  = 1;
    optional  string  backgroundColor  = 2;
    optional  int32  badgeSize  = 3;
    optional  uint32  textColorArgb  = 4;
    optional  uint32  backgroundColorArgb  = 5;
}

message SCSSMUpNextLoggingExtension {
    optional  SCCORECompositeStoryId  recommForStoryId  = 1;
}

message SCSSMUpNextRequest {
    optional  string  requestId  = 1;
    optional  int64  requestTimestampMs  = 2;
    optional  int32  origin  = 3;
    optional  SCSSMClientInfo  clientInfo  = 4;
    optional  SCCORECompositeStoryId  currentStoryId  = 5;
    repeated  SCSCOREABTestStudyInfo  studyInfoArray  = 6;
    optional  SCSCORETweaks  tweaks  = 7;
    optional  int32  debug  = 8;
    optional  int32  recommendationType  = 9;
    optional  int32  requestSource  = 10;
    optional  int32  triggeringFeedType  = 11;
    optional  int32  studyPriority  = 12;
    optional  int32  triggeringAction  = 13;
    optional  int32  recommendationSource  = 14;
}

message SCSSMUpNextRequest_RecommendationSource {
}

message SCSSMUpNextRequest_RecommendationType {
}

message SCSSMUpNextRequest_RequestSource {
}

message SCSSMUpNextRequest_TriggeringAction {
}

message SCSSMUpNextResponse {
    optional  string  requestId  = 1;
    repeated  SCSSMStoryCard  recommendedStoriesArray  = 2;
    optional  string  debugHtml  = 3;
    optional  bytes  debugPb  = 4;
}

message SCSSMUserBadgeInteractionFeatures {
    optional  uint64  interactionTsMsec  = 1;
    optional  int32  interactionEvent  = 2;
    optional  uint64  totalImpressionMsec  = 3;
    optional  BadgeMetadata  badgeMetadata  = 4;
}

message SCSSMUserBadgeInteractionFeatures_InteractionEvent {
}

message SCSSMUserCorpusInteractionFeatures {
    optional  int32  corpus  = 1;
    optional  float  longImpressionsScore  = 2;
    optional  float  shortImpressionScore  = 3;
    optional  float  shortViewsScore  = 4;
    optional  float  longViewsScore  = 5;
    optional  int32  numHides  = 6;
    optional  int32  numSubscribes  = 7;
    optional  float  numSnapsViewed  = 8;
    optional  float  watchTime  = 9;
    optional  float  impressionsTime  = 10;
}

message SCSSMUserNewsInteractionFeatures {
    optional  SCSSMUserStoryInteractionFeatures  userStoryInteractionFeatures  = 1;
    optional  string  category  = 2;
}

message SCSSMUserRecentInteractionsHistory {
    repeated  SCSSMUserStoryInteractionFeatures  userStoryInteractionsArray  = 1;
    repeated  SCSSMUserCorpusInteractionFeatures  userCorpusInteractionsArray  = 2;
    repeated  SCSSMUserStoryInteractionFeatures  userHeroInteractionsArray  = 3;
    repeated  SCSSMUserBadgeInteractionFeatures  userBadgeInteractionsArray  = 4;
    repeated  SCSSMUserStoryInteractionFeatures  userNewsInteractionsArray  = 5;
    repeated  SCSSMUserNewsInteractionFeatures  userNewsInteractionsExtendedArray  = 6;
    repeated  SCSSMUserStoryInteractionFeatures  userSpotlightTileInteractionsArray  = 7;
}

message SCSSMUserRecentTapHistory {
    repeated  fixed64  tapStoryKeyArray  = 1[packed=true];
}

message SCSSMUserStoryCard {
    repeated  SCSSMStorySnap  snapsArray  = 1;
    optional  SCSSMStoryFragmentMetadata  fragmentMetadata  = 2;
    optional  SCSSMStoryPrefetchMetadata  prefetchMetadata  = 3;
    optional  SCSSMStoryThumbnail  thumbnail  = 4;
    optional  SCSSMUserStoryUserMetadata  userMetadata  = 5;
    optional  SCSSMUserStoryPublicUserMetadata  publicUserMetadata  = 6;
    optional  SCSSMImpalaStoryMetadata  impalaMetadata  = 7;
    optional  SCSSMUserStoryCustomMetadata  customMetadata  = 8;
    optional  SCSSMUserStoryOurStoryMetadata  ourStoryMetadata  = 9;
    optional  SCSSMStoryDeltaForceMetadata  deltaForceMetadata  = 10;
}

message SCSSMUserStoryCustomMetadata {
    optional  string  id_p  = 1;
    optional  string  displayName  = 2;
    optional  int32  customStoryType  = 3;
}

message SCSSMUserStoryInteractionFeatures {
    optional  fixed64  storyKey  = 1;
    optional  uint32  numWatches  = 2;
    optional  uint32  snapCompletionPercent  = 3;
    optional  uint32  watchTimePercent  = 4;
    optional  uint32  numSnapsInStory  = 5;
    optional  uint32  storyLengthSeconds  = 6;
    optional  uint32  totalImpressionScore  = 7;
    optional  bool  subscribed  = 8;
    optional  bool  hidden  = 9;
    optional  int32  storyEntrance  = 10;
    optional  int32  storyExit  = 11;
    optional  uint32  totalImpressionTime  = 12;
    optional  uint64  latestWatchTimestamp  = 13;
    optional  uint32  numBoosts  = 14;
    optional  uint64  latestLongImpressionTimestamp  = 15;
    optional  uint32  totalWatchTimeMsecs  = 16;
    optional  int32  entryIntent  = 17;
    optional  int32  exitIntent  = 18;
    optional  int32  hideType  = 19;
    optional  uint32  latestSubscribedChangeTimestamp  = 20;
    optional  uint32  latestHideChangeTimestamp  = 21;
    optional  bool  openedProfile  = 22;
    optional  bool  shared  = 23;
    optional  SCCORECompositeStoryId  compositeStoryId  = 24;
    optional  string  pageSessionId  = 25;
    optional  string  requestId  = 26;
}

message SCSSMUserStoryOurStoryMetadata {
    optional  string  displayName  = 1;
}

message SCSSMUserStoryPublicUserMetadata {
    optional  bool  isPopular  = 1;
    optional  bool  isOfficial  = 2;
    optional  bool  isFollowed  = 3;
    optional  int32  brandFriendliness  = 4;
}

message SCSSMUserStoryUserMetadata {
    optional  string  userId  = 1;
    optional  string  userName  = 2;
    optional  string  userDisplayName  = 3;
    optional  string  emoji  = 4;
    optional  string  emojiSafe  = 5;
    optional  string  bitmojiAvatarId  = 6;
    optional  string  bitmojiAvatarSelfieId  = 7;
}

message SCSSMUserWarmupRequest {
    optional  string  requestId  = 1;
    optional  SCSSMClientInfo  clientInfo  = 2;
}

message SCSSMViewSessionLoggingExtension {
    optional  SCSSMLoggingContext  loggingContext  = 1;
    optional  bool  explorationStory  = 2;
    optional  bool  isFromBoostUpnextRetrieval  = 3;
    optional  bool  isFromBoostSameAccount  = 4;
}

message SCSUPABExperiments {
    optional  string  sessionId  = 1;
    optional  int64  retrievalTimestampMs  = 2;
    repeated  SCSCOREABTestStudyInfo  studyInfosArray  = 3;
}

message SCSUPABExperimentsRequest {
    optional  string  sessionId  = 1;
    repeated  string  studyIdsArray  = 2;
    optional  bool  forceRefresh  = 3;
    optional  SCSCOREAppInfo  appInfo  = 5;
    repeated  string  abToCofConfig  = 6;
    optional  bool  forceLoadFromCof  = 7;
}

message SCSUPActionableStoryKey {
    optional  SCSUPPublicUserStoryKey  publicUserStoryKey  = 1;
    optional  SCSUPPublisherStoryKey  publisherStoryKey  = 2;
    optional  SCSUPOurStoryKey  ourStoryKey  = 3;
    optional  SCSUPMapTileStoryKey  mapTileStoryKey  = 4;
    optional  SCSUPLiveStreamingStoryKey  liveStreamingStoryKey  = 5;
    optional  SCSUPLensObjectStoryKey  lensObjectStoryKey  = 6;
    optional  SCSUPCategoryKey  categoryKey  = 7;
    optional  SCSUPRegisteredInterestKey  registeredInterestKey  = 8;
    optional  SCSUPHNNewsStoryKey  hnNewsStoryKey  = 9;
    optional  SCSUPSingleSnapStoryKey  singleSnapStoryKey  = 10;
}

message SCSUPAppVersion {
    optional  int64  major  = 1;
    optional  int64  minor  = 2;
    optional  int64  patch  = 3;
}

message SCSUPBadgeEngagement {
    repeated  SCSUPWindowedEngagementStats  publisherEngagement  = 1;
    repeated  SCSUPWindowedEngagementStats  triggerFeedTypeEngagement  = 2;
    optional  SCSUPWindowedEngagementStats  aggregatedEngagement  = 3;
}

message SCSUPBasicAttributes {
    optional  string  userId  = 1;
    optional  float  userScore  = 2;
    optional  bool  isOfficialUser  = 3;
    optional  bool  hasProfilePicture  = 4;
    optional  bool  hasBitmoji  = 5;
    optional  int64  friendCount  = 6;
    optional  int64  followerCount  = 7;
    optional  int64  followingCount  = 8;
    optional  string  userDisplayName  = 9;
    optional  int32  displayNameStatus  = 10;
    optional  int64  accountCreationTimestampSecs  = 11;
    optional  string  accountCreationCountry  = 12;
    optional  bool  isPhoneVerified  = 13;
    optional  bool  isEmailVerified  = 14;
    optional  bool  isLocked  = 15;
    optional  int32  lockReason  = 16;
    optional  int32  storyPrivacy  = 17;
    optional  int32  inferredGender  = 18;
    optional  string  devicePlatform  = 19;
    optional  string  deviceModel  = 20;
    optional  string  deviceVersion  = 21;
    optional  string  deviceCarrier  = 22;
    optional  int32  age  = 23;
    optional  SCSUPWindowedMetrics  snapsReceivedMetrics  = 24;
    optional  SCSUPWindowedMetrics  snapsSentMetrics  = 25;
    optional  SCSUPWindowedMetrics  chatsReceivedMetrics  = 26;
    optional  SCSUPWindowedMetrics  chatsSentMetrics  = 27;
    optional  SCSUPWindowedMetrics  myStoryPostedMetrics  = 28;
    optional  SCSUPWindowedMetrics  myStoryViewMetrics  = 29;
    optional  SCSUPWindowedMetrics  myStoryViewTimeSecMetrics  = 30;
    optional  string  locale  = 31;
    optional  bool  isTestUser  = 33;
    optional  int64  lastUpdatedTimestampInMsecs  = 34;
    optional  bool  isEligibleForDiscoverFeed  = 35;
    optional  SCSUPAppVersion  appVersion  = 36;
    optional  string  lastActiveCountry  = 37;
    optional  int32  appOpenL7  = 38;
    optional  int32  communicationL7  = 39;
    optional  int32  publisherStoryViewL7  = 40;
    optional  int32  storyViewL7  = 41;
    optional  string  lastActiveRegion  = 42;
    optional  string  lastActiveTimezone  = 43;
    optional  int32  inferredBucketedAge  = 44;
    optional  bool  isSnapProUser  = 45;
    optional  int32  inferredAge  = 46;
    optional  string  userTier  = 47;
    optional  string  internalCategory  = 48;
    optional  string  lastActiveCity  = 49;
    optional  int32  spotlightEngagementStatus  = 50;
    optional  string  hashedUserId  = 51;
}

message SCSUPBatchSubscribeStoryRequest {
    optional  string  userId  = 1;
    repeated  SCSUPBatchSubscribeStoryRequest_Request  requestsArray  = 2;
    optional  int64  requestTsMsecs  = 3;
    optional  int32  source  = 4;
}

message SCSUPBatchSubscribeStoryRequest_Request {
    optional  SCSUPActionableStoryKey  storyKey  = 1;
    optional  int32  toState  = 2;
}

message SCSUPBatchSubscribeStoryResponse {
}

message SCSUPBoostAndUnboostSessions {
    optional  string  pageSessionId  = 1;
    optional  fixed32  pageSessionIdSaltedHash  = 2;
    optional  uint32  sessionStartTimestamp  = 3;
    repeated  SCSUPBoostEvent  boostEventsArray  = 4;
    repeated  SCSUPUnboostEvent  unboostEventsArray  = 5;
}

message SCSUPBoostEvent {
    optional  SCSUPEventStoryFeatures  storyFeatures  = 1;
    optional  SCSUPEventFeedContextFeatures  contextFeatures  = 2;
    optional  uint32  timestamp  = 3;
    optional  int32  interactionContext  = 4;
}

message SCSUPCategoryKey {
    optional  int32  feedType  = 1;
}

message SCSUPCognacEngagement {
    repeated  SCSUPCognacEngagementStats  cognacStats  = 1;
}

message SCSUPCognacEngagementStats {
    optional  SCSUPCognacEngagementStats_WindowedCognacStats  windowedCognacStatsFromChat  = 1;
    optional  SCSUPCognacEngagementStats_WindowedCognacStats  windowedCognacStatsFromDiscover  = 2;
    optional  SCSUPCognacEngagementStats_WindowedCognacStats  windowedCognacStatsFromNotification  = 3;
    optional  SCSUPCognacEngagementStats_WindowedCognacStats  windowedCognacStatsFromSearch  = 4;
    optional  SCSUPCognacEngagementStats_WindowedCognacStats  windowedCognacStatsFromFeed  = 5;
    optional  SCSUPCognacEngagementStats_WindowedCognacStats  windowedCognacStatsFromAllSources  = 6;
}

message SCSUPCognacEngagementStats_ActionCounts {
    optional  float  gameOpenTotalTimeInSecs  = 1;
    optional  float  gameLoadTimeInSecs  = 2;
    optional  uint32  numGameOpens  = 3;
    optional  float  gameImpressionTotalTimeInSecs  = 4;
    optional  uint32  numGameImpressions  = 5;
    optional  float  avgGroupSize  = 6;
    optional  uint32  numInvitesSent  = 7;
    optional  uint32  numChatsSent  = 8;
    optional  float  maxGameLoadTimeInSecs  = 9;
    optional  float  minGameLoadTimeInSecs  = 10;
}

message SCSUPCognacEngagementStats_WindowedCognacStats {
    optional  SCSUPCognacEngagementStats_ActionCounts  actionCountsSinceLastWeek  = 1;
    optional  SCSUPCognacEngagementStats_ActionCounts  actionCountsSinceLastMonth  = 2;
    optional  SCSUPCognacEngagementStats_ActionCounts  actionCountsSinceLastThreeMonths  = 3;
}

message SCSUPCommunityStoryUserEngagement {
    optional  SCSUPWindowedEngagementStats  aggregatedSpotlightFeedStats  = 1;
    repeated  SCSUPWindowedEngagementStats  windowedTopHashtagStats  = 2;
    repeated  SCSUPWindowedEngagementStats  windowedTopCreatorStats  = 3;
    repeated  SCSUPWindowedEngagementStats  windowedLensIdStats  = 4;
    repeated  SCSUPWindowedEngagementStats  windowedMusicIdStats  = 5;
    repeated  SCSUPWindowedEngagementStats  windowedLanguageStats  = 6;
    repeated  SCSUPWindowedEngagementStats  windowedTopClusteredHashtagStats  = 7;
    optional  SCSUPUserSCCAffinity  cupSccV3Affinity  = 8;
    optional  SCSUPUserSCCAffinity  cupSccPlusV1Affinity  = 9;
    optional  SCSUPWindowedEngagementStats  aggregatedSpotlightFeedStatsRealtime  = 10;
}

message SCSUPContentEngagement {
    optional  string  userId  = 1;
    repeated  SCSUPDynamicStoryEngagement  dynamicStoryEngagementsInPastMonthArray  = 2;
    repeated  SCSUPDiscoverEngagement  discoverEngagementsInPastMonth  = 3;
    repeated  SCSUPContentTypeScore  contentTypePreferenceArray  = 4;
    repeated  SCSUPContentTypeScore  contentTypePreferenceNormalizedArray  = 5;
    repeated  SCSUPContentTypeScore  storyCorpusStatsArray  = 6;
    optional  int32  lastUpdatedTimestampInSecs  = 7;
    optional  int64  lastUpdatedTimestampInMsecs  = 8;
    optional  SCSUPPublicUserEngagement  publicUserEngagement  = 9;
    optional  SCSUPPublisherEngagement  publisherEngagement  = 10;
    repeated  SCSUPEngagementStats  categoryEngagement  = 11;
    optional  SCSUPLensEngagement  lensEngagement  = 12;
    optional  SCSUPMapStoryUserEngagement  mapStoryEngagement  = 13;
    optional  SCSUPSectionEngagement  sectionEngagement  = 14;
    optional  SCSUPCognacEngagement  cognacEngagement  = 15;
    optional  SCSUPCommunityStoryUserEngagement  communityStoryEngagement  = 16;
    optional  SCSUPBadgeEngagement  badgeEngagement  = 17;
    optional  SCSUPUserEmbedding  spotlightRetrievalEmbedding  = 18;
    repeated  SCSUPFeedSpecificContentEngagement  feedSpecificContentEngagementsArray  = 19;
}

message SCSUPContentQualitySubTag {
}

message SCSUPContentTypeScore {
    optional  int32  corpus  = 1;
    optional  float  score  = 2;
    optional  SCSUPEngagementStats  stats  = 3;
}

message SCSUPDFUserEmbedding {
    optional  string  modelName  = 1;
    optional  SCSCKEmbedding  embedding  = 2;
    optional  SCSUPEmbeddingMetadata  metadata  = 3;
}

message SCSUPDeleteSearchHistoryRequest {
    optional  string  userId  = 1;
    optional  int64  requestTimestampSecs  = 2;
}

message SCSUPDeleteSearchHistoryResponse {
}

message SCSUPDiscoverEngagement {
    optional  bool  isChannelSubscribed  = 1;
    optional  int32  channelViewCount  = 2;
    optional  int32  channelFinishedCount  = 3;
    optional  float  channelViewTimeInSecs  = 4;
    optional  uint32  totalHides  = 5;
    optional  uint32  totalUnhides  = 6;
    optional  int64  lastStateUpdateMsecs  = 7;
}

message SCSUPDiscoverSettingsRequest {
    optional  SCSCOREUUID  userId  = 1;
}

message SCSUPDiscoverSettingsResponse {
    optional  SCSUPStoryPreferenceSettings  storyPreferenceSettings  = 1;
    optional  bool  optedInHnNewsSectionNotification  = 2;
}

message SCSUPDynamicChannel {
    optional  SCSUPThemeEntity  themeEntity  = 1;
    optional  SCSUPThemeTopic  themeTopic  = 2;
    optional  SCSUPThemeStory  themeStory  = 3;
    optional  float  confidence  = 4;
}

message SCSUPDynamicChannelSet {
    optional  string  userId  = 1;
    repeated  SCSUPDynamicChannel  dynamicChannelsArray  = 2;
}

message SCSUPDynamicStoryEngagement {
    optional  int32  storyType  = 1;
    optional  int32  topicStoryView  = 2;
    optional  int32  topicStoryFinished  = 3;
    optional  float  topicTotalStoryViewTimeInSecs  = 4;
    optional  int32  topicStoryShare  = 5;
}

message SCSUPEmbeddingMetadata {
    optional  string  modelName  = 1;
    optional  string  modelIncVersion  = 2;
}

message SCSUPEngagementStats {
    optional  uint64  numImpressions  = 1;
    optional  uint64  numLongImpressions  = 2;
    optional  float  impressionTotalTimeSecs  = 3;
    optional  uint64  numRawWatches  = 4;
    optional  uint64  numCompleteWatches  = 5;
    optional  uint64  numScreenshots  = 6;
    optional  float  totalWatchTimeSecs  = 7;
    optional  float  averageCompletionPercent  = 8;
    optional  uint64  numFavorites  = 9;
    optional  uint64  numUnfavorites  = 10;
    optional  uint64  numHides  = 11;
    optional  uint64  numShares  = 12;
    optional  uint64  numSends  = 13;
    optional  uint64  numUniqueWatches  = 14;
    optional  uint64  numSnapWatches  = 15;
    optional  SCSUPEngagementStats_PublisherHidesStats  publisherHidesStats  = 16;
    optional  uint64  numRequestDedupedImpressions  = 17;
    optional  uint64  numRequestDedupedWatches  = 18;
    optional  uint64  numLongWatches  = 19;
    optional  float  numImpressionsWithDecay  = 20;
    optional  float  numRawWatchesWithDecay  = 21;
    optional  float  numRequestDedupedImpressionsWithDecay  = 22;
    optional  float  numRequestDedupedWatchesWithDecay  = 23;
    optional  float  impressionTotalTimeSecsWithDecay  = 24;
    optional  float  totalWatchTimeSecsWithDecay  = 25;
    optional  float  numQualifiedImpressionsWithDecay  = 26;
    optional  float  qualifiedImpressionTotalTimeSecsWithDecay  = 27;
    optional  float  numRequestDedupedQualifiedImpressionsWithDecay  = 28;
    optional  int32  selectionRank  = 29;
    optional  uint64  numBoosts  = 30;
    optional  uint64  numUnboosts  = 31;
    optional  uint64  numRequestDedupedBoosts  = 32;
    optional  uint64  numWatchesBelow1P5Secs  = 33;
    optional  uint64  numWatchesAbove20Secs  = 34;
    optional  uint64  numReports  = 35;
    optional  uint64  numDismisses  = 36;
    optional  uint64  numOpenProfiles  = 37;
    optional  uint64  numWatchesBelow3Secs  = 38;
}

message SCSUPEngagementStats_PublisherHidesStats {
    optional  uint32  totalHides  = 1;
    optional  uint32  totalUnhides  = 2;
    optional  int64  lastHideStateUpdateMsecs  = 3;
}

message SCSUPEventFeedContextFeatures {
    optional  int32  storyPosition  = 1;
    optional  uint32  feedType  = 2;
    optional  int32  sectionPosition  = 3;
}

message SCSUPEventStoryFeatures {
    optional  string  storyId  = 1;
    optional  fixed64  storyIdSaltedHash  = 2;
    optional  string  tileId  = 3;
    optional  fixed64  tileIdSaltedHash  = 4;
    optional  SCSUPStoryCompositionProperties  storyProperties  = 5;
    repeated  string  snapIdsArray  = 6;
    optional  string  creatorId  = 7;
    optional  fixed64  creatorIdSaltedHash  = 8;
    optional  ContentSignals  storyContentSignals  = 9;
    optional  int32  storyCorpus  = 10;
    optional  int32  storySubtype  = 11;
    optional  int64  storyVersion  = 12;
    optional  fixed64  storyBareIdSaltedHash  = 13;
    optional  ContentCluster  sccClusterIdV1  = 14;
    optional  string  id_p  = 15;
    repeated  Hashtag  hashtagsArray  = 16;
}

message SCSUPFavoriteAndUnfavoriteSessions {
    optional  string  pageSessionId  = 1;
    optional  fixed32  pageSessionIdSaltedHash  = 2;
    optional  uint32  sessionStartTimestamp  = 3;
    repeated  SCSUPFavoriteEvent  favoriteEventsArray  = 4;
    repeated  SCSUPUnfavoriteEvent  unfavoriteEventsArray  = 5;
}

message SCSUPFavoriteEvent {
    optional  SCSUPEventStoryFeatures  storyFeatures  = 1;
    optional  SCSUPEventFeedContextFeatures  contextFeatures  = 2;
    optional  uint32  timestamp  = 3;
    optional  int32  interactionContext  = 4;
}

message SCSUPFeedSpecificContentEngagement {
    optional  string  userId  = 1;
    optional  int32  feedType  = 2;
    repeated  SCSUPContentTypeScore  storyCorpusStatsArray  = 3;
    optional  SCSUPPublicUserEngagement  publicUserEngagement  = 4;
    optional  SCSUPPublisherEngagement  publisherEngagement  = 5;
    optional  SCSUPCommunityStoryUserEngagement  communityStoryEngagement  = 6;
    optional  int64  lastUpdatedTimestampInMsecs  = 7;
    optional  SCSUPLensEngagement  lensEngagement  = 8;
    optional  SCSUPSectionEngagement  sectionEngagement  = 9;
    optional  SCSUPBadgeEngagement  badgeEngagement  = 10;
}

message SCSUPFeedsImpressions {
    repeated  SCSUPImpressionStats  feedTypeImpressionStats  = 1;
    optional  int64  lastTimestampMsec  = 2;
    optional  string  userId  = 3;
    repeated  SCSUPImpressionStats  storyImpressionStats  = 4;
}

message SCSUPFriendFeature {
    optional  SCSUPFriendScore  storyScore  = 1;
    optional  SCSUPFriendStoryFeatures  features  = 2;
}

message SCSUPFriendFeatures {
    optional  string  userId  = 1;
    repeated  SCSUPFriendFeature  friends  = 2;
}

message SCSUPFriendFeedInteractionType {
}

message SCSUPFriendScore {
    optional  float  storyScore  = 1;
}

message SCSUPFriendScores {
    optional  string  userId  = 1;
    repeated  SCSUPFriendScore  friends  = 2;
}

message SCSUPFriendStoryFeatures {
    optional  int32  totalSnapsViewed1D  = 1;
    optional  int32  totalSnapsViewed7D  = 2;
    optional  int32  totalSnapsViewed14D  = 3;
    optional  int32  totalSnapsViewed28D  = 4;
    optional  int32  allStoriesViewed1D  = 5;
    optional  int32  allStoriesViewed7D  = 6;
    optional  int32  allStoriesViewed14D  = 7;
    optional  int32  allStoriesViewed28D  = 8;
    optional  int32  replays1D  = 9;
    optional  int32  replays7D  = 10;
    optional  int32  replays14D  = 11;
    optional  int32  replays28D  = 12;
    optional  float  avgTimeViewedPct1D  = 13;
    optional  float  avgTimeViewedPct7D  = 14;
    optional  float  avgTimeViewedPct14D  = 15;
    optional  float  avgTimeViewedPct28D  = 16;
    optional  float  avgSnapViewedPct1D  = 17;
    optional  float  avgSnapViewedPct7D  = 18;
    optional  float  avgSnapViewedPct14D  = 19;
    optional  float  avgSnapViewedPct28D  = 20;
    optional  float  weightedScrollToView1D  = 21;
    optional  float  weightedScrollToView7D  = 22;
    optional  float  weightedScrollToView14D  = 23;
    optional  float  weightedScrollToView28D  = 24;
    optional  float  ctr1D  = 25;
    optional  float  ctr7D  = 26;
    optional  float  ctr14D  = 27;
    optional  float  ctr28D  = 28;
    optional  int32  storySkips1D  = 29;
    optional  int32  storySkips7D  = 30;
    optional  int32  storySkips14D  = 31;
    optional  int32  storySkips28D  = 32;
    optional  int32  storyViews1D  = 33;
    optional  int32  storyViews7D  = 34;
    optional  int32  storyViews14D  = 35;
    optional  int32  storyViews28D  = 36;
    optional  int32  autoAdvanceSkips1D  = 37;
    optional  int32  autoAdvanceSkips7D  = 38;
    optional  int32  autoAdvanceSkips14D  = 39;
    optional  int32  autoAdvanceSkips28D  = 40;
    optional  float  avgSnapSkippedPct1D  = 41;
    optional  float  avgSnapSkippedPct7D  = 42;
    optional  float  avgSnapSkippedPct14D  = 43;
    optional  float  avgSnapSkippedPct28D  = 44;
    optional  int32  storyReplays1D  = 45;
    optional  int32  storyReplays7D  = 46;
    optional  int32  storyReplays14D  = 47;
    optional  int32  storyReplays28D  = 48;
}

message SCSUPGeographics {
    optional  string  userId  = 1;
    repeated  SCSUPTopLocation  homeLocationsArray  = 2;
    repeated  SCSUPTopLocation  workLocationsArray  = 3;
    repeated  SCSUPTopLocation  topPlacesArray  = 4;
    repeated  SCSUPPlaceCategoryScore  topPlaceCategoriesArray  = 5;
    repeated  SCSUPTopLocation  topLocationsArray  = 6;
}

message SCSUPGetFriendInteractionsHistoryRequest {
    optional  string  userId  = 1;
    optional  int64  startTimestamp  = 2;
    optional  int32  limit  = 3;
}

message SCSUPGetFriendInteractionsHistoryResponse {
    optional  string  userId  = 1;
    repeated  SCSUPGetFriendInteractionsHistoryResponse_InteractionInfo  interactionInfosArray  = 2;
    repeated  SCSUPGetFriendInteractionsHistoryResponse_PosterInfo  posterInfosArray  = 3;
    optional  int64  nextStartTimestamp  = 4;
}

message SCSUPGetFriendInteractionsHistoryResponse_InteractionInfo {
    optional  string  correspondentId  = 1;
    optional  int32  interactionType  = 2;
    optional  int32  mediaType  = 3;
    optional  int64  interactionTimestampSecs  = 4;
}

message SCSUPGetFriendInteractionsHistoryResponse_PosterInfo {
    optional  SCSCKFriendStoryPosterFeatures  posterFeatures  = 1;
    optional  int64  posterAggregationTimestampSecs  = 2;
}

message SCSUPGetSearchHistoryRequest {
    optional  string  userId  = 1;
}

message SCSUPGetSearchHistoryResponse {
    optional  string  userId  = 1;
    repeated  SCSUPGetSearchHistoryResponse_QueryInfo  queryInfosArray  = 2;
}

message SCSUPGetSearchHistoryResponse_QueryInfo {
    optional  string  searchQueryText  = 1;
    optional  string  s2CellId  = 2;
    optional  int64  queryTimeSecs  = 4;
}

message SCSUPGetSpotlightInteractionsHistoryRequest {
    optional  string  userId  = 1;
}

message SCSUPGetSpotlightInteractionsHistoryResponse {
    optional  string  userId  = 1;
    repeated  SCSUPGetSpotlightInteractionsHistoryResponse_ActionInfo  actionInfosArray  = 2;
}

message SCSUPGetSpotlightInteractionsHistoryResponse_ActionInfo {
    optional  string  storySnapURL  = 1;
    optional  int64  timestampSecs  = 2;
    optional  int32  type  = 3;
    optional  string  value  = 4;
}

message SCSUPHNNewsStoryKey {
    optional  SCCORECompositeStoryId  compositeStoryId  = 1;
}

message SCSUPHideActionType {
}

message SCSUPHideAndUnhideSessions {
    optional  string  pageSessionId  = 1;
    optional  fixed32  pageSessionIdSaltedHash  = 2;
    optional  uint32  sessionStartTimestamp  = 3;
    repeated  SCSUPHideEvent  hideEventsArray  = 4;
    repeated  SCSUPUnhideEvent  unhideEventsArray  = 5;
}

message SCSUPHideEvent {
    optional  SCSUPEventStoryFeatures  storyFeatures  = 1;
    optional  SCSUPEventFeedContextFeatures  contextFeatures  = 2;
    optional  uint32  timestamp  = 3;
    optional  int32  interactionContext  = 4;
    optional  int32  hideType  = 5;
}

message SCSUPHideStoryRequest {
    optional  string  userId  = 1;
    optional  SCSUPActionableStoryKey  storyKey  = 2;
    optional  int64  clientTsMsecs  = 3;
    optional  int32  toState  = 4;
    optional  int32  source  = 5;
    optional  int32  hideTarget  = 6;
}

message SCSUPHideStoryResponse {
}

message SCSUPImpressionEntry {
    optional  int64  numLongImpressions  = 1;
    optional  int64  endTimestampMsec  = 2;
    optional  float  impTimeSecs  = 3;
    optional  int64  startTimestampMsec  = 4;
}

message SCSUPImpressionEvent {
    optional  SCSUPEventStoryFeatures  storyFeatures  = 1;
    optional  SCSUPEventFeedContextFeatures  contextFeatures  = 2;
    optional  uint32  timestamp  = 3;
    optional  uint32  impressionTimeMsecs  = 4;
}

message SCSUPImpressionReceipt {
    optional  uint64  fingerPrint  = 1;
    optional  int64  firstImpressionMsec  = 2;
}

message SCSUPImpressionRecord {
    optional  SCCORECompositeStoryId  id_p  = 1;
    optional  int64  firstImpressionMsec  = 2;
    optional  int64  expTimestampMsec  = 3;
}

message SCSUPImpressionStats {
    repeated  SCSUPImpressionEntry  last7DaysRecordsArray  = 1;
    optional  int64  totalNumLongImps  = 2;
    optional  int64  numLongImpressionsLastWeek  = 3;
    optional  int64  lastTimestampMsec  = 4;
    optional  SCSUPImpressionEntry  aggregatedStats7Days  = 5;
}

message SCSUPInferredInterestCategoryType {
}

message SCSUPInterests {
    optional  string  userId  = 1;
    repeated  SCSUPScoredInterest  scoredInterestsArray  = 2;
    optional  int64  lastUpdatedTimestampInMsecs  = 3;
    repeated  SCSUPScoredInterest  interestTabCategoriesArray  = 4;
    repeated  SCSUPScoredInterestGroup  scoredInterestGroupsArray  = 5;
    repeated  SCSUPScoredInterest  scoredSccArray  = 6;
    repeated  SCSUPWindowedScoredScc  scoredPublisherScc  = 7;
    repeated  SCSUPWindowedScoredScc  scoredPublicUserTagScc  = 8;
    repeated  SCSUPWindowedEngagementStats  windowedSccPublisherStory  = 9;
    repeated  SCSUPWindowedEngagementStats  windowedSccPublicUserAccount  = 10;
    repeated  SCSUPWindowedEngagementStats  windowedSccPublisherStorySpotlight  = 11;
    repeated  SCSUPWindowedEngagementStats  windowedSccPublicUserAccountSpotlight  = 12;
    repeated  SCSUPWindowedEngagementStats  windowedSccSingleSnapStory  = 13;
    repeated  SCSUPWindowedEngagementStats  windowedCupSccSingleSnapStory  = 14;
    repeated  SCSUPWindowedEngagementStats  windowedYt8MSingleSnapStory  = 15;
    repeated  SCSUPWindowedEngagementStats  windowedCupSccV3SingleSnapStory  = 16;
    repeated  SCSUPWindowedEngagementStats  windowedCupSccPlusV1SingleSnapStory  = 17;
    repeated  SCSUPSuggestiveContentEngagement  suggestiveContentEngagementSingleSnapStoryArray  = 18;
    optional  string  userCohort  = 19;
    repeated  SCSUPSuggestiveContentEngagement  suggestiveContentEngagementPublicCreatorArray  = 20;
    repeated  SCSUPWindowedEngagementStats  windowedSensitiveOrSuggestivePublisherStory  = 21;
    repeated  SCSUPWindowedEngagementStats  windowedCupContentClusterV1SingleSnapStory  = 22;
    repeated  SCSUPWindowedEngagementStats  windowedCupSccPlusV1SingleSnapStoryRealtime  = 23;
    repeated  SCSUPWindowedEngagementStats  windowedCupContentClusterV1SingleSnapStoryRealtime  = 24;
}

message SCSUPLensEngagement {
    repeated  SCSUPLensEngagementStats  lensStats  = 1;
    optional  SCSUPLensEngagementStats  aggregatedLensStats  = 2;
}

message SCSUPLensEngagementStats {
    optional  SCSUPLensEngagementStats_ActionCounts  recentActions  = 1;
    optional  SCSUPLensEngagementStats_ActionCounts  olderActions  = 2;
}

message SCSUPLensEngagementStats_ActionCounts {
    optional  uint32  numSnapsSend  = 1;
    optional  uint32  numStoryPosts  = 2;
    optional  uint32  numSnapRecipients  = 3;
    optional  uint32  numSnapSaves  = 4;
    optional  uint32  numSnapViews  = 5;
    optional  uint32  numStoryViews  = 6;
    optional  uint32  snapViewInSecs  = 7;
    optional  uint32  storyViewInSecs  = 8;
    optional  uint32  numUnlocks  = 9;
    optional  uint32  numShares  = 10;
    optional  uint32  numScans  = 11;
}

message SCSUPLensObjectStoryKey {
    optional  int64  lensId  = 1;
    optional  string  creatorUuid  = 2;
}

message SCSUPLiveStreamingStoryKey {
    optional  SCCORECompositeStoryId  compositeStoryId  = 1;
}

message SCSUPMapStoryUserEngagement {
    optional  SCSUPEngagementStats  aggregatedFollowStats  = 1;
    optional  SCSUPEngagementStats  aggregatedNoFollowStats  = 2;
    repeated  SCSUPEngagementStats  mapStoryFpStats  = 3;
}

message SCSUPMapTileStoryKey {
    optional  string  storyId  = 1;
    optional  SCCORECompositeStoryId  compositeStoryId  = 2;
}

message SCSUPNormalizedStats {
    optional  float  numRequestDedupedWatches  = 1;
    optional  float  numWatchesAbove20Secs  = 2;
    optional  float  numRequestDedupedBoosts  = 3;
    optional  float  numSends  = 4;
    optional  float  numCompleteWatches  = 5;
    optional  float  numHides  = 6;
    optional  float  numDismisses  = 7;
    optional  float  totalWatchTimeSecs  = 8;
    optional  float  relativeNumRequestDedupedWatches  = 9;
    optional  float  relativeNumWatchesAbove20Secs  = 10;
    optional  float  relativeNumRequestDedupedBoosts  = 11;
    optional  float  relativeNumSends  = 12;
    optional  float  relativeNumCompleteWatches  = 13;
    optional  float  relativeNumHides  = 14;
    optional  float  relativeNumDismisses  = 15;
    optional  float  relativeTotalWatchTimeSecs  = 16;
    optional  float  computedPositiveAffinityV1  = 17;
    optional  float  computedPositiveAffinityV2  = 18;
    optional  float  computedNegativeAffinityV1  = 19;
    optional  float  computedNegativeAffinityV2  = 20;
}

message SCSUPNotification {
    optional  SCCORECompositeStoryId  compositeStoryId  = 1;
    optional  int64  notifiedTimestampInMsecs  = 2;
}

message SCSUPNotifications {
    optional  string  userId  = 1;
    repeated  SCSUPNotification  notificationsArray  = 2;
    optional  int64  lastUpdatedTimestampInMsecs  = 3;
}

message SCSUPOpenProfileEvent {
    optional  SCSUPEventStoryFeatures  storyFeatures  = 1;
    optional  SCSUPEventFeedContextFeatures  contextFeatures  = 2;
    optional  uint32  timestamp  = 3;
}

message SCSUPOpenProfileSessions {
    optional  string  pageSessionId  = 1;
    optional  fixed32  pageSessionIdSaltedHash  = 2;
    optional  uint32  sessionStartTimestamp  = 3;
    repeated  SCSUPOpenProfileEvent  openProfileEventsArray  = 4;
}

message SCSUPOurStoryKey {
    optional  string  storyId  = 1;
    optional  bool  isCampusStory  = 2;
    optional  SCCORECompositeStoryId  compositeStoryId  = 3;
}

message SCSUPPlaceCategoryScore {
    optional  int32  category  = 1;
    optional  float  score  = 2;
}

message SCSUPPremiumFeedEngagement {
    optional  SCSUPWindowedEngagementStats  windowedTotalPremiumFeedStats  = 1;
    optional  SCSUPWindowedEngagementStats  windowedHeroTileStats  = 2;
    optional  SCSUPWindowedEngagementStats  windowedMyShowsStats  = 3;
    optional  SCSUPWindowedEngagementStats  windowedKeepWatchingStats  = 4;
    optional  SCSUPWindowedEngagementStats  windowedMoreShowsStats  = 5;
    optional  SCSUPWindowedEngagementStats  windowedHappeningNowStats  = 6;
    optional  int32  selectionRank  = 7;
}

message SCSUPPublicUserEngagement {
    optional  SCSUPEngagementStats  aggregatedFollowStats  = 1;
    optional  SCSUPEngagementStats  aggregatedNoFollowStats  = 2;
    repeated  SCSUPEngagementStats  topPublicUserStats  = 3;
    repeated  SCSUPEngagementStats  topPublicUserFpStats  = 4;
    optional  SCSUPEngagementStats  aggregatedOfficialStats  = 5;
    optional  SCSUPEngagementStats  aggregatedNonOfficialStats  = 6;
    repeated  SCSUPWindowedEngagementStats  windowedTopPublicUserFpStats  = 7;
    repeated  SCSUPWindowedEngagementStats  windowedTopPublicUserSpotlightFeedStats  = 8;
    optional  SCSUPWindowedEngagementStats  aggregatedSpotlightFeedStats  = 9;
    repeated  SCSUPWindowedEngagementStats  windowedLanguageStats  = 10;
    repeated  SCSUPEngagementStats  topSavedStoryFpStats  = 11;
}

message SCSUPPublicUserStoryKey {
    optional  string  userId  = 1;
}

message SCSUPPublisherEngagement {
    repeated  SCSUPEngagementStats  publisherStats  = 1;
    optional  SCSUPEngagementStats  aggregatedShowsStats  = 2;
    optional  SCSUPEngagementStats  aggregatedExclusiveShowsStats  = 3;
    repeated  SCSUPWindowedEngagementStats  windowedPublisherStats  = 4;
    repeated  SCSUPPremiumFeedEngagement  windowedPremiumFeedStats  = 5;
    optional  SCSUPPremiumFeedEngagement  aggregatedPremiumFeedStats  = 6;
    repeated  SCSUPWindowedEngagementStats  windowedHnCategoryStats  = 7;
    repeated  SCSUPWindowedEngagementStats  windowedSpotlightFeedStats  = 8;
    optional  SCSUPWindowedEngagementStats  aggregatedSpotlightFeedStats  = 9;
    repeated  SCSUPWindowedEngagementStats  windowedLanguageStats  = 10;
}

message SCSUPPublisherStoryKey {
    optional  int64  publisherId  = 1;
    optional  int64  editionId  = 2;
    optional  string  publisherName  = 3;
}

message SCSUPReadReceipt {
    optional  bytes  readStories  = 1;
    optional  bytes  completeStories  = 2;
    optional  int64  lastUpdatedTimestampInMsecs  = 3;
    repeated  SCSUPImpressionReceipt  impressionReceiptsArray  = 4;
}

message SCSUPReadReceiptSignals {
    optional  string  userId  = 1;
    repeated  SCSUPReadRecord  readRecordsArray  = 2;
    optional  int64  lastUpdatedTimestampInMsecs  = 3;
    repeated  SCSUPImpressionRecord  impressionRecordsArray  = 4;
}

message SCSUPReadRecord {
    optional  SCCORECompositeStoryId  id_p  = 1;
    optional  uint32  maxReadPosition  = 2;
    optional  int64  timestampMsec  = 3;
    optional  int64  expTimestampMsec  = 4;
    optional  uint32  completionPercent  = 5;
}

message SCSUPRecentEvents {
    repeated  SCSUPWatchAndImpressionSessions  watchAndImpressionSessionsArray  = 1;
    repeated  SCSUPFavoriteAndUnfavoriteSessions  favoriteAndUnfavoriteSessionsArray  = 2;
    repeated  SCSUPHideAndUnhideSessions  hideAndUnhideSessionsArray  = 3;
    repeated  SCSUPSendSessions  sendSessionsArray  = 4;
    repeated  SCSUPBoostAndUnboostSessions  boostAndUnboostSessionsArray  = 5;
    repeated  SCSUPReportSessions  reportSessionsArray  = 6;
    repeated  SCSUPOpenProfileSessions  openProfileSessionsArray  = 7;
}

message SCSUPRecommendedPosters {
    optional  string  userId  = 1;
    repeated  SCSUPRecommendedPosters_Poster  postersArray  = 2;
    optional  string  version  = 3;
}

message SCSUPRecommendedPosters_OurStory {
    optional  SCCORECompositeStoryId  compositeStoryId  = 1;
}

message SCSUPRecommendedPosters_Poster {
    optional  SCSUPRecommendedPosters_PublicUserStory  publicUserStory  = 1;
    optional  SCSUPRecommendedPosters_PublisherStory  publisherStory  = 2;
    optional  SCSUPRecommendedPosters_OurStory  ourStory  = 3;
    optional  SCSUPRecommendedPosters_ScoringInfo  scoringInfo  = 4;
    repeated  SCSUPRecommendedPosters_ScoringInfo  allScoringInfoArray  = 5;
}

message SCSUPRecommendedPosters_PublicUserStory {
    optional  string  userId  = 1;
}

message SCSUPRecommendedPosters_PublisherStory {
    optional  int64  publisherId  = 1;
}

message SCSUPRecommendedPosters_ScoringInfo {
    optional  float  score  = 1;
    optional  int32  source  = 2;
    repeated  SCSUPRecommendedPosters_ScoringInfo_SourceScore  sourceScoresArray  = 3;
}

message SCSUPRecommendedPosters_ScoringInfo_SourceScore {
    optional  int32  source  = 1;
    optional  float  score  = 2;
    optional  int32  clusterSize  = 3;
    optional  int64  numWatchesInCluster  = 4;
    optional  int32  numWatchUsersInCluster  = 5;
    optional  int32  numNeighbors  = 6;
    optional  int32  totalNumWatchesFromNeighbors  = 7;
    optional  float  smoothedNumWatchesFromNeighbors  = 8;
    optional  int32  numNeighborsWithWatch  = 9;
}

message SCSUPRecommendedPosters_Source {
}

message SCSUPRecommendedUsers {
    optional  string  userId  = 1;
    repeated  SCSUPRecommendedUsers_User  recommendedUsersArray  = 2;
}

message SCSUPRecommendedUsers_User {
    optional  string  userId  = 1;
    optional  float  score  = 2;
    optional  bool  isOfficial  = 3;
    optional  int32  recommendationReason  = 4;
    repeated  SCSUPRecommendedUsers_User_ScoringInfo  scoringInfo  = 5;
    optional  int32  recReason  = 6;
}

message SCSUPRecommendedUsers_User_ScoringInfo {
    optional  float  score  = 1;
    optional  int32  recommendationReason  = 2;
    optional  int32  recReason  = 3;
}

message SCSUPRegisterInterestsRequest {
    optional  string  userId  = 1;
    repeated  SCSUPRegisterInterestsRequest_Request  requestsArray  = 2;
    optional  int64  requestTsMsecs  = 3;
}

message SCSUPRegisterInterestsRequest_Request {
    optional  int32  interestId  = 1;
    optional  int32  toState  = 2;
}

message SCSUPRegisterInterestsResponse {
}

message SCSUPRegisterState {
}

message SCSUPRegisteredInterest {
    optional  int32  registeredInterestsType  = 1;
    optional  string  displayName  = 2;
}

message SCSUPRegisteredInterestInfo {
    optional  int32  registeredInterest  = 1;
    optional  int32  state  = 2;
    optional  int64  updateTimestampMsecs  = 3;
    optional  int64  stateExpireTimestampMsecs  = 4;
    optional  string  displayName  = 5;
}

message SCSUPRegisteredInterestKey {
    optional  int32  interestId  = 1;
}

message SCSUPRegisteredInterestType {
}

message SCSUPRegisteredInterests {
    optional  string  userId  = 1;
    repeated  SCSUPRegisteredInterestInfo  registeredInterests  = 2;
}

message SCSUPReportActionType {
}

message SCSUPReportEvent {
    optional  SCSUPEventStoryFeatures  storyFeatures  = 1;
    optional  SCSUPEventFeedContextFeatures  contextFeatures  = 2;
    optional  uint32  timestamp  = 3;
    optional  int32  interactionContext  = 4;
    optional  int32  reportType  = 5;
}

message SCSUPReportSessions {
    optional  string  pageSessionId  = 1;
    optional  fixed32  pageSessionIdSaltedHash  = 2;
    optional  uint32  sessionStartTimestamp  = 3;
    repeated  SCSUPReportEvent  reportEventsArray  = 4;
}

message SCSUPSalientTermScore {
    optional  string  canonicalName  = 1;
    optional  float  score  = 2;
    optional  string  displayName  = 3;
    optional  uint32  id_p  = 4;
}

message SCSUPSalientTerms {
    optional  string  userId  = 1;
    repeated  SCSUPSalientTermScore  salientTermsArray  = 2;
    repeated  SCSUPSalientTermScore  negativeSalientTermsArray  = 3;
    optional  int64  lastUpdatedTimestampInMsecs  = 4;
}

message SCSUPScoredInterest {
    optional  string  name  = 1;
    optional  float  score  = 2;
    optional  float  normalizedScore  = 3;
    optional  float  normalizedScorePercentile  = 4;
    optional  int32  id_p  = 5;
    optional  int32  scc  = 6;
}

message SCSUPScoredInterestGroup {
    optional  int32  interestGroupType  = 1;
    optional  float  score  = 2;
    optional  float  normalizedScore  = 3;
    optional  float  normalizedScorePercentile  = 4;
}

message SCSUPScoredRegisteredInterest {
    optional  int32  registeredInterestsType  = 1;
    optional  float  score  = 2;
}

message SCSUPScoredScc {
    optional  uint32  longImpressions  = 1;
    optional  float  impressionTimeInSecs  = 2;
    optional  uint32  watches  = 3;
    optional  float  watchTimeInSecs  = 4;
    optional  float  watchTimePerLongImpression  = 5;
    optional  float  watchTimePerLongImpressionPercentile  = 6;
    optional  float  normalizedWatchTime  = 7;
    optional  float  normalizedWatchTimePercentile  = 8;
}

message SCSUPSectionEngagement {
    repeated  SCSQNSectionStats  sectionStats  = 1;
    optional  SCSUPSectionEngagement_EngagementScores  engagementScores  = 2;
    repeated  SCSUPWindowedEngagementStats  sectionWindowedEngagementStats  = 3;
}

message SCSUPSectionEngagement_EngagementScores {
    optional  float  totalEngagementScore  = 1;
    optional  float  totalEngagementScorePercentile  = 2;
    repeated  float  sectionContentRawScores  = 3;
    repeated  float  sectionContentNormalizedScores  = 4;
    repeated  float  sectionContentPercentileScores  = 5;
}

message SCSUPSendEvent {
    optional  SCSUPEventStoryFeatures  storyFeatures  = 1;
    optional  SCSUPEventFeedContextFeatures  contextFeatures  = 2;
    optional  uint32  timestamp  = 3;
    optional  int32  interactionContext  = 4;
}

message SCSUPSendSessions {
    optional  string  pageSessionId  = 1;
    optional  fixed32  pageSessionIdSaltedHash  = 2;
    optional  uint32  sessionStartTimestamp  = 3;
    repeated  SCSUPSendEvent  sendEventsArray  = 4;
}

message SCSUPSingleSnapStoryKey {
    optional  SCCORECompositeStoryId  compositeStoryId  = 1;
    optional  string  creatorId  = 2;
}

message SCSUPSpotlightFeedInteractionType {
}

message SCSUPSpotlightUserEmbedding {
    optional  string  modelName  = 1;
    optional  SCSCKEmbedding  embedding  = 2;
    optional  SCSUPEmbeddingMetadata  metadata  = 3;
}

message SCSUPStoryCompositionProperties {
    optional  uint32  totalNumSnaps  = 1;
    optional  uint32  numImageSnaps  = 2;
    optional  uint32  numVideoSnaps  = 3;
    optional  uint32  numInfiniteImageSnaps  = 4;
    optional  uint32  numLoopingVideoSnaps  = 5;
    optional  uint32  numAttachments  = 6;
    optional  uint32  durationMsecs  = 7;
}

message SCSUPStoryPreferenceSetting {
    optional  SCCORECompositeStoryId  itemId  = 1;
    optional  bool  isSubscribed  = 2;
    optional  bool  isHidden  = 3;
    optional  bool  isNotificationOptedIn  = 4;
    optional  bool  isNotificationOptInEligible  = 5;
}

message SCSUPStoryPreferenceSettings {
    repeated  SCSUPStoryPreferenceSetting  settingsArray  = 1;
}

message SCSUPSubscribeStoryRequest {
    optional  string  userId  = 1;
    optional  SCSUPActionableStoryKey  storyKey  = 2;
    optional  int64  clientTsMsecs  = 3;
    optional  int32  toState  = 4;
    optional  int32  source  = 5;
}

message SCSUPSubscribeStoryResponse {
}

message SCSUPSubscriptionDebugResponse {
    repeated  string  subscribedUsers  = 1;
    repeated  string  subscribedPublishers  = 2;
    repeated  string  subscribedStories  = 3;
    repeated  string  subscribedLives  = 4;
}

message SCSUPSubscriptionRequest {
    optional  string  userId  = 1;
}

message SCSUPSubscriptionResponse {
    repeated  string  subscribedUsersArray  = 1;
    repeated  string  hiddenUsersArray  = 2;
    repeated  int64  subscribedPublishersArray  = 3[packed=true];
    repeated  string  subscribedStoriesArray  = 5;
    repeated  string  hiddenStoriesArray  = 6;
    repeated  string  subscribedLivesArray  = 7;
    repeated  string  hiddenLivesArray  = 8;
    optional  bool  hasLiveSubscriptionState  = 9;
    repeated  int64  hiddenLensesArray  = 10[packed=true];
    repeated  int32  hiddenCategoriesArray  = 11[packed=true];
    repeated  string  hiddenLensCreatorsArray  = 12;
    repeated  string  subscribedLensCreatorsArray  = 13;
    repeated  int64  hiddenPublishersArray  = 14[packed=true];
}

message SCSUPSuggestiveContentEngagement {
    optional  int32  version  = 1;
    repeated  SCSUPWindowedEngagementStats  bucketWindowedEngagements  = 2;
}

message SCSUPThemeEntity {
    optional  string  canonicalName  = 1;
    repeated  int32  typesArray  = 2[packed=true];
}

message SCSUPThemeEntityType {
}

message SCSUPThemeStory {
    optional  string  canonicalName  = 1;
    optional  SCCORECompositeStoryId  storyId  = 2;
}

message SCSUPThemeTopic {
    optional  string  canonicalName  = 1;
}

message SCSUPTopLocation {
    optional  string  s2CellToken  = 1;
    optional  SCSCOREGeoPoint  geoPoint  = 2;
    optional  SCSCOREGeoAddress  geoAddress  = 3;
    optional  string  placeId  = 4;
    optional  string  placeName  = 5;
    optional  float  score  = 6;
}

message SCSUPUnboostEvent {
    optional  SCSUPEventStoryFeatures  storyFeatures  = 1;
    optional  SCSUPEventFeedContextFeatures  contextFeatures  = 2;
    optional  int32  timestamp  = 3;
    optional  int32  interactionContext  = 4;
}

message SCSUPUnfavoriteEvent {
    optional  SCSUPEventStoryFeatures  storyFeatures  = 1;
    optional  SCSUPEventFeedContextFeatures  contextFeatures  = 2;
    optional  uint32  timestamp  = 3;
    optional  int32  interactionContext  = 4;
}

message SCSUPUnhideEvent {
    optional  SCSUPEventStoryFeatures  storyFeatures  = 1;
    optional  SCSUPEventFeedContextFeatures  contextFeatures  = 2;
    optional  uint32  timestamp  = 3;
    optional  int32  interactionContext  = 4;
}

message SCSUPUpdateUserProfileRequest {
    optional  string  userId  = 1;
    optional  SCSUPUserUpdateProfileAction  userUpdateProfileAction  = 2;
}

message SCSUPUpdateUserProfileResponse {
}

message SCSUPUserClearProfileAction {
    repeated  int32  userProfileFieldsArray  = 1[packed=true];
    optional  int64  clientTimestampMsecs  = 2;
    optional  int64  serverTimestampMsecs  = 3;
}

message SCSUPUserEmbedding {
    repeated  SCSUPUserEmbedding_VersionedEmbeddings  versionedEmbeddingsArray  = 1;
}

message SCSUPUserEmbeddingVersion {
}

message SCSUPUserEmbedding_VersionedEmbeddings {
    optional  int32  version  = 1;
    optional  SCSCKEmbedding  embedding  = 2;
}

message SCSUPUserProfileBatchRequest {
    repeated  string  userIdsArray  = 1;
    repeated  int32  userProfileFieldsArray  = 2[packed=true];
    optional  int64  subscribedCap  = 3;
    repeated  SCSUPUserProfileRequest_FieldOverride  userProfileFieldOverridesArray  = 4;
    optional  string  locale  = 5;
    optional  bool  isClientSettingRequest  = 6;
    repeated  int32  localizeFieldsArray  = 7[packed=true];
    repeated  SCSUPUserProfileRequest_FieldRequest  fieldRequestsArray  = 8;
}

message SCSUPUserProfileBatchResponse {
    repeated  SCSUPUserProfileBatchResponse_BatchResponseItem  responseArray  = 1;
}

message SCSUPUserProfileBatchResponse_BatchResponseItem {
    optional  int32  statusCode  = 1;
    optional  string  userId  = 2;
    optional  SCSUPUserProfileResponse  userProfileResponse  = 3;
}

message SCSUPUserProfileDebugResponse {
    optional  string  debugHtml  = 8;
}

message SCSUPUserProfileRequest {
    optional  string  userId  = 1;
    repeated  int32  userProfileFieldsArray  = 2[packed=true];
    optional  int64  subscribedCap  = 3;
    repeated  SCSUPUserProfileRequest_FieldOverride  userProfileFieldOverridesArray  = 4;
    optional  string  locale  = 5;
    optional  bool  isClientSettingRequest  = 6;
    repeated  int32  localizeFieldsArray  = 7[packed=true];
    repeated  SCSUPUserProfileRequest_FieldRequest  fieldRequestsArray  = 8;
}

message SCSUPUserProfileRequest_FieldOverride {
    optional  int32  field  = 1;
    optional  string  dataSetOverride  = 2;
}

message SCSUPUserProfileRequest_FieldRequest {
    optional  int32  field  = 1;
    optional  GPBAny  fieldRequest  = 2;
}

message SCSUPUserProfileResponse {
    optional  SCSUPBasicAttributes  basicAttributes  = 1;
    optional  SCSUPGeographics  geographics  = 2;
    optional  SCSUPContentEngagement  contentEngagement  = 3;
    optional  SCSUPSalientTerms  salientTerms  = 4;
    optional  SCSUPRecommendedUsers  recommendedUsers  = 5;
    optional  SCSUPInterests  interests  = 6;
    optional  SCSUPFriendScores  friendScores  = 7;
    optional  Subscriptions  subscriptions  = 9;
    optional  SCSCKCentralKitchenUserData  centralKitchenUserData  = 10;
    optional  SCSUPReadReceipt  readReceipt  = 11;
    optional  SCSUPInterests  negativeInterests  = 12;
    optional  SCSUPNotifications  notifications  = 13;
    optional  SCSUPRecommendedPosters  recommendedPosters  = 14;
    optional  SCSNTFUserOptInNotifications  userOptInNotifications  = 15;
    optional  SCSUPDynamicChannelSet  dynamicChannelSet  = 16;
    optional  SCSUPRegisteredInterests  registeredInterests  = 17;
    optional  SCSUPFeedsImpressions  feedsImpressions  = 18;
    optional  UserEngagementFeatures  friendEngagement  = 19;
    optional  SCSUPABExperiments  abExperiments  = 20;
    optional  UserMetadataFeatures  friendMetadata  = 21;
    optional  SCSUPContentEngagement  intraDayContentEngagement  = 23;
    optional  SCSUPUserRecentEvents  recentEvents  = 24;
    optional  GPBAny  fakeAtlas  = 25;
    optional  UserEngagementFeatures  longWindowFriendEngagement  = 26;
    optional  DiscoverUserEmbedding  userEmbedding  = 27;
}

message SCSUPUserRecentEvents {
    optional  string  userId  = 1;
    optional  SCSUPRecentEvents  recentEvents  = 2;
}

message SCSUPUserSCCAffinity {
    repeated  SCSUPUserSCCAffinity_VersionedAffinities  versionedAffinitiesArray  = 1;
}

message SCSUPUserSCCAffinityFeatureType {
}

message SCSUPUserSCCAffinityFeatureValue {
    repeated  SCSUPUserSCCAffinityFeatureValue_Value  featureValuesArray  = 1;
}

message SCSUPUserSCCAffinityFeatureValue_Value {
    optional  int32  featureName  = 1;
    optional  float  value  = 2;
}

message SCSUPUserSCCAffinityPerAnnotation {
    repeated  SCSUPUserSCCAffinityFeatureValue  annotationFeatures  = 1;
    repeated  SCSUPNormalizedStats  normAnnotationFeatures  = 2;
}

message SCSUPUserSCCAffinityVersion {
}

message SCSUPUserSCCAffinity_VersionedAffinities {
    optional  int32  version  = 1;
    optional  SCSUPUserSCCAffinityPerAnnotation  affinities  = 2;
}

message SCSUPUserStoryLocales {
    optional  string  userId  = 1;
    repeated  float  topLocales  = 2;
}

message SCSUPUserUpdateProfileAction {
    optional  SCSUPUserClearProfileAction  userClearProfileAction  = 1;
}

message SCSUPWatchAndImpressionSessions {
    optional  string  pageSessionId  = 1;
    optional  fixed32  pageSessionIdSaltedHash  = 2;
    optional  uint32  sessionStartTimestamp  = 3;
    repeated  SCSUPWatchEvent  watchEventsArray  = 4;
    repeated  SCSUPImpressionEvent  impressionEventsArray  = 5;
}

message SCSUPWatchEvent {
    optional  SCSUPEventStoryFeatures  storyFeatures  = 1;
    optional  SCSUPEventFeedContextFeatures  contextFeatures  = 2;
    optional  uint32  timestamp  = 3;
    optional  uint32  watchTimeMsecs  = 4;
    optional  uint32  numUniqueSnapsWatched  = 5;
    optional  uint32  maxViewedSnapIndex  = 6;
    optional  SCSUPStoryCompositionProperties  watchedStoryProperties  = 7;
    optional  int32  entryIntent  = 8;
    optional  int32  exitIntent  = 9;
}

message SCSUPWindowedEngagementSignals {
    optional  uint32  numRequestDedupedImpressions  = 1;
    optional  float  impressionTotalTimeSecs  = 2;
    optional  uint32  numRequestDedupedWatches  = 3;
    optional  float  totalWatchTimeSecs  = 4;
    optional  uint32  numRawWatches  = 5;
    optional  uint32  numCompleteWatches  = 6;
    optional  uint32  numRequestDedupedBoosts  = 7;
    optional  uint64  numWatchesBelow1P5Secs  = 8;
    optional  uint64  numWatchesAbove20Secs  = 9;
    optional  float  normalizedWatchTimeSecs  = 10;
    optional  float  normalizedWatchTimeSecsPercentile  = 11;
    optional  uint32  numHides  = 12;
    optional  float  testOnlyField  = 13;
    optional  float  weightedImpressionTotalTimeSecs  = 15;
    optional  float  weightedNumRequestDedupedWatches  = 16;
    optional  float  weightedTotalWatchTimeSecs  = 17;
    optional  float  weightedNumRawWatches  = 18;
    optional  float  weightedNumCompleteWatches  = 19;
    optional  float  weightedNumHides  = 20;
    optional  float  weightedNumRequestDedupedBoosts  = 21;
    optional  float  weightedNumWatchesBelow1P5Secs  = 22;
    optional  float  weightedNumWatchesAbove20Secs  = 23;
    optional  float  weightedNormalizedWatchTimeSecs  = 24;
    optional  float  weightedNormalizedWatchTimeSecsPercentile  = 25;
    optional  float  weightedNumRequestDedupedImpressions  = 26;
    optional  float  weightedNumReports  = 27;
    optional  float  numDismisses  = 28;
    optional  uint32  numSends  = 29;
    optional  uint32  numOpenProfiles  = 30;
    optional  uint32  numFavorites  = 31;
    optional  uint64  numWatchesBelow3Secs  = 32;
}

message SCSUPWindowedEngagementStats {
    optional  SCSUPWindowedEngagementSignals  signalsSinceLastDay  = 1;
    optional  SCSUPWindowedEngagementSignals  signalsSinceLastThreeDays  = 2;
    optional  SCSUPWindowedEngagementSignals  signalsSinceLastWeek  = 3;
    optional  SCSUPWindowedEngagementSignals  signalsSinceLastTwoWeeks  = 4;
    optional  SCSUPWindowedEngagementSignals  signalsSinceLastFourWeeks  = 5;
    repeated  SCSUPWindowedEngagementSignals  dailyWindowedEngagementSignals  = 6;
    optional  int32  selectionRank  = 7;
    optional  SCSUPWindowedEngagementSignals  signalsSinceLastThreeMonths  = 8;
    optional  SCSUPWindowedEngagementSignals  signalsSinceLastFiveMinutes  = 9;
    optional  SCSUPWindowedEngagementSignals  signalsSinceLastTwentyMinutes  = 10;
    optional  SCSUPWindowedEngagementSignals  signalsSinceLastOneHour  = 11;
    optional  SCSUPWindowedEngagementSignals  signalsSinceLastTwoHours  = 12;
    optional  SCSUPWindowedEngagementSignals  signalsSinceLastFourHours  = 13;
    optional  SCSUPWindowedEngagementSignals  signalsSinceLastEightHours  = 14;
    optional  SCSUPWindowedEngagementSignals  signalsSinceLastSixteenHours  = 15;
}

message SCSUPWindowedMetrics {
    optional  float  valueSinceLastWeek  = 1;
    optional  float  valueSinceLastMonth  = 2;
    optional  float  valueSinceLastYear  = 3;
    optional  float  valueSinceCreation  = 4;
}

message SCSUPWindowedScoredScc {
    repeated  SCSUPScoredScc  dailySccEngagementSignals  = 1;
    optional  SCSUPScoredScc  scoredSccSinceFourWeeks  = 2;
}

message SCSagaPbUUID {
    optional  fixed64  highBits  = 1;
    optional  fixed64  lowBits  = 2;
}

message SCScheduleV3OptimizationConfig {
    optional  bool  batchEnabled  = 1;
    repeated  string  batchNamespacesArray  = 2;
    optional  bool  backgroundPrefetchEnabled  = 3;
}

message SCScreenshopFashionModel {
    optional  string  modelKey  = 1;
    optional  float  fashionThreshold  = 2;
}

message SCSelfie {
    optional  int32  selfie2DId  = 1;
    optional  int32  selfie3DId  = 2;
}

message SCShareDestinationsList {
    repeated  int32  shareDestinationsArray  = 1[packed=true];
}

message SCShoppingLensGlassesProperties {
    optional  SCShoppingLensGlbData  glbData  = 1;
    optional  Transforms  transforms  = 2;
}

message SCShoppingLensGlbData {
    optional  string  URL  = 1;
    optional  string  checksum  = 2;
    optional  bool  trueSize  = 3;
}

message SCShoppingLensMakeupProperties {
    optional  string  ifmURL  = 1;
}

message SCSnapAdsRenditionV3 {
    optional  int32  heightPx  = 1;
    optional  int32  widthPx  = 2;
    optional  string  URLPostfix  = 3;
    optional  int32  fileSizeBytes  = 4;
    optional  int32  renditionType  = 5;
    optional  bool  isFullURL  = 6;
}

message SCSnapBoltInfo {
    optional  bytes  mediaContentObject  = 1;
    optional  bytes  overlayContentObject  = 2;
    optional  bytes  rawContentObject  = 3;
    optional  bytes  zippedContentObject  = 4;
}

message SCSnapBoltMediaInfo {
    optional  int32  mediaType  = 1;
    optional  string  mediaURL  = 2;
    optional  string  mediaId  = 3;
    optional  string  mediaIv  = 4;
    optional  string  mediaKey  = 5;
    optional  bool  isZipped  = 6;
    optional  double  duration  = 7;
    optional  bool  isInfiniteDuration  = 8;
    optional  SCSnapBoltInfo  snapBoltInfo  = 9;
}

message SCSnapKitProtoAppContext {
}

message SCSnapKitProtoAppMeta {
    optional  string  appName  = 1;
    optional  string  packageName  = 2;
    optional  string  appStoreListingURL  = 3;
    optional  string  appIconURL  = 4;
}

message SCSnapKitProtoAppStoryMetadata {
    optional  string  appStoryDisplayName  = 1;
    optional  string  appStoryIconURL  = 2;
    optional  int32  appStoryTtlDays  = 3;
    optional  bool  appStoryTurnedOn  = 4;
}

message SCSnapKitProtoBatchConnectClientDetailsRequest {
    repeated  SCSnapKitProtoConnectClientDetailsRequest  requestsArray  = 1;
}

message SCSnapKitProtoBatchConnectClientDetailsResponse {
    repeated  SCSnapKitProtoConnectClientDetailsResponse  responsesArray  = 1;
}

message SCSnapKitProtoBeginGameInviteRequest {
}

message SCSnapKitProtoBeginGameInviteResponse {
    optional  SCSnapKitProtoUUID  inviteUuid  = 1;
}

message SCSnapKitProtoBeginProfileShareRequest {
    optional  string  gameUserName  = 1;
}

message SCSnapKitProtoBeginProfileShareResponse {
    optional  SCSnapKitProtoUUID  id_p  = 1;
}

message SCSnapKitProtoCheckUserConsentResponse {
    optional  bool  hasConsented  = 1;
    optional  GPBTimestamp  lastConsentedTimestamp  = 2;
}

message SCSnapKitProtoClientSideExperiment {
    optional  string  studyId  = 1;
    repeated  string  experimentSettings  = 2;
    optional  int32  experimentId  = 3;
}

message SCSnapKitProtoConnectClientDetailsRequest {
    optional  string  appId  = 1;
    optional  int32  oauthClientConfidentiality  = 2;
}

message SCSnapKitProtoConnectClientDetailsResponse {
    optional  string  appId  = 1;
    optional  SCSnapKitProtoOAuthClient  oauthClient  = 2;
    optional  string  appStoryDisplayName  = 3;
    optional  string  appStoryIconURL  = 4;
    optional  int32  appStoryTtlDays  = 5;
    optional  string  appName  = 6;
    optional  string  appIconURL  = 7;
    optional  string  androidAppPackageName  = 8;
    optional  string  redirectUri  = 9;
}

message SCSnapKitProtoConnectRequest {
    optional  string  oAuthClientId  = 1;
    repeated  string  featuresArray  = 2;
    optional  string  requestIdHash  = 3;
    optional  string  termsVersion  = 4;
}

message SCSnapKitProtoConnectResponse {
    repeated  SCSnapKitProtoConnection  connectionsArray  = 1;
    optional  string  verificationId  = 2;
}

message SCSnapKitProtoConnectedAppFeatureToggleRequest {
    optional  string  applicationId  = 1;
    optional  int32  feature  = 2;
    optional  int32  featureOn  = 3;
}

message SCSnapKitProtoConnection {
    optional  string  applicationId  = 1;
    optional  SCSnapKitProtoAppStoryMetadata  appStoryMetadata  = 2;
    optional  string  applicationName  = 3;
    optional  string  applicationIconURL  = 4;
    repeated  SCSnapKitProtoScope  scopesApprovedArray  = 5;
    optional  GPBTimestamp  connectionTimestamp  = 6;
    optional  int32  appContext  = 7;
    repeated  SCSnapKitProtoKitFeatureItem  featureMap  = 8;
    optional  string  namespaceId  = 9;
    optional  bool  isConnected  = 10;
    optional  bool  hasPrivateStorageData  = 11;
    optional  bool  isFirstPartyApp  = 12;
}

message SCSnapKitProtoConnectionStatesResponse {
    repeated  SCSnapKitProtoConnection  connectionsArray  = 1;
    optional  SCSnapKitProtoExperiments  experiments  = 2;
}

message SCSnapKitProtoCreativeKitAttachmentViewRequest {
    optional  string  snapKitApplicationId  = 1;
    optional  bool  hasJustConsented  = 2;
}

message SCSnapKitProtoCreativeKitAttachmentViewResponse {
    optional  string  referenceId  = 1;
    optional  string  abbreviatedDisplayName  = 2;
    optional  string  bitmojiAvatarURL  = 3;
}

message SCSnapKitProtoCreativeKitValidateRequest {
    optional  string  oauthClientId  = 1;
    optional  string  appIdentifier  = 2;
    optional  string  androidAppSignature  = 3;
    optional  string  eid  = 4;
}

message SCSnapKitProtoCreativeKitValidateResponse {
    repeated  SCSnapKitProtoKitFeatureItem  featureMap  = 1;
    optional  SCSnapKitProtoEncryptionMetadata  encryptionMetadata  = 2;
}

message SCSnapKitProtoCreativeKitWebShareMetadata {
    optional  string  pageTitle  = 1;
    optional  string  iconURL  = 2;
    optional  string  publisherId  = 3;
    optional  string  snapcodeURL  = 4;
    optional  string  stickerURL  = 5;
    optional  string  attributionName  = 6;
    optional  string  appId  = 7;
    optional  string  thumbnailURL  = 8;
    optional  bool  suppressSticker  = 9;
}

message SCSnapKitProtoCreativeToolsRestrictions {
    optional  bool  hideMusicTool  = 1;
    optional  bool  hideDrawingTool  = 2;
    optional  bool  disallowAddingCaptionText  = 3;
    optional  bool  hideStickersTool  = 4;
    optional  bool  hideScissorsTool  = 5;
    optional  bool  hideAttachmentTool  = 6;
}

message SCSnapKitProtoDisconnectRequest {
    optional  string  applicationId  = 1;
    optional  bool  requestedDataDeletion  = 3;
}

message SCSnapKitProtoEncryptionMetadata {
    optional  string  id_p  = 1;
    optional  string  wek  = 2;
    optional  string  wiv  = 3;
}

message SCSnapKitProtoErrorResponse {
    optional  int32  errorType  = 1;
}

message SCSnapKitProtoErrorType {
}

message SCSnapKitProtoExperiments {
    repeated  SCSnapKitProtoClientSideExperiment  clientSideExperimentsArray  = 1;
}

message SCSnapKitProtoFetchAppMetaRequest {
    optional  string  oauthClientId  = 1;
}

message SCSnapKitProtoFetchAppMetaResponse {
    optional  SCSnapKitProtoAppMeta  data_p  = 1;
}

message SCSnapKitProtoKitFeatureItem {
    optional  string  metadataKey  = 1;
    optional  bool  toggleable  = 2;
    optional  string  featureIcon  = 3;
}

message SCSnapKitProtoKitType {
}

message SCSnapKitProtoLoginValidateRequest {
    optional  string  oauthClientId  = 1;
    repeated  string  featuresArray  = 2;
    optional  string  appIdentifier  = 3;
    optional  bool  isWebLogin  = 4;
}

message SCSnapKitProtoLoginValidateResponse {
    repeated  SCSnapKitProtoKitFeatureItem  featureMap  = 1;
    optional  bool  consentRequired  = 2;
    optional  bool  isFirstParty  = 3;
}

message SCSnapKitProtoOAuthClient {
    optional  string  id_p  = 1;
    optional  int32  confidentiality  = 2;
    repeated  string  approvedScopesArray  = 3;
}

message SCSnapKitProtoOAuthRequestParams {
    optional  string  clientId  = 1;
    optional  string  state  = 2;
    optional  string  codeVerifier  = 3;
}

message SCSnapKitProtoOsType {
}

message SCSnapKitProtoPhoneNumberFetchRequest {
    optional  string  phoneNumberIdHash  = 1;
    optional  string  oauthClientId  = 2;
    optional  string  redirectUri  = 3;
}

message SCSnapKitProtoPhoneNumberFetchResponse {
    optional  string  phoneNumberE164  = 1;
    optional  string  phoneNumberFormatted  = 2;
    optional  string  region  = 3;
    optional  string  applicationIcon  = 4;
    optional  string  applicationName  = 5;
    optional  int32  verifyStatus  = 6;
}

message SCSnapKitProtoPhoneNumberVerifyRequest {
    optional  string  phoneNumberIdHash  = 1;
    optional  bool  userAgreedToVerify  = 2;
}

message SCSnapKitProtoPhoneNumberVerifyResponse {
    optional  string  phoneNumberVerifyId  = 1;
    optional  bool  verified  = 2;
}

message SCSnapKitProtoProfileRequest {
    optional  SCSnapKitProtoUUID  inviteUuid  = 1;
}

message SCSnapKitProtoProfileResponse {
    optional  string  externalUserId  = 1;
}

message SCSnapKitProtoRotationRequest {
    optional  string  applicationId  = 1;
}

message SCSnapKitProtoScope {
    optional  string  name  = 1;
    optional  bool  toggleable  = 2;
    repeated  string  descriptionsArray  = 3;
    optional  string  iconURL  = 4;
}

message SCSnapKitProtoStage {
}

message SCSnapKitProtoTypes {
}

message SCSnapKitProtoUUID {
    optional  fixed64  highBits  = 1;
    optional  fixed64  lowBits  = 2;
}

message SCSnapKitProtoUpdateRequest {
    optional  string  applicationId  = 1;
    repeated  string  scopeNamesArray  = 2;
    repeated  string  featuresArray  = 3;
}

message SCSnapKitProtoUpdateResponse {
    optional  SCSnapKitProtoConnection  connection  = 1;
}

message SCSnapKitProtoUserProfileRequest {
    optional  string  profileDeeplinkURL  = 1;
}

message SCSnapKitProtoUserProfileResponse {
    optional  string  businessProfileId  = 1;
}

message SCSnapKitProtoValidateInviteRequest {
    optional  SCSnapKitProtoUUID  inviteUuid  = 1;
    optional  string  inviteUri  = 2;
}

message SCSnapKitProtoValidateInviteResponse {
    optional  SCSnapKitProtoAppMeta  data_p  = 1;
}

message SCSnapKitProtoValidateProfileRequest {
    optional  SCSnapKitProtoUUID  id_p  = 1;
    optional  string  shareUri  = 2;
}

message SCSnapKitProtoValidateProfileResponse {
    optional  SCSnapKitProtoAppMeta  data_p  = 1;
    optional  string  gameUserName  = 5;
}

message SCSnapcodePayloadAdCreativePreview {
    optional  int32  type  = 1;
    optional  string  entityId  = 2;
    optional  int64  createdTimestampMs  = 3;
    optional  bool  isActionExpirable  = 4;
    optional  int64  ttlMs  = 5;
}

message SCSnapcodePayloadCommerceProduct {
    optional  string  productId  = 1;
}

message SCSnapcodePayloadConnectedLens {
    optional  string  URL  = 1;
}

message SCSnapcodePayloadDeepLink {
    optional  string  URL  = 1;
}

message SCSnapcodePayloadDiscover {
    optional  string  header  = 1;
    optional  string  byline  = 2;
    optional  string  iconURL  = 3;
    optional  string  deepLinkURL  = 4;
}

message SCSnapcodePayloadGame {
    optional  string  title  = 1;
    optional  string  appId  = 2;
    optional  string  iconURL  = 3;
    optional  string  buildId  = 4;
    optional  string  orgId  = 5;
    optional  string  payload  = 6;
    optional  int32  appType  = 7;
    optional  string  path  = 8;
}

message SCSnapcodePayloadMessage {
    optional  string  message  = 1;
}

message SCSnapcodePayloadPairLensStudio {
    optional  bytes  lensStudioUuidPayload  = 1;
}

message SCSnapcodePayloadScanToAuth {
    optional  string  clientId  = 1;
    optional  string  state  = 2;
    optional  string  codeChallenge  = 3;
    repeated  string  scopesArray  = 4;
    optional  string  redirectURL  = 5;
}

message SCSnapcodePayloadSnapKitDeepLink {
    optional  string  URL  = 1;
}

message SCSnapcodePayloadSponsoredLensPreview {
    optional  string  lensId  = 1;
    optional  string  creativeId  = 2;
    optional  bytes  legacySojuUnlockablePayload  = 3;
}

message SCSnapcodePayloadURL {
    optional  string  URL  = 1;
}

message SCSnapcodePayloadUnlockableLens {
    optional  string  lensId  = 1;
    optional  bytes  legacySojuUnlockablePayload  = 2;
}

message SCSnapcodePayloadUserProfile {
    optional  string  userId  = 1;
}

message SCSnapcodeSnapcode {
    optional  uint32  version  = 1;
    optional  string  decodeMessageUuid  = 2;
}

message SCSnapshotsPbDeleteSnapshotRequest {
    optional  SCCOREUUID  snapshotsSnapIdentifier  = 1;
}

message SCSnapshotsPbDeleteSnapshotResponse {
}

message SCSnapshotsPbModerationDeleteSnapshotRequest {
    optional  SCCOREUUID  userId  = 1;
    optional  string  boltURL  = 2;
    optional  SCCOREUUID  snapshotSnapId  = 3;
}

message SCSnapshotsPbModerationDeleteSnapshotResponse {
    optional  int32  status  = 1;
}

message SCSnapshotsPbSetSnapshotRequest {
    optional  bytes  serializedSnapshotsSnaps  = 1;
}

message SCSnapshotsPbSetSnapshotResponse {
}

message SCSnapshotsPbSnap {
    optional  SCCOREUUID  identifier  = 1;
    optional  SDMSnapDoc  snapDoc  = 2;
    optional  SDMSnapDoc  thumbnailSnapDoc  = 3;
}

message SCSnapshotsPbSnaps {
    repeated  SCSnapshotsPbSnap  snapsArray  = 1;
}

message SCSnapshotsPbSnapshotsOnboardingSetting {
    optional  bool  openDialogImpressed  = 1;
    optional  int32  inlinePromptImpressionCount  = 2;
    optional  int64  inlinePromptLastImpressedAtEpoch  = 3;
    optional  int32  tooltipImpressionCount  = 4;
    optional  int64  tooltipLastImpressedAtEpoch  = 5;
    optional  bool  userHasUploadedSnapshot  = 6;
}

message SCSpectaclesOtaPbAppVersion {
    optional  string  binaryName  = 1;
    optional  string  packageName  = 2;
    optional  string  branchName  = 3;
    optional  string  packageVersion  = 4;
    optional  int32  buildFlavor  = 5;
    optional  int32  binaryType  = 6;
    optional  string  downloadURL  = 7;
    optional  string  commitSha  = 8;
    optional  string  createdDateTime  = 9;
    optional  string  lastUpdatedDateTime  = 10;
}

message SCSpectaclesOtaPbCreateVersionSetRequest {
    optional  string  productGeneration  = 1;
    optional  string  versionSetName  = 2;
    optional  string  versionSetType  = 3;
}

message SCSpectaclesOtaPbDeleteOsVersionRequest {
    optional  string  productGeneration  = 1;
    optional  string  versionSetName  = 2;
    optional  string  releaseVersion  = 3;
    optional  string  patchVersion  = 4;
    optional  string  buildFlavor  = 5;
}

message SCSpectaclesOtaPbDifferentialMapEntry {
    optional  SCSpectaclesOtaPbOsVersion  destOsVersion  = 1;
    repeated  SCSpectaclesOtaPbOsVersion  srcOsVersionArray  = 2;
}

message SCSpectaclesOtaPbEmpty {
}

message SCSpectaclesOtaPbGetOsTargetFilesPackagesRequest {
    optional  SCSpectaclesOtaPbVersionSet  destVersionSet  = 1;
    optional  SCSpectaclesOtaPbVersionSet  srcVersionSet  = 2;
}

message SCSpectaclesOtaPbGetOsTargetFilesPackagesResponse {
    optional  SCSpectaclesOtaPbOsVersion  destOsVersion  = 1;
    repeated  SCSpectaclesOtaPbOsVersion  srcOsVersionsArray  = 2;
}

message SCSpectaclesOtaPbGetVersionSetRequest {
    optional  string  productGeneration  = 1;
    optional  string  versionSetName  = 2;
    optional  string  currentOsVersion  = 3;
    optional  string  currentFullOsVersion  = 4;
    optional  string  buildFlavor  = 5;
    optional  bool  requireFullOta  = 6;
}

message SCSpectaclesOtaPbGetVersionSetResponse {
    optional  string  targetOsversion  = 1;
    optional  string  updateType  = 2;
    optional  string  binaryName  = 3;
    optional  string  downloadURL  = 4;
    optional  string  metadataName  = 5;
    optional  string  metadataURL  = 6;
    optional  string  createdDateTime  = 7;
    optional  string  lastUpdatedDateTime  = 8;
}

message SCSpectaclesOtaPbListDifferentialBuildRequest {
    optional  string  productGeneration  = 1;
    optional  string  versionSetName  = 2;
    optional  string  buildFlavor  = 3;
}

message SCSpectaclesOtaPbListDifferentialBuildResponse {
    repeated  SCSpectaclesOtaPbDifferentialMapEntry  diffMapEntryArray  = 1;
}

message SCSpectaclesOtaPbListOsVersionRequest {
    optional  string  productGeneration  = 1;
    optional  string  versionSetName  = 2;
}

message SCSpectaclesOtaPbListOsVersionResponse {
    optional  SCSpectaclesOtaPbOsVersion  latestOsVersion  = 1;
    repeated  SCSpectaclesOtaPbOsVersion  osVersionArray  = 2;
}

message SCSpectaclesOtaPbListVersionSetRequest {
    optional  string  productGeneration  = 1;
}

message SCSpectaclesOtaPbListVersionSetResponse {
    optional  string  productGeneration  = 1;
    optional  string  versionSetName  = 2;
    optional  string  buildFlavor  = 3;
    optional  string  branch  = 4;
}

message SCSpectaclesOtaPbOsVersion {
    optional  string  branchName  = 1;
    optional  string  buildFlavor  = 2;
    optional  string  releaseVersion  = 3;
    optional  string  patchVersion  = 4;
    optional  string  commitSha  = 5;
    optional  string  binaryName  = 6;
    optional  string  downloadURL  = 7;
    optional  string  metadataName  = 8;
    optional  string  metadataURL  = 9;
    optional  bool  isGatewayBuild  = 10;
    optional  string  createdDateTime  = 11;
    optional  string  lastUpdatedDateTime  = 12;
    optional  string  osTargetFilesPackages  = 13;
    optional  string  osTargetFilesPackagesURL  = 14;
    optional  string  fullFlashBuildDownloadURL  = 15;
}

message SCSpectaclesOtaPbPromoteOsVersionRequest {
    optional  string  productGeneration  = 1;
    optional  string  srcVersionSetName  = 2;
    optional  string  destVersionSetName  = 3;
    optional  string  releaseVersion  = 4;
    optional  string  patchVersion  = 5;
    optional  string  buildFlavor  = 6;
}

message SCSpectaclesOtaPbPublishDifferentialBuildRequest {
    optional  SCSpectaclesOtaPbVersionSet  destVersionSet  = 1;
    optional  SCSpectaclesOtaPbVersionSet  srcVersionSet  = 2;
    optional  string  osDiffBuildName  = 3;
    optional  string  osDiffBuildURL  = 4;
    optional  string  osDiffMetadataName  = 5;
    optional  string  osDiffMetadataURL  = 6;
}

message SCSpectaclesOtaPbPublishVersionSetRequest {
    optional  SCSpectaclesOtaPbVersionSet  versionSet  = 1;
    optional  int32  publishType  = 2;
}

message SCSpectaclesOtaPbSetLatestOsVersionRequest {
    optional  string  productGeneration  = 1;
    optional  string  versionSetName  = 2;
    optional  string  releaseVersion  = 3;
    optional  string  patchVersion  = 4;
    optional  string  buildFlavor  = 5;
}

message SCSpectaclesOtaPbUpdateVersionSetRequest {
    optional  string  productGeneration  = 1;
    optional  string  versionSetName  = 2;
    optional  string  branch  = 3;
    optional  string  buildFlavor  = 4;
    optional  string  releaseVersion  = 5;
    optional  string  patchVersion  = 6;
    optional  string  commitSha  = 7;
    optional  string  binaryName  = 8;
    optional  string  downloadURL  = 9;
    optional  string  metadataName  = 10;
    optional  string  metadataURL  = 11;
    optional  bool  isGatewayBuild  = 12;
}

message SCSpectaclesOtaPbVersionSet {
    optional  string  productGeneration  = 1;
    optional  string  versionSetName  = 2;
    optional  SCSpectaclesOtaPbOsVersion  osVersion  = 3;
    repeated  SCSpectaclesOtaPbAppVersion  appVersionArray  = 4;
    optional  string  createdDateTime  = 5;
    optional  string  lastUpdatedDateTime  = 6;
    optional  string  versionSetType  = 7;
}

message SCSpotlightOpsFeedLoggingConfig {
    optional  bool  enableProfileStory  = 1;
    optional  bool  enableProfileTopic  = 2;
    optional  bool  enableChat  = 3;
    optional  bool  enableDeeplink  = 4;
    optional  bool  enableMiniProfile  = 5;
    optional  bool  enableMyStory  = 6;
    optional  bool  enableTrendingPage  = 7;
}

message SCSpotlightSoundToggleConfig {
    optional  int32  soundToggleButton  = 1;
    optional  bool  showUnmuteSoundNotification  = 2;
}

message SCStoryElement {
    optional  string  id_p  = 1;
    optional  int32  version  = 2;
    optional  int32  contentType  = 3;
    optional  int64  sunriseTimestamp  = 4;
    optional  int64  sunsetTimestamp  = 5;
    optional  SCStoryElement_SnapInfo  snapInfo  = 6;
    optional  SCStoryElement_WebMediaInfo  webMediaInfo  = 7;
    optional  SCStoryElement_HtmlInfo  htmlInfo  = 8;
    optional  double  duration  = 10;
    optional  int64  timestamp  = 11;
    optional  string  sssId  = 12;
    optional  int64  captureTimestamp  = 13;
    optional  string  bundleId  = 31;
    optional  SDMCameoMetadata  cameo  = 32;
    optional  SCCameosCameoTile  cameoTile  = 33;
    optional  bool  isImportantRanking  = 34;
    optional  bool  loop  = 40;
    optional  SCAttributionInfo  attributionInfo  = 41;
    optional  string  previewURL  = 42;
    optional  bool  isDeletable  = 43;
    optional  bool  isSaveable  = 44;
    optional  bool  isReportable  = 45;
    optional  bool  needsModeration  = 46;
    optional  int32  deleteAction  = 47;
    optional  bool  blockSharing  = 48;
    optional  SCStoryElement_ThumbnailInfo  thumbnailInfo  = 49;
    optional  bool  isBoosted  = 50;
    optional  int32  minimumDurationMs  = 100;
    optional  SCUserAction  tapAction  = 101;
    optional  SCUserAction  swipeUpAction  = 102;
    optional  SCUserAction  swipeLeftAction  = 103;
    optional  SCUserAction  pressAndHoldAction  = 104;
    optional  SCUserAction  swipeRightAction  = 105;
    optional  SCUserAction  swipeDownAction  = 106;
    optional  bool  shouldPrefetch  = 200;
    optional  int32  prefetchTtlMs  = 201;
    optional  SCAdInfo  adInfo  = 300;
    optional  SCStoryElementMetrics  metrics  = 400;
    optional  SCStoryElementDebug  debugInfo  = 500;
}

message SCStoryElementDebug {
    repeated  string  attributes  = 1;
}

message SCStoryElementMetrics {
    optional  int64  lastUpdateTimestampMs  = 1;
    optional  int32  viewCount  = 2;
    optional  int32  screenshotCount  = 3;
    optional  GPBInt32Value  reach  = 4;
    optional  GPBInt32Value  screenshots  = 5;
    optional  GPBInt32Value  storyReplies  = 6;
    optional  GPBInt32Value  uniqueViewersSubscribers  = 7;
    optional  GPBInt32Value  uniqueViewersNonSubscribers  = 8;
    optional  GPBInt32Value  snapViews  = 9;
    optional  GPBInt32Value  swipeUps  = 10;
    optional  GPBInt32Value  tapForward  = 11;
    optional  GPBInt32Value  tapBackward  = 12;
    optional  GPBInt32Value  swipeAways  = 13;
    optional  GPBInt32Value  boosts  = 14;
    optional  GPBInt32Value  shares  = 15;
    optional  GPBInt32Value  subscribes  = 16;
    optional  int32  views  = 17;
    optional  string  additionalDetailsURL  = 100;
    optional  SGTILink  additionalDetailsLink  = 101;
}

message SCStoryElement_HtmlInfo {
    optional  string  html  = 1;
}

message SCStoryElement_SnapInfo {
    optional  string  snapMediaId  = 1;
    optional  int32  snapMediaType  = 2;
    optional  string  creatorId  = 3;
    optional  string  mediaKey  = 4;
    optional  string  mediaIv  = 5;
    optional  string  mediaURL  = 6;
    optional  bool  isZipped  = 7;
    optional  string  deprecatedTitle  = 8;
    repeated  SCMapsAddress  localizedAddresses  = 9;
    repeated  SCStoryElement_SnapInfo_TitleForZoom  titlesForMaxZoomArray  = 10;
    optional  SCLocalizedStringSet  title  = 11;
    optional  string  venueId  = 12;
    optional  SASAudioStitch  audioStitch  = 13;
    optional  SCLocalizedStringSet  localitySubtitle  = 14;
    optional  SCMTStreamingMediaInfo  streamingMediaInfo  = 15;
    optional  bool  suppressContext  = 16;
    optional  SCContextContextHint  contextHint  = 17;
    optional  SCMTOneSnapInfo  streamingSnapInfo  = 18;
    optional  string  attachmentURL  = 19;
    optional  SCMTPublicMediaInfo  publicMediaInfo  = 20;
    optional  string  overlayText  = 21;
    optional  string  unlockablesSnapInfo  = 22;
    optional  int32  source  = 23;
    optional  SCMTThumbnailInfo  streamingThumbnailInfo  = 24;
    optional  bool  hasLensMetadata  = 25;
    optional  int32  dynamicSnapSource  = 26;
    optional  bytes  boltContentObject  = 27;
    optional  string  decryptedBurntInContentURL  = 28;
    optional  SCMapsAddressIds  addressIds  = 29;
    optional  SCSnapBoltMediaInfo  snapBoltMediaInfo  = 30;
    optional  SDMSponsor  sponsor  = 31;
    optional  string  sourceContentURL  = 32;
}

message SCStoryElement_SnapInfo_TitleForZoom {
    optional  double  maxZoom  = 1;
    optional  string  title  = 2;
}

message SCStoryElement_ThumbnailInfo {
    optional  string  thumbnailURL  = 1;
    optional  string  thumbnailIv  = 2;
    optional  string  mediaKey  = 3;
    optional  string  mediaId  = 4;
    optional  bytes  thumbnailContentObject  = 5;
    optional  string  thumbnailCoKey  = 6;
    optional  string  thumbnailCoIv  = 7;
}

message SCStoryElement_WebMediaInfo {
    optional  string  contentURL  = 1;
    optional  int32  durationMs  = 2;
}

message SCStoryGeofencedGroupStoryExtraData {
    optional  SCStoryLocation  center  = 1;
    optional  double  radius  = 2;
    optional  int32  privacyType  = 3;
}

message SCStoryGroupStory {
    optional  SCCOREUUID  storyId  = 1;
    optional  string  displayName  = 2;
    optional  string  subtext  = 3;
    optional  int64  lastPostedTimestamp  = 4;
    optional  int64  createdAtMs  = 5;
    optional  SCCOREUUID  creatorUserId  = 6;
    optional  SCStoryGeofencedGroupStoryExtraData  geostoryExtra  = 7;
    optional  bool  isExpired  = 8;
    optional  int32  type  = 9;
    optional  int32  rankType  = 10;
}

message SCStoryLocation {
    optional  double  lat  = 1;
    optional  double  lng  = 2;
}

message SCStoryManifest {
    optional  string  id_p  = 1;
    optional  string  version  = 2;
    optional  string  displayName  = 3;
    optional  string  unviewedThumbnailURL  = 4;
    optional  string  viewedThumbnailURL  = 5;
    repeated  string  tileUrlsArray  = 6;
    optional  int64  sunriseTimestamp  = 7;
    optional  int64  sunsetTimestamp  = 8;
    optional  double  totalDuration  = 9;
    optional  int32  totalCount  = 10;
    optional  SCLocalizedStringSet  title  = 11;
    repeated  SCStoryElement  elementsArray  = 100;
    optional  SCUserAction  defaultPressAndHoldAction  = 200;
    repeated  SCStoryElement  ineligibleResultsArray  = 300;
}

message SCSubscriptionPbPlusStorefrontCountryConfig {
    repeated  string  allowlistArray  = 1;
    repeated  string  denylistArray  = 2;
}

message SCSubscriptionShopPbAppleProductInfo {
    optional  string  productId  = 1;
    optional  string  storefrontCountryCode  = 2;
    optional  int64  priceAmountMicros  = 3;
    optional  string  priceCurrencyCode  = 4;
    optional  SCSubscriptionShopPbAppleProductInfo_SubscriptionPeriod  period  = 5;
    optional  SCSubscriptionShopPbAppleProductInfo_SubscriptionPeriod  freeTrialPeriod  = 6;
}

message SCSubscriptionShopPbAppleProductInfo_SubscriptionPeriod {
    optional  int32  numberOfUnits  = 1;
    optional  int32  unit  = 2;
}

message SCSubscriptionShopPbApplePromotionalOffer {
    optional  string  offerId  = 1;
    optional  string  keyId  = 2;
    optional  string  signature  = 3;
    optional  string  nonce  = 4;
    optional  int64  timestampMillis  = 5;
}

message SCSubscriptionShopPbAppleSubscriptionPlan {
    optional  string  productId  = 1;
    optional  bool  requiresEmail  = 2;
    optional  SCSubscriptionShopPbApplePromotionalOffer  promotionalOffer  = 3;
}

message SCSubscriptionShopPbCheckPurchaseTokenRequest {
    optional  string  purchaseToken  = 1;
}

message SCSubscriptionShopPbCheckPurchaseTokenResponse {
    optional  int32  status  = 1;
}

message SCSubscriptionShopPbGetAppleSubscriptionPlansRequest {
    repeated  string  experimentsArray  = 1;
    optional  string  appStoreCountryCode  = 2;
    optional  string  referralToken  = 3;
    optional  bool  includePromotionalOffers  = 4;
}

message SCSubscriptionShopPbGetAppleSubscriptionPlansResponse {
    repeated  SCSubscriptionShopPbAppleSubscriptionPlan  plansArray  = 1;
    optional  string  referralToken  = 3;
    optional  GPBInt64Value  preferredPlanIndex  = 4;
    optional  string  specialOfferBillboardKey  = 5;
}

message SCSubscriptionShopPbGetExternalUserIDRequest {
    optional  int32  provider  = 1;
    optional  string  appleReceipt  = 2;
}

message SCSubscriptionShopPbGetExternalUserIDResponse {
    optional  string  externalUserId  = 1;
    optional  int32  error  = 2;
}

message SCSubscriptionShopPbGetGiftPlansRequest {
    repeated  string  experimentsArray  = 1;
}

message SCSubscriptionShopPbGetGiftPlansResponse {
    repeated  SCSubscriptionShopPbGiftPlan  applePlansArray  = 1;
    repeated  SCSubscriptionShopPbGiftPlan  googlePlansArray  = 2;
}

message SCSubscriptionShopPbGetGoogleSubscriptionPlansRequest {
    repeated  string  experimentsArray  = 1;
    optional  string  referralToken  = 2;
}

message SCSubscriptionShopPbGetGoogleSubscriptionPlansResponse {
    optional  string  productId  = 1;
    repeated  SCSubscriptionShopPbGoogleSubscriptionPlan  plansArray  = 2;
    optional  string  referralToken  = 3;
    repeated  SCSubscriptionShopPbGoogleSubscriptionPlanV2  subscriptionPlansArray  = 4;
    optional  GPBInt64Value  preferredSubscriptionPlansIndex  = 5;
    optional  string  specialOfferBillboardKey  = 6;
}

message SCSubscriptionShopPbGetReferralTokenRequest {
}

message SCSubscriptionShopPbGetReferralTokenResponse {
    optional  bool  isUserEligible  = 1;
    optional  string  referralToken  = 2;
}

message SCSubscriptionShopPbGetReferralUserInfoRequest {
    optional  string  referralToken  = 1;
}

message SCSubscriptionShopPbGetReferralUserInfoResponse {
    optional  string  profilePicURL  = 1;
    optional  string  displayName  = 2;
    optional  string  bitmojiAvatarId  = 3;
}

message SCSubscriptionShopPbGetSubscriptionProviderRequest {
}

message SCSubscriptionShopPbGetSubscriptionProviderResponse {
    optional  int32  provider  = 1;
}

message SCSubscriptionShopPbGift {
    optional  string  id_p  = 1;
    optional  string  senderUserId  = 2;
    optional  string  senderName  = 3;
    optional  int64  giftedAtTimestampMillis  = 4;
    optional  int64  redeemedAtTimestampMillis  = 5;
    optional  SCSubscriptionShopPbAppleProductInfo_SubscriptionPeriod  subscriptionPeriod  = 6;
}

message SCSubscriptionShopPbGiftPlan {
    optional  string  productId  = 1;
    optional  SCSubscriptionShopPbAppleProductInfo_SubscriptionPeriod  subscriptionPeriod  = 2;
}

message SCSubscriptionShopPbGoogleSubscriptionPlan {
    optional  string  basePlanOrOfferTag  = 1;
    optional  bool  requiresEmail  = 2;
}

message SCSubscriptionShopPbGoogleSubscriptionPlanV2 {
    repeated  string  basePlanOrOfferTagsArray  = 1;
    optional  bool  requiresEmail  = 2;
}

message SCSubscriptionShopPbInAppReceipt {
    optional  int32  provider  = 1;
    optional  string  productId  = 2;
    optional  string  transactionId  = 3;
    optional  string  receipt  = 4;
}

message SCSubscriptionShopPbListGiftRequest {
}

message SCSubscriptionShopPbListGiftResponse {
    repeated  SCSubscriptionShopPbGift  unredeemedGiftsArray  = 1;
    repeated  SCSubscriptionShopPbGift  redeemedGiftsArray  = 2;
}

message SCSubscriptionShopPbPostSubscriptionPlanDetailsRequest {
    optional  string  productId  = 1;
    optional  string  offerTag  = 2;
    repeated  SCSubscriptionShopPbPricePhase  pricePhasesArray  = 3;
    optional  string  referralToken  = 4;
}

message SCSubscriptionShopPbPostSubscriptionPlanDetailsResponse {
    optional  string  externalUserId  = 1;
}

message SCSubscriptionShopPbPricePhase {
    optional  int64  billingCycleCount  = 1;
    optional  string  billingPeriod  = 2;
    optional  int64  priceAmountMicros  = 3;
    optional  string  priceCurrencyCode  = 4;
}

message SCSubscriptionShopPbPurchaseGiftRequest {
    optional  string  receiverUserId  = 1;
    optional  SCSubscriptionShopPbInAppReceipt  receipt  = 2;
    optional  string  storefrontCountryCode  = 3;
    optional  string  priceCurrencyCode  = 4;
    optional  int64  priceAmountMicros  = 5;
}

message SCSubscriptionShopPbPurchaseGiftResponse {
}

message SCSubscriptionShopPbRedeemGiftRequest {
    optional  string  giftId  = 1;
}

message SCSubscriptionShopPbRedeemGiftResponse {
    optional  int32  error  = 1;
    optional  SCSubscriptionShopPbRedeemGiftResponse_ApplePromotionalOfferRedeemAction  applePromotionalOfferRedeemAction  = 2;
}

message SCSubscriptionShopPbRedeemGiftResponse_ApplePromotionalOfferRedeemAction {
    optional  string  productId  = 1;
    optional  SCSubscriptionShopPbApplePromotionalOffer  promotionalOffer  = 2;
}

message SCSubscriptionShopPbSubscribeRequest {
    optional  SCSubscriptionShopPbInAppReceipt  receipt  = 1;
    optional  SCSubscriptionShopPbAppleProductInfo  appleProductInfo  = 2;
    optional  string  referralToken  = 3;
}

message SCSubscriptionShopPbSubscribeResponse {
    optional  int32  tier  = 1;
    optional  int32  error  = 2;
}

message SCSubscriptionShopPbUserSubscriptionStateChange {
    optional  string  userId  = 1;
    optional  int32  tier  = 2;
    optional  int32  status  = 3;
    optional  int64  timestampMillis  = 4;
}

message SCSuggestUsernamePbBirthdateInfo {
    optional  uint32  year  = 1;
    optional  uint32  month  = 2;
    optional  uint32  day  = 3;
}

message SCSuggestUsernamePbCheckUsernameRequest {
    optional  string  requestedUsername  = 1;
    optional  SCSuggestUsernamePbNameAndBirthdate  nameAndBirthdate  = 2;
    optional  uint32  versionNumber  = 3;
}

message SCSuggestUsernamePbCheckUsernameResponse {
    optional  int32  state  = 1;
    repeated  string  suggestionsArray  = 2;
    optional  string  errorMessage  = 3;
}

message SCSuggestUsernamePbNameAndBirthdate {
    optional  string  firstName  = 1;
    optional  string  lastName  = 2;
    optional  SCSuggestUsernamePbBirthdateInfo  birthdateInfo  = 3;
}

message SCSuggestUsernamePbSuggestUsernameRequest {
    optional  SCSuggestUsernamePbNameAndBirthdate  nameAndBirthdate  = 1;
    optional  uint32  versionNumber  = 2;
}

message SCSuggestUsernamePbSuggestUsernameResponse {
    repeated  string  suggestionsArray  = 1;
}

message SCSuggestionNotificationConfig {
    optional  int32  cap  = 1;
    optional  int32  impressedCountThreshold  = 2;
    optional  int32  expirationDays  = 3;
    optional  int32  order  = 4;
}

message SCSuperFeedConfig {
    optional  bool  enableSuperFeedInCameraTab  = 1;
    optional  bool  enableSuperFeedIn4ThTab  = 2;
    optional  bool  includeFriendStories  = 3;
    optional  bool  useNewFeedType  = 4;
    optional  bool  canOpenSuperFeedIn4ThTab  = 5;
    optional  bool  showForYouStoriesInStoryRing  = 6;
    optional  bool  enableOperaPreload  = 7;
    optional  bool  disableWatchedFriendStoriesReordering  = 8;
    optional  bool  syncFriendStoriesMetadataForSuperFeedResponse  = 9;
    optional  bool  enableSuperFeedSession  = 10;
    optional  int32  superFeedSessionTtl  = 11;
    optional  bool  displayFriendsStoriesAtTopInSession  = 12;
    optional  int32  friendsBlendingWeight  = 13;
    optional  int32  subsBlendingWeight  = 14;
    optional  int32  foryouBlendingWeight  = 15;
    optional  int32  spotlightBlendingWeight  = 16;
    optional  bool  filterOutFriends  = 17;
    optional  bool  filterOutSubs  = 18;
    optional  bool  filterOutForyou  = 19;
    optional  bool  filterOutSpotlight  = 20;
    optional  int32  friendsBlendingOrder  = 21;
    optional  int32  subsBlendingOrder  = 22;
    optional  int32  foryouBlendingOrder  = 23;
    optional  int32  spotlightBlendingOrder  = 24;
    optional  int32  constraintBlendingCreatorQuota  = 25;
    optional  int32  constraintBlendingCreatorRollingWindow  = 26;
    optional  double  constraintBlendingCreatorViolationDemotion  = 27;
    optional  double  incompleteStoryDemotion  = 28;
    optional  double  filterMinDurationMs  = 29;
    optional  double  filterMaxDurationMs  = 30;
    optional  int32  numStoriesSfBlend  = 31;
    optional  bool  sharedStoriesEnabled  = 32;
}

message SCSuperFeedPersistenceConfig {
    optional  bool  enablePrefetch  = 1;
    optional  bool  enableRefetch  = 2;
    optional  bool  enableBackgroundJob  = 3;
    optional  bool  keepBackgroundJobOnAppExit  = 4;
    optional  uint32  contentCacheTtl  = 5;
    optional  uint32  numStoriesToPrefetchMetadata  = 6;
    optional  uint32  numStoriesToPaginate  = 7;
    optional  bool  enableActivePlaybackSession  = 8;
    optional  uint32  paginationThreshold  = 9;
    optional  int32  superFeedSessionTtl  = 10;
    optional  SCSuperFeedPersistenceConfig_MediaConfig  mediaConfig  = 11;
}

message SCSuperFeedPersistenceConfig_MediaConfig {
    optional  uint32  numStoriesToPrefetchMedia  = 1;
    optional  uint32  numSnapsInStory  = 2;
}

message SCTrendingPageConfig {
    optional  bool  showViewCounts  = 1;
}

message SCTryonPose {
    optional  string  poseId  = 1;
    optional  string  poseImageURL  = 2;
    optional  int32  poseCategory  = 3;
}

message SCTryonPoses {
    repeated  SCTryonPose  posesArray  = 1;
}

message SCUCOScheduleV3Config {
    optional  bool  enabled  = 1;
    optional  bool  carouselScoreRangeOverrideEnabled  = 2;
    optional  double  carouselScoreRangeArGroupValue  = 4;
    optional  double  carouselScoreRangeColorGroupValue  = 5;
    optional  bool  prefetchEnabled  = 6;
}

message SCULExperiment {
    optional  string  studyName  = 1;
    repeated  string  experimentSettings  = 2;
}

message SCULFilterInfo {
    optional  int64  unlockableId  = 1;
    optional  bool  isUco  = 2;
}

message SCULGeoCircle {
    optional  SCULGeoCoordinate  center  = 1;
    optional  double  radius  = 2;
}

message SCULGeoCoordinate {
    optional  double  lat  = 1;
    optional  double  lng  = 2;
}

message SCULGtqServeRequest {
    optional  bytes  encryptedUnlockablesDirectPayload  = 1;
    optional  SCULGeoCircle  currentLocationWithAccuracy  = 2;
    optional  SCAdsAdRequest  adRequest  = 3;
    optional  SCULRequestInfo  requestInfo  = 4;
    optional  SCULSyncInfo  syncInfo  = 5;
    optional  SCULUserInfo  userInfo  = 6;
    optional  bool  skipVenues  = 7;
    repeated  bytes  checksumMap  = 8;
    optional  bool  skipUco  = 9;
    optional  bool  skipSponsoredLens  = 10;
}

message SCULGtqUnlockablesByIdResponse {
    optional  SCULLensResponse  lensResponse  = 1;
    optional  bytes  gtqServeResponse  = 2;
}

message SCULInfoCard {
    optional  int64  unlockableId  = 1;
    optional  SCULInfoCard_LensMetadata  lensMetadata  = 2;
    optional  SCULInfoCard_LensCreator  lensCreator  = 3;
}

message SCULInfoCardRequest {
    repeated  int64  unlockableIdsArray  = 1[packed=true];
    optional  int32  lensSource  = 2;
    repeated  int32  contextsArray  = 3[packed=true];
}

message SCULInfoCardResponse {
    repeated  SCULInfoCard  infoCardsArray  = 1;
}

message SCULInfoCard_Attachment {
    optional  SCULInfoCard_Attachment_WebView  webView  = 1;
    optional  SCULInfoCard_Attachment_DeepLink  deepLink  = 2;
    optional  string  ctaText  = 3;
}

message SCULInfoCard_Attachment_DeepLink {
    optional  string  uri  = 1;
    optional  string  appTitle  = 2;
    optional  GPBInt64Value  iosAppId  = 3;
    optional  string  androidPackageId  = 4;
    optional  int32  fallbackType  = 5;
    optional  string  webViewFallbackURL  = 6;
    optional  string  appIconURL  = 7;
}

message SCULInfoCard_Attachment_WebView {
    optional  string  webViewURL  = 1;
    optional  bool  shouldAutoFill  = 2;
}

message SCULInfoCard_LensCreator {
    optional  string  displayName  = 1;
    optional  string  userId  = 2;
    optional  string  snapProId  = 3;
    optional  bool  isOfficial  = 4;
    repeated  int32  availableLensCreatorActionsArray  = 5[packed=true];
    optional  int32  snapProProfileCategory  = 6;
}

message SCULInfoCard_LensMetadata {
    optional  string  publicName  = 1;
    optional  string  iconURL  = 2;
    optional  string  deepLink  = 3;
    repeated  int32  availableLensActionsArray  = 4[packed=true];
    optional  bool  isFavorite  = 5;
    optional  int64  lensCollectionId  = 6;
    optional  SCULInfoCard_Attachment  attachment  = 7;
    optional  string  collectibleDeepLink  = 8;
    optional  string  collectibleOwnerDisplayName  = 9;
    optional  int64  collectibleNumberOfOwners  = 10;
}

message SCULLensInfo {
    optional  int64  unlockableId  = 1;
    optional  int64  optionId  = 2;
    optional  int32  source  = 3;
}

message SCULLensResponse {
    repeated  SCULLensResponse_Lens  lensesArray  = 1;
}

message SCULLensResponse_Lens {
    optional  string  lensId  = 1;
    optional  string  iconURL  = 2;
    optional  string  lensName  = 3;
    optional  string  contentURL  = 4;
    optional  string  contentSignature  = 5;
}

message SCULRequestInfo {
    optional  string  countryCodeTwoLetter  = 1;
    optional  SCULRequestInfo_ScreenInfo  screenInfo  = 2;
    optional  string  timeZoneId  = 3;
    optional  string  acceptLanguage  = 4;
    optional  int32  cameraType  = 5;
}

message SCULRequestInfo_ScreenInfo {
    optional  float  screenWidthIn  = 1;
    optional  float  screenHeightIn  = 2;
    optional  int32  screenWidthPx  = 3;
    optional  int32  screenHeightPx  = 4;
}

message SCULSingleUnlockableTrack {
    optional  SCULSnapInfo  snapInfo  = 1;
    optional  SCAdsSingleTrack  track  = 2;
}

message SCULSnapInfo {
    optional  bytes  unlockablesSnapInfoBytes  = 1;
    optional  SCULUnlockablesSnapInfo  unlockablesSnapInfo  = 2;
}

message SCULStickerInfo {
    optional  int64  unlockableId  = 1;
    optional  int64  stickerId  = 2;
}

message SCULSyncInfo {
    optional  GPBTimestamp  lastLowSensitivityResponseTime  = 1;
    repeated  int32  purposeTypesArray  = 2[packed=true];
}

message SCULUnlockableTrackRequest {
    optional  SCULSnapInfo  snapInfo  = 1;
    optional  bool  doNotForward  = 2;
    optional  bytes  encryptedUnlockablesDirectPayload  = 16;
    optional  bytes  serializedV1Track  = 17;
    optional  string  serializedV1TrackStr  = 18;
    optional  SCAdsCommonRequestData  commonRequestData  = 19;
    repeated  SCULSingleUnlockableTrack  trackV2Array  = 20;
    optional  string  snapadsId  = 21;
}

message SCULUnlockablesSnapInfo {
    optional  string  snapSessionId  = 1;
    repeated  SCULFilterInfo  filtersArray  = 2;
    repeated  SCULLensInfo  lensesArray  = 3;
    repeated  SCULStickerInfo  stickersArray  = 4;
    optional  int32  snapSource  = 5;
}

message SCULUserExperiments {
    repeated  SCULExperiment  experimentsArray  = 1;
}

message SCULUserInfo {
    optional  SCULUserExperiments  experiments  = 1;
    optional  uint32  snapScore  = 2;
    optional  string  snapadsId  = 3;
}

message SCURLPreviewDomainFrequencyGroup {
    repeated  SCURLPreviewDomainFrequencyItem  domainItemsArray  = 1;
    optional  int32  groupCount  = 2;
    optional  int32  totalCount  = 3;
}

message SCURLPreviewDomainFrequencyItem {
    optional  string  domain  = 1;
    optional  int32  count  = 2;
    repeated  SCURLPreviewUrlPreview  sampleResponsesArray  = 3;
}

message SCURLPreviewEmbeddedMedia {
    optional  int32  contentType  = 1;
    optional  bytes  data_p  = 2;
}

message SCURLPreviewGetPreviewRequest {
    optional  string  URL  = 1;
    optional  bool  withInAppDeepLinks  = 2;
    optional  bool  parseStickerShareMetadata  = 3;
}

message SCURLPreviewGetPreviewResponse {
    optional  SCURLPreviewUrlPreview  preview  = 1;
    optional  bool  success  = 2;
    optional  SCURLPreviewOriginError  originError  = 3;
}

message SCURLPreviewGetPreviewStatsRequest {
    optional  float  percentage  = 1;
    optional  int32  samplesPerResponse  = 2;
    optional  int32  samplesPerFailedResponse  = 3;
}

message SCURLPreviewGetPreviewStatsResponse {
    repeated  SCURLPreviewDomainFrequencyGroup  domainItemsArray  = 1;
    repeated  SCURLPreviewDomainFrequencyGroup  failedDomainFrequencyArray  = 3;
}

message SCURLPreviewInAppDeepLink {
    optional  string  text  = 1;
    optional  SCURLPreviewMedia  icon  = 2;
    optional  string  deepLinkURL  = 3;
}

message SCURLPreviewMedia {
    optional  string  URL  = 1;
    optional  SCURLPreviewEmbeddedMedia  embeddedMedia  = 2;
}

message SCURLPreviewOriginError {
    optional  bool  retryable  = 1;
    optional  int32  HTTPResponseCode  = 2;
}

message SCURLPreviewStickerShareMetadata {
    optional  string  appId  = 1;
    optional  string  publisherId  = 2;
    optional  SCURLPreviewMedia  sticker  = 3;
    optional  bool  suppressSticker  = 4;
}

message SCURLPreviewUrlPreview {
    optional  string  title  = 1;
    optional  string  subtitle  = 2;
    optional  string  URL  = 3;
    optional  SCURLPreviewMedia  favicon  = 4;
    optional  SCURLPreviewMedia  thumbnail  = 5;
    optional  int32  type  = 6;
    repeated  SCURLPreviewInAppDeepLink  deeplinksArray  = 7;
    optional  SCURLPreviewStickerShareMetadata  stickerShareMetadata  = 8;
    optional  uint64  invalidAfterMillis  = 9;
}

message SCURLReputationReportSenderRequest {
    optional  string  senderUserId  = 1;
}

message SCURLReputationReportSenderResponse {
}

message SCUnifiedCameraObjectCarouselConfig {
    repeated  string  splitScreenEnabledCarouselGroupsArray  = 1;
    repeated  string  loadingIndicatorEnabledCarouselGroupsArray  = 2;
    repeated  string  darkOverlayEnabledCarouselGroupsArray  = 3;
}

message SCUnlockGroup {
    optional  int32  unlockType  = 1;
    optional  int32  unlockableType  = 2;
}

message SCUnlockGroupRequest {
    optional  SCUnlockGroup  unlockGroup  = 1;
    optional  int32  limit  = 2;
    optional  int32  sortingType  = 3;
}

message SCUnlockMetadata {
    optional  string  deepLinkAppId  = 1;
    repeated  string  deepLinkProperties  = 2;
    optional  SCULUnlockablesSnapInfo  snapInfo  = 3;
}

message SCUnlockResponse {
    optional  int32  unlockStatus  = 1;
    optional  SCLGGeofilterResponse  geofilter  = 2;
    optional  SCLPLensSnapchat  lens  = 3;
}

message SCUnlockableMetaGetLensesByCreatorRequest {
    optional  string  creatorUserId  = 1;
    optional  string  countryCode  = 2;
    optional  int32  order  = 3;
    optional  int32  maxCount  = 4;
    optional  int32  resultStartIndex  = 5;
    repeated  string  allowedUsagesArray  = 6;
}

message SCUnlockableMetaGetLensesByCreatorResponse {
    repeated  SCUnlockableMetaLensMetadata  lensesArray  = 1;
    optional  bool  hasMoreResults  = 2;
    optional  int32  nextStartIndex  = 3;
}

message SCUnlockableMetaGetUnlockableRequest {
    optional  string  id_p  = 1;
}

message SCUnlockableMetaGetUnlockableResponse {
    optional  bytes  unlockable  = 1;
}

message SCUnlockableMetaGetUnlockablesByCommunityLensIdsRequest {
    repeated  string  idsArray  = 1;
}

message SCUnlockableMetaGetUnlockablesByCommunityLensIdsResponse {
    repeated  bytes  unlockablesArray  = 1;
}

message SCUnlockableMetaGetUnlockablesRequest {
    repeated  string  idsArray  = 1;
}

message SCUnlockableMetaGetUnlockablesResponse {
    repeated  bytes  unlockablesArray  = 1;
}

message SCUnlockableMetaLensMetadata {
    optional  string  lensId  = 1;
    optional  string  creatorName  = 2;
    optional  string  userId  = 3;
    optional  string  name  = 4;
    optional  int32  lastUpdatedEpoch  = 5;
    optional  string  thumbnailURL  = 6;
    optional  SCUnlockableMetaThumbnailSequence  thumbnailSequence  = 7;
    optional  string  iconURL  = 8;
    optional  string  deeplinkURL  = 9;
    optional  string  snapcodeURL  = 10;
    optional  string  previewVideoURL  = 11;
}

message SCUnlockableMetaThumbnailSequence {
    optional  string  URLPattern  = 1;
    optional  int32  numThumbnails  = 2;
    optional  int32  animationIntervalMs  = 3;
}

message SCUnlocksLensSnapchatMigrationConfig {
    optional  bool  migrateGetUnlocks  = 1;
    optional  bool  migrateAddUnlocks  = 2;
    optional  bool  migrateFetchMetadata  = 3;
}

message SCUpdateBirthdatePbUpdateBirthdateRequest {
    optional  GTPDate  birthdate  = 1;
    optional  int32  minuteOffsetFromUtc  = 2;
    optional  bool  hasConfirmedLastBirthdateChange  = 3;
}

message SCUpdateBirthdatePbUpdateBirthdateResponse {
    optional  int32  status  = 1;
    optional  string  localizedErrTitle  = 2;
    optional  string  localizedErrMessage  = 3;
}

message SCUpsellShareButtonConfig {
    optional  bool  enable  = 1;
    optional  int32  animationStartDelayMs  = 2;
    optional  int32  animationDurationMs  = 3;
}

message SCUserAction {
    optional  string  elementId  = 1;
    optional  string  displayText  = 2;
    optional  int32  actionType  = 3;
    optional  bool  shouldPrefetchOnPrev  = 10;
    optional  bool  allowAd  = 20;
}

message SCUserAdStatsDisplayableScc {
    optional  string  id_p  = 1;
    optional  string  displayName  = 2;
}

message SCUserAdStatsGetUserAdStatsRequest {
    optional  bytes  said  = 1;
    optional  string  userLocale  = 2;
}

message SCUserAdStatsGetUserSelectedSccsRequest {
    optional  bytes  said  = 1;
    optional  string  userLocale  = 2;
}

message SCUserAdStatsGetUserSelectedSccsResponse {
    repeated  SCUserAdStatsDisplayableScc  selectedSccsArray  = 1;
}

message SCUserAdStatsUpdateSccListRequest {
    optional  bytes  said  = 1;
    repeated  SCUserAdStatsDisplayableScc  selectedSccsArray  = 2;
}

message SCUserAdStatsUserAdStats {
    optional  GPBInt32Value  impressions  = 1;
    optional  GPBInt32Value  swipes  = 2;
    repeated  SCUserAdStatsDisplayableScc  genericSccsArray  = 3;
}

message SCUserAdStatsUserSelectedSccList {
    repeated  int32  sccsArray  = 1[packed=true];
}

message SCUserAgentAgent {
    optional  SCUserAgentUserAgent  userAgent  = 1;
    optional  SCUserAgentServiceAgent  serviceAgent  = 2;
}

message SCUserAgentAppVersion {
    optional  uint32  major  = 1;
    optional  uint32  minor  = 2;
    optional  uint32  patch  = 3;
    optional  uint32  hotfix  = 4;
}

message SCUserAgentDeviceInfo {
    optional  string  model  = 1;
    optional  int32  platform  = 2;
    optional  string  platformVersion  = 3;
    optional  string  architecture  = 4;
}

message SCUserAgentServiceAgent {
    optional  string  id_p  = 1;
    optional  string  version  = 2;
}

message SCUserAgentUserAgent {
    optional  int32  app  = 1;
    optional  SCUserAgentAppVersion  appVersion  = 2;
    optional  int32  appFlavor  = 3;
    optional  int32  appVariant  = 4;
    optional  int32  appPlatform  = 5;
    optional  SCUserAgentDeviceInfo  deviceInfo  = 6;
}

message SCUserChallengePbBirthdate {
    optional  uint32  day  = 1;
    optional  uint32  month  = 2;
    optional  uint32  year  = 3;
}

message SCUserChallengePbUserChallengeAnswer {
    optional  int32  type  = 1;
    optional  string  text  = 2;
    optional  SCUserChallengePbBirthdate  birthdate  = 3;
}

message SCUserChallengePbUserChallengePrompt {
    optional  int32  type  = 1;
    optional  string  hint  = 2;
}

message SCUserChallengePbUserChallenges {
    repeated  SCUserChallengePbUserChallengePrompt  challengesArray  = 1;
}

message SCVOperaContextTray {
    optional  bool  enableSwipeUpTrayInFriendStories  = 1;
    optional  bool  enableSwipeUpTrayInSubsAndForYou  = 2;
    optional  bool  enableSwipeUpTrayInAds  = 3;
    optional  bool  enableInteractiveTray  = 4;
    optional  bool  enableMainImprovements  = 5;
    optional  bool  enableAdsAttibutionFixes  = 6;
    optional  bool  enableContextFixes  = 7;
    optional  bool  enableFixedActionBarTransitions  = 8;
    optional  bool  enableInterStoryTransitions  = 9;
    optional  bool  enableHandlesTapsForOpera  = 10;
    optional  bool  enableBounceFirstStory  = 11;
    optional  bool  enableBounceTutorial  = 12;
    optional  bool  enableCloseTheGap  = 13;
    optional  bool  enableEmbeddedAttachments  = 14;
    optional  bool  enableImprovementsTheta  = 15;
    optional  bool  enableImprovementsDelta  = 16;
}

message SCVOperaOnboardingV4 {
    optional  int32  voperaOnboardingStyle  = 1;
}

message SCVSBatchFriendClusters {
    repeated  SCVSFriendCluster  clustersArray  = 1;
    optional  bool  isInitial  = 2;
}

message SCVSBatchValisLocationUpdate {
    repeated  SCVSLocationUpdate  locationUpdateArray  = 1;
}

message SCVSClientUpdate {
    optional  SCVSLocationUpdate  locationUpdate  = 1;
    optional  SCVSViewportUpdate  viewportUpdate  = 2;
    optional  SCVSDeviceData  deviceDataUpdate  = 3;
    optional  SCVSClusterFullSync  clusterFullSyncUpdate  = 4;
    optional  SCVSClusterStopSync  clusterStopSyncUpdate  = 5;
    optional  SCVSUserAction  userActionUpdate  = 6;
    optional  bool  ghostMode  = 7;
}

message SCVSClientUpdateRequest {
    repeated  SCVSClientUpdate  updatesArray  = 1;
    optional  bool  ghostMode  = 2;
    optional  int64  serverRequestTimestamp  = 3;
}

message SCVSClientUpdateResponse {
    optional  int64  requestAgainAfterMs  = 1;
}

message SCVSClusterFullSync {
    optional  string  locale  = 1;
    optional  string  countryCode  = 2;
}

message SCVSClusterMember {
    optional  SCCOREUUID  userId  = 1;
    optional  int64  timestamp  = 2;
    repeated  SCMT1Type  actionTypeArray  = 3;
    optional  SCMT1Sticker  typeSticker  = 4;
    optional  float  horizontalAccuracyMeters  = 5;
    optional  SCMEExplorerFriendStatus  friendStatus  = 6;
    optional  bool  isLiveLocation  = 7;
    optional  int64  liveSessionExpirationMs  = 8;
    optional  SCCOREUUID  liveSessionId  = 9;
    optional  bool  isLiveSessionIndefinite  = 10;
}

message SCVSClusterStopSync {
}

message SCVSDeleteLastKnownLocationRequest {
}

message SCVSDeleteLastKnownLocationResponse {
    optional  bool  success  = 1;
}

message SCVSDeviceData {
    optional  bool  isBackgrounded  = 1;
    optional  float  batteryLevel  = 2;
    optional  bool  devicePluggedIn  = 3;
    optional  bool  headphoneOutput  = 4;
    optional  string  wifiSsid  = 5;
    optional  bool  isOtherAudioPlaying  = 6;
    optional  SpectaclesInfo  spectaclesInfo  = 8;
}

message SCVSDuplexServerUpdate {
    optional  SCVSFriendCluster  friendCluster  = 1;
    optional  SCVSHeaderUpdate  headerUpdate  = 2;
    optional  SCVSBatchFriendClusters  batchFriendClusters  = 3;
    optional  int64  sequenceNumber  = 100;
    optional  string  locale  = 101;
    optional  string  countryCode  = 102;
}

message SCVSFriendCluster {
    optional  SCCOREUUID  id_p  = 1;
    optional  SCVSImage  prop  = 2;
    optional  SCVSImage  floor  = 3;
    optional  float  centerLat  = 4;
    optional  float  centerLng  = 5;
    optional  fixed64  centerS2CellId  = 6;
    repeated  SCVSClusterMember  clusterMemberArray  = 7;
    optional  SCMTWorldEffectSet  worldEffect  = 8;
    optional  bool  tombstone  = 9;
    optional  string  locality  = 10;
    repeated  string  localityPiecesArray  = 11;
}

message SCVSFsnCanRequestLocationRequest {
    optional  SCCOREUUID  friendId  = 1;
    optional  SCCOREUUID  requesterId  = 2;
}

message SCVSFsnCanRequestLocationResponse {
    optional  bool  canRequestLocation  = 1;
    optional  bool  hideRequestButton  = 2;
}

message SCVSGetBatchLocSharingPreferencesRequest {
    repeated  SCCOREUUID  userIdsArray  = 1;
}

message SCVSGetBatchLocSharingPreferencesResponse {
    repeated  SCVSShareLocationPreferences  preferencesArray  = 1;
    optional  int64  serverTimestamp  = 2;
}

message SCVSGetChangeHistoryRequest {
    optional  SCCOREUUID  userId  = 1;
    optional  int64  beginTimestamp  = 2;
    optional  int64  endTimestamp  = 3;
    optional  bool  reverseChronologicalOrder  = 4;
    optional  int32  numResultsPreceedingBeginTimestamp  = 5;
}

message SCVSGetChangeHistoryResponse {
    repeated  SCVSShareLocationPreferences  preferencesArray  = 1;
    repeated  SCVSLocationPreferencesMetadata  metadataArray  = 2;
}

message SCVSGetFriendClustersRequest {
    optional  bool  allFriends  = 1;
    repeated  SCCOREUUID  friendIdsArray  = 2;
    optional  bool  requestExplorerStatuses  = 3;
}

message SCVSGetFriendClustersResponse {
    repeated  SCVSFriendCluster  friendClustersArray  = 1;
    optional  bool  success  = 2;
    optional  int64  requestAgainAfterMs  = 3;
}

message SCVSGetLocalityRequest {
    optional  fixed64  s2CellId  = 1;
    optional  string  language  = 2;
    optional  string  countryCode  = 3;
}

message SCVSGetLocalityResponse {
    optional  string  locality  = 1;
    repeated  string  localityPiecesArray  = 2;
}

message SCVSGetLocationSharingPreferencesRequest {
}

message SCVSGetLocationSharingPreferencesResponse {
    optional  SCVSShareLocationPreferences  preferences  = 1;
    optional  int64  serverTimestamp  = 2;
}

message SCVSGetMutedFriendListRequest {
    optional  SCCOREUUID  userId  = 1;
}

message SCVSGetMutedFriendListResponse {
    repeated  SCCOREUUID  friendIdsArray  = 1;
    optional  int64  version  = 2;
}

message SCVSGetMutedFriendsRequest {
}

message SCVSGetMutedFriendsResponse {
    repeated  SCCOREUUID  friendIdsArray  = 1;
    optional  int64  version  = 2;
}

message SCVSGetPreferencesRequest {
}

message SCVSGetPreferencesResponse {
    optional  SCVSShareLocationPreferences  preferences  = 1;
    optional  int64  serverTimestamp  = 2;
}

message SCVSHeaderUpdate {
    optional  SCVSWeather  weather  = 1;
    optional  SCMTWorldEffectSet  worldEffect  = 2;
    optional  SCWTimeZone  timeZone  = 3;
    optional  SCVSLocality  locality  = 4;
}

message SCVSImage {
    optional  string  URL  = 1;
}

message SCVSIsSharingLocationWithUserRequest {
    optional  SCCOREUUID  userId  = 1;
    optional  SCCOREUUID  shareeId  = 2;
}

message SCVSIsSharingLocationWithUserResponse {
    optional  bool  isSharingLocation  = 1;
}

message SCVSLambdaPreferencesUpdate {
    optional  SCCOREUUID  userId  = 1;
    optional  int64  version  = 2;
}

message SCVSLocRequestFeedbackRequest {
    optional  SCCOREUUID  requesterId  = 1;
    optional  int32  feedback  = 2;
}

message SCVSLocRequestFeedbackResponse {
}

message SCVSLocality {
    optional  string  localizedLocality  = 1;
}

message SCVSLocationPreferencesMetadata {
    optional  int32  changeSource  = 1;
}

message SCVSLocationRequestedRequest {
    optional  SCCOREUUID  requesterId  = 1;
    optional  SCCOREUUID  friendId  = 2;
}

message SCVSLocationRequestedResponse {
}

message SCVSLocationUpdate {
    optional  float  lat  = 1;
    optional  float  lng  = 2;
    optional  float  altitude  = 3;
    optional  float  horizontalAccuracy  = 4;
    optional  float  verticalAccuracy  = 5;
    optional  SCVSMotionData  motionData  = 6;
    optional  int64  timestamp  = 7;
    optional  bool  gpsReset  = 8;
    optional  int64  preferenceVersion  = 9;
    optional  int64  friendListVersion  = 10;
    optional  bool  isBackgrounded  = 11;
    optional  bool  isBirthday  = 12;
    optional  int64  serverTimestamp  = 13;
}

message SCVSMotionData {
    optional  int32  motionType  = 1;
    optional  int64  motionStartTimestamp  = 2;
    optional  int32  motionTypeConfidence  = 3;
    optional  float  heading  = 4;
    optional  float  speed  = 5;
}

message SCVSMuteFriendRequest {
    repeated  SCCOREUUID  friendIdsArray  = 1;
    optional  int64  curVersion  = 2;
}

message SCVSMuteFriendResponse {
    repeated  SCCOREUUID  friendIdsArray  = 1;
    optional  int64  newVersion  = 2;
}

message SCVSMutedFriends {
    repeated  SCCOREUUID  friendIdsArray  = 1;
    optional  SCCOREUUID  userId  = 2;
}

message SCVSSendPushNotificationTestRequest {
    optional  int64  durationMs  = 1;
    optional  int64  frequencyMs  = 2;
    optional  int64  initialDelayMs  = 3;
}

message SCVSSendPushNotificationTestResponse {
}

message SCVSServerUpdate {
    optional  SCVSFriendCluster  friendCluster  = 1;
    optional  SCVSHeaderUpdate  headerUpdate  = 2;
    optional  SCVSBatchFriendClusters  batchFriendClusters  = 3;
    optional  int64  sequenceNumber  = 1000;
}

message SCVSServerUpdateResponse {
    repeated  SCVSServerUpdate  updatesArray  = 1;
}

message SCVSSetLocSharingPreferencesRequest {
    optional  SCCOREUUID  userId  = 1;
    optional  SCVSShareLocationPreferences  preferences  = 2;
    optional  int64  ghostModeDuration  = 3;
}

message SCVSSetLocSharingPreferencesResponse {
    optional  SCVSShareLocationPreferences  preferences  = 1;
    optional  int64  serverTimestamp  = 2;
}

message SCVSSetLocationSharingPreferencesRequest {
    optional  SCVSShareLocationPreferences  preferences  = 1;
    optional  int64  ghostModeDuration  = 2;
    optional  SCVSLocationPreferencesMetadata  metadata  = 3;
}

message SCVSSetLocationSharingPreferencesResponse {
    optional  SCVSShareLocationPreferences  preferences  = 1;
    optional  int64  serverTimestamp  = 2;
}

message SCVSSetPreferencesRequest {
    optional  SCVSShareLocationPreferences  preferences  = 1;
    optional  int64  ghostModeDuration  = 2;
    optional  SCCOREUUID  userId  = 3;
}

message SCVSSetPreferencesResponse {
    optional  int64  version  = 1;
    optional  SCVSShareLocationPreferences  preferences  = 2;
    optional  int64  serverTimestamp  = 3;
}

message SCVSShareLocationPreferences {
    optional  bool  ghostMode  = 1;
    optional  int64  ghostModeExpiration  = 2;
    optional  int32  audience  = 3;
    repeated  SCCOREUUID  whitelistFriendIdArray  = 4;
    repeated  SCCOREUUID  blacklistFriendIdArray  = 5;
    optional  bool  backgroundSharingEnabled  = 6;
    optional  bool  shareUsageData  = 7;
    optional  int64  version  = 8;
    optional  bool  isOnboarded  = 9;
    optional  SCCOREUUID  userId  = 10;
    repeated  SCVSShareLocationPreferences_LiveSession  liveSessionsArray  = 11;
    optional  bool  pauseAllLiveSessions  = 12;
}

message SCVSShareLocationPreferences_LiveSession {
    optional  SCCOREUUID  friendId  = 1;
    optional  int64  durationMs  = 2;
    optional  int64  expirationMs  = 3;
    optional  SCCOREUUID  sessionId  = 4;
    optional  bool  indefinite  = 5;
    optional  int64  startMs  = 6;
}

message SCVSUnmuteFriendRequest {
    repeated  SCCOREUUID  friendIdsArray  = 1;
    optional  int64  curVersion  = 2;
}

message SCVSUnmuteFriendResponse {
    repeated  SCCOREUUID  friendIdsArray  = 1;
    optional  int64  newVersion  = 2;
}

message SCVSUserAction {
    optional  int32  type  = 1;
}

message SCVSViewportUpdate {
    optional  SPCGRect  bbox  = 1;
}

message SCVSWeather {
    optional  int32  condition  = 1;
    optional  float  temperatureF  = 2;
}

message SCValue {
    optional  bool  boolean  = 1;
    optional  string  string  = 2;
    optional  int32  integer  = 3;
    optional  int64  long_p  = 4;
    optional  double  double_p  = 5;
}

message SCWAirQuality {
    optional  int64  epochMs  = 1;
    optional  float  overallIndex  = 2;
    optional  float  overallPlumeLabsIndex  = 3;
    optional  int32  dominantPollutant  = 4;
    optional  int32  category  = 5;
    optional  uint32  categoryColor  = 6;
}

message SCWCurrentAirQualityRequest {
    optional  double  lat  = 1;
    optional  double  lng  = 2;
    optional  int32  referer  = 3;
}

message SCWCurrentAirQualityResponse {
    optional  SCWAirQuality  airQuality  = 1;
    optional  SCMapsAddress  address  = 2;
    optional  SCWTimeZone  timeZone  = 3;
}

message SCWCurrentConditionAndForecastRequest {
    optional  double  lat  = 1;
    optional  double  lng  = 2;
    optional  int32  referer  = 3;
    optional  uint32  hourlyForecastHours  = 4;
    optional  uint32  dailyForecastDays  = 5;
}

message SCWCurrentConditionAndForecastResponse {
    optional  SCWWeather  currentCondition  = 1;
    repeated  SCWDailyForecast  dailyForecastArray  = 2;
    repeated  SCWWeather  hourlyForecastArray  = 3;
    optional  SCMapsAddress  address  = 4;
    optional  SCWTimeZone  timeZone  = 5;
}

message SCWCurrentConditionRequest {
    optional  double  lat  = 1;
    optional  double  lng  = 2;
    optional  int32  referer  = 3;
}

message SCWCurrentConditionResponse {
    optional  SCWWeather  currentCondition  = 1;
    optional  SCMapsAddress  address  = 2;
    optional  SCWTimeZone  timeZone  = 3;
}

message SCWDailyForecast {
    optional  SCWWeather  day  = 2;
    optional  SCWWeather  night  = 3;
}

message SCWDailyForecastRequest {
    optional  double  lat  = 1;
    optional  double  lng  = 2;
    optional  int32  referer  = 3;
    optional  uint32  days  = 4;
}

message SCWDailyForecastResponse {
    repeated  SCWDailyForecast  dailyForecastArray  = 1;
    optional  SCMapsAddress  address  = 2;
    optional  SCWTimeZone  timeZone  = 3;
}

message SCWDetailedCondition {
}

message SCWHourlyForecastRequest {
    optional  double  lat  = 1;
    optional  double  lng  = 2;
    optional  int32  referer  = 3;
    optional  uint32  hours  = 4;
}

message SCWHourlyForecastResponse {
    repeated  SCWWeather  hourlyForecastArray  = 1;
    optional  SCMapsAddress  address  = 2;
    optional  SCWTimeZone  timeZone  = 3;
}

message SCWTimeZone {
    optional  string  id_p  = 1;
    optional  int32  offsetS  = 2;
}

message SCWWeather {
    optional  int32  condition  = 1;
    optional  float  temperatureF  = 2;
    optional  int64  epochMs  = 3;
    optional  int64  relativeHumidityPerc  = 6;
    optional  float  pressureMb  = 7;
    optional  float  windSpeed  = 8;
    optional  int32  precipitationProbability  = 9;
    optional  int32  detailedCondition  = 10;
    optional  uint64  sunriseEpochSec  = 11;
    optional  uint64  sunsetEpochSec  = 12;
}

message SCWebViewResourceInfo {
    optional  string  resourceURL  = 1;
    optional  string  attribute  = 2;
}

message SCWebViewWebViewPrefetchHints {
    repeated  SCWebViewWebViewPrefetchHints_ResourceLinkInfo  resourcesArray  = 1;
    optional  string  baseURL  = 2;
    optional  GPBStringValue  gtmURL  = 3;
    repeated  GPBStringValue  tagManagerLinksArray  = 4;
    optional  GPBStringValue  pixelScriptURL  = 5;
    repeated  SCWebViewResourceInfo  resourcesInfoArray  = 6;
    optional  SCAdsWebViewInHouseCache  inhouseCache  = 7;
    repeated  string  topConnectedOriginUrlsArray  = 8;
}

message SCWebViewWebViewPrefetchHints_ResourceLinkInfo {
    optional  string  resourceURL  = 1;
}

message SDMAdsTracking {
    optional  SCAdsSKAdNetworkAttribution  skAdNetworkAttribution  = 1;
    optional  string  iosAppId  = 2;
    optional  string  adId  = 3;
}

message SDMAppDeepLink {
    optional  string  uri  = 1;
    optional  SDMAppInstall  appInstall  = 4;
    optional  SDMAppDeepLink_WebFallback  webFallback  = 5;
    optional  string  id_p  = 6;
}

message SDMAppDeepLink_WebFallback {
    optional  string  URL  = 1;
}

message SDMAppInstall {
    optional  string  appTitle  = 1;
    optional  SDMAppInstall_AppInfo  iosInfo  = 2;
    optional  SDMAppInstall_AppInfo  androidInfo  = 3;
    optional  string  id_p  = 4;
}

message SDMAppInstall_AppInfo {
    optional  string  appId  = 1;
    repeated  string  storeParams  = 2;
    optional  string  appIcon  = 3;
    optional  bytes  contentObject  = 4;
}

message SDMArticle {
    optional  string  editorHtml  = 1;
    repeated  SDMLongformVideo  videosArray  = 2;
    optional  string  id_p  = 3;
    repeated  bytes  imageContentObjectsArray  = 4;
}

message SDMAttachment {
    optional  string  remoteURL  = 1;
}

message SDMAttachments {
    repeated  SDMAttachments_Attachment  attachmentsArray  = 4;
    optional  string  customCallToAction  = 5;
    optional  SDMDynamicAttachmentRenderingInfo  dynamicAttachmentRenderingInfo  = 6;
}

message SDMAttachments_Attachment {
    optional  SDMContext  context  = 1;
    optional  SDMGameAttachment  gameAttachment  = 2;
    optional  SDMWebPage  webPage  = 3;
    optional  SDMCameraAttachment  cameraAttachment  = 4;
    optional  SDMAppDeepLink  appDeepLink  = 5;
    optional  SDMAppInstall  appInstall  = 6;
    optional  SDMCommerce  commerce  = 7;
    optional  SDMLongformVideo  longformVideo  = 8;
    optional  SDMNotificationSettings  notificationSettings  = 9;
    optional  SDMSubscription  subscription  = 10;
    optional  SDMSnapProStoryReplyQuote  snapProStoryReplyQuote  = 11;
    optional  SDMPlaceMetadata  placeMetadata  = 12;
    optional  SDMQuestionStickerReplyQuote  questionStickerReplyQuote  = 13;
}

message SDMAttribution {
    optional  string  userId  = 1;
    optional  string  username  = 2;
    optional  SDMSponsor  sponsor  = 3;
}

message SDMAudioMetadata {
    optional  int32  codecFormat  = 1;
}

message SDMCallToAction {
    optional  string  text  = 1;
}

message SDMCameoMetadata {
    repeated  int32  gendersArray  = 1[packed=true];
    repeated  SCCameosListOfLenses  targetLenses  = 2;
    optional  SCCameosCameoBoltContentObject  asset  = 3;
}

message SDMCameoSnapResource {
    optional  SCCameosCameoSnap  cameoSnapResource  = 1;
}

message SDMCameraAttachment {
    optional  SDMLensCarousel  carousel  = 1;
    optional  int32  sendToBehavior  = 2;
    optional  string  id_p  = 3;
}

message SDMCaption {
    optional  string  text  = 1;
}

message SDMCaptureCharacteristics {
    optional  bool  flashOn  = 1;
    optional  bool  frontFacing  = 2;
}

message SDMCommerce {
    repeated  SDMCommerce_Item  itemsArray  = 1;
    optional  string  id_p  = 2;
}

message SDMCommerce_Item {
    optional  SDMCommerce_Product  product  = 2;
    optional  SDMCommerce_Store  store  = 3;
}

message SDMCommerce_Product {
    optional  string  id_p  = 1;
}

message SDMCommerce_Store {
    optional  string  id_p  = 1;
}

message SDMContentAnalysis {
    optional  bool  isMatureContent  = 1;
    optional  int32  brandFriendliness  = 2;
}

message SDMContext {
    optional  string  venueId  = 1;
    optional  SCContextContextHint  contextHint  = 2;
    optional  SCCTXContextClientInfo  contextClientInfo  = 3;
}

message SDMCreativeEditTag {
    repeated  int32  creativeToolFeaturesArray  = 1[packed=true];
    optional  uint32  uniqueId  = 2;
    repeated  SDMFeatureTag  featureTagsArray  = 3;
}

message SDMCreativeKitSourceApp {
    optional  string  oauthClientId  = 1;
    optional  string  displayName  = 2;
}

message SDMCreativeToolsAnalytics {
    optional  bool  containsAnimatedStickers  = 1;
    optional  bool  isImageWithAnimatedSticker  = 2;
}

message SDMDuration {
    optional  GPBEmpty  infinite  = 1;
    optional  GPBEmpty  playOnce  = 2;
    optional  uint32  durationSeconds  = 3;
}

message SDMDynamicAttachmentRenderingInfo {
    optional  SDMArticle  article  = 1;
    optional  SDMPoll  poll  = 2;
}

message SDMEmojiType {
    optional  string  id_p  = 1;
}

message SDMExplanationPage {
    optional  string  description_p  = 1;
    optional  string  imageAssetId  = 2;
    optional  bytes  contentObject  = 3;
    optional  string  URL  = 4;
}

message SDMFeatureTag {
    optional  uint32  tagId  = 1;
    optional  int32  creativeToolFeature  = 2;
}

message SDMGameAttachment {
    optional  SCCOREUUID  id_p  = 1;
    optional  string  displayName  = 2;
    optional  string  contentURL  = 3;
    optional  string  iconImageURL  = 4;
    optional  string  loadingPageImageURL  = 5;
    optional  string  logoURL  = 6;
}

message SDMGeneratedCameo {
    optional  int32  source  = 1;
    optional  int64  chatCameoId  = 2;
    optional  int64  stickerCameoId  = 3;
    optional  int32  contentType  = 4;
    optional  int32  personCount  = 5;
    optional  bool  isOneFriendCameo  = 6;
}

message SDMGridProperties {
    optional  uint32  width  = 1;
    optional  uint32  height  = 2;
}

message SDMGroupStory {
    optional  int32  groupStoryType  = 1;
    optional  string  groupStoryId  = 2;
}

message SDMImageMetadata {
    optional  int32  codecFormat  = 1;
}

message SDMLayerComposition {
    repeated  SDMTrack  tracksArray  = 1;
    optional  uint32  trackIndexCounter  = 4;
    optional  uint32  trackSegmentIndexCounter  = 5;
}

message SDMLayerProperties {
    optional  float  relativeWidth  = 1;
    optional  float  relativeHeight  = 2;
    optional  float  centerX  = 3;
    optional  float  centerY  = 4;
    optional  float  rotationInDegrees  = 5;
    optional  SDMTimeInstant  startTimeMs  = 6;
    optional  SDMTimeInstant  durationMs  = 7;
    optional  float  playbackRateMultiplier  = 8;
    optional  float  frameRate  = 9;
    optional  SDMPlaybackSpeedMultiplier  playbackSpeedMultiplier  = 10;
    optional  uint32  width  = 11;
    optional  uint32  height  = 12;
    optional  SDMTransforms  transforms  = 13;
}

message SDMLegacyMultisnap {
    optional  uint32  previewIndex  = 1;
    optional  uint32  previewCount  = 2;
    optional  uint32  outputIndex  = 3;
    optional  uint32  outputCount  = 4;
    optional  bool  isTrimmed  = 5;
    optional  SCCOREUUID  bundleId  = 6;
}

message SDMLens {
    optional  int64  id_p  = 1;
    optional  SCLensSbSnappableMessage  snappable  = 2;
    optional  string  rankingId  = 3;
}

message SDMLensCarousel {
    repeated  SDMLensCarousel_LensScancode  lensesArray  = 1;
    optional  string  id_p  = 2;
}

message SDMLensCarousel_LensScancode {
    optional  string  lensScancodeId  = 1;
    optional  int32  scancodeVersion  = 2;
}

message SDMLocation {
    optional  double  altitude  = 1;
    optional  double  horizontalAccuracy  = 2;
    optional  double  latitude  = 3;
    optional  double  longitude  = 4;
    optional  double  speed  = 5;
}

message SDMLongformVideo {
    optional  string  id_p  = 2;
    optional  string  rspVideoId  = 16;
    optional  int64  rspVideoFirstFrameAssetId  = 17;
    optional  string  manifestURL  = 18;
    optional  string  previewURL  = 19;
    optional  string  thumbnailURL  = 20;
    optional  string  posterURL  = 21;
    optional  bool  hasCaptions  = 22;
    optional  MediaReference  videoMedia  = 23;
    optional  MediaReference  placeholderImage  = 24;
    optional  SDMMediaId  videoMediaId  = 25;
    optional  SDMMediaId  placeholderImageId  = 26;
}

message SDMMediaEffects {
    optional  SDMLayerComposition  layerComposition  = 1;
    optional  SDMRenderEffectScenes  renderEffectScenes  = 2;
    optional  uint64  mediaEffectCapabilties  = 3;
}

message SDMMediaId {
    optional  int64  mediaListId  = 1;
}

message SDMMediaMetadata {
    optional  int32  type  = 2;
    optional  int32  orientation  = 3;
    optional  SDMMediaMetadata_MediaEncryptionInfo  encryptionInfoV1  = 4;
    optional  SDMMediaMetadata_MediaDimensions  dimensions  = 5;
    optional  SDMMediaMetadata_LegacyMediaSource  legacyMediaSource  = 6;
    optional  bytes  contentDescriptor  = 7;
    optional  string  mediaURL  = 9;
    optional  bool  hasSound  = 12;
    optional  bool  zipped  = 13;
    optional  bool  frontFacing  = 14;
    optional  uint32  mediaDurationMs  = 15;
    optional  MediaReference  mediaReference  = 17;
    optional  SDMMediaId  mediaId  = 18;
    optional  SDMMediaMetadata_MediaEncryptionInfo  encryptionInfoV2  = 19;
    optional  int32  assetType  = 20;
